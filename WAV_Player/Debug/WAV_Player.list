
WAV_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800d884  0800d884  0001d884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9f4  0800d9f4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9f4  0800d9f4  0001d9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9fc  0800d9fc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9fc  0800d9fc  0001d9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da00  0800da00  0001da00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800da04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f08  20000090  0800da94  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20001f98  0800da94  00021f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027431  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e6f  00000000  00000000  000474f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0004c360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  0004d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026912  00000000  00000000  0004e9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000180f2  00000000  00000000  00075302  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb262  00000000  00000000  0008d3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005348  00000000  00000000  001586d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d86c 	.word	0x0800d86c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800d86c 	.word	0x0800d86c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004de:	f107 020c 	add.w	r2, r7, #12
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2302      	movs	r3, #2
 80004e8:	2194      	movs	r1, #148	; 0x94
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <write_register+0x30>)
 80004ec:	f003 fe1c 	bl	8004128 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000ac 	.word	0x200000ac

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050c:	f107 020c 	add.w	r2, r7, #12
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <read_register+0x3c>)
 800051a:	f003 fe05 	bl	8004128 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <read_register+0x3c>)
 800052a:	f003 fefb 	bl	8004324 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac

0800053c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 800053c:	b084      	sub	sp, #16
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	f107 0c10 	add.w	ip, r7, #16
 8000548:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054c:	4b7b      	ldr	r3, [pc, #492]	; (800073c <CS43_Init+0x200>)
 800054e:	2200      	movs	r2, #0
 8000550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000554:	4b79      	ldr	r3, [pc, #484]	; (800073c <CS43_Init+0x200>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	69da      	ldr	r2, [r3, #28]
 800055a:	4b78      	ldr	r3, [pc, #480]	; (800073c <CS43_Init+0x200>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000562:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2110      	movs	r1, #16
 8000568:	4875      	ldr	r0, [pc, #468]	; (8000740 <CS43_Init+0x204>)
 800056a:	f001 ff9b 	bl	80024a4 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800056e:	4b75      	ldr	r3, [pc, #468]	; (8000744 <CS43_Init+0x208>)
 8000570:	4618      	mov	r0, r3
 8000572:	f107 0110 	add.w	r1, r7, #16
 8000576:	2354      	movs	r3, #84	; 0x54
 8000578:	461a      	mov	r2, r3
 800057a:	f00d f8a9 	bl	800d6d0 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800057e:	2301      	movs	r3, #1
 8000580:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	2002      	movs	r0, #2
 8000588:	f7ff ff9e 	bl	80004c8 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	b2db      	uxtb	r3, r3
 8000598:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800059a:	797b      	ldrb	r3, [r7, #5]
 800059c:	f043 030c 	orr.w	r3, r3, #12
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	f043 0303 	orr.w	r3, r3, #3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	3301      	adds	r3, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	2004      	movs	r0, #4
 80005b6:	f7ff ff87 	bl	80004c8 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	3301      	adds	r3, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	2005      	movs	r0, #5
 80005c6:	f7ff ff7f 	bl	80004c8 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	2006      	movs	r0, #6
 80005d0:	f7ff ff94 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d4:	797b      	ldrb	r3, [r7, #5]
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005f2:	797b      	ldrb	r3, [r7, #5]
 80005f4:	f023 0310 	bic.w	r3, r3, #16
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	f023 0304 	bic.w	r3, r3, #4
 8000602:	b2db      	uxtb	r3, r3
 8000604:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	f043 0303 	orr.w	r3, r3, #3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	3301      	adds	r3, #1
 800061e:	4619      	mov	r1, r3
 8000620:	2006      	movs	r0, #6
 8000622:	f7ff ff51 	bl	80004c8 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	3301      	adds	r3, #1
 800062a:	4619      	mov	r1, r3
 800062c:	2008      	movs	r0, #8
 800062e:	f7ff ff65 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	b2db      	uxtb	r3, r3
 800063a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	3301      	adds	r3, #1
 800064a:	4619      	mov	r1, r3
 800064c:	2008      	movs	r0, #8
 800064e:	f7ff ff3b 	bl	80004c8 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	3301      	adds	r3, #1
 8000656:	4619      	mov	r1, r3
 8000658:	2009      	movs	r0, #9
 800065a:	f7ff ff4f 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800065e:	797b      	ldrb	r3, [r7, #5]
 8000660:	f023 030f 	bic.w	r3, r3, #15
 8000664:	b2db      	uxtb	r3, r3
 8000666:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	3301      	adds	r3, #1
 8000676:	4619      	mov	r1, r3
 8000678:	2009      	movs	r0, #9
 800067a:	f7ff ff25 	bl	80004c8 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	3301      	adds	r3, #1
 8000682:	4619      	mov	r1, r3
 8000684:	200e      	movs	r0, #14
 8000686:	f7ff ff39 	bl	80004fc <read_register>
	if(outputMode == MODE_ANALOG)
 800068a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800068e:	2b01      	cmp	r3, #1
 8000690:	d119      	bne.n	80006c6 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000692:	797b      	ldrb	r3, [r7, #5]
 8000694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000698:	b2db      	uxtb	r3, r3
 800069a:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f023 0320 	bic.w	r3, r3, #32
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f023 0310 	bic.w	r3, r3, #16
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0308 	bic.w	r3, r3, #8
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
 80006c4:	e005      	b.n	80006d2 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006c6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006ce:	2302      	movs	r3, #2
 80006d0:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	3301      	adds	r3, #1
 80006d6:	4619      	mov	r1, r3
 80006d8:	200e      	movs	r0, #14
 80006da:	f7ff fef5 	bl	80004c8 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	3301      	adds	r3, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	200f      	movs	r0, #15
 80006e6:	f7ff ff09 	bl	80004fc <read_register>
	iData[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	200f      	movs	r0, #15
 80006f6:	f7ff fee7 	bl	80004c8 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	3301      	adds	r3, #1
 8000702:	4619      	mov	r1, r3
 8000704:	2014      	movs	r0, #20
 8000706:	f7ff fedf 	bl	80004c8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	3301      	adds	r3, #1
 800070e:	4619      	mov	r1, r3
 8000710:	2015      	movs	r0, #21
 8000712:	f7ff fed9 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	3301      	adds	r3, #1
 800071a:	4619      	mov	r1, r3
 800071c:	201a      	movs	r0, #26
 800071e:	f7ff fed3 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	3301      	adds	r3, #1
 8000726:	4619      	mov	r1, r3
 8000728:	201b      	movs	r0, #27
 800072a:	f7ff fecd 	bl	80004c8 <write_register>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000738:	b004      	add	sp, #16
 800073a:	4770      	bx	lr
 800073c:	20001444 	.word	0x20001444
 8000740:	40020c00 	.word	0x40020c00
 8000744:	200000ac 	.word	0x200000ac

08000748 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d82b      	bhi.n	80007b0 <CS43_Enable_RightLeft+0x68>
 8000758:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <CS43_Enable_RightLeft+0x18>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000771 	.word	0x08000771
 8000764:	08000781 	.word	0x08000781
 8000768:	08000791 	.word	0x08000791
 800076c:	080007a1 	.word	0x080007a1
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000770:	23c0      	movs	r3, #192	; 0xc0
 8000772:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000774:	7b7b      	ldrb	r3, [r7, #13]
 8000776:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800077a:	b2db      	uxtb	r3, r3
 800077c:	737b      	strb	r3, [r7, #13]
			break;
 800077e:	e018      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078a:	b2db      	uxtb	r3, r3
 800078c:	737b      	strb	r3, [r7, #13]
			break;
 800078e:	e010      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	23c0      	movs	r3, #192	; 0xc0
 8000792:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	b2db      	uxtb	r3, r3
 800079c:	737b      	strb	r3, [r7, #13]
			break;
 800079e:	e008      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	737b      	strb	r3, [r7, #13]
			break;
 80007ae:	e000      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007b0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	f043 030c 	orr.w	r3, r3, #12
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007bc:	7b7b      	ldrb	r3, [r7, #13]
 80007be:	f043 0303 	orr.w	r3, r3, #3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	3301      	adds	r3, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	2004      	movs	r0, #4
 80007d0:	f7ff fe7a 	bl	80004c8 <write_register>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3319      	adds	r3, #25
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	3301      	adds	r3, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	2020      	movs	r0, #32
 80007f8:	f7ff fe66 	bl	80004c8 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	3301      	adds	r3, #1
 8000802:	4619      	mov	r1, r3
 8000804:	2021      	movs	r0, #33	; 0x21
 8000806:	f7ff fe5f 	bl	80004c8 <write_register>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d019      	beq.n	8000856 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8000822:	23ff      	movs	r3, #255	; 0xff
 8000824:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	3301      	adds	r3, #1
 800082c:	4619      	mov	r1, r3
 800082e:	2004      	movs	r0, #4
 8000830:	f7ff fe4a 	bl	80004c8 <write_register>
    iData[1] = 0x01;
 8000834:	2301      	movs	r3, #1
 8000836:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	3301      	adds	r3, #1
 800083e:	4619      	mov	r1, r3
 8000840:	2022      	movs	r0, #34	; 0x22
 8000842:	f7ff fe41 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	3301      	adds	r3, #1
 800084c:	4619      	mov	r1, r3
 800084e:	2023      	movs	r0, #35	; 0x23
 8000850:	f7ff fe3a 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000854:	e018      	b.n	8000888 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	3301      	adds	r3, #1
 8000860:	4619      	mov	r1, r3
 8000862:	2022      	movs	r0, #34	; 0x22
 8000864:	f7ff fe30 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	3301      	adds	r3, #1
 800086e:	4619      	mov	r1, r3
 8000870:	2023      	movs	r0, #35	; 0x23
 8000872:	f7ff fe29 	bl	80004c8 <write_register>
    iData[1] = 0xAF;
 8000876:	23af      	movs	r3, #175	; 0xaf
 8000878:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	3301      	adds	r3, #1
 8000880:	4619      	mov	r1, r3
 8000882:	2004      	movs	r0, #4
 8000884:	f7ff fe20 	bl	80004c8 <write_register>
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff ffbb 	bl	8000812 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800089c:	2399      	movs	r3, #153	; 0x99
 800089e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	3301      	adds	r3, #1
 80008a4:	4619      	mov	r1, r3
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe0e 	bl	80004c8 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	3301      	adds	r3, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	2047      	movs	r0, #71	; 0x47
 80008b8:	f7ff fe06 	bl	80004c8 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	3301      	adds	r3, #1
 80008c0:	4619      	mov	r1, r3
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f7ff fe1a 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	3301      	adds	r3, #1
 80008d6:	4619      	mov	r1, r3
 80008d8:	2032      	movs	r0, #50	; 0x32
 80008da:	f7ff fdf5 	bl	80004c8 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	3301      	adds	r3, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	797b      	ldrb	r3, [r7, #5]
 80008ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	3301      	adds	r3, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde4 	bl	80004c8 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	2300      	movs	r3, #0
 8000902:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	3301      	adds	r3, #1
 8000908:	4619      	mov	r1, r3
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fddc 	bl	80004c8 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000910:	239e      	movs	r3, #158	; 0x9e
 8000912:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	3301      	adds	r3, #1
 8000918:	4619      	mov	r1, r3
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fdd4 	bl	80004c8 <write_register>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <CS43_Stop>:

void CS43_Stop(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff ff6f 	bl	8000812 <CS43_SetMute>
  iData[1] = 0x04;
 8000934:	2304      	movs	r3, #4
 8000936:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	3301      	adds	r3, #1
 800093c:	4619      	mov	r1, r3
 800093e:	200e      	movs	r0, #14
 8000940:	f7ff fdc2 	bl	80004c8 <write_register>
	iData[1] = 0x9F;
 8000944:	239f      	movs	r3, #159	; 0x9f
 8000946:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	3301      	adds	r3, #1
 800094c:	4619      	mov	r1, r3
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff fdba 	bl	80004c8 <write_register>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
 8000968:	23ff      	movs	r3, #255	; 0xff
 800096a:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 800096c:	2300      	movs	r3, #0
 800096e:	77fb      	strb	r3, [r7, #31]
 8000970:	e00b      	b.n	800098a <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000972:	7ffb      	ldrb	r3, [r7, #31]
 8000974:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <audioI2S_pllClockConfig+0x8c>)
 8000976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d101      	bne.n	8000984 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	3301      	adds	r3, #1
 8000988:	77fb      	strb	r3, [r7, #31]
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d9f0      	bls.n	8000972 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4618      	mov	r0, r3
 8000996:	f005 ffe5 	bl	8006964 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800099a:	7fbb      	ldrb	r3, [r7, #30]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d111      	bne.n	80009c8 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009a8:	7fbb      	ldrb	r3, [r7, #30]
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <audioI2S_pllClockConfig+0x90>)
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009b2:	7fbb      	ldrb	r3, [r7, #30]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <audioI2S_pllClockConfig+0x94>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f005 feed 	bl	80067a0 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009c6:	e00b      	b.n	80009e0 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009cc:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009d0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009d2:	2303      	movs	r3, #3
 80009d4:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 fee0 	bl	80067a0 <HAL_RCCEx_PeriphCLKConfig>
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	0800d8e0 	.word	0x0800d8e0
 80009ec:	0800d900 	.word	0x0800d900
 80009f0:	0800d920 	.word	0x0800d920

080009f4 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <I2S3_freqUpdate+0x80>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <I2S3_freqUpdate+0x84>)
 8000a02:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a16:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 f9b7 	bl	8004dcc <HAL_I2S_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e000      	b.n	8000a6a <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a68:	2301      	movs	r3, #1
  }
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000100 	.word	0x20000100
 8000a78:	40003c00 	.word	0x40003c00

08000a7c <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <audioI2S_setHandle+0x1c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000100 	.word	0x20000100

08000a9c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff59 	bl	800095c <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffa2 	bl	80009f4 <I2S3_freqUpdate>
  return true;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000ac6:	f7ff fee3 	bl	8000890 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <audioI2S_play+0x38>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ad4:	d203      	bcs.n	8000ade <audioI2S_play+0x22>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	e001      	b.n	8000ae2 <audioI2S_play+0x26>
 8000ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	f004 fab1 	bl	800504c <HAL_I2S_Transmit_DMA>
  return true;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000100 	.word	0x20000100

08000af8 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000afc:	f7ff ff14 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <audioI2S_pause+0x18>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fb49 	bl	800519c <HAL_I2S_DMAPause>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000100 	.word	0x20000100

08000b14 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b18:	f7ff feba 	bl	8000890 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <audioI2S_resume+0x18>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 fb9d 	bl	8005260 <HAL_I2S_DMAResume>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000100 	.word	0x20000100

08000b30 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b34:	f7ff fef8 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <audioI2S_stop+0x18>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 fc23 	bl	8005388 <HAL_I2S_DMAStop>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000100 	.word	0x20000100

08000b4c <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_I2S_TxCpltCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b5e:	f000 f929 	bl	8000db4 <audioI2S_fullTransfer_Callback>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40003c00 	.word	0x40003c00

08000b70 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b82:	f000 f90b 	bl	8000d9c <audioI2S_halfTransfer_Callback>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40003c00 	.word	0x40003c00

08000b94 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <wavPlayer_reset+0x1c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <wavPlayer_reset+0x20>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20001338 	.word	0x20001338
 8000bb4:	20001340 	.word	0x20001340

08000bb8 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <wavPlayer_fileSelect+0x48>)
 8000bca:	f00b fc27 	bl	800c41c <f_open>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e00e      	b.n	8000bf6 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	f107 010c 	add.w	r1, r7, #12
 8000be0:	222c      	movs	r2, #44	; 0x2c
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <wavPlayer_fileSelect+0x48>)
 8000be4:	f00b fdd8 	bl	800c798 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <wavPlayer_fileSelect+0x4c>)
 8000bec:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <wavPlayer_fileSelect+0x50>)
 8000bf2:	6013      	str	r3, [r2, #0]
  return true;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3738      	adds	r7, #56	; 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000104 	.word	0x20000104
 8000c04:	20000334 	.word	0x20000334
 8000c08:	2000133c 	.word	0x2000133c

08000c0c <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  isFinished = false;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <wavPlayer_play+0x48>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <wavPlayer_play+0x4c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff3e 	bl	8000a9c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000c20:	2100      	movs	r1, #0
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <wavPlayer_play+0x50>)
 8000c24:	f00b ff9f 	bl	800cb66 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <wavPlayer_play+0x54>)
 8000c2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <wavPlayer_play+0x58>)
 8000c30:	480a      	ldr	r0, [pc, #40]	; (8000c5c <wavPlayer_play+0x50>)
 8000c32:	f00b fdb1 	bl	800c798 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <wavPlayer_play+0x5c>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <wavPlayer_play+0x54>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <wavPlayer_play+0x60>)
 8000c42:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <wavPlayer_play+0x58>)
 8000c4a:	f7ff ff37 	bl	8000abc <audioI2S_play>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20001344 	.word	0x20001344
 8000c58:	2000133c 	.word	0x2000133c
 8000c5c:	20000104 	.word	0x20000104
 8000c60:	20001340 	.word	0x20001340
 8000c64:	20000338 	.word	0x20000338
 8000c68:	20000334 	.word	0x20000334
 8000c6c:	20001338 	.word	0x20001338

08000c70 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <wavPlayer_process+0xc8>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d859      	bhi.n	8000d32 <wavPlayer_process+0xc2>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <wavPlayer_process+0x14>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000d31 	.word	0x08000d31
 8000c88:	08000c95 	.word	0x08000c95
 8000c8c:	08000cd7 	.word	0x08000cd7
 8000c90:	08000d19 	.word	0x08000d19
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <wavPlayer_process+0xcc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <wavPlayer_process+0xc8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <wavPlayer_process+0xcc>)
 8000ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca6:	4926      	ldr	r1, [pc, #152]	; (8000d40 <wavPlayer_process+0xd0>)
 8000ca8:	4826      	ldr	r0, [pc, #152]	; (8000d44 <wavPlayer_process+0xd4>)
 8000caa:	f00b fd75 	bl	800c798 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cb6:	d907      	bls.n	8000cc8 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <wavPlayer_process+0xcc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cc4:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000cc6:	e034      	b.n	8000d32 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <wavPlayer_process+0xc8>)
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	701a      	strb	r2, [r3, #0]
    break;
 8000cd4:	e02d      	b.n	8000d32 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <wavPlayer_process+0xcc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <wavPlayer_process+0xc8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <wavPlayer_process+0xcc>)
 8000ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce8:	4918      	ldr	r1, [pc, #96]	; (8000d4c <wavPlayer_process+0xdc>)
 8000cea:	4816      	ldr	r0, [pc, #88]	; (8000d44 <wavPlayer_process+0xd4>)
 8000cec:	f00b fd54 	bl	800c798 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cf8:	d907      	bls.n	8000d0a <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <wavPlayer_process+0xd8>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <wavPlayer_process+0xcc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <wavPlayer_process+0xd8>)
 8000d06:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000d08:	e013      	b.n	8000d32 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <wavPlayer_process+0xd8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <wavPlayer_process+0xc8>)
 8000d12:	2203      	movs	r2, #3
 8000d14:	701a      	strb	r2, [r3, #0]
    break;
 8000d16:	e00c      	b.n	8000d32 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000d18:	480a      	ldr	r0, [pc, #40]	; (8000d44 <wavPlayer_process+0xd4>)
 8000d1a:	f00b fefa 	bl	800cb12 <f_close>
    wavPlayer_reset();
 8000d1e:	f7ff ff39 	bl	8000b94 <wavPlayer_reset>
    isFinished = true;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <wavPlayer_process+0xe0>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <wavPlayer_process+0xc8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
    break;
 8000d2e:	e000      	b.n	8000d32 <wavPlayer_process+0xc2>
    break;
 8000d30:	bf00      	nop
  }
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20001345 	.word	0x20001345
 8000d3c:	20001340 	.word	0x20001340
 8000d40:	20000338 	.word	0x20000338
 8000d44:	20000104 	.word	0x20000104
 8000d48:	20001338 	.word	0x20001338
 8000d4c:	20000b38 	.word	0x20000b38
 8000d50:	20001344 	.word	0x20001344

08000d54 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000d58:	f7ff feea 	bl	8000b30 <audioI2S_stop>
  isFinished = true;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <wavPlayer_stop+0x14>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20001344 	.word	0x20001344

08000d6c <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8000d70:	f7ff fec2 	bl	8000af8 <audioI2S_pause>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8000d7c:	f7ff feca 	bl	8000b14 <audioI2S_resume>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return isFinished;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <wavPlayer_isFinished+0x14>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20001344 	.word	0x20001344

08000d9c <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <audioI2S_halfTransfer_Callback+0x14>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	20001345 	.word	0x20001345

08000db4 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <audioI2S_fullTransfer_Callback+0x14>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20001345 	.word	0x20001345

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b095      	sub	sp, #84	; 0x54
 8000dd0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f000 fc31 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f8c9 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dda:	f000 f9c5 	bl	8001168 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dde:	f000 f9a3 	bl	8001128 <MX_DMA_Init>
  MX_I2C1_Init();
 8000de2:	f000 f945 	bl	8001070 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000de6:	f000 f971 	bl	80010cc <MX_I2S3_Init>
  MX_FATFS_Init();
 8000dea:	f006 fd91 	bl	8007910 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000dee:	f00c f91f 	bl	800d030 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  CS43_Init(hi2c1, MODE_I2S);
 8000df2:	4c55      	ldr	r4, [pc, #340]	; (8000f48 <main+0x17c>)
 8000df4:	2300      	movs	r3, #0
 8000df6:	9311      	str	r3, [sp, #68]	; 0x44
 8000df8:	4668      	mov	r0, sp
 8000dfa:	f104 0310 	add.w	r3, r4, #16
 8000dfe:	2244      	movs	r2, #68	; 0x44
 8000e00:	4619      	mov	r1, r3
 8000e02:	f00c fc65 	bl	800d6d0 <memcpy>
 8000e06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e0a:	f7ff fb97 	bl	800053c <CS43_Init>
  CS43_SetVolume(250);//0-255
 8000e0e:	20fa      	movs	r0, #250	; 0xfa
 8000e10:	f7ff fce4 	bl	80007dc <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f7ff fc97 	bl	8000748 <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 8000e1a:	484c      	ldr	r0, [pc, #304]	; (8000f4c <main+0x180>)
 8000e1c:	f7ff fe2e 	bl	8000a7c <audioI2S_setHandle>

  bool isSdCardMounted=0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle=0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e28:	f00c f928 	bl	800d07c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000e2c:	4b48      	ldr	r3, [pc, #288]	; (8000f50 <main+0x184>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <main+0x76>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3a:	4846      	ldr	r0, [pc, #280]	; (8000f54 <main+0x188>)
 8000e3c:	f001 fb32 	bl	80024a4 <HAL_GPIO_WritePin>
 8000e40:	e010      	b.n	8000e64 <main+0x98>
    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000e42:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <main+0x184>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d10c      	bne.n	8000e64 <main+0x98>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e50:	4840      	ldr	r0, [pc, #256]	; (8000f54 <main+0x188>)
 8000e52:	f001 fb27 	bl	80024a4 <HAL_GPIO_WritePin>
      f_mount(NULL, (TCHAR const*)"", 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	493f      	ldr	r1, [pc, #252]	; (8000f58 <main+0x18c>)
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f00b fa98 	bl	800c390 <f_mount>
      isSdCardMounted = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	71fb      	strb	r3, [r7, #7]
    }

    if(Appli_state == APPLICATION_READY)
 8000e64:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <main+0x184>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d1dd      	bne.n	8000e28 <main+0x5c>
    {
      if(!isSdCardMounted)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f083 0301 	eor.w	r3, r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <main+0xba>
      {
        f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4938      	ldr	r1, [pc, #224]	; (8000f5c <main+0x190>)
 8000e7c:	4838      	ldr	r0, [pc, #224]	; (8000f60 <main+0x194>)
 8000e7e:	f00b fa87 	bl	800c390 <f_mount>
        isSdCardMounted = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
      }
      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000e86:	2101      	movs	r1, #1
 8000e88:	4836      	ldr	r0, [pc, #216]	; (8000f64 <main+0x198>)
 8000e8a:	f001 faf3 	bl	8002474 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0c9      	beq.n	8000e28 <main+0x5c>
      {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	482e      	ldr	r0, [pc, #184]	; (8000f54 <main+0x188>)
 8000e9c:	f001 fb02 	bl	80024a4 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000ea0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea4:	f000 fc3a 	bl	800171c <HAL_Delay>
        wavPlayer_fileSelect(WAV_FILE1);
 8000ea8:	482f      	ldr	r0, [pc, #188]	; (8000f68 <main+0x19c>)
 8000eaa:	f7ff fe85 	bl	8000bb8 <wavPlayer_fileSelect>
        wavPlayer_play();
 8000eae:	f7ff fead 	bl	8000c0c <wavPlayer_play>

        while(!wavPlayer_isFinished())
 8000eb2:	e035      	b.n	8000f20 <main+0x154>
        {
          wavPlayer_process();
 8000eb4:	f7ff fedc 	bl	8000c70 <wavPlayer_process>
          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000eb8:	2101      	movs	r1, #1
 8000eba:	482a      	ldr	r0, [pc, #168]	; (8000f64 <main+0x198>)
 8000ebc:	f001 fada 	bl	8002474 <HAL_GPIO_ReadPin>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d02c      	beq.n	8000f20 <main+0x154>
          {
            pauseResumeToggle^=1;
 8000ec6:	79bb      	ldrb	r3, [r7, #6]
 8000ec8:	f083 0301 	eor.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf14      	ite	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	2300      	moveq	r3, #0
 8000ed6:	71bb      	strb	r3, [r7, #6]
            if(pauseResumeToggle)
 8000ed8:	79bb      	ldrb	r3, [r7, #6]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00b      	beq.n	8000ef6 <main+0x12a>
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee4:	481b      	ldr	r0, [pc, #108]	; (8000f54 <main+0x188>)
 8000ee6:	f001 fadd 	bl	80024a4 <HAL_GPIO_WritePin>
              wavPlayer_pause();
 8000eea:	f7ff ff3f 	bl	8000d6c <wavPlayer_pause>
              HAL_Delay(200);
 8000eee:	20c8      	movs	r0, #200	; 0xc8
 8000ef0:	f000 fc14 	bl	800171c <HAL_Delay>
 8000ef4:	e014      	b.n	8000f20 <main+0x154>
            }
            else
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efc:	4815      	ldr	r0, [pc, #84]	; (8000f54 <main+0x188>)
 8000efe:	f001 fad1 	bl	80024a4 <HAL_GPIO_WritePin>
              HAL_Delay(1000);
 8000f02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f06:	f000 fc09 	bl	800171c <HAL_Delay>
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	4815      	ldr	r0, [pc, #84]	; (8000f64 <main+0x198>)
 8000f0e:	f001 fab1 	bl	8002474 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <main+0x150>
              {
                wavPlayer_stop();
 8000f18:	f7ff ff1c 	bl	8000d54 <wavPlayer_stop>
              }
              {
                wavPlayer_resume();
 8000f1c:	f7ff ff2c 	bl	8000d78 <wavPlayer_resume>
        while(!wavPlayer_isFinished())
 8000f20:	f7ff ff30 	bl	8000d84 <wavPlayer_isFinished>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f083 0301 	eor.w	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1c1      	bne.n	8000eb4 <main+0xe8>
              }
            }
          }
        }
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <main+0x188>)
 8000f38:	f001 fab4 	bl	80024a4 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8000f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f40:	f000 fbec 	bl	800171c <HAL_Delay>
    MX_USB_HOST_Process();
 8000f44:	e770      	b.n	8000e28 <main+0x5c>
 8000f46:	bf00      	nop
 8000f48:	20001390 	.word	0x20001390
 8000f4c:	20001444 	.word	0x20001444
 8000f50:	20001384 	.word	0x20001384
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	0800d884 	.word	0x0800d884
 8000f5c:	20001490 	.word	0x20001490
 8000f60:	200016c4 	.word	0x200016c4
 8000f64:	40020000 	.word	0x40020000
 8000f68:	0800d888 	.word	0x0800d888

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b098      	sub	sp, #96	; 0x60
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f76:	2230      	movs	r2, #48	; 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f00c fbb3 	bl	800d6e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <SystemClock_Config+0xfc>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a30      	ldr	r2, [pc, #192]	; (8001068 <SystemClock_Config+0xfc>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <SystemClock_Config+0xfc>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <SystemClock_Config+0x100>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a2a      	ldr	r2, [pc, #168]	; (800106c <SystemClock_Config+0x100>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <SystemClock_Config+0x100>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fea:	2308      	movs	r3, #8
 8000fec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fee:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ff2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001000:	4618      	mov	r0, r3
 8001002:	f004 ff7f 	bl	8005f04 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800100c:	f000 f93e 	bl	800128c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2302      	movs	r3, #2
 8001016:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	2105      	movs	r1, #5
 800102e:	4618      	mov	r0, r3
 8001030:	f005 f9d8 	bl	80063e4 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800103a:	f000 f927 	bl	800128c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800103e:	2301      	movs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001042:	f240 130f 	movw	r3, #271	; 0x10f
 8001046:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001048:	2306      	movs	r3, #6
 800104a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4618      	mov	r0, r3
 8001052:	f005 fba5 	bl	80067a0 <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800105c:	f000 f916 	bl	800128c <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3760      	adds	r7, #96	; 0x60
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <MX_I2C1_Init+0x54>)
 8001078:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_I2C1_Init+0x50>)
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_I2C1_Init+0x58>)
 800107e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_I2C1_Init+0x50>)
 800108e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001092:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010ae:	f002 ff03 	bl	8003eb8 <HAL_I2C_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b8:	f000 f8e8 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20001390 	.word	0x20001390
 80010c4:	40005400 	.word	0x40005400
 80010c8:	000186a0 	.word	0x000186a0

080010cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_I2S3_Init+0x54>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <MX_I2S3_Init+0x58>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_I2S3_Init+0x54>)
 80010d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <MX_I2S3_Init+0x54>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_I2S3_Init+0x54>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <MX_I2S3_Init+0x54>)
 80010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_I2S3_Init+0x54>)
 80010f4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80010f8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_I2S3_Init+0x54>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_I2S3_Init+0x54>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_I2S3_Init+0x54>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_I2S3_Init+0x54>)
 800110e:	f003 fe5d 	bl	8004dcc <HAL_I2S_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001118:	f000 f8b8 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20001444 	.word	0x20001444
 8001124:	40003c00 	.word	0x40003c00

08001128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_DMA_Init+0x3c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <MX_DMA_Init+0x3c>)
 8001138:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_DMA_Init+0x3c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2010      	movs	r0, #16
 8001150:	f000 fbe1 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001154:	2010      	movs	r0, #16
 8001156:	f000 fbfa 	bl	800194e <HAL_NVIC_EnableIRQ>

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b3e      	ldr	r3, [pc, #248]	; (800127c <MX_GPIO_Init+0x114>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a3d      	ldr	r2, [pc, #244]	; (800127c <MX_GPIO_Init+0x114>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <MX_GPIO_Init+0x114>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <MX_GPIO_Init+0x114>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a36      	ldr	r2, [pc, #216]	; (800127c <MX_GPIO_Init+0x114>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <MX_GPIO_Init+0x114>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b30      	ldr	r3, [pc, #192]	; (800127c <MX_GPIO_Init+0x114>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <MX_GPIO_Init+0x114>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_GPIO_Init+0x114>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <MX_GPIO_Init+0x114>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a28      	ldr	r2, [pc, #160]	; (800127c <MX_GPIO_Init+0x114>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_GPIO_Init+0x114>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_GPIO_Init+0x114>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a21      	ldr	r2, [pc, #132]	; (800127c <MX_GPIO_Init+0x114>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_GPIO_Init+0x114>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2101      	movs	r1, #1
 800120e:	481c      	ldr	r0, [pc, #112]	; (8001280 <MX_GPIO_Init+0x118>)
 8001210:	f001 f948 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001214:	2200      	movs	r2, #0
 8001216:	f24f 0110 	movw	r1, #61456	; 0xf010
 800121a:	481a      	ldr	r0, [pc, #104]	; (8001284 <MX_GPIO_Init+0x11c>)
 800121c:	f001 f942 	bl	80024a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <MX_GPIO_Init+0x118>)
 8001238:	f000 ff82 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	480e      	ldr	r0, [pc, #56]	; (8001288 <MX_GPIO_Init+0x120>)
 8001250:	f000 ff76 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001254:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001258:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_GPIO_Init+0x11c>)
 800126e:	f000 ff67 	bl	8002140 <HAL_GPIO_Init>

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40020000 	.word	0x40020000

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_MspInit+0x4c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012da:	2007      	movs	r0, #7
 80012dc:	f000 fb10 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_I2C_MspInit+0x84>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12c      	bne.n	8001368 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800132a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001334:	2301      	movs	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133c:	2304      	movs	r3, #4
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <HAL_I2C_MspInit+0x8c>)
 8001348:	f000 fefa 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_I2C_MspInit+0x88>)
 8001356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_I2C_MspInit+0x88>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40005400 	.word	0x40005400
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400

0800137c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a45      	ldr	r2, [pc, #276]	; (80014b0 <HAL_I2S_MspInit+0x134>)
 800139a:	4293      	cmp	r3, r2
 800139c:	f040 8084 	bne.w	80014a8 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_I2S_MspInit+0x138>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	4a42      	ldr	r2, [pc, #264]	; (80014b4 <HAL_I2S_MspInit+0x138>)
 80013aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ae:	6413      	str	r3, [r2, #64]	; 0x40
 80013b0:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <HAL_I2S_MspInit+0x138>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <HAL_I2S_MspInit+0x138>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <HAL_I2S_MspInit+0x138>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6313      	str	r3, [r2, #48]	; 0x30
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_I2S_MspInit+0x138>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <HAL_I2S_MspInit+0x138>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	4a34      	ldr	r2, [pc, #208]	; (80014b4 <HAL_I2S_MspInit+0x138>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6313      	str	r3, [r2, #48]	; 0x30
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <HAL_I2S_MspInit+0x138>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013f4:	2310      	movs	r3, #16
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001404:	2306      	movs	r3, #6
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	482a      	ldr	r0, [pc, #168]	; (80014b8 <HAL_I2S_MspInit+0x13c>)
 8001410:	f000 fe96 	bl	8002140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001414:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001426:	2306      	movs	r3, #6
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4822      	ldr	r0, [pc, #136]	; (80014bc <HAL_I2S_MspInit+0x140>)
 8001432:	f000 fe85 	bl	8002140 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 8001438:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_I2S_MspInit+0x148>)
 800143a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 8001444:	2240      	movs	r2, #64	; 0x40
 8001446:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 8001450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001454:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 8001458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 8001460:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001464:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 8001468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 8001476:	2204      	movs	r2, #4
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 800147c:	2203      	movs	r2, #3
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 800148e:	f000 fa79 	bl	8001984 <HAL_DMA_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8001498:	f7ff fef8 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38
 80014a2:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_I2S_MspInit+0x144>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40003c00 	.word	0x40003c00
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020800 	.word	0x40020800
 80014c0:	200013e4 	.word	0x200013e4
 80014c4:	40026088 	.word	0x40026088

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 f8de 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <DMA1_Stream5_IRQHandler+0x10>)
 800152a:	f000 fba1 	bl	8001c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200013e4 	.word	0x200013e4

08001538 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <OTG_FS_IRQHandler+0x10>)
 800153e:	f001 fa59 	bl	80029f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20001cd0 	.word	0x20001cd0

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f00c f86e 	bl	800d65c <__errno>
 8001580:	4602      	mov	r2, r0
 8001582:	230c      	movs	r3, #12
 8001584:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20020000 	.word	0x20020000
 80015ac:	00002000 	.word	0x00002000
 80015b0:	20001348 	.word	0x20001348
 80015b4:	20001f98 	.word	0x20001f98

080015b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <SystemInit+0x28>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <SystemInit+0x28>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SystemInit+0x28>)
 80015ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d2:	609a      	str	r2, [r3, #8]
#endif
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015ea:	e003      	b.n	80015f4 <LoopCopyDataInit>

080015ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015f2:	3104      	adds	r1, #4

080015f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015f4:	480b      	ldr	r0, [pc, #44]	; (8001624 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015fc:	d3f6      	bcc.n	80015ec <CopyDataInit>
  ldr  r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001600:	e002      	b.n	8001608 <LoopFillZerobss>

08001602 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001602:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001604:	f842 3b04 	str.w	r3, [r2], #4

08001608 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800160a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800160c:	d3f9      	bcc.n	8001602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800160e:	f7ff ffd3 	bl	80015b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f00c f829 	bl	800d668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff fbd9 	bl	8000dcc <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800161c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001620:	0800da04 	.word	0x0800da04
  ldr  r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001628:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800162c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001630:	20001f98 	.word	0x20001f98

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_Init+0x40>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_Init+0x40>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x40>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f94d 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fe16 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f965 	bl	800196a <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f92d 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008
 8001700:	2000148c 	.word	0x2000148c

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2000148c 	.word	0x2000148c

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_Delay+0x40>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000008 	.word	0x20000008

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	; (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff feb8 	bl	8001704 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e099      	b.n	8001ad4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c0:	e00f      	b.n	80019e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c2:	f7ff fe9f 	bl	8001704 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d908      	bls.n	80019e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2220      	movs	r2, #32
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e078      	b.n	8001ad4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1e8      	bne.n	80019c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4b38      	ldr	r3, [pc, #224]	; (8001adc <HAL_DMA_Init+0x158>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d107      	bne.n	8001a4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4313      	orrs	r3, r2
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f023 0307 	bic.w	r3, r3, #7
 8001a62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d117      	bne.n	8001aa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00e      	beq.n	8001aa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fadf 	bl	800204c <DMA_CheckFifoParam>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2240      	movs	r2, #64	; 0x40
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e016      	b.n	8001ad4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fa96 	bl	8001fe0 <DMA_CalcBaseAndBitshift>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	223f      	movs	r2, #63	; 0x3f
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	f010803f 	.word	0xf010803f

08001ae0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_DMA_Start_IT+0x26>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e040      	b.n	8001b88 <HAL_DMA_Start_IT+0xa8>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d12f      	bne.n	8001b7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fa28 	bl	8001f84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	223f      	movs	r2, #63	; 0x3f
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0216 	orr.w	r2, r2, #22
 8001b4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e005      	b.n	8001b86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b82:	2302      	movs	r3, #2
 8001b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b9e:	f7ff fdb1 	bl	8001704 <HAL_GetTick>
 8001ba2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d008      	beq.n	8001bc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e052      	b.n	8001c68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0216 	bic.w	r2, r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d103      	bne.n	8001bf2 <HAL_DMA_Abort+0x62>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0208 	bic.w	r2, r2, #8
 8001c00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c12:	e013      	b.n	8001c3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c14:	f7ff fd76 	bl	8001704 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d90c      	bls.n	8001c3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2203      	movs	r2, #3
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e015      	b.n	8001c68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1e4      	bne.n	8001c14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4e:	223f      	movs	r2, #63	; 0x3f
 8001c50:	409a      	lsls	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c7c:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <HAL_DMA_IRQHandler+0x258>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a92      	ldr	r2, [pc, #584]	; (8001ecc <HAL_DMA_IRQHandler+0x25c>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0a9b      	lsrs	r3, r3, #10
 8001c88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d01a      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0204 	bic.w	r2, r2, #4
 8001cc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	2208      	movs	r2, #8
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d012      	beq.n	8001d12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfe:	2201      	movs	r2, #1
 8001d00:	409a      	lsls	r2, r3
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f043 0202 	orr.w	r2, r3, #2
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2204      	movs	r2, #4
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d012      	beq.n	8001d48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00b      	beq.n	8001d48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	2204      	movs	r2, #4
 8001d36:	409a      	lsls	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f043 0204 	orr.w	r2, r3, #4
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d043      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d03c      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d018      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d108      	bne.n	8001da0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d024      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
 8001d9e:	e01f      	b.n	8001de0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
 8001db0:	e016      	b.n	8001de0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0208 	bic.w	r2, r2, #8
 8001dce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	2220      	movs	r2, #32
 8001de6:	409a      	lsls	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 808e 	beq.w	8001f0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 8086 	beq.w	8001f0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	2220      	movs	r2, #32
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d136      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0216 	bic.w	r2, r2, #22
 8001e28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <HAL_DMA_IRQHandler+0x1da>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0208 	bic.w	r2, r2, #8
 8001e58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	223f      	movs	r2, #63	; 0x3f
 8001e60:	409a      	lsls	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d07d      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
        }
        return;
 8001e86:	e078      	b.n	8001f7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d01c      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d108      	bne.n	8001eb6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d030      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
 8001eb4:	e02b      	b.n	8001f0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d027      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
 8001ec6:	e022      	b.n	8001f0e <HAL_DMA_IRQHandler+0x29e>
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10f      	bne.n	8001efe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0210 	bic.w	r2, r2, #16
 8001eec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d032      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d022      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2205      	movs	r2, #5
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d307      	bcc.n	8001f56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f2      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x2ca>
 8001f54:	e000      	b.n	8001f58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e000      	b.n	8001f7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f7a:	bf00      	nop
    }
  }
}
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop

08001f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b40      	cmp	r3, #64	; 0x40
 8001fb0:	d108      	bne.n	8001fc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fc2:	e007      	b.n	8001fd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	60da      	str	r2, [r3, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	3b10      	subs	r3, #16
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <DMA_CalcBaseAndBitshift+0x64>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <DMA_CalcBaseAndBitshift+0x68>)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d909      	bls.n	8002022 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002016:	f023 0303 	bic.w	r3, r3, #3
 800201a:	1d1a      	adds	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	659a      	str	r2, [r3, #88]	; 0x58
 8002020:	e007      	b.n	8002032 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	aaaaaaab 	.word	0xaaaaaaab
 8002048:	0800d958 	.word	0x0800d958

0800204c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d11f      	bne.n	80020a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d855      	bhi.n	8002118 <DMA_CheckFifoParam+0xcc>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <DMA_CheckFifoParam+0x28>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	08002085 	.word	0x08002085
 8002078:	08002097 	.word	0x08002097
 800207c:	08002085 	.word	0x08002085
 8002080:	08002119 	.word	0x08002119
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d045      	beq.n	800211c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002094:	e042      	b.n	800211c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800209e:	d13f      	bne.n	8002120 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a4:	e03c      	b.n	8002120 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ae:	d121      	bne.n	80020f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d836      	bhi.n	8002124 <DMA_CheckFifoParam+0xd8>
 80020b6:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <DMA_CheckFifoParam+0x70>)
 80020b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	080020d3 	.word	0x080020d3
 80020c4:	080020cd 	.word	0x080020cd
 80020c8:	080020e5 	.word	0x080020e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      break;
 80020d0:	e02f      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d024      	beq.n	8002128 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e2:	e021      	b.n	8002128 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ec:	d11e      	bne.n	800212c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020f2:	e01b      	b.n	800212c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d902      	bls.n	8002100 <DMA_CheckFifoParam+0xb4>
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d003      	beq.n	8002106 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020fe:	e018      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      break;
 8002104:	e015      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00e      	beq.n	8002130 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
      break;
 8002116:	e00b      	b.n	8002130 <DMA_CheckFifoParam+0xe4>
      break;
 8002118:	bf00      	nop
 800211a:	e00a      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;
 800211c:	bf00      	nop
 800211e:	e008      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;
 8002120:	bf00      	nop
 8002122:	e006      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;
 8002124:	bf00      	nop
 8002126:	e004      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;
 8002128:	bf00      	nop
 800212a:	e002      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;   
 800212c:	bf00      	nop
 800212e:	e000      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;
 8002130:	bf00      	nop
    }
  } 
  
  return status; 
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e16b      	b.n	8002434 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 815a 	bne.w	800242e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d00b      	beq.n	800219a <HAL_GPIO_Init+0x5a>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800218e:	2b11      	cmp	r3, #17
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b12      	cmp	r3, #18
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0xfc>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b12      	cmp	r3, #18
 800223a:	d123      	bne.n	8002284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	08da      	lsrs	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	69b9      	ldr	r1, [r7, #24]
 8002280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80b4 	beq.w	800242e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <HAL_GPIO_Init+0x308>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4a5e      	ldr	r2, [pc, #376]	; (8002448 <HAL_GPIO_Init+0x308>)
 80022d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d4:	6453      	str	r3, [r2, #68]	; 0x44
 80022d6:	4b5c      	ldr	r3, [pc, #368]	; (8002448 <HAL_GPIO_Init+0x308>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e2:	4a5a      	ldr	r2, [pc, #360]	; (800244c <HAL_GPIO_Init+0x30c>)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a51      	ldr	r2, [pc, #324]	; (8002450 <HAL_GPIO_Init+0x310>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d02b      	beq.n	8002366 <HAL_GPIO_Init+0x226>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a50      	ldr	r2, [pc, #320]	; (8002454 <HAL_GPIO_Init+0x314>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d025      	beq.n	8002362 <HAL_GPIO_Init+0x222>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4f      	ldr	r2, [pc, #316]	; (8002458 <HAL_GPIO_Init+0x318>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01f      	beq.n	800235e <HAL_GPIO_Init+0x21e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4e      	ldr	r2, [pc, #312]	; (800245c <HAL_GPIO_Init+0x31c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d019      	beq.n	800235a <HAL_GPIO_Init+0x21a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4d      	ldr	r2, [pc, #308]	; (8002460 <HAL_GPIO_Init+0x320>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_GPIO_Init+0x216>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_GPIO_Init+0x324>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00d      	beq.n	8002352 <HAL_GPIO_Init+0x212>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_GPIO_Init+0x328>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <HAL_GPIO_Init+0x20e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4a      	ldr	r2, [pc, #296]	; (800246c <HAL_GPIO_Init+0x32c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_GPIO_Init+0x20a>
 8002346:	2307      	movs	r3, #7
 8002348:	e00e      	b.n	8002368 <HAL_GPIO_Init+0x228>
 800234a:	2308      	movs	r3, #8
 800234c:	e00c      	b.n	8002368 <HAL_GPIO_Init+0x228>
 800234e:	2306      	movs	r3, #6
 8002350:	e00a      	b.n	8002368 <HAL_GPIO_Init+0x228>
 8002352:	2305      	movs	r3, #5
 8002354:	e008      	b.n	8002368 <HAL_GPIO_Init+0x228>
 8002356:	2304      	movs	r3, #4
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x228>
 800235a:	2303      	movs	r3, #3
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x228>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x228>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x228>
 8002366:	2300      	movs	r3, #0
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f002 0203 	and.w	r2, r2, #3
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002378:	4934      	ldr	r1, [pc, #208]	; (800244c <HAL_GPIO_Init+0x30c>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002386:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <HAL_GPIO_Init+0x330>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023aa:	4a31      	ldr	r2, [pc, #196]	; (8002470 <HAL_GPIO_Init+0x330>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023b0:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_GPIO_Init+0x330>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d4:	4a26      	ldr	r2, [pc, #152]	; (8002470 <HAL_GPIO_Init+0x330>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_GPIO_Init+0x330>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_GPIO_Init+0x330>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_GPIO_Init+0x330>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002428:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_GPIO_Init+0x330>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	f67f ae90 	bls.w	800215c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800243c:	bf00      	nop
 800243e:	3724      	adds	r7, #36	; 0x24
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40023800 	.word	0x40023800
 800244c:	40013800 	.word	0x40013800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40021000 	.word	0x40021000
 8002464:	40021400 	.word	0x40021400
 8002468:	40021800 	.word	0x40021800
 800246c:	40021c00 	.word	0x40021c00
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e001      	b.n	8002496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d8:	b08f      	sub	sp, #60	; 0x3c
 80024da:	af0a      	add	r7, sp, #40	; 0x28
 80024dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e054      	b.n	8002592 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f00a fdf2 	bl	800d0ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2203      	movs	r2, #3
 800250c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f004 fb16 	bl	8006b58 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	687e      	ldr	r6, [r7, #4]
 8002534:	466d      	mov	r5, sp
 8002536:	f106 0410 	add.w	r4, r6, #16
 800253a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002542:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002546:	e885 0003 	stmia.w	r5, {r0, r1}
 800254a:	1d33      	adds	r3, r6, #4
 800254c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800254e:	6838      	ldr	r0, [r7, #0]
 8002550:	f004 fa90 	bl	8006a74 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	4618      	mov	r0, r3
 800255c:	f004 fb0d 	bl	8006b7a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	687e      	ldr	r6, [r7, #4]
 8002568:	466d      	mov	r5, sp
 800256a:	f106 0410 	add.w	r4, r6, #16
 800256e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002576:	e894 0003 	ldmia.w	r4, {r0, r1}
 800257a:	e885 0003 	stmia.w	r5, {r0, r1}
 800257e:	1d33      	adds	r3, r6, #4
 8002580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002582:	6838      	ldr	r0, [r7, #0]
 8002584:	f004 fc20 	bl	8006dc8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800259a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800259a:	b590      	push	{r4, r7, lr}
 800259c:	b089      	sub	sp, #36	; 0x24
 800259e:	af04      	add	r7, sp, #16
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	4608      	mov	r0, r1
 80025a4:	4611      	mov	r1, r2
 80025a6:	461a      	mov	r2, r3
 80025a8:	4603      	mov	r3, r0
 80025aa:	70fb      	strb	r3, [r7, #3]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70bb      	strb	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_HCD_HC_Init+0x28>
 80025be:	2302      	movs	r3, #2
 80025c0:	e07f      	b.n	80026c2 <HAL_HCD_HC_Init+0x128>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	333d      	adds	r3, #61	; 0x3d
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	3338      	adds	r3, #56	; 0x38
 80025ee:	787a      	ldrb	r2, [r7, #1]
 80025f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	3340      	adds	r3, #64	; 0x40
 8002602:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002604:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002606:	78fa      	ldrb	r2, [r7, #3]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	3339      	adds	r3, #57	; 0x39
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	333f      	adds	r3, #63	; 0x3f
 800262a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800262e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	78bb      	ldrb	r3, [r7, #2]
 8002634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002638:	b2d8      	uxtb	r0, r3
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	333a      	adds	r3, #58	; 0x3a
 8002648:	4602      	mov	r2, r0
 800264a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800264c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002650:	2b00      	cmp	r3, #0
 8002652:	da0a      	bge.n	800266a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	333b      	adds	r3, #59	; 0x3b
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e009      	b.n	800267e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	333b      	adds	r3, #59	; 0x3b
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	440b      	add	r3, r1
 800268c:	333c      	adds	r3, #60	; 0x3c
 800268e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002692:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	787c      	ldrb	r4, [r7, #1]
 800269a:	78ba      	ldrb	r2, [r7, #2]
 800269c:	78f9      	ldrb	r1, [r7, #3]
 800269e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	4623      	mov	r3, r4
 80026b0:	f004 fd0c 	bl	80070cc <USB_HC_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd90      	pop	{r4, r7, pc}

080026ca <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_HCD_HC_Halt+0x1e>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e00f      	b.n	8002708 <HAL_HCD_HC_Halt+0x3e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 ff48 	bl	800758e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	70fb      	strb	r3, [r7, #3]
 8002722:	460b      	mov	r3, r1
 8002724:	70bb      	strb	r3, [r7, #2]
 8002726:	4613      	mov	r3, r2
 8002728:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	333b      	adds	r3, #59	; 0x3b
 800273a:	78ba      	ldrb	r2, [r7, #2]
 800273c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	440b      	add	r3, r1
 800274c:	333f      	adds	r3, #63	; 0x3f
 800274e:	787a      	ldrb	r2, [r7, #1]
 8002750:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002752:	7c3b      	ldrb	r3, [r7, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d114      	bne.n	8002782 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	3342      	adds	r3, #66	; 0x42
 8002768:	2203      	movs	r2, #3
 800276a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	333d      	adds	r3, #61	; 0x3d
 800277c:	7f3a      	ldrb	r2, [r7, #28]
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e009      	b.n	8002796 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	3342      	adds	r3, #66	; 0x42
 8002792:	2202      	movs	r2, #2
 8002794:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002796:	787b      	ldrb	r3, [r7, #1]
 8002798:	2b03      	cmp	r3, #3
 800279a:	f200 80d6 	bhi.w	800294a <HAL_HCD_HC_SubmitRequest+0x23a>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	08002935 	.word	0x08002935
 80027ac:	08002821 	.word	0x08002821
 80027b0:	080028ab 	.word	0x080028ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80027b4:	7c3b      	ldrb	r3, [r7, #16]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	f040 80c9 	bne.w	800294e <HAL_HCD_HC_SubmitRequest+0x23e>
 80027bc:	78bb      	ldrb	r3, [r7, #2]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80c5 	bne.w	800294e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80027c4:	8b3b      	ldrh	r3, [r7, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	3351      	adds	r3, #81	; 0x51
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	3351      	adds	r3, #81	; 0x51
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	3342      	adds	r3, #66	; 0x42
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002808:	e0a1      	b.n	800294e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	440b      	add	r3, r1
 8002818:	3342      	adds	r3, #66	; 0x42
 800281a:	2202      	movs	r2, #2
 800281c:	701a      	strb	r2, [r3, #0]
      break;
 800281e:	e096      	b.n	800294e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002820:	78bb      	ldrb	r3, [r7, #2]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d120      	bne.n	8002868 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	3351      	adds	r3, #81	; 0x51
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	3342      	adds	r3, #66	; 0x42
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002850:	e07e      	b.n	8002950 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	3342      	adds	r3, #66	; 0x42
 8002862:	2202      	movs	r2, #2
 8002864:	701a      	strb	r2, [r3, #0]
      break;
 8002866:	e073      	b.n	8002950 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	3350      	adds	r3, #80	; 0x50
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	3342      	adds	r3, #66	; 0x42
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
      break;
 8002892:	e05d      	b.n	8002950 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	440b      	add	r3, r1
 80028a2:	3342      	adds	r3, #66	; 0x42
 80028a4:	2202      	movs	r2, #2
 80028a6:	701a      	strb	r2, [r3, #0]
      break;
 80028a8:	e052      	b.n	8002950 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028aa:	78bb      	ldrb	r3, [r7, #2]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d120      	bne.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	3351      	adds	r3, #81	; 0x51
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	3342      	adds	r3, #66	; 0x42
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028da:	e039      	b.n	8002950 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	3342      	adds	r3, #66	; 0x42
 80028ec:	2202      	movs	r2, #2
 80028ee:	701a      	strb	r2, [r3, #0]
      break;
 80028f0:	e02e      	b.n	8002950 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	3350      	adds	r3, #80	; 0x50
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	3342      	adds	r3, #66	; 0x42
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
      break;
 800291c:	e018      	b.n	8002950 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	440b      	add	r3, r1
 800292c:	3342      	adds	r3, #66	; 0x42
 800292e:	2202      	movs	r2, #2
 8002930:	701a      	strb	r2, [r3, #0]
      break;
 8002932:	e00d      	b.n	8002950 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	3342      	adds	r3, #66	; 0x42
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
      break;
 8002948:	e002      	b.n	8002950 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800294a:	bf00      	nop
 800294c:	e000      	b.n	8002950 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800294e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	3344      	adds	r3, #68	; 0x44
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	8b39      	ldrh	r1, [r7, #24]
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4403      	add	r3, r0
 8002974:	3348      	adds	r3, #72	; 0x48
 8002976:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	335c      	adds	r3, #92	; 0x5c
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	334c      	adds	r3, #76	; 0x4c
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	3339      	adds	r3, #57	; 0x39
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	335d      	adds	r3, #93	; 0x5d
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	3338      	adds	r3, #56	; 0x38
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	18d1      	adds	r1, r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	f004 fc7c 	bl	80072e0 <USB_HC_StartXfer>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop

080029f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 f999 	bl	8006d42 <USB_GetMode>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	f040 80ef 	bne.w	8002bf6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 f97d 	bl	8006d1c <USB_ReadInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80e5 	beq.w	8002bf4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 f974 	bl	8006d1c <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a3e:	d104      	bne.n	8002a4a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f004 f964 	bl	8006d1c <USB_ReadInterrupts>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a5e:	d104      	bne.n	8002a6a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 f954 	bl	8006d1c <USB_ReadInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a7e:	d104      	bne.n	8002a8a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 f944 	bl	8006d1c <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d103      	bne.n	8002aa6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 f936 	bl	8006d1c <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aba:	d115      	bne.n	8002ae8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ac4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d108      	bne.n	8002ae8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f00a fb86 	bl	800d1e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 fa2c 	bl	8006f40 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 f915 	bl	8006d1c <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002afc:	d102      	bne.n	8002b04 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f001 f966 	bl	8003dd0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 f907 	bl	8006d1c <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d106      	bne.n	8002b26 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f00a fb49 	bl	800d1b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2208      	movs	r2, #8
 8002b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 f8f6 	bl	8006d1c <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b3a:	d138      	bne.n	8002bae <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 fd13 	bl	800756c <USB_HC_ReadInterrupt>
 8002b46:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e025      	b.n	8002b9a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d018      	beq.n	8002b94 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b78:	d106      	bne.n	8002b88 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8cf 	bl	8002d24 <HCD_HC_IN_IRQHandler>
 8002b86:	e005      	b.n	8002b94 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fcfd 	bl	800358e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d3d4      	bcc.n	8002b4e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f004 f8b2 	bl	8006d1c <USB_ReadInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d101      	bne.n	8002bc6 <HAL_HCD_IRQHandler+0x1d2>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_HCD_IRQHandler+0x1d4>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d014      	beq.n	8002bf6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0210 	bic.w	r2, r2, #16
 8002bda:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f001 f84b 	bl	8003c78 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0210 	orr.w	r2, r2, #16
 8002bf0:	619a      	str	r2, [r3, #24]
 8002bf2:	e000      	b.n	8002bf6 <HAL_HCD_IRQHandler+0x202>
      return;
 8002bf4:	bf00      	nop
    }
  }
}
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_HCD_Start+0x16>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e013      	b.n	8002c3a <HAL_HCD_Start+0x3e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f003 ff89 	bl	8006b36 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 f9ec 	bl	8007008 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_HCD_Stop+0x16>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e00d      	b.n	8002c74 <HAL_HCD_Stop+0x32>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f004 fdcd 	bl	8007804 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f004 f993 	bl	8006fb4 <USB_ResetPort>
 8002c8e:	4603      	mov	r3, r0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	335c      	adds	r3, #92	; 0x5c
 8002cb4:	781b      	ldrb	r3, [r3, #0]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	334c      	adds	r3, #76	; 0x4c
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 f9d5 	bl	80070a8 <USB_GetCurrentFrame>
 8002cfe:	4603      	mov	r3, r0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 f9b0 	bl	800707a <USB_GetHostSpeed>
 8002d1a:	4603      	mov	r3, r0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d119      	bne.n	8002d88 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	461a      	mov	r2, r3
 8002d62:	2304      	movs	r3, #4
 8002d64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	0151      	lsls	r1, r2, #5
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	60d3      	str	r3, [r2, #12]
 8002d86:	e0ce      	b.n	8002f26 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9e:	d12c      	bne.n	8002dfa <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	461a      	mov	r2, r3
 8002dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	335d      	adds	r3, #93	; 0x5d
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	0151      	lsls	r1, r2, #5
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	440a      	add	r2, r1
 8002dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002de2:	f043 0302 	orr.w	r3, r3, #2
 8002de6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 fbcb 	bl	800758e <USB_HC_Halt>
 8002df8:	e095      	b.n	8002f26 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d109      	bne.n	8002e24 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2320      	movs	r3, #32
 8002e20:	6093      	str	r3, [r2, #8]
 8002e22:	e080      	b.n	8002f26 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d134      	bne.n	8002ea4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	0151      	lsls	r1, r2, #5
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	440a      	add	r2, r1
 8002e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	335d      	adds	r3, #93	; 0x5d
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2308      	movs	r3, #8
 8002e90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 fb76 	bl	800758e <USB_HC_Halt>
 8002ea2:	e040      	b.n	8002f26 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eba:	d134      	bne.n	8002f26 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	0151      	lsls	r1, r2, #5
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fb51 	bl	800758e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2310      	movs	r3, #16
 8002efc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	335d      	adds	r3, #93	; 0x5d
 8002f0e:	2208      	movs	r2, #8
 8002f10:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f24:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3c:	d122      	bne.n	8002f84 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	0151      	lsls	r1, r2, #5
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	440a      	add	r2, r1
 8002f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f004 fb10 	bl	800758e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f80:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f82:	e300      	b.n	8003586 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	f040 80fd 	bne.w	8003196 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01b      	beq.n	8002fdc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3348      	adds	r3, #72	; 0x48
 8002fb4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	0159      	lsls	r1, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	440b      	add	r3, r1
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002fc8:	1ad1      	subs	r1, r2, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4403      	add	r3, r0
 8002fd8:	334c      	adds	r3, #76	; 0x4c
 8002fda:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	335d      	adds	r3, #93	; 0x5d
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3358      	adds	r3, #88	; 0x58
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	2301      	movs	r3, #1
 8003014:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	440b      	add	r3, r1
 8003024:	333f      	adds	r3, #63	; 0x3f
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	333f      	adds	r3, #63	; 0x3f
 800303c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800303e:	2b02      	cmp	r3, #2
 8003040:	d121      	bne.n	8003086 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	0151      	lsls	r1, r2, #5
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	440a      	add	r2, r1
 8003058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f004 fa8e 	bl	800758e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	2310      	movs	r3, #16
 8003082:	6093      	str	r3, [r2, #8]
 8003084:	e070      	b.n	8003168 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	333f      	adds	r3, #63	; 0x3f
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d12a      	bne.n	80030f2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	0151      	lsls	r1, r2, #5
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	440a      	add	r2, r1
 80030b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	440b      	add	r3, r1
 80030ca:	335c      	adds	r3, #92	; 0x5c
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	b2d8      	uxtb	r0, r3
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	335c      	adds	r3, #92	; 0x5c
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	4601      	mov	r1, r0
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f00a f88a 	bl	800d204 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030f0:	e03a      	b.n	8003168 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	333f      	adds	r3, #63	; 0x3f
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d12f      	bne.n	8003168 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	335c      	adds	r3, #92	; 0x5c
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	3350      	adds	r3, #80	; 0x50
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	f083 0301 	eor.w	r3, r3, #1
 8003132:	b2d8      	uxtb	r0, r3
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	3350      	adds	r3, #80	; 0x50
 8003144:	4602      	mov	r2, r0
 8003146:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	b2d8      	uxtb	r0, r3
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	335c      	adds	r3, #92	; 0x5c
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	4601      	mov	r1, r0
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f00a f84e 	bl	800d204 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	3350      	adds	r3, #80	; 0x50
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	f083 0301 	eor.w	r3, r3, #1
 800317e:	b2d8      	uxtb	r0, r3
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	440b      	add	r3, r1
 800318e:	3350      	adds	r3, #80	; 0x50
 8003190:	4602      	mov	r2, r0
 8003192:	701a      	strb	r2, [r3, #0]
}
 8003194:	e1f7      	b.n	8003586 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4413      	add	r3, r2
 800319e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	f040 811a 	bne.w	80033e2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	0151      	lsls	r1, r2, #5
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	440a      	add	r2, r1
 80031c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031c8:	f023 0302 	bic.w	r3, r3, #2
 80031cc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	335d      	adds	r3, #93	; 0x5d
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d10a      	bne.n	80031fa <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	440b      	add	r3, r1
 80031f2:	335c      	adds	r3, #92	; 0x5c
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e0d9      	b.n	80033ae <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	335d      	adds	r3, #93	; 0x5d
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d10a      	bne.n	8003226 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	335c      	adds	r3, #92	; 0x5c
 8003220:	2205      	movs	r2, #5
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	e0c3      	b.n	80033ae <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	335d      	adds	r3, #93	; 0x5d
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b06      	cmp	r3, #6
 800323a:	d00a      	beq.n	8003252 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	335d      	adds	r3, #93	; 0x5d
 800324c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800324e:	2b08      	cmp	r3, #8
 8003250:	d156      	bne.n	8003300 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	3358      	adds	r3, #88	; 0x58
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	1c59      	adds	r1, r3, #1
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4403      	add	r3, r0
 8003274:	3358      	adds	r3, #88	; 0x58
 8003276:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	440b      	add	r3, r1
 8003286:	3358      	adds	r3, #88	; 0x58
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d914      	bls.n	80032b8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	3358      	adds	r3, #88	; 0x58
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	335c      	adds	r3, #92	; 0x5c
 80032b2:	2204      	movs	r2, #4
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e009      	b.n	80032cc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	440b      	add	r3, r1
 80032c6:	335c      	adds	r3, #92	; 0x5c
 80032c8:	2202      	movs	r2, #2
 80032ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	461a      	mov	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e056      	b.n	80033ae <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	335d      	adds	r3, #93	; 0x5d
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d123      	bne.n	800335e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	440b      	add	r3, r1
 8003324:	335c      	adds	r3, #92	; 0x5c
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003340:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003348:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e027      	b.n	80033ae <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	335d      	adds	r3, #93	; 0x5d
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b07      	cmp	r3, #7
 8003372:	d11c      	bne.n	80033ae <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	440b      	add	r3, r1
 8003382:	3358      	adds	r3, #88	; 0x58
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	1c59      	adds	r1, r3, #1
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4403      	add	r3, r0
 8003396:	3358      	adds	r3, #88	; 0x58
 8003398:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	335c      	adds	r3, #92	; 0x5c
 80033aa:	2204      	movs	r2, #4
 80033ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ba:	461a      	mov	r2, r3
 80033bc:	2302      	movs	r3, #2
 80033be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	b2d8      	uxtb	r0, r3
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	335c      	adds	r3, #92	; 0x5c
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	4601      	mov	r1, r0
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f009 ff12 	bl	800d204 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033e0:	e0d1      	b.n	8003586 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d13e      	bne.n	8003476 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	0151      	lsls	r1, r2, #5
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	440a      	add	r2, r1
 800340e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	3358      	adds	r3, #88	; 0x58
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1c59      	adds	r1, r3, #1
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4403      	add	r3, r0
 800343a:	3358      	adds	r3, #88	; 0x58
 800343c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	440b      	add	r3, r1
 800344c:	335d      	adds	r3, #93	; 0x5d
 800344e:	2206      	movs	r2, #6
 8003450:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f004 f896 	bl	800758e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	461a      	mov	r2, r3
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	6093      	str	r3, [r2, #8]
}
 8003474:	e087      	b.n	8003586 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	d17c      	bne.n	8003586 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	440b      	add	r3, r1
 800349a:	333f      	adds	r3, #63	; 0x3f
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d122      	bne.n	80034e8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	3358      	adds	r3, #88	; 0x58
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	0151      	lsls	r1, r2, #5
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	440a      	add	r2, r1
 80034cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f004 f854 	bl	800758e <USB_HC_Halt>
 80034e6:	e045      	b.n	8003574 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	440b      	add	r3, r1
 80034f6:	333f      	adds	r3, #63	; 0x3f
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	440b      	add	r3, r1
 800350c:	333f      	adds	r3, #63	; 0x3f
 800350e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003510:	2b02      	cmp	r3, #2
 8003512:	d12f      	bne.n	8003574 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	3358      	adds	r3, #88	; 0x58
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d121      	bne.n	8003574 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	440b      	add	r3, r1
 800353e:	335d      	adds	r3, #93	; 0x5d
 8003540:	2203      	movs	r2, #3
 8003542:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4413      	add	r3, r2
 800354c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	0151      	lsls	r1, r2, #5
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	440a      	add	r2, r1
 800355a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800355e:	f043 0302 	orr.w	r3, r3, #2
 8003562:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f004 f80d 	bl	800758e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	461a      	mov	r2, r3
 8003582:	2310      	movs	r3, #16
 8003584:	6093      	str	r3, [r2, #8]
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b086      	sub	sp, #24
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d119      	bne.n	80035f2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ca:	461a      	mov	r2, r3
 80035cc:	2304      	movs	r3, #4
 80035ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	0151      	lsls	r1, r2, #5
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	440a      	add	r2, r1
 80035e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80035f0:	e33e      	b.n	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b20      	cmp	r3, #32
 8003606:	d141      	bne.n	800368c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003614:	461a      	mov	r2, r3
 8003616:	2320      	movs	r3, #32
 8003618:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	333d      	adds	r3, #61	; 0x3d
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	f040 831f 	bne.w	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	333d      	adds	r3, #61	; 0x3d
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	335c      	adds	r3, #92	; 0x5c
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4413      	add	r3, r2
 8003662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	0151      	lsls	r1, r2, #5
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	440a      	add	r2, r1
 8003670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f003 ff82 	bl	800758e <USB_HC_Halt>
}
 800368a:	e2f1      	b.n	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d13f      	bne.n	8003722 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	440b      	add	r3, r1
 80036b0:	335d      	adds	r3, #93	; 0x5d
 80036b2:	2204      	movs	r2, #4
 80036b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	440b      	add	r3, r1
 80036c4:	333d      	adds	r3, #61	; 0x3d
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	440b      	add	r3, r1
 80036d8:	3358      	adds	r3, #88	; 0x58
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	0151      	lsls	r1, r2, #5
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	440a      	add	r2, r1
 80036f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f003 ff40 	bl	800758e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	461a      	mov	r2, r3
 800371c:	2340      	movs	r3, #64	; 0x40
 800371e:	6093      	str	r3, [r2, #8]
}
 8003720:	e2a6      	b.n	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003738:	d122      	bne.n	8003780 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	0151      	lsls	r1, r2, #5
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	440a      	add	r2, r1
 8003750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f003 ff12 	bl	800758e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	461a      	mov	r2, r3
 8003778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377c:	6093      	str	r3, [r2, #8]
}
 800377e:	e277      	b.n	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d135      	bne.n	8003802 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	3358      	adds	r3, #88	; 0x58
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f003 feda 	bl	800758e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e6:	461a      	mov	r2, r3
 80037e8:	2301      	movs	r3, #1
 80037ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	335d      	adds	r3, #93	; 0x5d
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
}
 8003800:	e236      	b.n	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d12b      	bne.n	8003870 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003824:	461a      	mov	r2, r3
 8003826:	2308      	movs	r3, #8
 8003828:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4413      	add	r3, r2
 8003832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	440a      	add	r2, r1
 8003840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003844:	f043 0302 	orr.w	r3, r3, #2
 8003848:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f003 fe9a 	bl	800758e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	335d      	adds	r3, #93	; 0x5d
 800386a:	2205      	movs	r2, #5
 800386c:	701a      	strb	r2, [r3, #0]
}
 800386e:	e1ff      	b.n	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b10      	cmp	r3, #16
 8003884:	d155      	bne.n	8003932 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	3358      	adds	r3, #88	; 0x58
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	335d      	adds	r3, #93	; 0x5d
 80038aa:	2203      	movs	r2, #3
 80038ac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	440b      	add	r3, r1
 80038bc:	333d      	adds	r3, #61	; 0x3d
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d114      	bne.n	80038ee <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	333c      	adds	r3, #60	; 0x3c
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	440b      	add	r3, r1
 80038e8:	333d      	adds	r3, #61	; 0x3d
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	0151      	lsls	r1, r2, #5
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	440a      	add	r2, r1
 8003904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003908:	f043 0302 	orr.w	r3, r3, #2
 800390c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f003 fe38 	bl	800758e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392a:	461a      	mov	r2, r3
 800392c:	2310      	movs	r3, #16
 800392e:	6093      	str	r3, [r2, #8]
}
 8003930:	e19e      	b.n	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d12b      	bne.n	80039a0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	0151      	lsls	r1, r2, #5
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	440a      	add	r2, r1
 800395e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003962:	f043 0302 	orr.w	r3, r3, #2
 8003966:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f003 fe0b 	bl	800758e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	335d      	adds	r3, #93	; 0x5d
 8003988:	2206      	movs	r2, #6
 800398a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	461a      	mov	r2, r3
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	6093      	str	r3, [r2, #8]
}
 800399e:	e167      	b.n	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d135      	bne.n	8003a24 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 fdd3 	bl	800758e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f4:	461a      	mov	r2, r3
 80039f6:	2310      	movs	r3, #16
 80039f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a06:	461a      	mov	r2, r3
 8003a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	335d      	adds	r3, #93	; 0x5d
 8003a1e:	2208      	movs	r2, #8
 8003a20:	701a      	strb	r2, [r3, #0]
}
 8003a22:	e125      	b.n	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	f040 811a 	bne.w	8003c70 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a56:	f023 0302 	bic.w	r3, r3, #2
 8003a5a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	440b      	add	r3, r1
 8003a6a:	335d      	adds	r3, #93	; 0x5d
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d137      	bne.n	8003ae2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	440b      	add	r3, r1
 8003a80:	335c      	adds	r3, #92	; 0x5c
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	440b      	add	r3, r1
 8003a94:	333f      	adds	r3, #63	; 0x3f
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d00b      	beq.n	8003ab4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	440b      	add	r3, r1
 8003aaa:	333f      	adds	r3, #63	; 0x3f
 8003aac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	f040 80c5 	bne.w	8003c3e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	440b      	add	r3, r1
 8003ac2:	3351      	adds	r3, #81	; 0x51
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	f083 0301 	eor.w	r3, r3, #1
 8003aca:	b2d8      	uxtb	r0, r3
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	440b      	add	r3, r1
 8003ada:	3351      	adds	r3, #81	; 0x51
 8003adc:	4602      	mov	r2, r0
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	e0ad      	b.n	8003c3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	440b      	add	r3, r1
 8003af0:	335d      	adds	r3, #93	; 0x5d
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d10a      	bne.n	8003b0e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	440b      	add	r3, r1
 8003b06:	335c      	adds	r3, #92	; 0x5c
 8003b08:	2202      	movs	r2, #2
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	e097      	b.n	8003c3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	335d      	adds	r3, #93	; 0x5d
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d10a      	bne.n	8003b3a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	440b      	add	r3, r1
 8003b32:	335c      	adds	r3, #92	; 0x5c
 8003b34:	2202      	movs	r2, #2
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	e081      	b.n	8003c3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	440b      	add	r3, r1
 8003b48:	335d      	adds	r3, #93	; 0x5d
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d10a      	bne.n	8003b66 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	335c      	adds	r3, #92	; 0x5c
 8003b60:	2205      	movs	r2, #5
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e06b      	b.n	8003c3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	440b      	add	r3, r1
 8003b74:	335d      	adds	r3, #93	; 0x5d
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b06      	cmp	r3, #6
 8003b7a:	d00a      	beq.n	8003b92 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	440b      	add	r3, r1
 8003b8a:	335d      	adds	r3, #93	; 0x5d
 8003b8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d155      	bne.n	8003c3e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3358      	adds	r3, #88	; 0x58
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	1c59      	adds	r1, r3, #1
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4403      	add	r3, r0
 8003bb4:	3358      	adds	r3, #88	; 0x58
 8003bb6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3358      	adds	r3, #88	; 0x58
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d914      	bls.n	8003bf8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	3358      	adds	r3, #88	; 0x58
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	440b      	add	r3, r1
 8003bf0:	335c      	adds	r3, #92	; 0x5c
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e009      	b.n	8003c0c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	440b      	add	r3, r1
 8003c06:	335c      	adds	r3, #92	; 0x5c
 8003c08:	2202      	movs	r2, #2
 8003c0a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c22:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c2a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	b2d8      	uxtb	r0, r3
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	440b      	add	r3, r1
 8003c62:	335c      	adds	r3, #92	; 0x5c
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	4601      	mov	r1, r0
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f009 faca 	bl	800d204 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c70:	bf00      	nop
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	0c5b      	lsrs	r3, r3, #17
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d003      	beq.n	8003cbc <HCD_RXQLVL_IRQHandler+0x44>
 8003cb4:	2b05      	cmp	r3, #5
 8003cb6:	f000 8082 	beq.w	8003dbe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003cba:	e083      	b.n	8003dc4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d07f      	beq.n	8003dc2 <HCD_RXQLVL_IRQHandler+0x14a>
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	440b      	add	r3, r1
 8003cd0:	3344      	adds	r3, #68	; 0x44
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d074      	beq.n	8003dc2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	440b      	add	r3, r1
 8003cea:	3344      	adds	r3, #68	; 0x44
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	b292      	uxth	r2, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f002 ffe9 	bl	8006cca <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	440b      	add	r3, r1
 8003d06:	3344      	adds	r3, #68	; 0x44
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	18d1      	adds	r1, r2, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4403      	add	r3, r0
 8003d1c:	3344      	adds	r3, #68	; 0x44
 8003d1e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	440b      	add	r3, r1
 8003d2e:	334c      	adds	r3, #76	; 0x4c
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	18d1      	adds	r1, r2, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4403      	add	r3, r0
 8003d44:	334c      	adds	r3, #76	; 0x4c
 8003d46:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HCD_RXQLVL_IRQHandler+0x154>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d031      	beq.n	8003dc2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d74:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d7c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3350      	adds	r3, #80	; 0x50
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	f083 0301 	eor.w	r3, r3, #1
 8003da6:	b2d8      	uxtb	r0, r3
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	440b      	add	r3, r1
 8003db6:	3350      	adds	r3, #80	; 0x50
 8003db8:	4602      	mov	r2, r0
 8003dba:	701a      	strb	r2, [r3, #0]
      break;
 8003dbc:	e001      	b.n	8003dc2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003dc2:	bf00      	nop
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3728      	adds	r7, #40	; 0x28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	1ff80000 	.word	0x1ff80000

08003dd0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003dfc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d10b      	bne.n	8003e20 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d102      	bne.n	8003e18 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f009 f9da 	bl	800d1cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f043 0302 	orr.w	r3, r3, #2
 8003e1e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d132      	bne.n	8003e90 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d126      	bne.n	8003e8a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d113      	bne.n	8003e6c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e4e:	d106      	bne.n	8003e5e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2102      	movs	r1, #2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f003 f872 	bl	8006f40 <USB_InitFSLSPClkSel>
 8003e5c:	e011      	b.n	8003e82 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2101      	movs	r1, #1
 8003e64:	4618      	mov	r0, r3
 8003e66:	f003 f86b 	bl	8006f40 <USB_InitFSLSPClkSel>
 8003e6a:	e00a      	b.n	8003e82 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d106      	bne.n	8003e82 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e80:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f009 f9cc 	bl	800d220 <HAL_HCD_PortEnabled_Callback>
 8003e88:	e002      	b.n	8003e90 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f009 f9d6 	bl	800d23c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d103      	bne.n	8003ea2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f043 0320 	orr.w	r3, r3, #32
 8003ea0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6013      	str	r3, [r2, #0]
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e11f      	b.n	800410a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd fa04 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f002 fc2c 	bl	8006778 <HAL_RCC_GetPCLK1Freq>
 8003f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4a7b      	ldr	r2, [pc, #492]	; (8004114 <HAL_I2C_Init+0x25c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d807      	bhi.n	8003f3c <HAL_I2C_Init+0x84>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a7a      	ldr	r2, [pc, #488]	; (8004118 <HAL_I2C_Init+0x260>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bf94      	ite	ls
 8003f34:	2301      	movls	r3, #1
 8003f36:	2300      	movhi	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e006      	b.n	8003f4a <HAL_I2C_Init+0x92>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a77      	ldr	r2, [pc, #476]	; (800411c <HAL_I2C_Init+0x264>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bf94      	ite	ls
 8003f44:	2301      	movls	r3, #1
 8003f46:	2300      	movhi	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e0db      	b.n	800410a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a72      	ldr	r2, [pc, #456]	; (8004120 <HAL_I2C_Init+0x268>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0c9b      	lsrs	r3, r3, #18
 8003f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a64      	ldr	r2, [pc, #400]	; (8004114 <HAL_I2C_Init+0x25c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d802      	bhi.n	8003f8c <HAL_I2C_Init+0xd4>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	e009      	b.n	8003fa0 <HAL_I2C_Init+0xe8>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	4a63      	ldr	r2, [pc, #396]	; (8004124 <HAL_I2C_Init+0x26c>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4956      	ldr	r1, [pc, #344]	; (8004114 <HAL_I2C_Init+0x25c>)
 8003fbc:	428b      	cmp	r3, r1
 8003fbe:	d80d      	bhi.n	8003fdc <HAL_I2C_Init+0x124>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1e59      	subs	r1, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	bf38      	it	cc
 8003fd8:	2304      	movcc	r3, #4
 8003fda:	e04f      	b.n	800407c <HAL_I2C_Init+0x1c4>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d111      	bne.n	8004008 <HAL_I2C_Init+0x150>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1e58      	subs	r0, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	440b      	add	r3, r1
 8003ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	e012      	b.n	800402e <HAL_I2C_Init+0x176>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1e58      	subs	r0, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	0099      	lsls	r1, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	fbb0 f3f3 	udiv	r3, r0, r3
 800401e:	3301      	adds	r3, #1
 8004020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_Init+0x17e>
 8004032:	2301      	movs	r3, #1
 8004034:	e022      	b.n	800407c <HAL_I2C_Init+0x1c4>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10e      	bne.n	800405c <HAL_I2C_Init+0x1a4>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1e58      	subs	r0, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	440b      	add	r3, r1
 800404c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004050:	3301      	adds	r3, #1
 8004052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405a:	e00f      	b.n	800407c <HAL_I2C_Init+0x1c4>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1e58      	subs	r0, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	0099      	lsls	r1, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004072:	3301      	adds	r3, #1
 8004074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	6809      	ldr	r1, [r1, #0]
 8004080:	4313      	orrs	r3, r2
 8004082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6911      	ldr	r1, [r2, #16]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68d2      	ldr	r2, [r2, #12]
 80040b6:	4311      	orrs	r1, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	430b      	orrs	r3, r1
 80040be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	000186a0 	.word	0x000186a0
 8004118:	001e847f 	.word	0x001e847f
 800411c:	003d08ff 	.word	0x003d08ff
 8004120:	431bde83 	.word	0x431bde83
 8004124:	10624dd3 	.word	0x10624dd3

08004128 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	461a      	mov	r2, r3
 8004134:	460b      	mov	r3, r1
 8004136:	817b      	strh	r3, [r7, #10]
 8004138:	4613      	mov	r3, r2
 800413a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800413c:	f7fd fae2 	bl	8001704 <HAL_GetTick>
 8004140:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b20      	cmp	r3, #32
 800414c:	f040 80e0 	bne.w	8004310 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2319      	movs	r3, #25
 8004156:	2201      	movs	r2, #1
 8004158:	4970      	ldr	r1, [pc, #448]	; (800431c <HAL_I2C_Master_Transmit+0x1f4>)
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fc58 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
 8004168:	e0d3      	b.n	8004312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_I2C_Master_Transmit+0x50>
 8004174:	2302      	movs	r3, #2
 8004176:	e0cc      	b.n	8004312 <HAL_I2C_Master_Transmit+0x1ea>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d007      	beq.n	800419e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2221      	movs	r2, #33	; 0x21
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2210      	movs	r2, #16
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	893a      	ldrh	r2, [r7, #8]
 80041ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a50      	ldr	r2, [pc, #320]	; (8004320 <HAL_I2C_Master_Transmit+0x1f8>)
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041e0:	8979      	ldrh	r1, [r7, #10]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fac2 	bl	8004770 <I2C_MasterRequestWrite>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e08d      	b.n	8004312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800420c:	e066      	b.n	80042dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	6a39      	ldr	r1, [r7, #32]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fcd2 	bl	8004bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2b04      	cmp	r3, #4
 8004224:	d107      	bne.n	8004236 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e06b      	b.n	8004312 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b04      	cmp	r3, #4
 8004276:	d11b      	bne.n	80042b0 <HAL_I2C_Master_Transmit+0x188>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	2b00      	cmp	r3, #0
 800427e:	d017      	beq.n	80042b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	6a39      	ldr	r1, [r7, #32]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fcc2 	bl	8004c3e <I2C_WaitOnBTFFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00d      	beq.n	80042dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d107      	bne.n	80042d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e01a      	b.n	8004312 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d194      	bne.n	800420e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
  }
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	00100002 	.word	0x00100002
 8004320:	ffff0000 	.word	0xffff0000

08004324 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	; 0x30
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	461a      	mov	r2, r3
 8004330:	460b      	mov	r3, r1
 8004332:	817b      	strh	r3, [r7, #10]
 8004334:	4613      	mov	r3, r2
 8004336:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004338:	f7fd f9e4 	bl	8001704 <HAL_GetTick>
 800433c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b20      	cmp	r3, #32
 8004348:	f040 820b 	bne.w	8004762 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	2319      	movs	r3, #25
 8004352:	2201      	movs	r2, #1
 8004354:	497c      	ldr	r1, [pc, #496]	; (8004548 <HAL_I2C_Master_Receive+0x224>)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fb5a 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004362:	2302      	movs	r3, #2
 8004364:	e1fe      	b.n	8004764 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_I2C_Master_Receive+0x50>
 8004370:	2302      	movs	r3, #2
 8004372:	e1f7      	b.n	8004764 <HAL_I2C_Master_Receive+0x440>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b01      	cmp	r3, #1
 8004388:	d007      	beq.n	800439a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2222      	movs	r2, #34	; 0x22
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2210      	movs	r2, #16
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	893a      	ldrh	r2, [r7, #8]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a5c      	ldr	r2, [pc, #368]	; (800454c <HAL_I2C_Master_Receive+0x228>)
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043dc:	8979      	ldrh	r1, [r7, #10]
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fa46 	bl	8004874 <I2C_MasterRequestRead>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e1b8      	b.n	8004764 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d113      	bne.n	8004422 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	623b      	str	r3, [r7, #32]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	623b      	str	r3, [r7, #32]
 800440e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	e18c      	b.n	800473c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	2b01      	cmp	r3, #1
 8004428:	d11b      	bne.n	8004462 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	e16c      	b.n	800473c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004466:	2b02      	cmp	r3, #2
 8004468:	d11b      	bne.n	80044a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004478:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	e14c      	b.n	800473c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044c8:	e138      	b.n	800473c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	f200 80f1 	bhi.w	80046b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d123      	bne.n	8004524 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fbed 	bl	8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e139      	b.n	8004764 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004522:	e10b      	b.n	800473c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b02      	cmp	r3, #2
 800452a:	d14e      	bne.n	80045ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	2200      	movs	r2, #0
 8004534:	4906      	ldr	r1, [pc, #24]	; (8004550 <HAL_I2C_Master_Receive+0x22c>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa6a 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e10e      	b.n	8004764 <HAL_I2C_Master_Receive+0x440>
 8004546:	bf00      	nop
 8004548:	00100002 	.word	0x00100002
 800454c:	ffff0000 	.word	0xffff0000
 8004550:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045c8:	e0b8      	b.n	800473c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	2200      	movs	r2, #0
 80045d2:	4966      	ldr	r1, [pc, #408]	; (800476c <HAL_I2C_Master_Receive+0x448>)
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fa1b 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0bf      	b.n	8004764 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	2200      	movs	r2, #0
 800462e:	494f      	ldr	r1, [pc, #316]	; (800476c <HAL_I2C_Master_Receive+0x448>)
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f9ed 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e091      	b.n	8004764 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046b4:	e042      	b.n	800473c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fb00 	bl	8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e04c      	b.n	8004764 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b04      	cmp	r3, #4
 8004708:	d118      	bne.n	800473c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	f47f aec2 	bne.w	80044ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e000      	b.n	8004764 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004762:	2302      	movs	r3, #2
  }
}
 8004764:	4618      	mov	r0, r3
 8004766:	3728      	adds	r7, #40	; 0x28
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	00010004 	.word	0x00010004

08004770 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	460b      	mov	r3, r1
 800477e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d006      	beq.n	800479a <I2C_MasterRequestWrite+0x2a>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d003      	beq.n	800479a <I2C_MasterRequestWrite+0x2a>
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004798:	d108      	bne.n	80047ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	e00b      	b.n	80047c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	2b12      	cmp	r3, #18
 80047b2:	d107      	bne.n	80047c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f91d 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00d      	beq.n	80047f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ea:	d103      	bne.n	80047f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e035      	b.n	8004864 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004800:	d108      	bne.n	8004814 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004802:	897b      	ldrh	r3, [r7, #10]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004810:	611a      	str	r2, [r3, #16]
 8004812:	e01b      	b.n	800484c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004814:	897b      	ldrh	r3, [r7, #10]
 8004816:	11db      	asrs	r3, r3, #7
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 0306 	and.w	r3, r3, #6
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f063 030f 	orn	r3, r3, #15
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	490e      	ldr	r1, [pc, #56]	; (800486c <I2C_MasterRequestWrite+0xfc>)
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f943 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e010      	b.n	8004864 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004842:	897b      	ldrh	r3, [r7, #10]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4907      	ldr	r1, [pc, #28]	; (8004870 <I2C_MasterRequestWrite+0x100>)
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f933 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	00010008 	.word	0x00010008
 8004870:	00010002 	.word	0x00010002

08004874 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	607a      	str	r2, [r7, #4]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	460b      	mov	r3, r1
 8004882:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004898:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d006      	beq.n	80048ae <I2C_MasterRequestRead+0x3a>
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d003      	beq.n	80048ae <I2C_MasterRequestRead+0x3a>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048ac:	d108      	bne.n	80048c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e00b      	b.n	80048d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	2b11      	cmp	r3, #17
 80048c6:	d107      	bne.n	80048d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f893 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fe:	d103      	bne.n	8004908 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004906:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e079      	b.n	8004a00 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004914:	d108      	bne.n	8004928 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004916:	897b      	ldrh	r3, [r7, #10]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	b2da      	uxtb	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	611a      	str	r2, [r3, #16]
 8004926:	e05f      	b.n	80049e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004928:	897b      	ldrh	r3, [r7, #10]
 800492a:	11db      	asrs	r3, r3, #7
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f003 0306 	and.w	r3, r3, #6
 8004932:	b2db      	uxtb	r3, r3
 8004934:	f063 030f 	orn	r3, r3, #15
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4930      	ldr	r1, [pc, #192]	; (8004a08 <I2C_MasterRequestRead+0x194>)
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f8b9 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e054      	b.n	8004a00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004956:	897b      	ldrh	r3, [r7, #10]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4929      	ldr	r1, [pc, #164]	; (8004a0c <I2C_MasterRequestRead+0x198>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f8a9 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e044      	b.n	8004a00 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800499a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 f831 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00d      	beq.n	80049d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c2:	d103      	bne.n	80049cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e017      	b.n	8004a00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049d0:	897b      	ldrh	r3, [r7, #10]
 80049d2:	11db      	asrs	r3, r3, #7
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 0306 	and.w	r3, r3, #6
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f063 030e 	orn	r3, r3, #14
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4907      	ldr	r1, [pc, #28]	; (8004a0c <I2C_MasterRequestRead+0x198>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f865 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	00010008 	.word	0x00010008
 8004a0c:	00010002 	.word	0x00010002

08004a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a20:	e025      	b.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d021      	beq.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fc fe6b 	bl	8001704 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d116      	bne.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f043 0220 	orr.w	r2, r3, #32
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e023      	b.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10d      	bne.n	8004a94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4013      	ands	r3, r2
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	e00c      	b.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d0b6      	beq.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004acc:	e051      	b.n	8004b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004adc:	d123      	bne.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004af6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0204 	orr.w	r2, r3, #4
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e046      	b.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d021      	beq.n	8004b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2e:	f7fc fde9 	bl	8001704 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d116      	bne.n	8004b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f043 0220 	orr.w	r2, r3, #32
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e020      	b.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	0c1b      	lsrs	r3, r3, #16
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d10c      	bne.n	8004b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	43da      	mvns	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4013      	ands	r3, r2
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bf14      	ite	ne
 8004b8e:	2301      	movne	r3, #1
 8004b90:	2300      	moveq	r3, #0
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	e00b      	b.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d18d      	bne.n	8004ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc8:	e02d      	b.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f8ce 	bl	8004d6c <I2C_IsAcknowledgeFailed>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e02d      	b.n	8004c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d021      	beq.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be2:	f7fc fd8f 	bl	8001704 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d302      	bcc.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d116      	bne.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f043 0220 	orr.w	r2, r3, #32
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e007      	b.n	8004c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	2b80      	cmp	r3, #128	; 0x80
 8004c32:	d1ca      	bne.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c4a:	e02d      	b.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f88d 	bl	8004d6c <I2C_IsAcknowledgeFailed>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e02d      	b.n	8004cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d021      	beq.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c64:	f7fc fd4e 	bl	8001704 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d116      	bne.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e007      	b.n	8004cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d1ca      	bne.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ccc:	e042      	b.n	8004d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d119      	bne.n	8004d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0210 	mvn.w	r2, #16
 8004ce4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e029      	b.n	8004d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d10:	f7fc fcf8 	bl	8001704 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d302      	bcc.n	8004d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d116      	bne.n	8004d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e007      	b.n	8004d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d1b5      	bne.n	8004cce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d82:	d11b      	bne.n	8004dbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f043 0204 	orr.w	r2, r3, #4
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e128      	b.n	8005030 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a90      	ldr	r2, [pc, #576]	; (8005038 <HAL_I2S_Init+0x26c>)
 8004df6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fc fabf 	bl	800137c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e14:	f023 030f 	bic.w	r3, r3, #15
 8004e18:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d060      	beq.n	8004eec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004e32:	2310      	movs	r3, #16
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e001      	b.n	8004e3c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004e38:	2320      	movs	r3, #32
 8004e3a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d802      	bhi.n	8004e4a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	f001 fdb6 	bl	80069bc <HAL_RCCEx_GetPeriphCLKFreq>
 8004e50:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5a:	d125      	bne.n	8004ea8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d010      	beq.n	8004e86 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	3305      	adds	r3, #5
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	e01f      	b.n	8004ec6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	461a      	mov	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	3305      	adds	r3, #5
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	e00e      	b.n	8004ec6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	461a      	mov	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec2:	3305      	adds	r3, #5
 8004ec4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	4a5c      	ldr	r2, [pc, #368]	; (800503c <HAL_I2S_Init+0x270>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	08db      	lsrs	r3, r3, #3
 8004ed0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	e003      	b.n	8004ef4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004eec:	2302      	movs	r3, #2
 8004eee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d902      	bls.n	8004f00 <HAL_I2S_Init+0x134>
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	2bff      	cmp	r3, #255	; 0xff
 8004efe:	d907      	bls.n	8004f10 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f04:	f043 0210 	orr.w	r2, r3, #16
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e08f      	b.n	8005030 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	ea42 0103 	orr.w	r1, r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f2e:	f023 030f 	bic.w	r3, r3, #15
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6851      	ldr	r1, [r2, #4]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6892      	ldr	r2, [r2, #8]
 8004f3a:	4311      	orrs	r1, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68d2      	ldr	r2, [r2, #12]
 8004f40:	4311      	orrs	r1, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6992      	ldr	r2, [r2, #24]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f52:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d161      	bne.n	8005020 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a38      	ldr	r2, [pc, #224]	; (8005040 <HAL_I2S_Init+0x274>)
 8004f60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a37      	ldr	r2, [pc, #220]	; (8005044 <HAL_I2S_Init+0x278>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d101      	bne.n	8004f70 <HAL_I2S_Init+0x1a4>
 8004f6c:	4b36      	ldr	r3, [pc, #216]	; (8005048 <HAL_I2S_Init+0x27c>)
 8004f6e:	e001      	b.n	8004f74 <HAL_I2S_Init+0x1a8>
 8004f70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	4932      	ldr	r1, [pc, #200]	; (8005044 <HAL_I2S_Init+0x278>)
 8004f7c:	428a      	cmp	r2, r1
 8004f7e:	d101      	bne.n	8004f84 <HAL_I2S_Init+0x1b8>
 8004f80:	4a31      	ldr	r2, [pc, #196]	; (8005048 <HAL_I2S_Init+0x27c>)
 8004f82:	e001      	b.n	8004f88 <HAL_I2S_Init+0x1bc>
 8004f84:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004f88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f8c:	f023 030f 	bic.w	r3, r3, #15
 8004f90:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a2b      	ldr	r2, [pc, #172]	; (8005044 <HAL_I2S_Init+0x278>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d101      	bne.n	8004fa0 <HAL_I2S_Init+0x1d4>
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <HAL_I2S_Init+0x27c>)
 8004f9e:	e001      	b.n	8004fa4 <HAL_I2S_Init+0x1d8>
 8004fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a25      	ldr	r2, [pc, #148]	; (8005044 <HAL_I2S_Init+0x278>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2S_Init+0x1ea>
 8004fb2:	4b25      	ldr	r3, [pc, #148]	; (8005048 <HAL_I2S_Init+0x27c>)
 8004fb4:	e001      	b.n	8004fba <HAL_I2S_Init+0x1ee>
 8004fb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc6:	d003      	beq.n	8004fd0 <HAL_I2S_Init+0x204>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	e001      	b.n	8004fdc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	b299      	uxth	r1, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004ff2:	4303      	orrs	r3, r0
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	897b      	ldrh	r3, [r7, #10]
 8005000:	4313      	orrs	r3, r2
 8005002:	b29b      	uxth	r3, r3
 8005004:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005008:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a0d      	ldr	r2, [pc, #52]	; (8005044 <HAL_I2S_Init+0x278>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d101      	bne.n	8005018 <HAL_I2S_Init+0x24c>
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <HAL_I2S_Init+0x27c>)
 8005016:	e001      	b.n	800501c <HAL_I2S_Init+0x250>
 8005018:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800501c:	897a      	ldrh	r2, [r7, #10]
 800501e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	080058c9 	.word	0x080058c9
 800503c:	cccccccd 	.word	0xcccccccd
 8005040:	08005a51 	.word	0x08005a51
 8005044:	40003800 	.word	0x40003800
 8005048:	40003400 	.word	0x40003400

0800504c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_I2S_Transmit_DMA+0x1a>
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e08e      	b.n	8005188 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_I2S_Transmit_DMA+0x2e>
 8005076:	2302      	movs	r3, #2
 8005078:	e086      	b.n	8005188 <HAL_I2S_Transmit_DMA+0x13c>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	d005      	beq.n	800509a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
 8005098:	e076      	b.n	8005188 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2203      	movs	r2, #3
 800509e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d002      	beq.n	80050c6 <HAL_I2S_Transmit_DMA+0x7a>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d10a      	bne.n	80050dc <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050da:	e005      	b.n	80050e8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	88fa      	ldrh	r2, [r7, #6]
 80050e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	4a28      	ldr	r2, [pc, #160]	; (8005190 <HAL_I2S_Transmit_DMA+0x144>)
 80050ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	4a27      	ldr	r2, [pc, #156]	; (8005194 <HAL_I2S_Transmit_DMA+0x148>)
 80050f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	4a26      	ldr	r2, [pc, #152]	; (8005198 <HAL_I2S_Transmit_DMA+0x14c>)
 80050fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005108:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005110:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005118:	f7fc fce2 	bl	8001ae0 <HAL_DMA_Start_IT>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00f      	beq.n	8005142 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f043 0208 	orr.w	r2, r3, #8
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e022      	b.n	8005188 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514c:	2b00      	cmp	r3, #0
 800514e:	d107      	bne.n	8005160 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69da      	ldr	r2, [r3, #28]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800515e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0202 	orr.w	r2, r2, #2
 800517c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	080057a7 	.word	0x080057a7
 8005194:	08005765 	.word	0x08005765
 8005198:	080057c3 	.word	0x080057c3

0800519c <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_I2S_DMAPause+0x18>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e04a      	b.n	800524a <HAL_I2S_DMAPause+0xae>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d108      	bne.n	80051da <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0202 	bic.w	r2, r2, #2
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	e032      	b.n	8005240 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d108      	bne.n	80051f8 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	e023      	b.n	8005240 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b05      	cmp	r3, #5
 8005202:	d11d      	bne.n	8005240 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0203 	bic.w	r2, r2, #3
 8005212:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a0f      	ldr	r2, [pc, #60]	; (8005258 <HAL_I2S_DMAPause+0xbc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <HAL_I2S_DMAPause+0x86>
 800521e:	4b0f      	ldr	r3, [pc, #60]	; (800525c <HAL_I2S_DMAPause+0xc0>)
 8005220:	e001      	b.n	8005226 <HAL_I2S_DMAPause+0x8a>
 8005222:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	490a      	ldr	r1, [pc, #40]	; (8005258 <HAL_I2S_DMAPause+0xbc>)
 800522e:	428b      	cmp	r3, r1
 8005230:	d101      	bne.n	8005236 <HAL_I2S_DMAPause+0x9a>
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_I2S_DMAPause+0xc0>)
 8005234:	e001      	b.n	800523a <HAL_I2S_DMAPause+0x9e>
 8005236:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800523a:	f022 0203 	bic.w	r2, r2, #3
 800523e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40003800 	.word	0x40003800
 800525c:	40003400 	.word	0x40003400

08005260 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_I2S_DMAResume+0x18>
 8005274:	2302      	movs	r3, #2
 8005276:	e07d      	b.n	8005374 <HAL_I2S_DMAResume+0x114>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b03      	cmp	r3, #3
 800528a:	d108      	bne.n	800529e <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0202 	orr.w	r2, r2, #2
 800529a:	605a      	str	r2, [r3, #4]
 800529c:	e056      	b.n	800534c <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d108      	bne.n	80052bc <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	e047      	b.n	800534c <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	d141      	bne.n	800534c <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0203 	orr.w	r2, r2, #3
 80052d6:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a28      	ldr	r2, [pc, #160]	; (8005380 <HAL_I2S_DMAResume+0x120>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <HAL_I2S_DMAResume+0x86>
 80052e2:	4b28      	ldr	r3, [pc, #160]	; (8005384 <HAL_I2S_DMAResume+0x124>)
 80052e4:	e001      	b.n	80052ea <HAL_I2S_DMAResume+0x8a>
 80052e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4923      	ldr	r1, [pc, #140]	; (8005380 <HAL_I2S_DMAResume+0x120>)
 80052f2:	428b      	cmp	r3, r1
 80052f4:	d101      	bne.n	80052fa <HAL_I2S_DMAResume+0x9a>
 80052f6:	4b23      	ldr	r3, [pc, #140]	; (8005384 <HAL_I2S_DMAResume+0x124>)
 80052f8:	e001      	b.n	80052fe <HAL_I2S_DMAResume+0x9e>
 80052fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052fe:	f042 0203 	orr.w	r2, r2, #3
 8005302:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <HAL_I2S_DMAResume+0x120>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <HAL_I2S_DMAResume+0xb2>
 800530e:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <HAL_I2S_DMAResume+0x124>)
 8005310:	e001      	b.n	8005316 <HAL_I2S_DMAResume+0xb6>
 8005312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d115      	bne.n	800534c <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a16      	ldr	r2, [pc, #88]	; (8005380 <HAL_I2S_DMAResume+0x120>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d101      	bne.n	800532e <HAL_I2S_DMAResume+0xce>
 800532a:	4b16      	ldr	r3, [pc, #88]	; (8005384 <HAL_I2S_DMAResume+0x124>)
 800532c:	e001      	b.n	8005332 <HAL_I2S_DMAResume+0xd2>
 800532e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4911      	ldr	r1, [pc, #68]	; (8005380 <HAL_I2S_DMAResume+0x120>)
 800533a:	428b      	cmp	r3, r1
 800533c:	d101      	bne.n	8005342 <HAL_I2S_DMAResume+0xe2>
 800533e:	4b11      	ldr	r3, [pc, #68]	; (8005384 <HAL_I2S_DMAResume+0x124>)
 8005340:	e001      	b.n	8005346 <HAL_I2S_DMAResume+0xe6>
 8005342:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005346:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800534a:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005356:	2b00      	cmp	r3, #0
 8005358:	d107      	bne.n	800536a <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005368:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40003800 	.word	0x40003800
 8005384:	40003400 	.word	0x40003400

08005388 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800539c:	d004      	beq.n	80053a8 <HAL_I2S_DMAStop+0x20>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f040 80d1 	bne.w	800554a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00f      	beq.n	80053d0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fc fbeb 	bl	8001b90 <HAL_DMA_Abort>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c4:	f043 0208 	orr.w	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80053d0:	2364      	movs	r3, #100	; 0x64
 80053d2:	2201      	movs	r2, #1
 80053d4:	2102      	movs	r1, #2
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fb00 	bl	80059dc <I2S_WaitFlagStateUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	f043 0201 	orr.w	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80053fa:	2364      	movs	r3, #100	; 0x64
 80053fc:	2200      	movs	r2, #0
 80053fe:	2180      	movs	r1, #128	; 0x80
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 faeb 	bl	80059dc <I2S_WaitFlagStateUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00b      	beq.n	8005424 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005410:	f043 0201 	orr.w	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69da      	ldr	r2, [r3, #28]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005432:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0202 	bic.w	r2, r2, #2
 8005450:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b05      	cmp	r3, #5
 800545c:	f040 8165 	bne.w	800572a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00f      	beq.n	8005488 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	4618      	mov	r0, r3
 800546e:	f7fc fb8f 	bl	8001b90 <HAL_DMA_Abort>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547c:	f043 0208 	orr.w	r2, r3, #8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a8a      	ldr	r2, [pc, #552]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d101      	bne.n	8005496 <HAL_I2S_DMAStop+0x10e>
 8005492:	4b8a      	ldr	r3, [pc, #552]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 8005494:	e001      	b.n	800549a <HAL_I2S_DMAStop+0x112>
 8005496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4985      	ldr	r1, [pc, #532]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 80054a2:	428b      	cmp	r3, r1
 80054a4:	d101      	bne.n	80054aa <HAL_I2S_DMAStop+0x122>
 80054a6:	4b85      	ldr	r3, [pc, #532]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 80054a8:	e001      	b.n	80054ae <HAL_I2S_DMAStop+0x126>
 80054aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b2:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a7e      	ldr	r2, [pc, #504]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d101      	bne.n	80054c6 <HAL_I2S_DMAStop+0x13e>
 80054c2:	4b7e      	ldr	r3, [pc, #504]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 80054c4:	e001      	b.n	80054ca <HAL_I2S_DMAStop+0x142>
 80054c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a79      	ldr	r2, [pc, #484]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_I2S_DMAStop+0x154>
 80054d8:	4b78      	ldr	r3, [pc, #480]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 80054da:	e001      	b.n	80054e0 <HAL_I2S_DMAStop+0x158>
 80054dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a73      	ldr	r2, [pc, #460]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <HAL_I2S_DMAStop+0x16c>
 80054f0:	4b72      	ldr	r3, [pc, #456]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 80054f2:	e001      	b.n	80054f8 <HAL_I2S_DMAStop+0x170>
 80054f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	496e      	ldr	r1, [pc, #440]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 8005500:	428b      	cmp	r3, r1
 8005502:	d101      	bne.n	8005508 <HAL_I2S_DMAStop+0x180>
 8005504:	4b6d      	ldr	r3, [pc, #436]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 8005506:	e001      	b.n	800550c <HAL_I2S_DMAStop+0x184>
 8005508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10c      	bne.n	8005534 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005532:	e0fa      	b.n	800572a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5f      	ldr	r2, [pc, #380]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d101      	bne.n	8005542 <HAL_I2S_DMAStop+0x1ba>
 800553e:	4b5f      	ldr	r3, [pc, #380]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 8005540:	e001      	b.n	8005546 <HAL_I2S_DMAStop+0x1be>
 8005542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005546:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005548:	e0ef      	b.n	800572a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005552:	d005      	beq.n	8005560 <HAL_I2S_DMAStop+0x1d8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555c:	f040 80e5 	bne.w	800572a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00f      	beq.n	8005588 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556c:	4618      	mov	r0, r3
 800556e:	f7fc fb0f 	bl	8001b90 <HAL_DMA_Abort>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	f043 0208 	orr.w	r2, r3, #8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b05      	cmp	r3, #5
 8005592:	f040 809a 	bne.w	80056ca <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00f      	beq.n	80055be <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fc faf4 	bl	8001b90 <HAL_DMA_Abort>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b2:	f043 0208 	orr.w	r2, r3, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80055be:	f7fc f8a1 	bl	8001704 <HAL_GetTick>
 80055c2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80055c4:	e012      	b.n	80055ec <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80055c6:	f7fc f89d 	bl	8001704 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b64      	cmp	r3, #100	; 0x64
 80055d2:	d90b      	bls.n	80055ec <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d8:	f043 0201 	orr.w	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a31      	ldr	r2, [pc, #196]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d101      	bne.n	80055fa <HAL_I2S_DMAStop+0x272>
 80055f6:	4b31      	ldr	r3, [pc, #196]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 80055f8:	e001      	b.n	80055fe <HAL_I2S_DMAStop+0x276>
 80055fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b02      	cmp	r3, #2
 8005606:	d1de      	bne.n	80055c6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005608:	e012      	b.n	8005630 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800560a:	f7fc f87b 	bl	8001704 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b64      	cmp	r3, #100	; 0x64
 8005616:	d90b      	bls.n	8005630 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561c:	f043 0201 	orr.w	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a20      	ldr	r2, [pc, #128]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d101      	bne.n	800563e <HAL_I2S_DMAStop+0x2b6>
 800563a:	4b20      	ldr	r3, [pc, #128]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 800563c:	e001      	b.n	8005642 <HAL_I2S_DMAStop+0x2ba>
 800563e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005648:	2b80      	cmp	r3, #128	; 0x80
 800564a:	d0de      	beq.n	800560a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d101      	bne.n	800565a <HAL_I2S_DMAStop+0x2d2>
 8005656:	4b19      	ldr	r3, [pc, #100]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 8005658:	e001      	b.n	800565e <HAL_I2S_DMAStop+0x2d6>
 800565a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4914      	ldr	r1, [pc, #80]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 8005666:	428b      	cmp	r3, r1
 8005668:	d101      	bne.n	800566e <HAL_I2S_DMAStop+0x2e6>
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 800566c:	e001      	b.n	8005672 <HAL_I2S_DMAStop+0x2ea>
 800566e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005676:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a0d      	ldr	r2, [pc, #52]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d101      	bne.n	800568a <HAL_I2S_DMAStop+0x302>
 8005686:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 8005688:	e001      	b.n	800568e <HAL_I2S_DMAStop+0x306>
 800568a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d101      	bne.n	80056a2 <HAL_I2S_DMAStop+0x31a>
 800569e:	4b07      	ldr	r3, [pc, #28]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 80056a0:	e001      	b.n	80056a6 <HAL_I2S_DMAStop+0x31e>
 80056a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4902      	ldr	r1, [pc, #8]	; (80056b8 <HAL_I2S_DMAStop+0x330>)
 80056ae:	428b      	cmp	r3, r1
 80056b0:	d106      	bne.n	80056c0 <HAL_I2S_DMAStop+0x338>
 80056b2:	4b02      	ldr	r3, [pc, #8]	; (80056bc <HAL_I2S_DMAStop+0x334>)
 80056b4:	e006      	b.n	80056c4 <HAL_I2S_DMAStop+0x33c>
 80056b6:	bf00      	nop
 80056b8:	40003800 	.word	0x40003800
 80056bc:	40003400 	.word	0x40003400
 80056c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056c4:	f022 0202 	bic.w	r2, r2, #2
 80056c8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80056da:	2300      	movs	r3, #0
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005708:	d10c      	bne.n	8005724 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	77fb      	strb	r3, [r7, #31]
 8005722:	e002      	b.n	800572a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005732:	7ffb      	ldrb	r3, [r7, #31]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10e      	bne.n	8005798 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0202 	bic.w	r2, r2, #2
 8005788:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7fb f9d7 	bl	8000b4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f7fb f9db 	bl	8000b70 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80057ba:	bf00      	nop
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0203 	bic.w	r2, r2, #3
 80057de:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f8:	f043 0208 	orr.w	r2, r3, #8
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff ffa5 	bl	8005750 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005806:	bf00      	nop
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	881a      	ldrh	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	1c9a      	adds	r2, r3, #2
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10e      	bne.n	8005862 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005852:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fb f975 	bl	8000b4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	b292      	uxth	r2, r2
 800587e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	1c9a      	adds	r2, r3, #2
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10e      	bne.n	80058c0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff ff3e 	bl	800573c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80058c0:	bf00      	nop
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d13a      	bne.n	800595a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d109      	bne.n	8005902 <I2S_IRQHandler+0x3a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f8:	2b40      	cmp	r3, #64	; 0x40
 80058fa:	d102      	bne.n	8005902 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff ffb4 	bl	800586a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d126      	bne.n	800595a <I2S_IRQHandler+0x92>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b20      	cmp	r3, #32
 8005918:	d11f      	bne.n	800595a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005928:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594c:	f043 0202 	orr.w	r2, r3, #2
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff fefb 	bl	8005750 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b03      	cmp	r3, #3
 8005964:	d136      	bne.n	80059d4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b02      	cmp	r3, #2
 800596e:	d109      	bne.n	8005984 <I2S_IRQHandler+0xbc>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597a:	2b80      	cmp	r3, #128	; 0x80
 800597c:	d102      	bne.n	8005984 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ff45 	bl	800580e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b08      	cmp	r3, #8
 800598c:	d122      	bne.n	80059d4 <I2S_IRQHandler+0x10c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b20      	cmp	r3, #32
 800599a:	d11b      	bne.n	80059d4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059aa:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	f043 0204 	orr.w	r2, r3, #4
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff febe 	bl	8005750 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059d4:	bf00      	nop
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80059ec:	f7fb fe8a 	bl	8001704 <HAL_GetTick>
 80059f0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80059f2:	e018      	b.n	8005a26 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d014      	beq.n	8005a26 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80059fc:	f7fb fe82 	bl	8001704 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d902      	bls.n	8005a12 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e00f      	b.n	8005a46 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	bf0c      	ite	eq
 8005a36:	2301      	moveq	r3, #1
 8005a38:	2300      	movne	r3, #0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d1d7      	bne.n	80059f4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4aa2      	ldr	r2, [pc, #648]	; (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d101      	bne.n	8005a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005a6a:	4ba2      	ldr	r3, [pc, #648]	; (8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005a6c:	e001      	b.n	8005a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005a6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a9b      	ldr	r2, [pc, #620]	; (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d101      	bne.n	8005a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005a88:	4b9a      	ldr	r3, [pc, #616]	; (8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005a8a:	e001      	b.n	8005a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005a8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a9c:	d004      	beq.n	8005aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f040 8099 	bne.w	8005bda <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d107      	bne.n	8005ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f925 	bl	8005d0c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d107      	bne.n	8005adc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f9c8 	bl	8005e6c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d13a      	bne.n	8005b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d035      	beq.n	8005b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a7e      	ldr	r2, [pc, #504]	; (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d101      	bne.n	8005afe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005afa:	4b7e      	ldr	r3, [pc, #504]	; (8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005afc:	e001      	b.n	8005b02 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005afe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4979      	ldr	r1, [pc, #484]	; (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b0a:	428b      	cmp	r3, r1
 8005b0c:	d101      	bne.n	8005b12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005b0e:	4b79      	ldr	r3, [pc, #484]	; (8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b10:	e001      	b.n	8005b16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005b12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b1a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4e:	f043 0202 	orr.w	r2, r3, #2
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fdfa 	bl	8005750 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	f040 80be 	bne.w	8005ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80b8 	beq.w	8005ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a59      	ldr	r2, [pc, #356]	; (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d101      	bne.n	8005b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005b8e:	4b59      	ldr	r3, [pc, #356]	; (8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b90:	e001      	b.n	8005b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4954      	ldr	r1, [pc, #336]	; (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b9e:	428b      	cmp	r3, r1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005ba2:	4b54      	ldr	r3, [pc, #336]	; (8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ba4:	e001      	b.n	8005baa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005baa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60bb      	str	r3, [r7, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	60bb      	str	r3, [r7, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	f043 0204 	orr.w	r2, r3, #4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff fdbc 	bl	8005750 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bd8:	e084      	b.n	8005ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d107      	bne.n	8005bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f8be 	bl	8005d70 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d107      	bne.n	8005c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f8fd 	bl	8005e08 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d12f      	bne.n	8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d02a      	beq.n	8005c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c30:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2e      	ldr	r2, [pc, #184]	; (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d101      	bne.n	8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005c3c:	4b2d      	ldr	r3, [pc, #180]	; (8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c3e:	e001      	b.n	8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4929      	ldr	r1, [pc, #164]	; (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c4c:	428b      	cmp	r3, r1
 8005c4e:	d101      	bne.n	8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c52:	e001      	b.n	8005c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	f043 0202 	orr.w	r2, r3, #2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7ff fd6c 	bl	8005750 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d131      	bne.n	8005ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d02c      	beq.n	8005ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a17      	ldr	r2, [pc, #92]	; (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005c96:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c98:	e001      	b.n	8005c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4912      	ldr	r1, [pc, #72]	; (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ca6:	428b      	cmp	r3, r1
 8005ca8:	d101      	bne.n	8005cae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005cac:	e001      	b.n	8005cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cb6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005cc6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd4:	f043 0204 	orr.w	r2, r3, #4
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff fd37 	bl	8005750 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ce2:	e000      	b.n	8005ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ce4:	bf00      	nop
}
 8005ce6:	bf00      	nop
 8005ce8:	3720      	adds	r7, #32
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40003800 	.word	0x40003800
 8005cf4:	40003400 	.word	0x40003400

08005cf8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	1c99      	adds	r1, r3, #2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6251      	str	r1, [r2, #36]	; 0x24
 8005d1e:	881a      	ldrh	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d113      	bne.n	8005d66 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff ffc9 	bl	8005cf8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d66:	bf00      	nop
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	1c99      	adds	r1, r3, #2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6251      	str	r1, [r2, #36]	; 0x24
 8005d82:	8819      	ldrh	r1, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <I2SEx_TxISR_I2SExt+0x90>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d101      	bne.n	8005d92 <I2SEx_TxISR_I2SExt+0x22>
 8005d8e:	4b1d      	ldr	r3, [pc, #116]	; (8005e04 <I2SEx_TxISR_I2SExt+0x94>)
 8005d90:	e001      	b.n	8005d96 <I2SEx_TxISR_I2SExt+0x26>
 8005d92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d96:	460a      	mov	r2, r1
 8005d98:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d121      	bne.n	8005df6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <I2SEx_TxISR_I2SExt+0x90>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d101      	bne.n	8005dc0 <I2SEx_TxISR_I2SExt+0x50>
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <I2SEx_TxISR_I2SExt+0x94>)
 8005dbe:	e001      	b.n	8005dc4 <I2SEx_TxISR_I2SExt+0x54>
 8005dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	490d      	ldr	r1, [pc, #52]	; (8005e00 <I2SEx_TxISR_I2SExt+0x90>)
 8005dcc:	428b      	cmp	r3, r1
 8005dce:	d101      	bne.n	8005dd4 <I2SEx_TxISR_I2SExt+0x64>
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <I2SEx_TxISR_I2SExt+0x94>)
 8005dd2:	e001      	b.n	8005dd8 <I2SEx_TxISR_I2SExt+0x68>
 8005dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ddc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff ff81 	bl	8005cf8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40003800 	.word	0x40003800
 8005e04:	40003400 	.word	0x40003400

08005e08 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68d8      	ldr	r0, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	1c99      	adds	r1, r3, #2
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005e20:	b282      	uxth	r2, r0
 8005e22:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d113      	bne.n	8005e64 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e4a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff ff4a 	bl	8005cf8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a20      	ldr	r2, [pc, #128]	; (8005efc <I2SEx_RxISR_I2SExt+0x90>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d101      	bne.n	8005e82 <I2SEx_RxISR_I2SExt+0x16>
 8005e7e:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <I2SEx_RxISR_I2SExt+0x94>)
 8005e80:	e001      	b.n	8005e86 <I2SEx_RxISR_I2SExt+0x1a>
 8005e82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e86:	68d8      	ldr	r0, [r3, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	1c99      	adds	r1, r3, #2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005e92:	b282      	uxth	r2, r0
 8005e94:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d121      	bne.n	8005ef2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a12      	ldr	r2, [pc, #72]	; (8005efc <I2SEx_RxISR_I2SExt+0x90>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d101      	bne.n	8005ebc <I2SEx_RxISR_I2SExt+0x50>
 8005eb8:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <I2SEx_RxISR_I2SExt+0x94>)
 8005eba:	e001      	b.n	8005ec0 <I2SEx_RxISR_I2SExt+0x54>
 8005ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	490d      	ldr	r1, [pc, #52]	; (8005efc <I2SEx_RxISR_I2SExt+0x90>)
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	d101      	bne.n	8005ed0 <I2SEx_RxISR_I2SExt+0x64>
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <I2SEx_RxISR_I2SExt+0x94>)
 8005ece:	e001      	b.n	8005ed4 <I2SEx_RxISR_I2SExt+0x68>
 8005ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ed4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ed8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff ff03 	bl	8005cf8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40003800 	.word	0x40003800
 8005f00:	40003400 	.word	0x40003400

08005f04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e25b      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d075      	beq.n	800600e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f22:	4ba3      	ldr	r3, [pc, #652]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d00c      	beq.n	8005f48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2e:	4ba0      	ldr	r3, [pc, #640]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d112      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f3a:	4b9d      	ldr	r3, [pc, #628]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f46:	d10b      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f48:	4b99      	ldr	r3, [pc, #612]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d05b      	beq.n	800600c <HAL_RCC_OscConfig+0x108>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d157      	bne.n	800600c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e236      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f68:	d106      	bne.n	8005f78 <HAL_RCC_OscConfig+0x74>
 8005f6a:	4b91      	ldr	r3, [pc, #580]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a90      	ldr	r2, [pc, #576]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e01d      	b.n	8005fb4 <HAL_RCC_OscConfig+0xb0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x98>
 8005f82:	4b8b      	ldr	r3, [pc, #556]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a8a      	ldr	r2, [pc, #552]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a87      	ldr	r2, [pc, #540]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCC_OscConfig+0xb0>
 8005f9c:	4b84      	ldr	r3, [pc, #528]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a83      	ldr	r2, [pc, #524]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	4b81      	ldr	r3, [pc, #516]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a80      	ldr	r2, [pc, #512]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d013      	beq.n	8005fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbc:	f7fb fba2 	bl	8001704 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc4:	f7fb fb9e 	bl	8001704 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b64      	cmp	r3, #100	; 0x64
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e1fb      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0xc0>
 8005fe2:	e014      	b.n	800600e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe4:	f7fb fb8e 	bl	8001704 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fec:	f7fb fb8a 	bl	8001704 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b64      	cmp	r3, #100	; 0x64
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e1e7      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ffe:	4b6c      	ldr	r3, [pc, #432]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0xe8>
 800600a:	e000      	b.n	800600e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d063      	beq.n	80060e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800601a:	4b65      	ldr	r3, [pc, #404]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 030c 	and.w	r3, r3, #12
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006026:	4b62      	ldr	r3, [pc, #392]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800602e:	2b08      	cmp	r3, #8
 8006030:	d11c      	bne.n	800606c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006032:	4b5f      	ldr	r3, [pc, #380]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800603e:	4b5c      	ldr	r3, [pc, #368]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_RCC_OscConfig+0x152>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d001      	beq.n	8006056 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e1bb      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006056:	4b56      	ldr	r3, [pc, #344]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4952      	ldr	r1, [pc, #328]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006066:	4313      	orrs	r3, r2
 8006068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800606a:	e03a      	b.n	80060e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006074:	4b4f      	ldr	r3, [pc, #316]	; (80061b4 <HAL_RCC_OscConfig+0x2b0>)
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607a:	f7fb fb43 	bl	8001704 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006082:	f7fb fb3f 	bl	8001704 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e19c      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006094:	4b46      	ldr	r3, [pc, #280]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f0      	beq.n	8006082 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a0:	4b43      	ldr	r3, [pc, #268]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4940      	ldr	r1, [pc, #256]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	600b      	str	r3, [r1, #0]
 80060b4:	e015      	b.n	80060e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b6:	4b3f      	ldr	r3, [pc, #252]	; (80061b4 <HAL_RCC_OscConfig+0x2b0>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fb fb22 	bl	8001704 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060c4:	f7fb fb1e 	bl	8001704 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e17b      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d6:	4b36      	ldr	r3, [pc, #216]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d030      	beq.n	8006150 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f6:	4b30      	ldr	r3, [pc, #192]	; (80061b8 <HAL_RCC_OscConfig+0x2b4>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fb fb02 	bl	8001704 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006104:	f7fb fafe 	bl	8001704 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e15b      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006116:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x200>
 8006122:	e015      	b.n	8006150 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006124:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <HAL_RCC_OscConfig+0x2b4>)
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612a:	f7fb faeb 	bl	8001704 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006132:	f7fb fae7 	bl	8001704 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e144      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006144:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1f0      	bne.n	8006132 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80a0 	beq.w	800629e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006162:	4b13      	ldr	r3, [pc, #76]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10f      	bne.n	800618e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	4a0e      	ldr	r2, [pc, #56]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	6413      	str	r3, [r2, #64]	; 0x40
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800618a:	2301      	movs	r3, #1
 800618c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <HAL_RCC_OscConfig+0x2b8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006196:	2b00      	cmp	r3, #0
 8006198:	d121      	bne.n	80061de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800619a:	4b08      	ldr	r3, [pc, #32]	; (80061bc <HAL_RCC_OscConfig+0x2b8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a07      	ldr	r2, [pc, #28]	; (80061bc <HAL_RCC_OscConfig+0x2b8>)
 80061a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061a6:	f7fb faad 	bl	8001704 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ac:	e011      	b.n	80061d2 <HAL_RCC_OscConfig+0x2ce>
 80061ae:	bf00      	nop
 80061b0:	40023800 	.word	0x40023800
 80061b4:	42470000 	.word	0x42470000
 80061b8:	42470e80 	.word	0x42470e80
 80061bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c0:	f7fb faa0 	bl	8001704 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e0fd      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d2:	4b81      	ldr	r3, [pc, #516]	; (80063d8 <HAL_RCC_OscConfig+0x4d4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d106      	bne.n	80061f4 <HAL_RCC_OscConfig+0x2f0>
 80061e6:	4b7d      	ldr	r3, [pc, #500]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 80061e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ea:	4a7c      	ldr	r2, [pc, #496]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 80061ec:	f043 0301 	orr.w	r3, r3, #1
 80061f0:	6713      	str	r3, [r2, #112]	; 0x70
 80061f2:	e01c      	b.n	800622e <HAL_RCC_OscConfig+0x32a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	2b05      	cmp	r3, #5
 80061fa:	d10c      	bne.n	8006216 <HAL_RCC_OscConfig+0x312>
 80061fc:	4b77      	ldr	r3, [pc, #476]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 80061fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006200:	4a76      	ldr	r2, [pc, #472]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006202:	f043 0304 	orr.w	r3, r3, #4
 8006206:	6713      	str	r3, [r2, #112]	; 0x70
 8006208:	4b74      	ldr	r3, [pc, #464]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620c:	4a73      	ldr	r2, [pc, #460]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	6713      	str	r3, [r2, #112]	; 0x70
 8006214:	e00b      	b.n	800622e <HAL_RCC_OscConfig+0x32a>
 8006216:	4b71      	ldr	r3, [pc, #452]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621a:	4a70      	ldr	r2, [pc, #448]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	6713      	str	r3, [r2, #112]	; 0x70
 8006222:	4b6e      	ldr	r3, [pc, #440]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006226:	4a6d      	ldr	r2, [pc, #436]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006228:	f023 0304 	bic.w	r3, r3, #4
 800622c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d015      	beq.n	8006262 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006236:	f7fb fa65 	bl	8001704 <HAL_GetTick>
 800623a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800623c:	e00a      	b.n	8006254 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800623e:	f7fb fa61 	bl	8001704 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	f241 3288 	movw	r2, #5000	; 0x1388
 800624c:	4293      	cmp	r3, r2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e0bc      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006254:	4b61      	ldr	r3, [pc, #388]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ee      	beq.n	800623e <HAL_RCC_OscConfig+0x33a>
 8006260:	e014      	b.n	800628c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006262:	f7fb fa4f 	bl	8001704 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006268:	e00a      	b.n	8006280 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800626a:	f7fb fa4b 	bl	8001704 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f241 3288 	movw	r2, #5000	; 0x1388
 8006278:	4293      	cmp	r3, r2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e0a6      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006280:	4b56      	ldr	r3, [pc, #344]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1ee      	bne.n	800626a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d105      	bne.n	800629e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006292:	4b52      	ldr	r3, [pc, #328]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	4a51      	ldr	r2, [pc, #324]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800629c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8092 	beq.w	80063cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a8:	4b4c      	ldr	r3, [pc, #304]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d05c      	beq.n	800636e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d141      	bne.n	8006340 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062bc:	4b48      	ldr	r3, [pc, #288]	; (80063e0 <HAL_RCC_OscConfig+0x4dc>)
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c2:	f7fb fa1f 	bl	8001704 <HAL_GetTick>
 80062c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c8:	e008      	b.n	80062dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ca:	f7fb fa1b 	bl	8001704 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e078      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062dc:	4b3f      	ldr	r3, [pc, #252]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f0      	bne.n	80062ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	019b      	lsls	r3, r3, #6
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	3b01      	subs	r3, #1
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	061b      	lsls	r3, r3, #24
 800630c:	4933      	ldr	r1, [pc, #204]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 800630e:	4313      	orrs	r3, r2
 8006310:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006312:	4b33      	ldr	r3, [pc, #204]	; (80063e0 <HAL_RCC_OscConfig+0x4dc>)
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006318:	f7fb f9f4 	bl	8001704 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006320:	f7fb f9f0 	bl	8001704 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e04d      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006332:	4b2a      	ldr	r3, [pc, #168]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0f0      	beq.n	8006320 <HAL_RCC_OscConfig+0x41c>
 800633e:	e045      	b.n	80063cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006340:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCC_OscConfig+0x4dc>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006346:	f7fb f9dd 	bl	8001704 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800634e:	f7fb f9d9 	bl	8001704 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e036      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006360:	4b1e      	ldr	r3, [pc, #120]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f0      	bne.n	800634e <HAL_RCC_OscConfig+0x44a>
 800636c:	e02e      	b.n	80063cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e029      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800637a:	4b18      	ldr	r3, [pc, #96]	; (80063dc <HAL_RCC_OscConfig+0x4d8>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	429a      	cmp	r2, r3
 800638c:	d11c      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006398:	429a      	cmp	r2, r3
 800639a:	d115      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063a2:	4013      	ands	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d10d      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d106      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40007000 	.word	0x40007000
 80063dc:	40023800 	.word	0x40023800
 80063e0:	42470060 	.word	0x42470060

080063e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0cc      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063f8:	4b68      	ldr	r3, [pc, #416]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d90c      	bls.n	8006420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b65      	ldr	r3, [pc, #404]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800640e:	4b63      	ldr	r3, [pc, #396]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e0b8      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d020      	beq.n	800646e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006438:	4b59      	ldr	r3, [pc, #356]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	4a58      	ldr	r2, [pc, #352]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800643e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006450:	4b53      	ldr	r3, [pc, #332]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	4a52      	ldr	r2, [pc, #328]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800645a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800645c:	4b50      	ldr	r3, [pc, #320]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	494d      	ldr	r1, [pc, #308]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d044      	beq.n	8006504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d107      	bne.n	8006492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006482:	4b47      	ldr	r3, [pc, #284]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d119      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e07f      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d003      	beq.n	80064a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d107      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a2:	4b3f      	ldr	r3, [pc, #252]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e06f      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b2:	4b3b      	ldr	r3, [pc, #236]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e067      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064c2:	4b37      	ldr	r3, [pc, #220]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f023 0203 	bic.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4934      	ldr	r1, [pc, #208]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064d4:	f7fb f916 	bl	8001704 <HAL_GetTick>
 80064d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064da:	e00a      	b.n	80064f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064dc:	f7fb f912 	bl	8001704 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e04f      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	4b2b      	ldr	r3, [pc, #172]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 020c 	and.w	r2, r3, #12
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	429a      	cmp	r2, r3
 8006502:	d1eb      	bne.n	80064dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006504:	4b25      	ldr	r3, [pc, #148]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d20c      	bcs.n	800652c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006512:	4b22      	ldr	r3, [pc, #136]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800651a:	4b20      	ldr	r3, [pc, #128]	; (800659c <HAL_RCC_ClockConfig+0x1b8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e032      	b.n	8006592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006538:	4b19      	ldr	r3, [pc, #100]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4916      	ldr	r1, [pc, #88]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	490e      	ldr	r1, [pc, #56]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	4313      	orrs	r3, r2
 8006568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800656a:	f000 f821 	bl	80065b0 <HAL_RCC_GetSysClockFreq>
 800656e:	4601      	mov	r1, r0
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	4a0a      	ldr	r2, [pc, #40]	; (80065a4 <HAL_RCC_ClockConfig+0x1c0>)
 800657c:	5cd3      	ldrb	r3, [r2, r3]
 800657e:	fa21 f303 	lsr.w	r3, r1, r3
 8006582:	4a09      	ldr	r2, [pc, #36]	; (80065a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006586:	4b09      	ldr	r3, [pc, #36]	; (80065ac <HAL_RCC_ClockConfig+0x1c8>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4618      	mov	r0, r3
 800658c:	f7fb f876 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	40023c00 	.word	0x40023c00
 80065a0:	40023800 	.word	0x40023800
 80065a4:	0800d940 	.word	0x0800d940
 80065a8:	20000000 	.word	0x20000000
 80065ac:	20000004 	.word	0x20000004

080065b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	2300      	movs	r3, #0
 80065c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065c6:	4b63      	ldr	r3, [pc, #396]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d007      	beq.n	80065e2 <HAL_RCC_GetSysClockFreq+0x32>
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d008      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x38>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f040 80b4 	bne.w	8006744 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065dc:	4b5e      	ldr	r3, [pc, #376]	; (8006758 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80065de:	60bb      	str	r3, [r7, #8]
       break;
 80065e0:	e0b3      	b.n	800674a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065e2:	4b5e      	ldr	r3, [pc, #376]	; (800675c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80065e4:	60bb      	str	r3, [r7, #8]
      break;
 80065e6:	e0b0      	b.n	800674a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065e8:	4b5a      	ldr	r3, [pc, #360]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065f2:	4b58      	ldr	r3, [pc, #352]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d04a      	beq.n	8006694 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065fe:	4b55      	ldr	r3, [pc, #340]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	099b      	lsrs	r3, r3, #6
 8006604:	f04f 0400 	mov.w	r4, #0
 8006608:	f240 11ff 	movw	r1, #511	; 0x1ff
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	ea03 0501 	and.w	r5, r3, r1
 8006614:	ea04 0602 	and.w	r6, r4, r2
 8006618:	4629      	mov	r1, r5
 800661a:	4632      	mov	r2, r6
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	f04f 0400 	mov.w	r4, #0
 8006624:	0154      	lsls	r4, r2, #5
 8006626:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800662a:	014b      	lsls	r3, r1, #5
 800662c:	4619      	mov	r1, r3
 800662e:	4622      	mov	r2, r4
 8006630:	1b49      	subs	r1, r1, r5
 8006632:	eb62 0206 	sbc.w	r2, r2, r6
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	f04f 0400 	mov.w	r4, #0
 800663e:	0194      	lsls	r4, r2, #6
 8006640:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006644:	018b      	lsls	r3, r1, #6
 8006646:	1a5b      	subs	r3, r3, r1
 8006648:	eb64 0402 	sbc.w	r4, r4, r2
 800664c:	f04f 0100 	mov.w	r1, #0
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	00e2      	lsls	r2, r4, #3
 8006656:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800665a:	00d9      	lsls	r1, r3, #3
 800665c:	460b      	mov	r3, r1
 800665e:	4614      	mov	r4, r2
 8006660:	195b      	adds	r3, r3, r5
 8006662:	eb44 0406 	adc.w	r4, r4, r6
 8006666:	f04f 0100 	mov.w	r1, #0
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	0262      	lsls	r2, r4, #9
 8006670:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006674:	0259      	lsls	r1, r3, #9
 8006676:	460b      	mov	r3, r1
 8006678:	4614      	mov	r4, r2
 800667a:	4618      	mov	r0, r3
 800667c:	4621      	mov	r1, r4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f04f 0400 	mov.w	r4, #0
 8006684:	461a      	mov	r2, r3
 8006686:	4623      	mov	r3, r4
 8006688:	f7f9 fd9e 	bl	80001c8 <__aeabi_uldivmod>
 800668c:	4603      	mov	r3, r0
 800668e:	460c      	mov	r4, r1
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e049      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006694:	4b2f      	ldr	r3, [pc, #188]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	099b      	lsrs	r3, r3, #6
 800669a:	f04f 0400 	mov.w	r4, #0
 800669e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	ea03 0501 	and.w	r5, r3, r1
 80066aa:	ea04 0602 	and.w	r6, r4, r2
 80066ae:	4629      	mov	r1, r5
 80066b0:	4632      	mov	r2, r6
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	f04f 0400 	mov.w	r4, #0
 80066ba:	0154      	lsls	r4, r2, #5
 80066bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066c0:	014b      	lsls	r3, r1, #5
 80066c2:	4619      	mov	r1, r3
 80066c4:	4622      	mov	r2, r4
 80066c6:	1b49      	subs	r1, r1, r5
 80066c8:	eb62 0206 	sbc.w	r2, r2, r6
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	f04f 0400 	mov.w	r4, #0
 80066d4:	0194      	lsls	r4, r2, #6
 80066d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80066da:	018b      	lsls	r3, r1, #6
 80066dc:	1a5b      	subs	r3, r3, r1
 80066de:	eb64 0402 	sbc.w	r4, r4, r2
 80066e2:	f04f 0100 	mov.w	r1, #0
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	00e2      	lsls	r2, r4, #3
 80066ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80066f0:	00d9      	lsls	r1, r3, #3
 80066f2:	460b      	mov	r3, r1
 80066f4:	4614      	mov	r4, r2
 80066f6:	195b      	adds	r3, r3, r5
 80066f8:	eb44 0406 	adc.w	r4, r4, r6
 80066fc:	f04f 0100 	mov.w	r1, #0
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	02a2      	lsls	r2, r4, #10
 8006706:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800670a:	0299      	lsls	r1, r3, #10
 800670c:	460b      	mov	r3, r1
 800670e:	4614      	mov	r4, r2
 8006710:	4618      	mov	r0, r3
 8006712:	4621      	mov	r1, r4
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f04f 0400 	mov.w	r4, #0
 800671a:	461a      	mov	r2, r3
 800671c:	4623      	mov	r3, r4
 800671e:	f7f9 fd53 	bl	80001c8 <__aeabi_uldivmod>
 8006722:	4603      	mov	r3, r0
 8006724:	460c      	mov	r4, r1
 8006726:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	0c1b      	lsrs	r3, r3, #16
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	3301      	adds	r3, #1
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006740:	60bb      	str	r3, [r7, #8]
      break;
 8006742:	e002      	b.n	800674a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006746:	60bb      	str	r3, [r7, #8]
      break;
 8006748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800674a:	68bb      	ldr	r3, [r7, #8]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006754:	40023800 	.word	0x40023800
 8006758:	00f42400 	.word	0x00f42400
 800675c:	007a1200 	.word	0x007a1200

08006760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006764:	4b03      	ldr	r3, [pc, #12]	; (8006774 <HAL_RCC_GetHCLKFreq+0x14>)
 8006766:	681b      	ldr	r3, [r3, #0]
}
 8006768:	4618      	mov	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20000000 	.word	0x20000000

08006778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800677c:	f7ff fff0 	bl	8006760 <HAL_RCC_GetHCLKFreq>
 8006780:	4601      	mov	r1, r0
 8006782:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	0a9b      	lsrs	r3, r3, #10
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	4a03      	ldr	r2, [pc, #12]	; (800679c <HAL_RCC_GetPCLK1Freq+0x24>)
 800678e:	5cd3      	ldrb	r3, [r2, r3]
 8006790:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006794:	4618      	mov	r0, r3
 8006796:	bd80      	pop	{r7, pc}
 8006798:	40023800 	.word	0x40023800
 800679c:	0800d950 	.word	0x0800d950

080067a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d105      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d035      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067c8:	4b62      	ldr	r3, [pc, #392]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067ce:	f7fa ff99 	bl	8001704 <HAL_GetTick>
 80067d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067d4:	e008      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067d6:	f7fa ff95 	bl	8001704 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e0b0      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067e8:	4b5b      	ldr	r3, [pc, #364]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f0      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	019a      	lsls	r2, r3, #6
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	071b      	lsls	r3, r3, #28
 8006800:	4955      	ldr	r1, [pc, #340]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006808:	4b52      	ldr	r3, [pc, #328]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800680e:	f7fa ff79 	bl	8001704 <HAL_GetTick>
 8006812:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006814:	e008      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006816:	f7fa ff75 	bl	8001704 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e090      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006828:	4b4b      	ldr	r3, [pc, #300]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0f0      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8083 	beq.w	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	4b44      	ldr	r3, [pc, #272]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	4a43      	ldr	r2, [pc, #268]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800684c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006850:	6413      	str	r3, [r2, #64]	; 0x40
 8006852:	4b41      	ldr	r3, [pc, #260]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800685e:	4b3f      	ldr	r3, [pc, #252]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a3e      	ldr	r2, [pc, #248]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006868:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800686a:	f7fa ff4b 	bl	8001704 <HAL_GetTick>
 800686e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006870:	e008      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006872:	f7fa ff47 	bl	8001704 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e062      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006884:	4b35      	ldr	r3, [pc, #212]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0f0      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006890:	4b31      	ldr	r3, [pc, #196]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006898:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d02f      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d028      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068ae:	4b2a      	ldr	r3, [pc, #168]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068b8:	4b29      	ldr	r3, [pc, #164]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068be:	4b28      	ldr	r3, [pc, #160]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068c4:	4a24      	ldr	r2, [pc, #144]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068ca:	4b23      	ldr	r3, [pc, #140]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d114      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068d6:	f7fa ff15 	bl	8001704 <HAL_GetTick>
 80068da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068dc:	e00a      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068de:	f7fa ff11 	bl	8001704 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d901      	bls.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e02a      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f4:	4b18      	ldr	r3, [pc, #96]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0ee      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690c:	d10d      	bne.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800690e:	4b12      	ldr	r3, [pc, #72]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800691e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006922:	490d      	ldr	r1, [pc, #52]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006924:	4313      	orrs	r3, r2
 8006926:	608b      	str	r3, [r1, #8]
 8006928:	e005      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800692a:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006930:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006934:	6093      	str	r3, [r2, #8]
 8006936:	4b08      	ldr	r3, [pc, #32]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006938:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006942:	4905      	ldr	r1, [pc, #20]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006944:	4313      	orrs	r3, r2
 8006946:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	42470068 	.word	0x42470068
 8006958:	40023800 	.word	0x40023800
 800695c:	40007000 	.word	0x40007000
 8006960:	42470e40 	.word	0x42470e40

08006964 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2203      	movs	r2, #3
 8006970:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006972:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006978:	099b      	lsrs	r3, r3, #6
 800697a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006982:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006988:	0f1b      	lsrs	r3, r3, #28
 800698a:	f003 0207 	and.w	r2, r3, #7
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006992:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800699a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80069ac:	bf00      	nop
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40023800 	.word	0x40023800

080069bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d13d      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80069da:	4b22      	ldr	r3, [pc, #136]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069e2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d004      	beq.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d12f      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80069ee:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80069f0:	617b      	str	r3, [r7, #20]
          break;
 80069f2:	e02f      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80069f4:	4b1b      	ldr	r3, [pc, #108]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a00:	d108      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a02:	4b18      	ldr	r3, [pc, #96]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a0a:	4a18      	ldr	r2, [pc, #96]	; (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	e007      	b.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a14:	4b13      	ldr	r3, [pc, #76]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a1c:	4a14      	ldr	r2, [pc, #80]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a22:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a2a:	099b      	lsrs	r3, r3, #6
 8006a2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	fb02 f303 	mul.w	r3, r2, r3
 8006a36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006a38:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3e:	0f1b      	lsrs	r3, r3, #28
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4a:	617b      	str	r3, [r7, #20]
          break;
 8006a4c:	e002      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]
          break;
 8006a52:	bf00      	nop
        }
      }
      break;
 8006a54:	bf00      	nop
    }
  }
  return frequency;
 8006a56:	697b      	ldr	r3, [r7, #20]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	40023800 	.word	0x40023800
 8006a68:	00bb8000 	.word	0x00bb8000
 8006a6c:	007a1200 	.word	0x007a1200
 8006a70:	00f42400 	.word	0x00f42400

08006a74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a74:	b084      	sub	sp, #16
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	f107 001c 	add.w	r0, r7, #28
 8006a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d122      	bne.n	8006ad2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d105      	bne.n	8006ac6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f94a 	bl	8006d60 <USB_CoreReset>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
 8006ad0:	e01a      	b.n	8006b08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f93e 	bl	8006d60 <USB_CoreReset>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38
 8006afa:	e005      	b.n	8006b08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d10b      	bne.n	8006b26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f043 0206 	orr.w	r2, r3, #6
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f043 0220 	orr.w	r2, r3, #32
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b32:	b004      	add	sp, #16
 8006b34:	4770      	bx	lr

08006b36 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f043 0201 	orr.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f023 0201 	bic.w	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d106      	bne.n	8006ba6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	60da      	str	r2, [r3, #12]
 8006ba4:	e00b      	b.n	8006bbe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	60da      	str	r2, [r3, #12]
 8006bb8:	e001      	b.n	8006bbe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e003      	b.n	8006bc6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006bbe:	2032      	movs	r0, #50	; 0x32
 8006bc0:	f7fa fdac 	bl	800171c <HAL_Delay>

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	019b      	lsls	r3, r3, #6
 8006be2:	f043 0220 	orr.w	r2, r3, #32
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <USB_FlushTxFifo+0x48>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d901      	bls.n	8006bfc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e006      	b.n	8006c0a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d0f0      	beq.n	8006bea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	00030d40 	.word	0x00030d40

08006c1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2210      	movs	r2, #16
 8006c2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4a09      	ldr	r2, [pc, #36]	; (8006c5c <USB_FlushRxFifo+0x40>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d901      	bls.n	8006c40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e006      	b.n	8006c4e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f003 0310 	and.w	r3, r3, #16
 8006c48:	2b10      	cmp	r3, #16
 8006c4a:	d0f0      	beq.n	8006c2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	00030d40 	.word	0x00030d40

08006c60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	; 0x24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	460b      	mov	r3, r1
 8006c70:	71fb      	strb	r3, [r7, #7]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d11a      	bne.n	8006cbc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c86:	88bb      	ldrh	r3, [r7, #4]
 8006c88:	3303      	adds	r3, #3
 8006c8a:	089b      	lsrs	r3, r3, #2
 8006c8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	e00f      	b.n	8006cb4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	031a      	lsls	r2, r3, #12
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	3304      	adds	r3, #4
 8006cac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	61bb      	str	r3, [r7, #24]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d3eb      	bcc.n	8006c94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3724      	adds	r7, #36	; 0x24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b089      	sub	sp, #36	; 0x24
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006ce0:	88fb      	ldrh	r3, [r7, #6]
 8006ce2:	3303      	adds	r3, #3
 8006ce4:	089b      	lsrs	r3, r3, #2
 8006ce6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	e00b      	b.n	8006d06 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	3301      	adds	r3, #1
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d3ef      	bcc.n	8006cee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006d0e:	69fb      	ldr	r3, [r7, #28]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3724      	adds	r7, #36	; 0x24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4013      	ands	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d34:	68fb      	ldr	r3, [r7, #12]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
	...

08006d60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a13      	ldr	r2, [pc, #76]	; (8006dc4 <USB_CoreReset+0x64>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e01b      	b.n	8006db6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	daf2      	bge.n	8006d6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f043 0201 	orr.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4a09      	ldr	r2, [pc, #36]	; (8006dc4 <USB_CoreReset+0x64>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d901      	bls.n	8006da8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e006      	b.n	8006db6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d0f0      	beq.n	8006d96 <USB_CoreReset+0x36>

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	00030d40 	.word	0x00030d40

08006dc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dc8:	b084      	sub	sp, #16
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	f107 001c 	add.w	r0, r7, #28
 8006dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006de4:	461a      	mov	r2, r3
 8006de6:	2300      	movs	r3, #0
 8006de8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d018      	beq.n	8006e4c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d10a      	bne.n	8006e36 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e2e:	f043 0304 	orr.w	r3, r3, #4
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	e014      	b.n	8006e60 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e44:	f023 0304 	bic.w	r3, r3, #4
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e009      	b.n	8006e60 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e5a:	f023 0304 	bic.w	r3, r3, #4
 8006e5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006e60:	2110      	movs	r1, #16
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff feb4 	bl	8006bd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff fed7 	bl	8006c1c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	e015      	b.n	8006ea0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e80:	461a      	mov	r2, r3
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e94:	461a      	mov	r2, r3
 8006e96:	2300      	movs	r3, #0
 8006e98:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d3e5      	bcc.n	8006e74 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f8ac 	bl	8007008 <USB_DriveVbus>

  HAL_Delay(200U);
 8006eb0:	20c8      	movs	r0, #200	; 0xc8
 8006eb2:	f7fa fc33 	bl	800171c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a14      	ldr	r2, [pc, #80]	; (8006f2c <USB_HostInit+0x164>)
 8006edc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a13      	ldr	r2, [pc, #76]	; (8006f30 <USB_HostInit+0x168>)
 8006ee2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006ee6:	e009      	b.n	8006efc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2280      	movs	r2, #128	; 0x80
 8006eec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a10      	ldr	r2, [pc, #64]	; (8006f34 <USB_HostInit+0x16c>)
 8006ef2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a10      	ldr	r2, [pc, #64]	; (8006f38 <USB_HostInit+0x170>)
 8006ef8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d105      	bne.n	8006f0e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	f043 0210 	orr.w	r2, r3, #16
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699a      	ldr	r2, [r3, #24]
 8006f12:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <USB_HostInit+0x174>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f26:	b004      	add	sp, #16
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	01000200 	.word	0x01000200
 8006f30:	00e00300 	.word	0x00e00300
 8006f34:	00600080 	.word	0x00600080
 8006f38:	004000e0 	.word	0x004000e0
 8006f3c:	a3200008 	.word	0xa3200008

08006f40 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f5e:	f023 0303 	bic.w	r3, r3, #3
 8006f62:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d107      	bne.n	8006f92 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006f8e:	6053      	str	r3, [r2, #4]
 8006f90:	e009      	b.n	8006fa6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006f92:	78fb      	ldrb	r3, [r7, #3]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d106      	bne.n	8006fa6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f241 7370 	movw	r3, #6000	; 0x1770
 8006fa4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006fd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006fe4:	2064      	movs	r0, #100	; 0x64
 8006fe6:	f7fa fb99 	bl	800171c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ff6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ff8:	200a      	movs	r0, #10
 8006ffa:	f7fa fb8f 	bl	800171c <HAL_Delay>

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800702c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <USB_DriveVbus+0x44>
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d106      	bne.n	800704c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007046:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800704a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007056:	d109      	bne.n	800706c <USB_DriveVbus+0x64>
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800706a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	0c5b      	lsrs	r3, r3, #17
 8007098:	f003 0303 	and.w	r3, r3, #3
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	b29b      	uxth	r3, r3
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
	...

080070cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	4608      	mov	r0, r1
 80070d6:	4611      	mov	r1, r2
 80070d8:	461a      	mov	r2, r3
 80070da:	4603      	mov	r3, r0
 80070dc:	70fb      	strb	r3, [r7, #3]
 80070de:	460b      	mov	r3, r1
 80070e0:	70bb      	strb	r3, [r7, #2]
 80070e2:	4613      	mov	r3, r2
 80070e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fa:	461a      	mov	r2, r3
 80070fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007100:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007102:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007106:	2b03      	cmp	r3, #3
 8007108:	d87e      	bhi.n	8007208 <USB_HC_Init+0x13c>
 800710a:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <USB_HC_Init+0x44>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007121 	.word	0x08007121
 8007114:	080071cb 	.word	0x080071cb
 8007118:	08007121 	.word	0x08007121
 800711c:	0800718d 	.word	0x0800718d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4413      	add	r3, r2
 8007128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712c:	461a      	mov	r2, r3
 800712e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007132:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007134:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007138:	2b00      	cmp	r3, #0
 800713a:	da10      	bge.n	800715e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4413      	add	r3, r2
 8007144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	78fa      	ldrb	r2, [r7, #3]
 800714c:	0151      	lsls	r1, r2, #5
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	440a      	add	r2, r1
 8007152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800715a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800715c:	e057      	b.n	800720e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007166:	2b00      	cmp	r3, #0
 8007168:	d051      	beq.n	800720e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	4413      	add	r3, r2
 8007172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	78fa      	ldrb	r2, [r7, #3]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	440a      	add	r2, r1
 8007180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007184:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007188:	60d3      	str	r3, [r2, #12]
      break;
 800718a:	e040      	b.n	800720e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4413      	add	r3, r2
 8007194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007198:	461a      	mov	r2, r3
 800719a:	f240 639d 	movw	r3, #1693	; 0x69d
 800719e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80071a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	da34      	bge.n	8007212 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	78fa      	ldrb	r2, [r7, #3]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80071c8:	e023      	b.n	8007212 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d6:	461a      	mov	r2, r3
 80071d8:	f240 2325 	movw	r3, #549	; 0x225
 80071dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80071de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	da17      	bge.n	8007216 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	78fa      	ldrb	r2, [r7, #3]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007200:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007204:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007206:	e006      	b.n	8007216 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	75fb      	strb	r3, [r7, #23]
      break;
 800720c:	e004      	b.n	8007218 <USB_HC_Init+0x14c>
      break;
 800720e:	bf00      	nop
 8007210:	e002      	b.n	8007218 <USB_HC_Init+0x14c>
      break;
 8007212:	bf00      	nop
 8007214:	e000      	b.n	8007218 <USB_HC_Init+0x14c>
      break;
 8007216:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	2101      	movs	r1, #1
 8007228:	fa01 f303 	lsl.w	r3, r1, r3
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007232:	4313      	orrs	r3, r2
 8007234:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007242:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007246:	2b00      	cmp	r3, #0
 8007248:	da03      	bge.n	8007252 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800724a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	e001      	b.n	8007256 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007256:	f897 3020 	ldrb.w	r3, [r7, #32]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d103      	bne.n	8007266 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800725e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	e001      	b.n	800726a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800726a:	787b      	ldrb	r3, [r7, #1]
 800726c:	059b      	lsls	r3, r3, #22
 800726e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007272:	78bb      	ldrb	r3, [r7, #2]
 8007274:	02db      	lsls	r3, r3, #11
 8007276:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800727a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800727c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007280:	049b      	lsls	r3, r3, #18
 8007282:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007286:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007288:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800728a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800728e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	0159      	lsls	r1, r3, #5
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	440b      	add	r3, r1
 800729c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072a6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80072a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d10f      	bne.n	80072d0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	0151      	lsls	r1, r2, #5
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	440a      	add	r2, r1
 80072c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072ce:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop

080072e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	; 0x30
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	4613      	mov	r3, r2
 80072ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	785b      	ldrb	r3, [r3, #1]
 80072f6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80072f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072fc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007306:	2b00      	cmp	r3, #0
 8007308:	d028      	beq.n	800735c <USB_HC_StartXfer+0x7c>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	791b      	ldrb	r3, [r3, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d124      	bne.n	800735c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10b      	bne.n	8007330 <USB_HC_StartXfer+0x50>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	795b      	ldrb	r3, [r3, #5]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d107      	bne.n	8007330 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	4619      	mov	r1, r3
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 fa30 	bl	800778c <USB_DoPing>
      return HAL_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	e114      	b.n	800755a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d112      	bne.n	800735c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	4413      	add	r3, r2
 800733e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	6a3a      	ldr	r2, [r7, #32]
 800734a:	440a      	add	r2, r1
 800734c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007350:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007354:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2200      	movs	r2, #0
 800735a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d018      	beq.n	8007396 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	8912      	ldrh	r2, [r2, #8]
 800736c:	4413      	add	r3, r2
 800736e:	3b01      	subs	r3, #1
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	8912      	ldrh	r2, [r2, #8]
 8007374:	fbb3 f3f2 	udiv	r3, r3, r2
 8007378:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800737a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800737c:	8b7b      	ldrh	r3, [r7, #26]
 800737e:	429a      	cmp	r2, r3
 8007380:	d90b      	bls.n	800739a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8007382:	8b7b      	ldrh	r3, [r7, #26]
 8007384:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007386:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	8912      	ldrh	r2, [r2, #8]
 800738c:	fb02 f203 	mul.w	r2, r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	611a      	str	r2, [r3, #16]
 8007394:	e001      	b.n	800739a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007396:	2301      	movs	r3, #1
 8007398:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	78db      	ldrb	r3, [r3, #3]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d006      	beq.n	80073b0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80073a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	8912      	ldrh	r2, [r2, #8]
 80073a8:	fb02 f203 	mul.w	r2, r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80073b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073ba:	04d9      	lsls	r1, r3, #19
 80073bc:	4b69      	ldr	r3, [pc, #420]	; (8007564 <USB_HC_StartXfer+0x284>)
 80073be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80073c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	7a9b      	ldrb	r3, [r3, #10]
 80073c6:	075b      	lsls	r3, r3, #29
 80073c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80073cc:	69f9      	ldr	r1, [r7, #28]
 80073ce:	0148      	lsls	r0, r1, #5
 80073d0:	6a39      	ldr	r1, [r7, #32]
 80073d2:	4401      	add	r1, r0
 80073d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80073d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80073da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d009      	beq.n	80073f6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	68d9      	ldr	r1, [r3, #12]
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f2:	460a      	mov	r2, r1
 80073f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	bf0c      	ite	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	2300      	movne	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	4413      	add	r3, r2
 8007416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69fa      	ldr	r2, [r7, #28]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	6a3a      	ldr	r2, [r7, #32]
 8007422:	440a      	add	r2, r1
 8007424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007428:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800742c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	4413      	add	r3, r2
 8007436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	7e7b      	ldrb	r3, [r7, #25]
 800743e:	075b      	lsls	r3, r3, #29
 8007440:	69f9      	ldr	r1, [r7, #28]
 8007442:	0148      	lsls	r0, r1, #5
 8007444:	6a39      	ldr	r1, [r7, #32]
 8007446:	4401      	add	r1, r0
 8007448:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800744c:	4313      	orrs	r3, r2
 800744e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	4413      	add	r3, r2
 8007458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a42      	ldr	r2, [pc, #264]	; (8007568 <USB_HC_StartXfer+0x288>)
 8007460:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007462:	4b41      	ldr	r3, [pc, #260]	; (8007568 <USB_HC_StartXfer+0x288>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800746a:	4a3f      	ldr	r2, [pc, #252]	; (8007568 <USB_HC_StartXfer+0x288>)
 800746c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	78db      	ldrb	r3, [r3, #3]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d006      	beq.n	8007484 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007476:	4b3c      	ldr	r3, [pc, #240]	; (8007568 <USB_HC_StartXfer+0x288>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800747e:	4a3a      	ldr	r2, [pc, #232]	; (8007568 <USB_HC_StartXfer+0x288>)
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e005      	b.n	8007490 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007484:	4b38      	ldr	r3, [pc, #224]	; (8007568 <USB_HC_StartXfer+0x288>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800748c:	4a36      	ldr	r2, [pc, #216]	; (8007568 <USB_HC_StartXfer+0x288>)
 800748e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007490:	4b35      	ldr	r3, [pc, #212]	; (8007568 <USB_HC_StartXfer+0x288>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007498:	4a33      	ldr	r2, [pc, #204]	; (8007568 <USB_HC_StartXfer+0x288>)
 800749a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a8:	461a      	mov	r2, r3
 80074aa:	4b2f      	ldr	r3, [pc, #188]	; (8007568 <USB_HC_StartXfer+0x288>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	e04f      	b.n	800755a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	78db      	ldrb	r3, [r3, #3]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d14a      	bne.n	8007558 <USB_HC_StartXfer+0x278>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d046      	beq.n	8007558 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	79db      	ldrb	r3, [r3, #7]
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d830      	bhi.n	8007534 <USB_HC_StartXfer+0x254>
 80074d2:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <USB_HC_StartXfer+0x1f8>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	080074e9 	.word	0x080074e9
 80074dc:	0800750d 	.word	0x0800750d
 80074e0:	080074e9 	.word	0x080074e9
 80074e4:	0800750d 	.word	0x0800750d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	3303      	adds	r3, #3
 80074ee:	089b      	lsrs	r3, r3, #2
 80074f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80074f2:	8afa      	ldrh	r2, [r7, #22]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d91c      	bls.n	8007538 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f043 0220 	orr.w	r2, r3, #32
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	619a      	str	r2, [r3, #24]
        }
        break;
 800750a:	e015      	b.n	8007538 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	3303      	adds	r3, #3
 8007512:	089b      	lsrs	r3, r3, #2
 8007514:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007516:	8afa      	ldrh	r2, [r7, #22]
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	b29b      	uxth	r3, r3
 8007522:	429a      	cmp	r2, r3
 8007524:	d90a      	bls.n	800753c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	619a      	str	r2, [r3, #24]
        }
        break;
 8007532:	e003      	b.n	800753c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007534:	bf00      	nop
 8007536:	e002      	b.n	800753e <USB_HC_StartXfer+0x25e>
        break;
 8007538:	bf00      	nop
 800753a:	e000      	b.n	800753e <USB_HC_StartXfer+0x25e>
        break;
 800753c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	68d9      	ldr	r1, [r3, #12]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	785a      	ldrb	r2, [r3, #1]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	b298      	uxth	r0, r3
 800754c:	2300      	movs	r3, #0
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	4603      	mov	r3, r0
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7ff fb84 	bl	8006c60 <USB_WritePacket>
  }

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3728      	adds	r7, #40	; 0x28
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	1ff80000 	.word	0x1ff80000
 8007568:	2000134c 	.word	0x2000134c

0800756c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	b29b      	uxth	r3, r3
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800758e:	b480      	push	{r7}
 8007590:	b087      	sub	sp, #28
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	0c9b      	lsrs	r3, r3, #18
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <USB_HC_Halt+0x3a>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d16c      	bne.n	80076a2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075e6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d143      	bne.n	800767c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	0151      	lsls	r1, r2, #5
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	440a      	add	r2, r1
 800760a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800760e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007612:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4413      	add	r3, r2
 800761c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	0151      	lsls	r1, r2, #5
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	440a      	add	r2, r1
 800762a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800762e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007632:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	4413      	add	r3, r2
 800763c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	440a      	add	r2, r1
 800764a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800764e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007652:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	3301      	adds	r3, #1
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007660:	d81d      	bhi.n	800769e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	4413      	add	r3, r2
 800766a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007678:	d0ec      	beq.n	8007654 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800767a:	e080      	b.n	800777e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	4413      	add	r3, r2
 8007684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	440a      	add	r2, r1
 8007692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800769a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800769c:	e06f      	b.n	800777e <USB_HC_Halt+0x1f0>
          break;
 800769e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076a0:	e06d      	b.n	800777e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	0151      	lsls	r1, r2, #5
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	440a      	add	r2, r1
 80076b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076c0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d143      	bne.n	800775a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	0151      	lsls	r1, r2, #5
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	440a      	add	r2, r1
 80076e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076f0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	0151      	lsls	r1, r2, #5
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	440a      	add	r2, r1
 8007708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800770c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007710:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	4413      	add	r3, r2
 800771a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	440a      	add	r2, r1
 8007728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800772c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007730:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	3301      	adds	r3, #1
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800773e:	d81d      	bhi.n	800777c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	4413      	add	r3, r2
 8007748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007756:	d0ec      	beq.n	8007732 <USB_HC_Halt+0x1a4>
 8007758:	e011      	b.n	800777e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	4413      	add	r3, r2
 8007762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	440a      	add	r2, r1
 8007770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	e000      	b.n	800777e <USB_HC_Halt+0x1f0>
          break;
 800777c:	bf00      	nop
    }
  }

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80077a0:	2301      	movs	r3, #1
 80077a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	04da      	lsls	r2, r3, #19
 80077a8:	4b15      	ldr	r3, [pc, #84]	; (8007800 <USB_DoPing+0x74>)
 80077aa:	4013      	ands	r3, r2
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ea:	461a      	mov	r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	1ff80000 	.word	0x1ff80000

08007804 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff f99f 	bl	8006b58 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800781a:	2110      	movs	r1, #16
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff f9d7 	bl	8006bd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff f9fa 	bl	8006c1c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007828:	2300      	movs	r3, #0
 800782a:	613b      	str	r3, [r7, #16]
 800782c:	e01f      	b.n	800786e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	4413      	add	r3, r2
 8007836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007844:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800784c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007854:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007862:	461a      	mov	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	3301      	adds	r3, #1
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b0f      	cmp	r3, #15
 8007872:	d9dc      	bls.n	800782e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007874:	2300      	movs	r3, #0
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	e034      	b.n	80078e4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4413      	add	r3, r2
 8007882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007890:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007898:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ae:	461a      	mov	r2, r3
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	3301      	adds	r3, #1
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078c0:	d80c      	bhi.n	80078dc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d8:	d0ec      	beq.n	80078b4 <USB_StopHost+0xb0>
 80078da:	e000      	b.n	80078de <USB_StopHost+0xda>
        break;
 80078dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	3301      	adds	r3, #1
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b0f      	cmp	r3, #15
 80078e8:	d9c7      	bls.n	800787a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f0:	461a      	mov	r2, r3
 80078f2:	f04f 33ff 	mov.w	r3, #4294967295
 80078f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f04f 32ff 	mov.w	r2, #4294967295
 80078fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff f918 	bl	8006b36 <USB_EnableGlobalInt>

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007914:	4904      	ldr	r1, [pc, #16]	; (8007928 <MX_FATFS_Init+0x18>)
 8007916:	4805      	ldr	r0, [pc, #20]	; (800792c <MX_FATFS_Init+0x1c>)
 8007918:	f005 fb7a 	bl	800d010 <FATFS_LinkDriver>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	4b03      	ldr	r3, [pc, #12]	; (8007930 <MX_FATFS_Init+0x20>)
 8007922:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007924:	bf00      	nop
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20001490 	.word	0x20001490
 800792c:	0800d960 	.word	0x0800d960
 8007930:	200018f4 	.word	0x200018f4

08007934 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007934:	b480      	push	{r7}
 8007936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007938:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800793a:	4618      	mov	r0, r3
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800796a:	79fb      	ldrb	r3, [r7, #7]
 800796c:	4619      	mov	r1, r3
 800796e:	4808      	ldr	r0, [pc, #32]	; (8007990 <USBH_status+0x34>)
 8007970:	f000 fe11 	bl	8008596 <USBH_MSC_UnitIsReady>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <USBH_status+0x24>
  {
    res = RES_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]
 800797e:	e001      	b.n	8007984 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	200018f8 	.word	0x200018f8

08007994 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b094      	sub	sp, #80	; 0x50
 8007998:	af02      	add	r7, sp, #8
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80079aa:	7bf9      	ldrb	r1, [r7, #15]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4812      	ldr	r0, [pc, #72]	; (8007a00 <USBH_read+0x6c>)
 80079b6:	f000 fe38 	bl	800862a <USBH_MSC_Read>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d103      	bne.n	80079c8 <USBH_read+0x34>
  {
    res = RES_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80079c6:	e015      	b.n	80079f4 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80079c8:	f107 0210 	add.w	r2, r7, #16
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4619      	mov	r1, r3
 80079d0:	480b      	ldr	r0, [pc, #44]	; (8007a00 <USBH_read+0x6c>)
 80079d2:	f000 fe06 	bl	80085e2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80079d6:	7f7b      	ldrb	r3, [r7, #29]
 80079d8:	2b28      	cmp	r3, #40	; 0x28
 80079da:	d003      	beq.n	80079e4 <USBH_read+0x50>
 80079dc:	2b3a      	cmp	r3, #58	; 0x3a
 80079de:	d001      	beq.n	80079e4 <USBH_read+0x50>
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d103      	bne.n	80079ec <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80079e4:	2303      	movs	r3, #3
 80079e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80079ea:	e003      	b.n	80079f4 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80079f2:	bf00      	nop
    }
  }

  return res;
 80079f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3748      	adds	r7, #72	; 0x48
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	200018f8 	.word	0x200018f8

08007a04 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b094      	sub	sp, #80	; 0x50
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	607a      	str	r2, [r7, #4]
 8007a0e:	603b      	str	r3, [r7, #0]
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007a1a:	7bf9      	ldrb	r1, [r7, #15]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	4817      	ldr	r0, [pc, #92]	; (8007a84 <USBH_write+0x80>)
 8007a26:	f000 fe69 	bl	80086fc <USBH_MSC_Write>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d103      	bne.n	8007a38 <USBH_write+0x34>
  {
    res = RES_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007a36:	e01f      	b.n	8007a78 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007a38:	f107 0210 	add.w	r2, r7, #16
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4810      	ldr	r0, [pc, #64]	; (8007a84 <USBH_write+0x80>)
 8007a42:	f000 fdce 	bl	80085e2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007a46:	7f7b      	ldrb	r3, [r7, #29]
 8007a48:	2b27      	cmp	r3, #39	; 0x27
 8007a4a:	d009      	beq.n	8007a60 <USBH_write+0x5c>
 8007a4c:	2b27      	cmp	r3, #39	; 0x27
 8007a4e:	dc02      	bgt.n	8007a56 <USBH_write+0x52>
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d009      	beq.n	8007a68 <USBH_write+0x64>
 8007a54:	e00c      	b.n	8007a70 <USBH_write+0x6c>
 8007a56:	2b28      	cmp	r3, #40	; 0x28
 8007a58:	d006      	beq.n	8007a68 <USBH_write+0x64>
 8007a5a:	2b3a      	cmp	r3, #58	; 0x3a
 8007a5c:	d004      	beq.n	8007a68 <USBH_write+0x64>
 8007a5e:	e007      	b.n	8007a70 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007a60:	2302      	movs	r3, #2
 8007a62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007a66:	e007      	b.n	8007a78 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007a6e:	e003      	b.n	8007a78 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007a76:	bf00      	nop
    }
  }

  return res;
 8007a78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3748      	adds	r7, #72	; 0x48
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	200018f8 	.word	0x200018f8

08007a88 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b090      	sub	sp, #64	; 0x40
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	603a      	str	r2, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
 8007a94:	460b      	mov	r3, r1
 8007a96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007a9e:	79bb      	ldrb	r3, [r7, #6]
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d852      	bhi.n	8007b4a <USBH_ioctl+0xc2>
 8007aa4:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <USBH_ioctl+0x24>)
 8007aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aaa:	bf00      	nop
 8007aac:	08007abd 	.word	0x08007abd
 8007ab0:	08007ac5 	.word	0x08007ac5
 8007ab4:	08007aef 	.word	0x08007aef
 8007ab8:	08007b1b 	.word	0x08007b1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007ac2:	e045      	b.n	8007b50 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007ac4:	f107 0208 	add.w	r2, r7, #8
 8007ac8:	79fb      	ldrb	r3, [r7, #7]
 8007aca:	4619      	mov	r1, r3
 8007acc:	4823      	ldr	r0, [pc, #140]	; (8007b5c <USBH_ioctl+0xd4>)
 8007ace:	f000 fd88 	bl	80085e2 <USBH_MSC_GetLUNInfo>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d106      	bne.n	8007ae6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007ae4:	e034      	b.n	8007b50 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007aec:	e030      	b.n	8007b50 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007aee:	f107 0208 	add.w	r2, r7, #8
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	4619      	mov	r1, r3
 8007af6:	4819      	ldr	r0, [pc, #100]	; (8007b5c <USBH_ioctl+0xd4>)
 8007af8:	f000 fd73 	bl	80085e2 <USBH_MSC_GetLUNInfo>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d107      	bne.n	8007b12 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007b02:	8a3b      	ldrh	r3, [r7, #16]
 8007b04:	461a      	mov	r2, r3
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007b10:	e01e      	b.n	8007b50 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007b18:	e01a      	b.n	8007b50 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007b1a:	f107 0208 	add.w	r2, r7, #8
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	4619      	mov	r1, r3
 8007b22:	480e      	ldr	r0, [pc, #56]	; (8007b5c <USBH_ioctl+0xd4>)
 8007b24:	f000 fd5d 	bl	80085e2 <USBH_MSC_GetLUNInfo>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007b2e:	8a3b      	ldrh	r3, [r7, #16]
 8007b30:	0a5b      	lsrs	r3, r3, #9
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007b40:	e006      	b.n	8007b50 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007b48:	e002      	b.n	8007b50 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007b4a:	2304      	movs	r3, #4
 8007b4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007b50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3740      	adds	r7, #64	; 0x40
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	200018f8 	.word	0x200018f8

08007b60 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007b60:	b590      	push	{r4, r7, lr}
 8007b62:	b089      	sub	sp, #36	; 0x24
 8007b64:	af04      	add	r7, sp, #16
 8007b66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b6e:	7919      	ldrb	r1, [r3, #4]
 8007b70:	2350      	movs	r3, #80	; 0x50
 8007b72:	2206      	movs	r2, #6
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 fc4f 	bl	8009418 <USBH_FindInterface>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2bff      	cmp	r3, #255	; 0xff
 8007b82:	d002      	beq.n	8007b8a <USBH_MSC_InterfaceInit+0x2a>
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d901      	bls.n	8007b8e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e0ef      	b.n	8007d6e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 fc24 	bl	80093e0 <USBH_SelectInterface>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	e0e3      	b.n	8007d6e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007bac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007bb0:	f005 fd7e 	bl	800d6b0 <malloc>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e0d0      	b.n	8007d6e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	68b8      	ldr	r0, [r7, #8]
 8007bd4:	f005 fd87 	bl	800d6e6 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	211a      	movs	r1, #26
 8007bde:	fb01 f303 	mul.w	r3, r1, r3
 8007be2:	4413      	add	r3, r2
 8007be4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b25b      	sxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	da16      	bge.n	8007c1e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	211a      	movs	r1, #26
 8007bf6:	fb01 f303 	mul.w	r3, r1, r3
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	211a      	movs	r1, #26
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c16:	881a      	ldrh	r2, [r3, #0]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	815a      	strh	r2, [r3, #10]
 8007c1c:	e015      	b.n	8007c4a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	211a      	movs	r1, #26
 8007c24:	fb01 f303 	mul.w	r3, r1, r3
 8007c28:	4413      	add	r3, r2
 8007c2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c2e:	781a      	ldrb	r2, [r3, #0]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	211a      	movs	r1, #26
 8007c3a:	fb01 f303 	mul.w	r3, r1, r3
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c44:	881a      	ldrh	r2, [r3, #0]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	211a      	movs	r1, #26
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	4413      	add	r3, r2
 8007c56:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	b25b      	sxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	da16      	bge.n	8007c90 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	211a      	movs	r1, #26
 8007c68:	fb01 f303 	mul.w	r3, r1, r3
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c72:	781a      	ldrb	r2, [r3, #0]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	211a      	movs	r1, #26
 8007c7e:	fb01 f303 	mul.w	r3, r1, r3
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007c88:	881a      	ldrh	r2, [r3, #0]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	815a      	strh	r2, [r3, #10]
 8007c8e:	e015      	b.n	8007cbc <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	211a      	movs	r1, #26
 8007c96:	fb01 f303 	mul.w	r3, r1, r3
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ca0:	781a      	ldrb	r2, [r3, #0]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	211a      	movs	r1, #26
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007cb6:	881a      	ldrh	r2, [r3, #0]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	799b      	ldrb	r3, [r3, #6]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f002 fdc2 	bl	800a85e <USBH_AllocPipe>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	461a      	mov	r2, r3
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	79db      	ldrb	r3, [r3, #7]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f002 fdb8 	bl	800a85e <USBH_AllocPipe>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fda4 	bl	8008844 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	7959      	ldrb	r1, [r3, #5]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	7998      	ldrb	r0, [r3, #6]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	8912      	ldrh	r2, [r2, #8]
 8007d14:	9202      	str	r2, [sp, #8]
 8007d16:	2202      	movs	r2, #2
 8007d18:	9201      	str	r2, [sp, #4]
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	4623      	mov	r3, r4
 8007d1e:	4602      	mov	r2, r0
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f002 fd6d 	bl	800a800 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	7919      	ldrb	r1, [r3, #4]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	79d8      	ldrb	r0, [r3, #7]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	8952      	ldrh	r2, [r2, #10]
 8007d3e:	9202      	str	r2, [sp, #8]
 8007d40:	2202      	movs	r2, #2
 8007d42:	9201      	str	r2, [sp, #4]
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4623      	mov	r3, r4
 8007d48:	4602      	mov	r2, r0
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f002 fd58 	bl	800a800 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	791b      	ldrb	r3, [r3, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f005 fbe2 	bl	800d522 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	795b      	ldrb	r3, [r3, #5]
 8007d62:	2200      	movs	r2, #0
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f005 fbdb 	bl	800d522 <USBH_LL_SetToggle>

  return USBH_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd90      	pop	{r4, r7, pc}

08007d76 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	795b      	ldrb	r3, [r3, #5]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00e      	beq.n	8007dae <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	795b      	ldrb	r3, [r3, #5]
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f002 fd51 	bl	800a83e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	795b      	ldrb	r3, [r3, #5]
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f002 fd7c 	bl	800a8a0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	791b      	ldrb	r3, [r3, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00e      	beq.n	8007dd4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	791b      	ldrb	r3, [r3, #4]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f002 fd3e 	bl	800a83e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	791b      	ldrb	r3, [r3, #4]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f002 fd69 	bl	800a8a0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f005 fc69 	bl	800d6c0 <free>
    phost->pActiveClass->pData = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007df4:	2200      	movs	r2, #0
 8007df6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	7b9b      	ldrb	r3, [r3, #14]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d004      	beq.n	8007e2a <USBH_MSC_ClassRequest+0x28>
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d03e      	beq.n	8007ea2 <USBH_MSC_ClassRequest+0xa0>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d000      	beq.n	8007e2a <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8007e28:	e04a      	b.n	8007ec0 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fcea 	bl	8008808 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d104      	bne.n	8007e48 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d135      	bne.n	8007eba <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d804      	bhi.n	8007e60 <USBH_MSC_ClassRequest+0x5e>
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	e000      	b.n	8007e62 <USBH_MSC_ClassRequest+0x60>
 8007e60:	2202      	movs	r2, #2
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	73bb      	strb	r3, [r7, #14]
 8007e6a:	e014      	b.n	8007e96 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	2134      	movs	r1, #52	; 0x34
 8007e72:	fb01 f303 	mul.w	r3, r1, r3
 8007e76:	4413      	add	r3, r2
 8007e78:	3392      	adds	r3, #146	; 0x92
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	2134      	movs	r1, #52	; 0x34
 8007e84:	fb01 f303 	mul.w	r3, r1, r3
 8007e88:	4413      	add	r3, r2
 8007e8a:	33c1      	adds	r3, #193	; 0xc1
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	3301      	adds	r3, #1
 8007e94:	73bb      	strb	r3, [r7, #14]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	7bba      	ldrb	r2, [r7, #14]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d3e5      	bcc.n	8007e6c <USBH_MSC_ClassRequest+0x6a>
      break;
 8007ea0:	e00b      	b.n	8007eba <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f002 f878 	bl	8009f9a <USBH_ClrFeature>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d106      	bne.n	8007ebe <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	7bda      	ldrb	r2, [r3, #15]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	739a      	strb	r2, [r3, #14]
      break;
 8007eb8:	e001      	b.n	8007ebe <USBH_MSC_ClassRequest+0xbc>
      break;
 8007eba:	bf00      	nop
 8007ebc:	e000      	b.n	8007ec0 <USBH_MSC_ClassRequest+0xbe>
      break;
 8007ebe:	bf00      	nop
  }

  return status;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	7b1b      	ldrb	r3, [r3, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <USBH_MSC_Process+0x2e>
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	f000 8271 	beq.w	80083da <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007ef8:	e272      	b.n	80083e0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	429a      	cmp	r2, r3
 8007f08:	f080 824f 	bcs.w	80083aa <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f12:	4619      	mov	r1, r3
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	2334      	movs	r3, #52	; 0x34
 8007f18:	fb03 f301 	mul.w	r3, r3, r1
 8007f1c:	4413      	add	r3, r2
 8007f1e:	3391      	adds	r3, #145	; 0x91
 8007f20:	2201      	movs	r2, #1
 8007f22:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	2334      	movs	r3, #52	; 0x34
 8007f30:	fb03 f301 	mul.w	r3, r3, r1
 8007f34:	4413      	add	r3, r2
 8007f36:	3390      	adds	r3, #144	; 0x90
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	f200 8243 	bhi.w	80083c6 <USBH_MSC_Process+0x4fa>
 8007f40:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <USBH_MSC_Process+0x7c>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	080083c7 	.word	0x080083c7
 8007f50:	08008035 	.word	0x08008035
 8007f54:	080081b9 	.word	0x080081b9
 8007f58:	08007f93 	.word	0x08007f93
 8007f5c:	08008285 	.word	0x08008285
 8007f60:	080083c7 	.word	0x080083c7
 8007f64:	080083c7 	.word	0x080083c7
 8007f68:	08008399 	.word	0x08008399
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f72:	4619      	mov	r1, r3
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	2334      	movs	r3, #52	; 0x34
 8007f78:	fb03 f301 	mul.w	r3, r3, r1
 8007f7c:	4413      	add	r3, r2
 8007f7e:	3390      	adds	r3, #144	; 0x90
 8007f80:	2204      	movs	r2, #4
 8007f82:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007f90:	e222      	b.n	80083d8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f98:	b2d9      	uxtb	r1, r3
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	2334      	movs	r3, #52	; 0x34
 8007fa4:	fb03 f302 	mul.w	r3, r3, r2
 8007fa8:	3398      	adds	r3, #152	; 0x98
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	4413      	add	r3, r2
 8007fae:	3307      	adds	r3, #7
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 ff68 	bl	8008e88 <USBH_MSC_SCSI_Inquiry>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10b      	bne.n	8007fda <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007fc8:	4619      	mov	r1, r3
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	2334      	movs	r3, #52	; 0x34
 8007fce:	fb03 f301 	mul.w	r3, r3, r1
 8007fd2:	4413      	add	r3, r2
 8007fd4:	3390      	adds	r3, #144	; 0x90
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d10c      	bne.n	8007ffa <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	2334      	movs	r3, #52	; 0x34
 8007fec:	fb03 f301 	mul.w	r3, r3, r1
 8007ff0:	4413      	add	r3, r2
 8007ff2:	3390      	adds	r3, #144	; 0x90
 8007ff4:	2205      	movs	r2, #5
 8007ff6:	701a      	strb	r2, [r3, #0]
            break;
 8007ff8:	e1e7      	b.n	80083ca <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	f040 81e4 	bne.w	80083ca <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008008:	4619      	mov	r1, r3
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	2334      	movs	r3, #52	; 0x34
 800800e:	fb03 f301 	mul.w	r3, r3, r1
 8008012:	4413      	add	r3, r2
 8008014:	3390      	adds	r3, #144	; 0x90
 8008016:	2201      	movs	r2, #1
 8008018:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008020:	4619      	mov	r1, r3
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	2334      	movs	r3, #52	; 0x34
 8008026:	fb03 f301 	mul.w	r3, r3, r1
 800802a:	4413      	add	r3, r2
 800802c:	3391      	adds	r3, #145	; 0x91
 800802e:	2202      	movs	r2, #2
 8008030:	701a      	strb	r2, [r3, #0]
            break;
 8008032:	e1ca      	b.n	80083ca <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800803a:	b2db      	uxtb	r3, r3
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fe64 	bl	8008d0c <USBH_MSC_SCSI_TestUnitReady>
 8008044:	4603      	mov	r3, r0
 8008046:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d149      	bne.n	80080e2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008054:	4619      	mov	r1, r3
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	2334      	movs	r3, #52	; 0x34
 800805a:	fb03 f301 	mul.w	r3, r3, r1
 800805e:	4413      	add	r3, r2
 8008060:	3392      	adds	r3, #146	; 0x92
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00c      	beq.n	8008082 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800806e:	4619      	mov	r1, r3
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	2334      	movs	r3, #52	; 0x34
 8008074:	fb03 f301 	mul.w	r3, r3, r1
 8008078:	4413      	add	r3, r2
 800807a:	33c1      	adds	r3, #193	; 0xc1
 800807c:	2201      	movs	r2, #1
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	e00b      	b.n	800809a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008088:	4619      	mov	r1, r3
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	2334      	movs	r3, #52	; 0x34
 800808e:	fb03 f301 	mul.w	r3, r3, r1
 8008092:	4413      	add	r3, r2
 8008094:	33c1      	adds	r3, #193	; 0xc1
 8008096:	2200      	movs	r2, #0
 8008098:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080a0:	4619      	mov	r1, r3
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	2334      	movs	r3, #52	; 0x34
 80080a6:	fb03 f301 	mul.w	r3, r3, r1
 80080aa:	4413      	add	r3, r2
 80080ac:	3390      	adds	r3, #144	; 0x90
 80080ae:	2203      	movs	r2, #3
 80080b0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080b8:	4619      	mov	r1, r3
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	2334      	movs	r3, #52	; 0x34
 80080be:	fb03 f301 	mul.w	r3, r3, r1
 80080c2:	4413      	add	r3, r2
 80080c4:	3391      	adds	r3, #145	; 0x91
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080d0:	4619      	mov	r1, r3
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	2334      	movs	r3, #52	; 0x34
 80080d6:	fb03 f301 	mul.w	r3, r3, r1
 80080da:	4413      	add	r3, r2
 80080dc:	3392      	adds	r3, #146	; 0x92
 80080de:	2200      	movs	r2, #0
 80080e0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d14a      	bne.n	800817e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080ee:	4619      	mov	r1, r3
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	2334      	movs	r3, #52	; 0x34
 80080f4:	fb03 f301 	mul.w	r3, r3, r1
 80080f8:	4413      	add	r3, r2
 80080fa:	3392      	adds	r3, #146	; 0x92
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d00c      	beq.n	800811c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008108:	4619      	mov	r1, r3
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	2334      	movs	r3, #52	; 0x34
 800810e:	fb03 f301 	mul.w	r3, r3, r1
 8008112:	4413      	add	r3, r2
 8008114:	33c1      	adds	r3, #193	; 0xc1
 8008116:	2201      	movs	r2, #1
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	e00b      	b.n	8008134 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008122:	4619      	mov	r1, r3
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	2334      	movs	r3, #52	; 0x34
 8008128:	fb03 f301 	mul.w	r3, r3, r1
 800812c:	4413      	add	r3, r2
 800812e:	33c1      	adds	r3, #193	; 0xc1
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800813a:	4619      	mov	r1, r3
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	2334      	movs	r3, #52	; 0x34
 8008140:	fb03 f301 	mul.w	r3, r3, r1
 8008144:	4413      	add	r3, r2
 8008146:	3390      	adds	r3, #144	; 0x90
 8008148:	2205      	movs	r2, #5
 800814a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008152:	4619      	mov	r1, r3
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	2334      	movs	r3, #52	; 0x34
 8008158:	fb03 f301 	mul.w	r3, r3, r1
 800815c:	4413      	add	r3, r2
 800815e:	3391      	adds	r3, #145	; 0x91
 8008160:	2201      	movs	r2, #1
 8008162:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800816a:	4619      	mov	r1, r3
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	2334      	movs	r3, #52	; 0x34
 8008170:	fb03 f301 	mul.w	r3, r3, r1
 8008174:	4413      	add	r3, r2
 8008176:	3392      	adds	r3, #146	; 0x92
 8008178:	2202      	movs	r2, #2
 800817a:	701a      	strb	r2, [r3, #0]
            break;
 800817c:	e127      	b.n	80083ce <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b04      	cmp	r3, #4
 8008182:	f040 8124 	bne.w	80083ce <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800818c:	4619      	mov	r1, r3
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	2334      	movs	r3, #52	; 0x34
 8008192:	fb03 f301 	mul.w	r3, r3, r1
 8008196:	4413      	add	r3, r2
 8008198:	3390      	adds	r3, #144	; 0x90
 800819a:	2201      	movs	r2, #1
 800819c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081a4:	4619      	mov	r1, r3
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	2334      	movs	r3, #52	; 0x34
 80081aa:	fb03 f301 	mul.w	r3, r3, r1
 80081ae:	4413      	add	r3, r2
 80081b0:	3391      	adds	r3, #145	; 0x91
 80081b2:	2202      	movs	r2, #2
 80081b4:	701a      	strb	r2, [r3, #0]
            break;
 80081b6:	e10a      	b.n	80083ce <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081be:	b2d9      	uxtb	r1, r3
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081c6:	461a      	mov	r2, r3
 80081c8:	2334      	movs	r3, #52	; 0x34
 80081ca:	fb03 f302 	mul.w	r3, r3, r2
 80081ce:	3390      	adds	r3, #144	; 0x90
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4413      	add	r3, r2
 80081d4:	3304      	adds	r3, #4
 80081d6:	461a      	mov	r2, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fdda 	bl	8008d92 <USBH_MSC_SCSI_ReadCapacity>
 80081de:	4603      	mov	r3, r0
 80081e0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d120      	bne.n	800822a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081ee:	4619      	mov	r1, r3
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	2334      	movs	r3, #52	; 0x34
 80081f4:	fb03 f301 	mul.w	r3, r3, r1
 80081f8:	4413      	add	r3, r2
 80081fa:	3390      	adds	r3, #144	; 0x90
 80081fc:	2201      	movs	r2, #1
 80081fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008206:	4619      	mov	r1, r3
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	2334      	movs	r3, #52	; 0x34
 800820c:	fb03 f301 	mul.w	r3, r3, r1
 8008210:	4413      	add	r3, r2
 8008212:	3391      	adds	r3, #145	; 0x91
 8008214:	2200      	movs	r2, #0
 8008216:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800821e:	3301      	adds	r3, #1
 8008220:	b29a      	uxth	r2, r3
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008228:	e0d3      	b.n	80083d2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d10c      	bne.n	800824a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008236:	4619      	mov	r1, r3
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	2334      	movs	r3, #52	; 0x34
 800823c:	fb03 f301 	mul.w	r3, r3, r1
 8008240:	4413      	add	r3, r2
 8008242:	3390      	adds	r3, #144	; 0x90
 8008244:	2205      	movs	r2, #5
 8008246:	701a      	strb	r2, [r3, #0]
            break;
 8008248:	e0c3      	b.n	80083d2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	2b04      	cmp	r3, #4
 800824e:	f040 80c0 	bne.w	80083d2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008258:	4619      	mov	r1, r3
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	2334      	movs	r3, #52	; 0x34
 800825e:	fb03 f301 	mul.w	r3, r3, r1
 8008262:	4413      	add	r3, r2
 8008264:	3390      	adds	r3, #144	; 0x90
 8008266:	2201      	movs	r2, #1
 8008268:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008270:	4619      	mov	r1, r3
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	2334      	movs	r3, #52	; 0x34
 8008276:	fb03 f301 	mul.w	r3, r3, r1
 800827a:	4413      	add	r3, r2
 800827c:	3391      	adds	r3, #145	; 0x91
 800827e:	2202      	movs	r2, #2
 8008280:	701a      	strb	r2, [r3, #0]
            break;
 8008282:	e0a6      	b.n	80083d2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800828a:	b2d9      	uxtb	r1, r3
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008292:	461a      	mov	r2, r3
 8008294:	2334      	movs	r3, #52	; 0x34
 8008296:	fb03 f302 	mul.w	r3, r3, r2
 800829a:	3398      	adds	r3, #152	; 0x98
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4413      	add	r3, r2
 80082a0:	3304      	adds	r3, #4
 80082a2:	461a      	mov	r2, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fe94 	bl	8008fd2 <USBH_MSC_SCSI_RequestSense>
 80082aa:	4603      	mov	r3, r0
 80082ac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d145      	bne.n	8008340 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082ba:	4619      	mov	r1, r3
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	2334      	movs	r3, #52	; 0x34
 80082c0:	fb03 f301 	mul.w	r3, r3, r1
 80082c4:	4413      	add	r3, r2
 80082c6:	339c      	adds	r3, #156	; 0x9c
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2b06      	cmp	r3, #6
 80082cc:	d00c      	beq.n	80082e8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082d4:	4619      	mov	r1, r3
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	2334      	movs	r3, #52	; 0x34
 80082da:	fb03 f301 	mul.w	r3, r3, r1
 80082de:	4413      	add	r3, r2
 80082e0:	339c      	adds	r3, #156	; 0x9c
 80082e2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d117      	bne.n	8008318 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d80c      	bhi.n	8008318 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008304:	4619      	mov	r1, r3
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	2334      	movs	r3, #52	; 0x34
 800830a:	fb03 f301 	mul.w	r3, r3, r1
 800830e:	4413      	add	r3, r2
 8008310:	3390      	adds	r3, #144	; 0x90
 8008312:	2202      	movs	r2, #2
 8008314:	701a      	strb	r2, [r3, #0]
                  break;
 8008316:	e05f      	b.n	80083d8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800831e:	4619      	mov	r1, r3
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	2334      	movs	r3, #52	; 0x34
 8008324:	fb03 f301 	mul.w	r3, r3, r1
 8008328:	4413      	add	r3, r2
 800832a:	3390      	adds	r3, #144	; 0x90
 800832c:	2201      	movs	r2, #1
 800832e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008336:	3301      	adds	r3, #1
 8008338:	b29a      	uxth	r2, r3
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d10c      	bne.n	8008360 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800834c:	4619      	mov	r1, r3
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	2334      	movs	r3, #52	; 0x34
 8008352:	fb03 f301 	mul.w	r3, r3, r1
 8008356:	4413      	add	r3, r2
 8008358:	3390      	adds	r3, #144	; 0x90
 800835a:	2208      	movs	r2, #8
 800835c:	701a      	strb	r2, [r3, #0]
            break;
 800835e:	e03a      	b.n	80083d6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b04      	cmp	r3, #4
 8008364:	d137      	bne.n	80083d6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800836c:	4619      	mov	r1, r3
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	2334      	movs	r3, #52	; 0x34
 8008372:	fb03 f301 	mul.w	r3, r3, r1
 8008376:	4413      	add	r3, r2
 8008378:	3390      	adds	r3, #144	; 0x90
 800837a:	2201      	movs	r2, #1
 800837c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008384:	4619      	mov	r1, r3
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	2334      	movs	r3, #52	; 0x34
 800838a:	fb03 f301 	mul.w	r3, r3, r1
 800838e:	4413      	add	r3, r2
 8008390:	3391      	adds	r3, #145	; 0x91
 8008392:	2202      	movs	r2, #2
 8008394:	701a      	strb	r2, [r3, #0]
            break;
 8008396:	e01e      	b.n	80083d6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800839e:	3301      	adds	r3, #1
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80083a8:	e016      	b.n	80083d8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2201      	movs	r2, #1
 80083b6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083be:	2102      	movs	r1, #2
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	4798      	blx	r3
      break;
 80083c4:	e00c      	b.n	80083e0 <USBH_MSC_Process+0x514>
            break;
 80083c6:	bf00      	nop
 80083c8:	e00a      	b.n	80083e0 <USBH_MSC_Process+0x514>
            break;
 80083ca:	bf00      	nop
 80083cc:	e008      	b.n	80083e0 <USBH_MSC_Process+0x514>
            break;
 80083ce:	bf00      	nop
 80083d0:	e006      	b.n	80083e0 <USBH_MSC_Process+0x514>
            break;
 80083d2:	bf00      	nop
 80083d4:	e004      	b.n	80083e0 <USBH_MSC_Process+0x514>
            break;
 80083d6:	bf00      	nop
      break;
 80083d8:	e002      	b.n	80083e0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	75fb      	strb	r3, [r7, #23]
      break;
 80083de:	bf00      	nop
  }
  return error;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop

080083ec <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b088      	sub	sp, #32
 8008406:	af02      	add	r7, sp, #8
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008418:	2301      	movs	r3, #1
 800841a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800841c:	2301      	movs	r3, #1
 800841e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	2134      	movs	r1, #52	; 0x34
 8008426:	fb01 f303 	mul.w	r3, r1, r3
 800842a:	4413      	add	r3, r2
 800842c:	3390      	adds	r3, #144	; 0x90
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b06      	cmp	r3, #6
 8008432:	d004      	beq.n	800843e <USBH_MSC_RdWrProcess+0x3c>
 8008434:	2b07      	cmp	r3, #7
 8008436:	d037      	beq.n	80084a8 <USBH_MSC_RdWrProcess+0xa6>
 8008438:	2b05      	cmp	r3, #5
 800843a:	d06a      	beq.n	8008512 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800843c:	e0a6      	b.n	800858c <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800843e:	78f9      	ldrb	r1, [r7, #3]
 8008440:	2300      	movs	r3, #0
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	2200      	movs	r2, #0
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fea6 	bl	800919a <USBH_MSC_SCSI_Read>
 800844e:	4603      	mov	r3, r0
 8008450:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10b      	bne.n	8008470 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	2134      	movs	r1, #52	; 0x34
 800845e:	fb01 f303 	mul.w	r3, r1, r3
 8008462:	4413      	add	r3, r2
 8008464:	3390      	adds	r3, #144	; 0x90
 8008466:	2201      	movs	r2, #1
 8008468:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	75fb      	strb	r3, [r7, #23]
      break;
 800846e:	e088      	b.n	8008582 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	2b02      	cmp	r3, #2
 8008474:	d109      	bne.n	800848a <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	2134      	movs	r1, #52	; 0x34
 800847c:	fb01 f303 	mul.w	r3, r1, r3
 8008480:	4413      	add	r3, r2
 8008482:	3390      	adds	r3, #144	; 0x90
 8008484:	2205      	movs	r2, #5
 8008486:	701a      	strb	r2, [r3, #0]
      break;
 8008488:	e07b      	b.n	8008582 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	2b04      	cmp	r3, #4
 800848e:	d178      	bne.n	8008582 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	2134      	movs	r1, #52	; 0x34
 8008496:	fb01 f303 	mul.w	r3, r1, r3
 800849a:	4413      	add	r3, r2
 800849c:	3390      	adds	r3, #144	; 0x90
 800849e:	2208      	movs	r2, #8
 80084a0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80084a2:	2302      	movs	r3, #2
 80084a4:	75fb      	strb	r3, [r7, #23]
      break;
 80084a6:	e06c      	b.n	8008582 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80084a8:	78f9      	ldrb	r1, [r7, #3]
 80084aa:	2300      	movs	r3, #0
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	2300      	movs	r3, #0
 80084b0:	2200      	movs	r2, #0
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fe06 	bl	80090c4 <USBH_MSC_SCSI_Write>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	2134      	movs	r1, #52	; 0x34
 80084c8:	fb01 f303 	mul.w	r3, r1, r3
 80084cc:	4413      	add	r3, r2
 80084ce:	3390      	adds	r3, #144	; 0x90
 80084d0:	2201      	movs	r2, #1
 80084d2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	75fb      	strb	r3, [r7, #23]
      break;
 80084d8:	e055      	b.n	8008586 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d109      	bne.n	80084f4 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	2134      	movs	r1, #52	; 0x34
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	4413      	add	r3, r2
 80084ec:	3390      	adds	r3, #144	; 0x90
 80084ee:	2205      	movs	r2, #5
 80084f0:	701a      	strb	r2, [r3, #0]
      break;
 80084f2:	e048      	b.n	8008586 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d145      	bne.n	8008586 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	2134      	movs	r1, #52	; 0x34
 8008500:	fb01 f303 	mul.w	r3, r1, r3
 8008504:	4413      	add	r3, r2
 8008506:	3390      	adds	r3, #144	; 0x90
 8008508:	2208      	movs	r2, #8
 800850a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800850c:	2302      	movs	r3, #2
 800850e:	75fb      	strb	r3, [r7, #23]
      break;
 8008510:	e039      	b.n	8008586 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	2234      	movs	r2, #52	; 0x34
 8008516:	fb02 f303 	mul.w	r3, r2, r3
 800851a:	3398      	adds	r3, #152	; 0x98
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4413      	add	r3, r2
 8008520:	1d1a      	adds	r2, r3, #4
 8008522:	78fb      	ldrb	r3, [r7, #3]
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fd53 	bl	8008fd2 <USBH_MSC_SCSI_RequestSense>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d113      	bne.n	800855e <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008536:	78fb      	ldrb	r3, [r7, #3]
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	2134      	movs	r1, #52	; 0x34
 800853c:	fb01 f303 	mul.w	r3, r1, r3
 8008540:	4413      	add	r3, r2
 8008542:	3390      	adds	r3, #144	; 0x90
 8008544:	2201      	movs	r2, #1
 8008546:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	2134      	movs	r1, #52	; 0x34
 800854e:	fb01 f303 	mul.w	r3, r1, r3
 8008552:	4413      	add	r3, r2
 8008554:	3391      	adds	r3, #145	; 0x91
 8008556:	2202      	movs	r2, #2
 8008558:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800855a:	2302      	movs	r3, #2
 800855c:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	2b02      	cmp	r3, #2
 8008562:	d012      	beq.n	800858a <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008564:	7bfb      	ldrb	r3, [r7, #15]
 8008566:	2b04      	cmp	r3, #4
 8008568:	d10f      	bne.n	800858a <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800856a:	78fb      	ldrb	r3, [r7, #3]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	2134      	movs	r1, #52	; 0x34
 8008570:	fb01 f303 	mul.w	r3, r1, r3
 8008574:	4413      	add	r3, r2
 8008576:	3390      	adds	r3, #144	; 0x90
 8008578:	2208      	movs	r2, #8
 800857a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800857c:	2302      	movs	r3, #2
 800857e:	75fb      	strb	r3, [r7, #23]
      break;
 8008580:	e003      	b.n	800858a <USBH_MSC_RdWrProcess+0x188>
      break;
 8008582:	bf00      	nop
 8008584:	e002      	b.n	800858c <USBH_MSC_RdWrProcess+0x18a>
      break;
 8008586:	bf00      	nop
 8008588:	e000      	b.n	800858c <USBH_MSC_RdWrProcess+0x18a>
      break;
 800858a:	bf00      	nop

  }
  return error;
 800858c:	7dfb      	ldrb	r3, [r7, #23]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3718      	adds	r7, #24
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	460b      	mov	r3, r1
 80085a0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b0b      	cmp	r3, #11
 80085b4:	d10c      	bne.n	80085d0 <USBH_MSC_UnitIsReady+0x3a>
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	2134      	movs	r1, #52	; 0x34
 80085bc:	fb01 f303 	mul.w	r3, r1, r3
 80085c0:	4413      	add	r3, r2
 80085c2:	3391      	adds	r3, #145	; 0x91
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d102      	bne.n	80085d0 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80085ca:	2301      	movs	r3, #1
 80085cc:	73fb      	strb	r3, [r7, #15]
 80085ce:	e001      	b.n	80085d4 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b086      	sub	sp, #24
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	60f8      	str	r0, [r7, #12]
 80085ea:	460b      	mov	r3, r1
 80085ec:	607a      	str	r2, [r7, #4]
 80085ee:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b0b      	cmp	r3, #11
 8008602:	d10d      	bne.n	8008620 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	2234      	movs	r2, #52	; 0x34
 8008608:	fb02 f303 	mul.w	r3, r2, r3
 800860c:	3390      	adds	r3, #144	; 0x90
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	4413      	add	r3, r2
 8008612:	2234      	movs	r2, #52	; 0x34
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f005 f85a 	bl	800d6d0 <memcpy>
    return USBH_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	e000      	b.n	8008622 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008620:	2302      	movs	r3, #2
  }
}
 8008622:	4618      	mov	r0, r3
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b088      	sub	sp, #32
 800862e:	af02      	add	r7, sp, #8
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
 8008636:	460b      	mov	r3, r1
 8008638:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00e      	beq.n	800866e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008656:	2b0b      	cmp	r3, #11
 8008658:	d109      	bne.n	800866e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800865a:	7afb      	ldrb	r3, [r7, #11]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	2134      	movs	r1, #52	; 0x34
 8008660:	fb01 f303 	mul.w	r3, r1, r3
 8008664:	4413      	add	r3, r2
 8008666:	3390      	adds	r3, #144	; 0x90
 8008668:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800866a:	2b01      	cmp	r3, #1
 800866c:	d001      	beq.n	8008672 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800866e:	2302      	movs	r3, #2
 8008670:	e040      	b.n	80086f4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2206      	movs	r2, #6
 8008676:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	2134      	movs	r1, #52	; 0x34
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	4413      	add	r3, r2
 8008684:	3390      	adds	r3, #144	; 0x90
 8008686:	2206      	movs	r2, #6
 8008688:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	b29a      	uxth	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008694:	7af9      	ldrb	r1, [r7, #11]
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 fd7b 	bl	800919a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086aa:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80086ac:	e016      	b.n	80086dc <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	1ad2      	subs	r2, r2, r3
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	f242 7110 	movw	r1, #10000	; 0x2710
 80086be:	fb01 f303 	mul.w	r3, r1, r3
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d805      	bhi.n	80086d2 <USBH_MSC_Read+0xa8>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d104      	bne.n	80086dc <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2201      	movs	r2, #1
 80086d6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80086d8:	2302      	movs	r3, #2
 80086da:	e00b      	b.n	80086f4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80086dc:	7afb      	ldrb	r3, [r7, #11]
 80086de:	4619      	mov	r1, r3
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff fe8e 	bl	8008402 <USBH_MSC_RdWrProcess>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d0e0      	beq.n	80086ae <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2201      	movs	r2, #1
 80086f0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af02      	add	r7, sp, #8
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	607a      	str	r2, [r7, #4]
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	460b      	mov	r3, r1
 800870a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00e      	beq.n	8008740 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008728:	2b0b      	cmp	r3, #11
 800872a:	d109      	bne.n	8008740 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	2134      	movs	r1, #52	; 0x34
 8008732:	fb01 f303 	mul.w	r3, r1, r3
 8008736:	4413      	add	r3, r2
 8008738:	3390      	adds	r3, #144	; 0x90
 800873a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800873c:	2b01      	cmp	r3, #1
 800873e:	d001      	beq.n	8008744 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008740:	2302      	movs	r3, #2
 8008742:	e040      	b.n	80087c6 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2207      	movs	r2, #7
 8008748:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800874a:	7afb      	ldrb	r3, [r7, #11]
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	2134      	movs	r1, #52	; 0x34
 8008750:	fb01 f303 	mul.w	r3, r1, r3
 8008754:	4413      	add	r3, r2
 8008756:	3390      	adds	r3, #144	; 0x90
 8008758:	2207      	movs	r2, #7
 800875a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800875c:	7afb      	ldrb	r3, [r7, #11]
 800875e:	b29a      	uxth	r2, r3
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008766:	7af9      	ldrb	r1, [r7, #11]
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fca7 	bl	80090c4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800877c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800877e:	e016      	b.n	80087ae <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1ad2      	subs	r2, r2, r3
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	f242 7110 	movw	r1, #10000	; 0x2710
 8008790:	fb01 f303 	mul.w	r3, r1, r3
 8008794:	429a      	cmp	r2, r3
 8008796:	d805      	bhi.n	80087a4 <USBH_MSC_Write+0xa8>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d104      	bne.n	80087ae <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2201      	movs	r2, #1
 80087a8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80087aa:	2302      	movs	r3, #2
 80087ac:	e00b      	b.n	80087c6 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	4619      	mov	r1, r3
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7ff fe25 	bl	8008402 <USBH_MSC_RdWrProcess>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d0e0      	beq.n	8008780 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2201      	movs	r2, #1
 80087c2:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2221      	movs	r2, #33	; 0x21
 80087da:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	22ff      	movs	r2, #255	; 0xff
 80087e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80087f4:	2200      	movs	r2, #0
 80087f6:	2100      	movs	r1, #0
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 fdae 	bl	800a35a <USBH_CtlReq>
 80087fe:	4603      	mov	r3, r0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	22a1      	movs	r2, #161	; 0xa1
 8008816:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	22fe      	movs	r2, #254	; 0xfe
 800881c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008830:	2201      	movs	r2, #1
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f001 fd90 	bl	800a35a <USBH_CtlReq>
 800883a:	4603      	mov	r3, r0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <USBH_MSC_BOT_Init+0x3c>)
 800885a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4a09      	ldr	r2, [pc, #36]	; (8008884 <USBH_MSC_BOT_Init+0x40>)
 8008860:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	43425355 	.word	0x43425355
 8008884:	20304050 	.word	0x20304050

08008888 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af02      	add	r7, sp, #8
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008894:	2301      	movs	r3, #1
 8008896:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008898:	2301      	movs	r3, #1
 800889a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800889c:	2301      	movs	r3, #1
 800889e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088a0:	2300      	movs	r3, #0
 80088a2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088b8:	3b01      	subs	r3, #1
 80088ba:	2b0a      	cmp	r3, #10
 80088bc:	f200 81a1 	bhi.w	8008c02 <USBH_MSC_BOT_Process+0x37a>
 80088c0:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <USBH_MSC_BOT_Process+0x40>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	080088f5 	.word	0x080088f5
 80088cc:	0800891f 	.word	0x0800891f
 80088d0:	08008989 	.word	0x08008989
 80088d4:	080089a7 	.word	0x080089a7
 80088d8:	08008a2b 	.word	0x08008a2b
 80088dc:	08008a4f 	.word	0x08008a4f
 80088e0:	08008ae9 	.word	0x08008ae9
 80088e4:	08008b05 	.word	0x08008b05
 80088e8:	08008b57 	.word	0x08008b57
 80088ec:	08008b87 	.word	0x08008b87
 80088f0:	08008be9 	.word	0x08008be9
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	78fa      	ldrb	r2, [r7, #3]
 80088f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	795a      	ldrb	r2, [r3, #5]
 800890e:	2301      	movs	r3, #1
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	4613      	mov	r3, r2
 8008914:	221f      	movs	r2, #31
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 ff2f 	bl	800a77a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800891c:	e180      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	795b      	ldrb	r3, [r3, #5]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f004 fddb 	bl	800d4e0 <USBH_LL_GetURBState>
 800892a:	4603      	mov	r3, r0
 800892c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800892e:	7d3b      	ldrb	r3, [r7, #20]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d118      	bne.n	8008966 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00f      	beq.n	800895c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008942:	b25b      	sxtb	r3, r3
 8008944:	2b00      	cmp	r3, #0
 8008946:	da04      	bge.n	8008952 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	2203      	movs	r2, #3
 800894c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008950:	e159      	b.n	8008c06 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	2205      	movs	r2, #5
 8008956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800895a:	e154      	b.n	8008c06 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	2207      	movs	r2, #7
 8008960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008964:	e14f      	b.n	8008c06 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008966:	7d3b      	ldrb	r3, [r7, #20]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d104      	bne.n	8008976 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008974:	e147      	b.n	8008c06 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8008976:	7d3b      	ldrb	r3, [r7, #20]
 8008978:	2b05      	cmp	r3, #5
 800897a:	f040 8144 	bne.w	8008c06 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	220a      	movs	r2, #10
 8008982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008986:	e13e      	b.n	8008c06 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	895a      	ldrh	r2, [r3, #10]
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	791b      	ldrb	r3, [r3, #4]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 ff14 	bl	800a7c4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	2204      	movs	r2, #4
 80089a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80089a4:	e13c      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	791b      	ldrb	r3, [r3, #4]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f004 fd97 	bl	800d4e0 <USBH_LL_GetURBState>
 80089b2:	4603      	mov	r3, r0
 80089b4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80089b6:	7d3b      	ldrb	r3, [r7, #20]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d12d      	bne.n	8008a18 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	8952      	ldrh	r2, [r2, #10]
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d910      	bls.n	80089ea <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	8952      	ldrh	r2, [r2, #10]
 80089d2:	441a      	add	r2, r3
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	8952      	ldrh	r2, [r2, #10]
 80089e2:	1a9a      	subs	r2, r3, r2
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80089e8:	e002      	b.n	80089f0 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2200      	movs	r2, #0
 80089ee:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00a      	beq.n	8008a0e <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	895a      	ldrh	r2, [r3, #10]
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	791b      	ldrb	r3, [r3, #4]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 fedc 	bl	800a7c4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008a0c:	e0fd      	b.n	8008c0a <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2207      	movs	r2, #7
 8008a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a16:	e0f8      	b.n	8008c0a <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8008a18:	7d3b      	ldrb	r3, [r7, #20]
 8008a1a:	2b05      	cmp	r3, #5
 8008a1c:	f040 80f5 	bne.w	8008c0a <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2209      	movs	r2, #9
 8008a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a28:	e0ef      	b.n	8008c0a <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	891a      	ldrh	r2, [r3, #8]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	7958      	ldrb	r0, [r3, #5]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 fe9b 	bl	800a77a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2206      	movs	r2, #6
 8008a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a4c:	e0e8      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	795b      	ldrb	r3, [r3, #5]
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f004 fd43 	bl	800d4e0 <USBH_LL_GetURBState>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008a5e:	7d3b      	ldrb	r3, [r7, #20]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d130      	bne.n	8008ac6 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	8912      	ldrh	r2, [r2, #8]
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d910      	bls.n	8008a92 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	8912      	ldrh	r2, [r2, #8]
 8008a7a:	441a      	add	r2, r3
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	8912      	ldrh	r2, [r2, #8]
 8008a8a:	1a9a      	subs	r2, r3, r2
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a90:	e002      	b.n	8008a98 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	2200      	movs	r2, #0
 8008a96:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00d      	beq.n	8008abc <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	891a      	ldrh	r2, [r3, #8]
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	7958      	ldrb	r0, [r3, #5]
 8008aae:	2301      	movs	r3, #1
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 fe60 	bl	800a77a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008aba:	e0a8      	b.n	8008c0e <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2207      	movs	r2, #7
 8008ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ac4:	e0a3      	b.n	8008c0e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ac6:	7d3b      	ldrb	r3, [r7, #20]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d104      	bne.n	8008ad6 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	2205      	movs	r2, #5
 8008ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ad4:	e09b      	b.n	8008c0e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8008ad6:	7d3b      	ldrb	r3, [r7, #20]
 8008ad8:	2b05      	cmp	r3, #5
 8008ada:	f040 8098 	bne.w	8008c0e <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	220a      	movs	r2, #10
 8008ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ae6:	e092      	b.n	8008c0e <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	791b      	ldrb	r3, [r3, #4]
 8008af2:	220d      	movs	r2, #13
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f001 fe65 	bl	800a7c4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	2208      	movs	r2, #8
 8008afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b02:	e08d      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f004 fce8 	bl	800d4e0 <USBH_LL_GetURBState>
 8008b10:	4603      	mov	r3, r0
 8008b12:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008b14:	7d3b      	ldrb	r3, [r7, #20]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d115      	bne.n	8008b46 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f8aa 	bl	8008c84 <USBH_MSC_DecodeCSW>
 8008b30:	4603      	mov	r3, r0
 8008b32:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008b34:	7d7b      	ldrb	r3, [r7, #21]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008b3e:	e068      	b.n	8008c12 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8008b40:	2302      	movs	r3, #2
 8008b42:	75fb      	strb	r3, [r7, #23]
      break;
 8008b44:	e065      	b.n	8008c12 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8008b46:	7d3b      	ldrb	r3, [r7, #20]
 8008b48:	2b05      	cmp	r3, #5
 8008b4a:	d162      	bne.n	8008c12 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	2209      	movs	r2, #9
 8008b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b54:	e05d      	b.n	8008c12 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f865 	bl	8008c2c <USBH_MSC_BOT_Abort>
 8008b62:	4603      	mov	r3, r0
 8008b64:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008b66:	7dbb      	ldrb	r3, [r7, #22]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d104      	bne.n	8008b76 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2207      	movs	r2, #7
 8008b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008b74:	e04f      	b.n	8008c16 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008b76:	7dbb      	ldrb	r3, [r7, #22]
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d14c      	bne.n	8008c16 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	220b      	movs	r2, #11
 8008b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b84:	e047      	b.n	8008c16 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f84d 	bl	8008c2c <USBH_MSC_BOT_Abort>
 8008b92:	4603      	mov	r3, r0
 8008b94:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008b96:	7dbb      	ldrb	r3, [r7, #22]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11d      	bne.n	8008bd8 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	795b      	ldrb	r3, [r3, #5]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f004 fcf0 	bl	800d588 <USBH_LL_GetToggle>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	7959      	ldrb	r1, [r3, #5]
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	f1c3 0301 	rsb	r3, r3, #1
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f004 fcb1 	bl	800d522 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	791b      	ldrb	r3, [r3, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f004 fcaa 	bl	800d522 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	2209      	movs	r2, #9
 8008bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008bd6:	e020      	b.n	8008c1a <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8008bd8:	7dbb      	ldrb	r3, [r7, #22]
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d11d      	bne.n	8008c1a <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	220b      	movs	r2, #11
 8008be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008be6:	e018      	b.n	8008c1a <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7ff fdf0 	bl	80087ce <USBH_MSC_BOT_REQ_Reset>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d112      	bne.n	8008c1e <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008c00:	e00d      	b.n	8008c1e <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8008c02:	bf00      	nop
 8008c04:	e00c      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>
      break;
 8008c06:	bf00      	nop
 8008c08:	e00a      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>
      break;
 8008c0a:	bf00      	nop
 8008c0c:	e008      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>
      break;
 8008c0e:	bf00      	nop
 8008c10:	e006      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>
      break;
 8008c12:	bf00      	nop
 8008c14:	e004      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>
      break;
 8008c16:	bf00      	nop
 8008c18:	e002      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>
      break;
 8008c1a:	bf00      	nop
 8008c1c:	e000      	b.n	8008c20 <USBH_MSC_BOT_Process+0x398>
      break;
 8008c1e:	bf00      	nop
  }
  return status;
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop

08008c2c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008c4a:	78bb      	ldrb	r3, [r7, #2]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <USBH_MSC_BOT_Abort+0x2a>
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d009      	beq.n	8008c68 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008c54:	e011      	b.n	8008c7a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	79db      	ldrb	r3, [r3, #7]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f99c 	bl	8009f9a <USBH_ClrFeature>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]
      break;
 8008c66:	e008      	b.n	8008c7a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	799b      	ldrb	r3, [r3, #6]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 f993 	bl	8009f9a <USBH_ClrFeature>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]
      break;
 8008c78:	bf00      	nop
  }
  return status;
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008c96:	2301      	movs	r3, #1
 8008c98:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	791b      	ldrb	r3, [r3, #4]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f004 fb8b 	bl	800d3bc <USBH_LL_GetLastXferSize>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b0d      	cmp	r3, #13
 8008caa:	d002      	beq.n	8008cb2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008cac:	2302      	movs	r3, #2
 8008cae:	73fb      	strb	r3, [r7, #15]
 8008cb0:	e024      	b.n	8008cfc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cb6:	4a14      	ldr	r2, [pc, #80]	; (8008d08 <USBH_MSC_DecodeCSW+0x84>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d11d      	bne.n	8008cf8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d119      	bne.n	8008cfc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]
 8008cd6:	e011      	b.n	8008cfc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d102      	bne.n	8008ce8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	73fb      	strb	r3, [r7, #15]
 8008ce6:	e009      	b.n	8008cfc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d104      	bne.n	8008cfc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	73fb      	strb	r3, [r7, #15]
 8008cf6:	e001      	b.n	8008cfc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	53425355 	.word	0x53425355

08008d0c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d002      	beq.n	8008d36 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d021      	beq.n	8008d78 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008d34:	e028      	b.n	8008d88 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	220a      	movs	r2, #10
 8008d48:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	3363      	adds	r3, #99	; 0x63
 8008d50:	2210      	movs	r2, #16
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f004 fcc6 	bl	800d6e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008d72:	2301      	movs	r3, #1
 8008d74:	73fb      	strb	r3, [r7, #15]
      break;
 8008d76:	e007      	b.n	8008d88 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008d78:	78fb      	ldrb	r3, [r7, #3]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff fd83 	bl	8008888 <USBH_MSC_BOT_Process>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73fb      	strb	r3, [r7, #15]
      break;
 8008d86:	bf00      	nop
  }

  return error;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b086      	sub	sp, #24
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008da0:	2301      	movs	r3, #1
 8008da2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d002      	beq.n	8008dbe <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d027      	beq.n	8008e0c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008dbc:	e05f      	b.n	8008e7e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2280      	movs	r2, #128	; 0x80
 8008dc8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	220a      	movs	r2, #10
 8008dd0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	3363      	adds	r3, #99	; 0x63
 8008dd8:	2210      	movs	r2, #16
 8008dda:	2100      	movs	r1, #0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f004 fc82 	bl	800d6e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2225      	movs	r2, #37	; 0x25
 8008de6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	2202      	movs	r2, #2
 8008df6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f103 0210 	add.w	r2, r3, #16
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008e06:	2301      	movs	r3, #1
 8008e08:	75fb      	strb	r3, [r7, #23]
      break;
 8008e0a:	e038      	b.n	8008e7e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008e0c:	7afb      	ldrb	r3, [r7, #11]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f7ff fd39 	bl	8008888 <USBH_MSC_BOT_Process>
 8008e16:	4603      	mov	r3, r0
 8008e18:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d12d      	bne.n	8008e7c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e26:	3303      	adds	r3, #3
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e32:	3302      	adds	r3, #2
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	021b      	lsls	r3, r3, #8
 8008e38:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e40:	3301      	adds	r3, #1
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008e46:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	061b      	lsls	r3, r3, #24
 8008e52:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e5e:	3307      	adds	r3, #7
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e6a:	3306      	adds	r3, #6
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	4313      	orrs	r3, r2
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	809a      	strh	r2, [r3, #4]
      break;
 8008e7c:	bf00      	nop
  }

  return error;
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	460b      	mov	r3, r1
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008e96:	2302      	movs	r3, #2
 8008e98:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d002      	beq.n	8008eb4 <USBH_MSC_SCSI_Inquiry+0x2c>
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d03d      	beq.n	8008f2e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008eb2:	e089      	b.n	8008fc8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2224      	movs	r2, #36	; 0x24
 8008eb8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	2280      	movs	r2, #128	; 0x80
 8008ebe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	220a      	movs	r2, #10
 8008ec6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	3363      	adds	r3, #99	; 0x63
 8008ece:	220a      	movs	r2, #10
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f004 fc07 	bl	800d6e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	2212      	movs	r2, #18
 8008edc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008ee0:	7afb      	ldrb	r3, [r7, #11]
 8008ee2:	015b      	lsls	r3, r3, #5
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	2224      	movs	r2, #36	; 0x24
 8008f00:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f103 0210 	add.w	r2, r3, #16
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f2c:	e04c      	b.n	8008fc8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008f2e:	7afb      	ldrb	r3, [r7, #11]
 8008f30:	4619      	mov	r1, r3
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7ff fca8 	bl	8008888 <USBH_MSC_BOT_Process>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d141      	bne.n	8008fc6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008f42:	2222      	movs	r2, #34	; 0x22
 8008f44:	2100      	movs	r1, #0
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f004 fbcd 	bl	800d6e6 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	f003 031f 	and.w	r3, r3, #31
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	095b      	lsrs	r3, r3, #5
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f74:	3301      	adds	r3, #1
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	b25b      	sxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	da03      	bge.n	8008f86 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	709a      	strb	r2, [r3, #2]
 8008f84:	e002      	b.n	8008f8c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	1cd8      	adds	r0, r3, #3
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f96:	3308      	adds	r3, #8
 8008f98:	2208      	movs	r2, #8
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	f004 fb98 	bl	800d6d0 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f103 000c 	add.w	r0, r3, #12
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fac:	3310      	adds	r3, #16
 8008fae:	2210      	movs	r2, #16
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	f004 fb8d 	bl	800d6d0 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	331d      	adds	r3, #29
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008fc0:	3220      	adds	r2, #32
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	601a      	str	r2, [r3, #0]
      break;
 8008fc6:	bf00      	nop
  }

  return error;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b086      	sub	sp, #24
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	607a      	str	r2, [r7, #4]
 8008fde:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d002      	beq.n	8008ffe <USBH_MSC_SCSI_RequestSense+0x2c>
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d03d      	beq.n	8009078 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008ffc:	e05d      	b.n	80090ba <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	220e      	movs	r2, #14
 8009002:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2280      	movs	r2, #128	; 0x80
 8009008:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	220a      	movs	r2, #10
 8009010:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	3363      	adds	r3, #99	; 0x63
 8009018:	2210      	movs	r2, #16
 800901a:	2100      	movs	r1, #0
 800901c:	4618      	mov	r0, r3
 800901e:	f004 fb62 	bl	800d6e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2203      	movs	r2, #3
 8009026:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800902a:	7afb      	ldrb	r3, [r7, #11]
 800902c:	015b      	lsls	r3, r3, #5
 800902e:	b2da      	uxtb	r2, r3
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	220e      	movs	r2, #14
 800904a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2202      	movs	r2, #2
 8009062:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f103 0210 	add.w	r2, r3, #16
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009072:	2301      	movs	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]
      break;
 8009076:	e020      	b.n	80090ba <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009078:	7afb      	ldrb	r3, [r7, #11]
 800907a:	4619      	mov	r1, r3
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff fc03 	bl	8008888 <USBH_MSC_BOT_Process>
 8009082:	4603      	mov	r3, r0
 8009084:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009086:	7dfb      	ldrb	r3, [r7, #23]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d115      	bne.n	80090b8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009092:	3302      	adds	r3, #2
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	f003 030f 	and.w	r3, r3, #15
 800909a:	b2da      	uxtb	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a6:	7b1a      	ldrb	r2, [r3, #12]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090b2:	7b5a      	ldrb	r2, [r3, #13]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	709a      	strb	r2, [r3, #2]
      break;
 80090b8:	bf00      	nop
  }

  return error;
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	607a      	str	r2, [r7, #4]
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	460b      	mov	r3, r1
 80090d2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80090d4:	2302      	movs	r3, #2
 80090d6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d002      	beq.n	80090f2 <USBH_MSC_SCSI_Write+0x2e>
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d047      	beq.n	8009180 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80090f0:	e04e      	b.n	8009190 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80090f8:	461a      	mov	r2, r3
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	fb03 f202 	mul.w	r2, r3, r2
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	220a      	movs	r2, #10
 8009110:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	3363      	adds	r3, #99	; 0x63
 8009118:	2210      	movs	r2, #16
 800911a:	2100      	movs	r1, #0
 800911c:	4618      	mov	r0, r3
 800911e:	f004 fae2 	bl	800d6e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	222a      	movs	r2, #42	; 0x2a
 8009126:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800912a:	79fa      	ldrb	r2, [r7, #7]
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009132:	79ba      	ldrb	r2, [r7, #6]
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800913a:	797a      	ldrb	r2, [r7, #5]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009142:	1d3b      	adds	r3, r7, #4
 8009144:	781a      	ldrb	r2, [r3, #0]
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800914c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009156:	f107 0320 	add.w	r3, r7, #32
 800915a:	781a      	ldrb	r2, [r3, #0]
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2201      	movs	r2, #1
 8009166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2202      	movs	r2, #2
 800916e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800917a:	2301      	movs	r3, #1
 800917c:	75fb      	strb	r3, [r7, #23]
      break;
 800917e:	e007      	b.n	8009190 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	4619      	mov	r1, r3
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f7ff fb7f 	bl	8008888 <USBH_MSC_BOT_Process>
 800918a:	4603      	mov	r3, r0
 800918c:	75fb      	strb	r3, [r7, #23]
      break;
 800918e:	bf00      	nop
  }

  return error;
 8009190:	7dfb      	ldrb	r3, [r7, #23]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b086      	sub	sp, #24
 800919e:	af00      	add	r7, sp, #0
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
 80091a6:	460b      	mov	r3, r1
 80091a8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80091aa:	2302      	movs	r3, #2
 80091ac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d002      	beq.n	80091c8 <USBH_MSC_SCSI_Read+0x2e>
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d047      	beq.n	8009256 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80091c6:	e04e      	b.n	8009266 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80091ce:	461a      	mov	r2, r3
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	fb03 f202 	mul.w	r2, r3, r2
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2280      	movs	r2, #128	; 0x80
 80091de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	220a      	movs	r2, #10
 80091e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	3363      	adds	r3, #99	; 0x63
 80091ee:	2210      	movs	r2, #16
 80091f0:	2100      	movs	r1, #0
 80091f2:	4618      	mov	r0, r3
 80091f4:	f004 fa77 	bl	800d6e6 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	2228      	movs	r2, #40	; 0x28
 80091fc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009200:	79fa      	ldrb	r2, [r7, #7]
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009208:	79ba      	ldrb	r2, [r7, #6]
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009210:	797a      	ldrb	r2, [r7, #5]
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009218:	1d3b      	adds	r3, r7, #4
 800921a:	781a      	ldrb	r2, [r3, #0]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009222:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800922c:	f107 0320 	add.w	r3, r7, #32
 8009230:	781a      	ldrb	r2, [r3, #0]
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009250:	2301      	movs	r3, #1
 8009252:	75fb      	strb	r3, [r7, #23]
      break;
 8009254:	e007      	b.n	8009266 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009256:	7afb      	ldrb	r3, [r7, #11]
 8009258:	4619      	mov	r1, r3
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f7ff fb14 	bl	8008888 <USBH_MSC_BOT_Process>
 8009260:	4603      	mov	r3, r0
 8009262:	75fb      	strb	r3, [r7, #23]
      break;
 8009264:	bf00      	nop
  }

  return error;
 8009266:	7dfb      	ldrb	r3, [r7, #23]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009284:	2302      	movs	r3, #2
 8009286:	e029      	b.n	80092dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	79fa      	ldrb	r2, [r7, #7]
 800928c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 f81f 	bl	80092e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f003 ffbf 	bl	800d258 <USBH_LL_Init>

  return USBH_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	e009      	b.n	800930a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	33e0      	adds	r3, #224	; 0xe0
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	2200      	movs	r2, #0
 8009302:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3301      	adds	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2b0e      	cmp	r3, #14
 800930e:	d9f2      	bls.n	80092f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e009      	b.n	800932a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009320:	2200      	movs	r2, #0
 8009322:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3301      	adds	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009330:	d3f1      	bcc.n	8009316 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2240      	movs	r2, #64	; 0x40
 8009356:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d016      	beq.n	80093ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10e      	bne.n	80093c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80093b0:	1c59      	adds	r1, r3, #1
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	33de      	adds	r3, #222	; 0xde
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73fb      	strb	r3, [r7, #15]
 80093c6:	e004      	b.n	80093d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80093c8:	2302      	movs	r3, #2
 80093ca:	73fb      	strb	r3, [r7, #15]
 80093cc:	e001      	b.n	80093d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80093ce:	2302      	movs	r3, #2
 80093d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80093f6:	78fa      	ldrb	r2, [r7, #3]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d204      	bcs.n	8009406 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	78fa      	ldrb	r2, [r7, #3]
 8009400:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009404:	e001      	b.n	800940a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009406:	2302      	movs	r3, #2
 8009408:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800940a:	7bfb      	ldrb	r3, [r7, #15]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009418:	b480      	push	{r7}
 800941a:	b087      	sub	sp, #28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	4608      	mov	r0, r1
 8009422:	4611      	mov	r1, r2
 8009424:	461a      	mov	r2, r3
 8009426:	4603      	mov	r3, r0
 8009428:	70fb      	strb	r3, [r7, #3]
 800942a:	460b      	mov	r3, r1
 800942c:	70bb      	strb	r3, [r7, #2]
 800942e:	4613      	mov	r3, r2
 8009430:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009436:	2300      	movs	r3, #0
 8009438:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009440:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009442:	e025      	b.n	8009490 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	221a      	movs	r2, #26
 8009448:	fb02 f303 	mul.w	r3, r2, r3
 800944c:	3308      	adds	r3, #8
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	3302      	adds	r3, #2
 8009454:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	795b      	ldrb	r3, [r3, #5]
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	429a      	cmp	r2, r3
 800945e:	d002      	beq.n	8009466 <USBH_FindInterface+0x4e>
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	2bff      	cmp	r3, #255	; 0xff
 8009464:	d111      	bne.n	800948a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800946a:	78ba      	ldrb	r2, [r7, #2]
 800946c:	429a      	cmp	r2, r3
 800946e:	d002      	beq.n	8009476 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009470:	78bb      	ldrb	r3, [r7, #2]
 8009472:	2bff      	cmp	r3, #255	; 0xff
 8009474:	d109      	bne.n	800948a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800947a:	787a      	ldrb	r2, [r7, #1]
 800947c:	429a      	cmp	r2, r3
 800947e:	d002      	beq.n	8009486 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009480:	787b      	ldrb	r3, [r7, #1]
 8009482:	2bff      	cmp	r3, #255	; 0xff
 8009484:	d101      	bne.n	800948a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009486:	7dfb      	ldrb	r3, [r7, #23]
 8009488:	e006      	b.n	8009498 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	3301      	adds	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d9d6      	bls.n	8009444 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009496:	23ff      	movs	r3, #255	; 0xff
}
 8009498:	4618      	mov	r0, r3
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f003 ff0f 	bl	800d2d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80094b2:	2101      	movs	r1, #1
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f004 f826 	bl	800d506 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af04      	add	r7, sp, #16
 80094ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80094cc:	2302      	movs	r3, #2
 80094ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d102      	bne.n	80094e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2203      	movs	r2, #3
 80094e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b0b      	cmp	r3, #11
 80094ee:	f200 81b3 	bhi.w	8009858 <USBH_Process+0x394>
 80094f2:	a201      	add	r2, pc, #4	; (adr r2, 80094f8 <USBH_Process+0x34>)
 80094f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f8:	08009529 	.word	0x08009529
 80094fc:	0800955b 	.word	0x0800955b
 8009500:	080095c3 	.word	0x080095c3
 8009504:	080097f3 	.word	0x080097f3
 8009508:	08009859 	.word	0x08009859
 800950c:	08009667 	.word	0x08009667
 8009510:	08009799 	.word	0x08009799
 8009514:	0800969d 	.word	0x0800969d
 8009518:	080096bd 	.word	0x080096bd
 800951c:	080096dd 	.word	0x080096dd
 8009520:	0800970b 	.word	0x0800970b
 8009524:	080097db 	.word	0x080097db
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 8193 	beq.w	800985c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800953c:	20c8      	movs	r0, #200	; 0xc8
 800953e:	f004 f856 	bl	800d5ee <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f003 ff1f 	bl	800d386 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009558:	e180      	b.n	800985c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009560:	2b01      	cmp	r3, #1
 8009562:	d107      	bne.n	8009574 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009572:	e182      	b.n	800987a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800957a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800957e:	d914      	bls.n	80095aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009586:	3301      	adds	r3, #1
 8009588:	b2da      	uxtb	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009596:	2b03      	cmp	r3, #3
 8009598:	d903      	bls.n	80095a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	220d      	movs	r2, #13
 800959e:	701a      	strb	r2, [r3, #0]
      break;
 80095a0:	e16b      	b.n	800987a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	701a      	strb	r2, [r3, #0]
      break;
 80095a8:	e167      	b.n	800987a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80095b0:	f103 020a 	add.w	r2, r3, #10
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80095ba:	200a      	movs	r0, #10
 80095bc:	f004 f817 	bl	800d5ee <USBH_Delay>
      break;
 80095c0:	e15b      	b.n	800987a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d005      	beq.n	80095d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095d2:	2104      	movs	r1, #4
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80095d8:	2064      	movs	r0, #100	; 0x64
 80095da:	f004 f808 	bl	800d5ee <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f003 feac 	bl	800d33c <USBH_LL_GetSpeed>
 80095e4:	4603      	mov	r3, r0
 80095e6:	461a      	mov	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2205      	movs	r2, #5
 80095f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80095f4:	2100      	movs	r1, #0
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 f931 	bl	800a85e <USBH_AllocPipe>
 80095fc:	4603      	mov	r3, r0
 80095fe:	461a      	mov	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009604:	2180      	movs	r1, #128	; 0x80
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 f929 	bl	800a85e <USBH_AllocPipe>
 800960c:	4603      	mov	r3, r0
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	7919      	ldrb	r1, [r3, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009628:	b292      	uxth	r2, r2
 800962a:	9202      	str	r2, [sp, #8]
 800962c:	2200      	movs	r2, #0
 800962e:	9201      	str	r2, [sp, #4]
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	4603      	mov	r3, r0
 8009634:	2280      	movs	r2, #128	; 0x80
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 f8e2 	bl	800a800 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	7959      	ldrb	r1, [r3, #5]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009650:	b292      	uxth	r2, r2
 8009652:	9202      	str	r2, [sp, #8]
 8009654:	2200      	movs	r2, #0
 8009656:	9201      	str	r2, [sp, #4]
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	4603      	mov	r3, r0
 800965c:	2200      	movs	r2, #0
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 f8ce 	bl	800a800 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009664:	e109      	b.n	800987a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f90c 	bl	8009884 <USBH_HandleEnum>
 800966c:	4603      	mov	r3, r0
 800966e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009670:	7bbb      	ldrb	r3, [r7, #14]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	f040 80f3 	bne.w	8009860 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009688:	2b01      	cmp	r3, #1
 800968a:	d103      	bne.n	8009694 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2208      	movs	r2, #8
 8009690:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009692:	e0e5      	b.n	8009860 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2207      	movs	r2, #7
 8009698:	701a      	strb	r2, [r3, #0]
      break;
 800969a:	e0e1      	b.n	8009860 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 80de 	beq.w	8009864 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096ae:	2101      	movs	r1, #1
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2208      	movs	r2, #8
 80096b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80096ba:	e0d3      	b.n	8009864 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fc20 	bl	8009f0c <USBH_SetCfg>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f040 80ca 	bne.w	8009868 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2209      	movs	r2, #9
 80096d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096da:	e0c5      	b.n	8009868 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80096e2:	f003 0320 	and.w	r3, r3, #32
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80096ea:	2101      	movs	r1, #1
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fc30 	bl	8009f52 <USBH_SetFeature>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f040 80b9 	bne.w	800986c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	220a      	movs	r2, #10
 80096fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009700:	e0b4      	b.n	800986c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	220a      	movs	r2, #10
 8009706:	701a      	strb	r2, [r3, #0]
      break;
 8009708:	e0b0      	b.n	800986c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 80ad 	beq.w	8009870 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]
 8009722:	e016      	b.n	8009752 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009724:	7bfa      	ldrb	r2, [r7, #15]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	32de      	adds	r2, #222	; 0xde
 800972a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972e:	791a      	ldrb	r2, [r3, #4]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009736:	429a      	cmp	r2, r3
 8009738:	d108      	bne.n	800974c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800973a:	7bfa      	ldrb	r2, [r7, #15]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	32de      	adds	r2, #222	; 0xde
 8009740:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800974a:	e005      	b.n	8009758 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	3301      	adds	r3, #1
 8009750:	73fb      	strb	r3, [r7, #15]
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0e5      	beq.n	8009724 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d016      	beq.n	8009790 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d109      	bne.n	8009788 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2206      	movs	r2, #6
 8009778:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009780:	2103      	movs	r1, #3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009786:	e073      	b.n	8009870 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	220d      	movs	r2, #13
 800978c:	701a      	strb	r2, [r3, #0]
      break;
 800978e:	e06f      	b.n	8009870 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	220d      	movs	r2, #13
 8009794:	701a      	strb	r2, [r3, #0]
      break;
 8009796:	e06b      	b.n	8009870 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d017      	beq.n	80097d2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	4798      	blx	r3
 80097ae:	4603      	mov	r3, r0
 80097b0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d103      	bne.n	80097c2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	220b      	movs	r2, #11
 80097be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097c0:	e058      	b.n	8009874 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d154      	bne.n	8009874 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	220d      	movs	r2, #13
 80097ce:	701a      	strb	r2, [r3, #0]
      break;
 80097d0:	e050      	b.n	8009874 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	220d      	movs	r2, #13
 80097d6:	701a      	strb	r2, [r3, #0]
      break;
 80097d8:	e04c      	b.n	8009874 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d049      	beq.n	8009878 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	4798      	blx	r3
      }
      break;
 80097f0:	e042      	b.n	8009878 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff fd72 	bl	80092e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d009      	beq.n	800981e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009824:	2b00      	cmp	r3, #0
 8009826:	d005      	beq.n	8009834 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800982e:	2105      	movs	r1, #5
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b01      	cmp	r3, #1
 800983e:	d107      	bne.n	8009850 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff fe2b 	bl	80094a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800984e:	e014      	b.n	800987a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f003 fd3d 	bl	800d2d0 <USBH_LL_Start>
      break;
 8009856:	e010      	b.n	800987a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009858:	bf00      	nop
 800985a:	e00e      	b.n	800987a <USBH_Process+0x3b6>
      break;
 800985c:	bf00      	nop
 800985e:	e00c      	b.n	800987a <USBH_Process+0x3b6>
      break;
 8009860:	bf00      	nop
 8009862:	e00a      	b.n	800987a <USBH_Process+0x3b6>
    break;
 8009864:	bf00      	nop
 8009866:	e008      	b.n	800987a <USBH_Process+0x3b6>
      break;
 8009868:	bf00      	nop
 800986a:	e006      	b.n	800987a <USBH_Process+0x3b6>
      break;
 800986c:	bf00      	nop
 800986e:	e004      	b.n	800987a <USBH_Process+0x3b6>
      break;
 8009870:	bf00      	nop
 8009872:	e002      	b.n	800987a <USBH_Process+0x3b6>
      break;
 8009874:	bf00      	nop
 8009876:	e000      	b.n	800987a <USBH_Process+0x3b6>
      break;
 8009878:	bf00      	nop
  }
  return USBH_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b088      	sub	sp, #32
 8009888:	af04      	add	r7, sp, #16
 800988a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800988c:	2301      	movs	r3, #1
 800988e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009890:	2301      	movs	r3, #1
 8009892:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	785b      	ldrb	r3, [r3, #1]
 8009898:	2b07      	cmp	r3, #7
 800989a:	f200 81c1 	bhi.w	8009c20 <USBH_HandleEnum+0x39c>
 800989e:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <USBH_HandleEnum+0x20>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	080098c5 	.word	0x080098c5
 80098a8:	08009983 	.word	0x08009983
 80098ac:	080099ed 	.word	0x080099ed
 80098b0:	08009a7b 	.word	0x08009a7b
 80098b4:	08009ae5 	.word	0x08009ae5
 80098b8:	08009b55 	.word	0x08009b55
 80098bc:	08009b9b 	.word	0x08009b9b
 80098c0:	08009be1 	.word	0x08009be1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80098c4:	2108      	movs	r1, #8
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fa50 	bl	8009d6c <USBH_Get_DevDesc>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d130      	bne.n	8009938 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	7919      	ldrb	r1, [r3, #4]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80098fa:	b292      	uxth	r2, r2
 80098fc:	9202      	str	r2, [sp, #8]
 80098fe:	2200      	movs	r2, #0
 8009900:	9201      	str	r2, [sp, #4]
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	4603      	mov	r3, r0
 8009906:	2280      	movs	r2, #128	; 0x80
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 ff79 	bl	800a800 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	7959      	ldrb	r1, [r3, #5]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009922:	b292      	uxth	r2, r2
 8009924:	9202      	str	r2, [sp, #8]
 8009926:	2200      	movs	r2, #0
 8009928:	9201      	str	r2, [sp, #4]
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	4603      	mov	r3, r0
 800992e:	2200      	movs	r2, #0
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 ff65 	bl	800a800 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009936:	e175      	b.n	8009c24 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	2b03      	cmp	r3, #3
 800993c:	f040 8172 	bne.w	8009c24 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009946:	3301      	adds	r3, #1
 8009948:	b2da      	uxtb	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009956:	2b03      	cmp	r3, #3
 8009958:	d903      	bls.n	8009962 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	220d      	movs	r2, #13
 800995e:	701a      	strb	r2, [r3, #0]
      break;
 8009960:	e160      	b.n	8009c24 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	795b      	ldrb	r3, [r3, #5]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 ff99 	bl	800a8a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	791b      	ldrb	r3, [r3, #4]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 ff93 	bl	800a8a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	701a      	strb	r2, [r3, #0]
      break;
 8009980:	e150      	b.n	8009c24 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009982:	2112      	movs	r1, #18
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f9f1 	bl	8009d6c <USBH_Get_DevDesc>
 800998a:	4603      	mov	r3, r0
 800998c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d103      	bne.n	800999c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800999a:	e145      	b.n	8009c28 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	2b03      	cmp	r3, #3
 80099a0:	f040 8142 	bne.w	8009c28 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099aa:	3301      	adds	r3, #1
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d903      	bls.n	80099c6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	220d      	movs	r2, #13
 80099c2:	701a      	strb	r2, [r3, #0]
      break;
 80099c4:	e130      	b.n	8009c28 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	795b      	ldrb	r3, [r3, #5]
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 ff67 	bl	800a8a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	791b      	ldrb	r3, [r3, #4]
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 ff61 	bl	800a8a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	701a      	strb	r2, [r3, #0]
      break;
 80099ea:	e11d      	b.n	8009c28 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80099ec:	2101      	movs	r1, #1
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fa68 	bl	8009ec4 <USBH_SetAddress>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d132      	bne.n	8009a64 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80099fe:	2002      	movs	r0, #2
 8009a00:	f003 fdf5 	bl	800d5ee <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2203      	movs	r2, #3
 8009a10:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	7919      	ldrb	r1, [r3, #4]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a26:	b292      	uxth	r2, r2
 8009a28:	9202      	str	r2, [sp, #8]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	9201      	str	r2, [sp, #4]
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	4603      	mov	r3, r0
 8009a32:	2280      	movs	r2, #128	; 0x80
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fee3 	bl	800a800 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	7959      	ldrb	r1, [r3, #5]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a4e:	b292      	uxth	r2, r2
 8009a50:	9202      	str	r2, [sp, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	9201      	str	r2, [sp, #4]
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fecf 	bl	800a800 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a62:	e0e3      	b.n	8009c2c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	f040 80e0 	bne.w	8009c2c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	220d      	movs	r2, #13
 8009a70:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	705a      	strb	r2, [r3, #1]
      break;
 8009a78:	e0d8      	b.n	8009c2c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009a7a:	2109      	movs	r1, #9
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f99d 	bl	8009dbc <USBH_Get_CfgDesc>
 8009a82:	4603      	mov	r3, r0
 8009a84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d103      	bne.n	8009a94 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2204      	movs	r2, #4
 8009a90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a92:	e0cd      	b.n	8009c30 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	f040 80ca 	bne.w	8009c30 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d903      	bls.n	8009abe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	220d      	movs	r2, #13
 8009aba:	701a      	strb	r2, [r3, #0]
      break;
 8009abc:	e0b8      	b.n	8009c30 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	795b      	ldrb	r3, [r3, #5]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 feeb 	bl	800a8a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	791b      	ldrb	r3, [r3, #4]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fee5 	bl	800a8a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	701a      	strb	r2, [r3, #0]
      break;
 8009ae2:	e0a5      	b.n	8009c30 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f965 	bl	8009dbc <USBH_Get_CfgDesc>
 8009af2:	4603      	mov	r3, r0
 8009af4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d103      	bne.n	8009b04 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2205      	movs	r2, #5
 8009b00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b02:	e097      	b.n	8009c34 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	f040 8094 	bne.w	8009c34 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b12:	3301      	adds	r3, #1
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	d903      	bls.n	8009b2e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	220d      	movs	r2, #13
 8009b2a:	701a      	strb	r2, [r3, #0]
      break;
 8009b2c:	e082      	b.n	8009c34 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	795b      	ldrb	r3, [r3, #5]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 feb3 	bl	800a8a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	791b      	ldrb	r3, [r3, #4]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fead 	bl	800a8a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	701a      	strb	r2, [r3, #0]
      break;
 8009b52:	e06f      	b.n	8009c34 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d019      	beq.n	8009b92 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b6a:	23ff      	movs	r3, #255	; 0xff
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f949 	bl	8009e04 <USBH_Get_StringDesc>
 8009b72:	4603      	mov	r3, r0
 8009b74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d103      	bne.n	8009b84 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2206      	movs	r2, #6
 8009b80:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b82:	e059      	b.n	8009c38 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d156      	bne.n	8009c38 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2206      	movs	r2, #6
 8009b8e:	705a      	strb	r2, [r3, #1]
      break;
 8009b90:	e052      	b.n	8009c38 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2206      	movs	r2, #6
 8009b96:	705a      	strb	r2, [r3, #1]
      break;
 8009b98:	e04e      	b.n	8009c38 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d019      	beq.n	8009bd8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009bb0:	23ff      	movs	r3, #255	; 0xff
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f926 	bl	8009e04 <USBH_Get_StringDesc>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d103      	bne.n	8009bca <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2207      	movs	r2, #7
 8009bc6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009bc8:	e038      	b.n	8009c3c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	2b03      	cmp	r3, #3
 8009bce:	d135      	bne.n	8009c3c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2207      	movs	r2, #7
 8009bd4:	705a      	strb	r2, [r3, #1]
      break;
 8009bd6:	e031      	b.n	8009c3c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2207      	movs	r2, #7
 8009bdc:	705a      	strb	r2, [r3, #1]
      break;
 8009bde:	e02d      	b.n	8009c3c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d017      	beq.n	8009c1a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009bf6:	23ff      	movs	r3, #255	; 0xff
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f903 	bl	8009e04 <USBH_Get_StringDesc>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009c0c:	e018      	b.n	8009c40 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d115      	bne.n	8009c40 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]
      break;
 8009c18:	e012      	b.n	8009c40 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1e:	e00f      	b.n	8009c40 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009c20:	bf00      	nop
 8009c22:	e00e      	b.n	8009c42 <USBH_HandleEnum+0x3be>
      break;
 8009c24:	bf00      	nop
 8009c26:	e00c      	b.n	8009c42 <USBH_HandleEnum+0x3be>
      break;
 8009c28:	bf00      	nop
 8009c2a:	e00a      	b.n	8009c42 <USBH_HandleEnum+0x3be>
      break;
 8009c2c:	bf00      	nop
 8009c2e:	e008      	b.n	8009c42 <USBH_HandleEnum+0x3be>
      break;
 8009c30:	bf00      	nop
 8009c32:	e006      	b.n	8009c42 <USBH_HandleEnum+0x3be>
      break;
 8009c34:	bf00      	nop
 8009c36:	e004      	b.n	8009c42 <USBH_HandleEnum+0x3be>
      break;
 8009c38:	bf00      	nop
 8009c3a:	e002      	b.n	8009c42 <USBH_HandleEnum+0x3be>
      break;
 8009c3c:	bf00      	nop
 8009c3e:	e000      	b.n	8009c42 <USBH_HandleEnum+0x3be>
      break;
 8009c40:	bf00      	nop
  }
  return Status;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009c5e:	bf00      	nop
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f804 	bl	8009c8e <USBH_HandleSof>
}
 8009c86:	bf00      	nop
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b082      	sub	sp, #8
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b0b      	cmp	r3, #11
 8009c9e:	d10a      	bne.n	8009cb6 <USBH_HandleSof+0x28>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	4798      	blx	r3
  }
}
 8009cb6:	bf00      	nop
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009cce:	bf00      	nop
}
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009cea:	bf00      	nop
}
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f003 fade 	bl	800d306 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	791b      	ldrb	r3, [r3, #4]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fda5 	bl	800a8a0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	795b      	ldrb	r3, [r3, #5]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fd9f 	bl	800a8a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af02      	add	r7, sp, #8
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009d7e:	78fb      	ldrb	r3, [r7, #3]
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	4613      	mov	r3, r2
 8009d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f864 	bl	8009e5a <USBH_GetDescriptor>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73fb      	strb	r3, [r7, #15]
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009da8:	78fa      	ldrb	r2, [r7, #3]
 8009daa:	b292      	uxth	r2, r2
 8009dac:	4619      	mov	r1, r3
 8009dae:	f000 f918 	bl	8009fe2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	331c      	adds	r3, #28
 8009dcc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009dce:	887b      	ldrh	r3, [r7, #2]
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dd8:	2100      	movs	r1, #0
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f83d 	bl	8009e5a <USBH_GetDescriptor>
 8009de0:	4603      	mov	r3, r0
 8009de2:	72fb      	strb	r3, [r7, #11]
 8009de4:	7afb      	ldrb	r3, [r7, #11]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d107      	bne.n	8009dfa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009df0:	887a      	ldrh	r2, [r7, #2]
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 f964 	bl	800a0c2 <USBH_ParseCfgDesc>
  }

  return status;
 8009dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b088      	sub	sp, #32
 8009e08:	af02      	add	r7, sp, #8
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	607a      	str	r2, [r7, #4]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	460b      	mov	r3, r1
 8009e12:	72fb      	strb	r3, [r7, #11]
 8009e14:	4613      	mov	r3, r2
 8009e16:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009e18:	7afb      	ldrb	r3, [r7, #11]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009e20:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009e28:	893b      	ldrh	r3, [r7, #8]
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	2100      	movs	r1, #0
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 f812 	bl	8009e5a <USBH_GetDescriptor>
 8009e36:	4603      	mov	r3, r0
 8009e38:	75fb      	strb	r3, [r7, #23]
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d107      	bne.n	8009e50 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e46:	893a      	ldrh	r2, [r7, #8]
 8009e48:	6879      	ldr	r1, [r7, #4]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 fa37 	bl	800a2be <USBH_ParseStringDesc>
  }

  return status;
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	607b      	str	r3, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	72fb      	strb	r3, [r7, #11]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	789b      	ldrb	r3, [r3, #2]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d11c      	bne.n	8009eae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009e74:	7afb      	ldrb	r3, [r7, #11]
 8009e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2206      	movs	r2, #6
 8009e84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	893a      	ldrh	r2, [r7, #8]
 8009e8a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009e8c:	893b      	ldrh	r3, [r7, #8]
 8009e8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e96:	d104      	bne.n	8009ea2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f240 4209 	movw	r2, #1033	; 0x409
 8009e9e:	829a      	strh	r2, [r3, #20]
 8009ea0:	e002      	b.n	8009ea8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8b3a      	ldrh	r2, [r7, #24]
 8009eac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009eae:	8b3b      	ldrh	r3, [r7, #24]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 fa50 	bl	800a35a <USBH_CtlReq>
 8009eba:	4603      	mov	r3, r0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	789b      	ldrb	r3, [r3, #2]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d10f      	bne.n	8009ef8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2205      	movs	r2, #5
 8009ee2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ef8:	2200      	movs	r2, #0
 8009efa:	2100      	movs	r1, #0
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fa2c 	bl	800a35a <USBH_CtlReq>
 8009f02:	4603      	mov	r3, r0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	789b      	ldrb	r3, [r3, #2]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d10e      	bne.n	8009f3e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2209      	movs	r2, #9
 8009f2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	887a      	ldrh	r2, [r7, #2]
 8009f30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2100      	movs	r1, #0
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fa09 	bl	800a35a <USBH_CtlReq>
 8009f48:	4603      	mov	r3, r0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b082      	sub	sp, #8
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	789b      	ldrb	r3, [r3, #2]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d10f      	bne.n	8009f86 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2203      	movs	r2, #3
 8009f70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009f72:	78fb      	ldrb	r3, [r7, #3]
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009f86:	2200      	movs	r2, #0
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f9e5 	bl	800a35a <USBH_CtlReq>
 8009f90:	4603      	mov	r3, r0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	789b      	ldrb	r3, [r3, #2]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d10f      	bne.n	8009fce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f9c1 	bl	800a35a <USBH_CtlReq>
 8009fd8:	4603      	mov	r3, r0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b085      	sub	sp, #20
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	4613      	mov	r3, r2
 8009fee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	781a      	ldrb	r2, [r3, #0]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	785a      	ldrb	r2, [r3, #1]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	3302      	adds	r3, #2
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	b29a      	uxth	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	3303      	adds	r3, #3
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	021b      	lsls	r3, r3, #8
 800a012:	b29b      	uxth	r3, r3
 800a014:	4313      	orrs	r3, r2
 800a016:	b29a      	uxth	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	791a      	ldrb	r2, [r3, #4]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	795a      	ldrb	r2, [r3, #5]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	799a      	ldrb	r2, [r3, #6]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	79da      	ldrb	r2, [r3, #7]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	2b08      	cmp	r3, #8
 800a040:	d939      	bls.n	800a0b6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	3308      	adds	r3, #8
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	b29a      	uxth	r2, r3
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	3309      	adds	r3, #9
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	b29b      	uxth	r3, r3
 800a052:	021b      	lsls	r3, r3, #8
 800a054:	b29b      	uxth	r3, r3
 800a056:	4313      	orrs	r3, r2
 800a058:	b29a      	uxth	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	330a      	adds	r3, #10
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	b29a      	uxth	r2, r3
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	330b      	adds	r3, #11
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	021b      	lsls	r3, r3, #8
 800a070:	b29b      	uxth	r3, r3
 800a072:	4313      	orrs	r3, r2
 800a074:	b29a      	uxth	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	330c      	adds	r3, #12
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	b29a      	uxth	r2, r3
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	330d      	adds	r3, #13
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	021b      	lsls	r3, r3, #8
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	4313      	orrs	r3, r2
 800a090:	b29a      	uxth	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	7b9a      	ldrb	r2, [r3, #14]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	7bda      	ldrb	r2, [r3, #15]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	7c1a      	ldrb	r2, [r3, #16]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	7c5a      	ldrb	r2, [r3, #17]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	745a      	strb	r2, [r3, #17]
  }
}
 800a0b6:	bf00      	nop
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b08a      	sub	sp, #40	; 0x28
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	781a      	ldrb	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	785a      	ldrb	r2, [r3, #1]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	3302      	adds	r3, #2
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	3303      	adds	r3, #3
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	b29b      	uxth	r3, r3
 800a104:	021b      	lsls	r3, r3, #8
 800a106:	b29b      	uxth	r3, r3
 800a108:	4313      	orrs	r3, r2
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	791a      	ldrb	r2, [r3, #4]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	795a      	ldrb	r2, [r3, #5]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	799a      	ldrb	r2, [r3, #6]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	79da      	ldrb	r2, [r3, #7]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	7a1a      	ldrb	r2, [r3, #8]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a138:	88fb      	ldrh	r3, [r7, #6]
 800a13a:	2b09      	cmp	r3, #9
 800a13c:	d95f      	bls.n	800a1fe <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a13e:	2309      	movs	r3, #9
 800a140:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a142:	2300      	movs	r3, #0
 800a144:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a146:	e051      	b.n	800a1ec <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a148:	f107 0316 	add.w	r3, r7, #22
 800a14c:	4619      	mov	r1, r3
 800a14e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a150:	f000 f8e8 	bl	800a324 <USBH_GetNextDesc>
 800a154:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	785b      	ldrb	r3, [r3, #1]
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	d146      	bne.n	800a1ec <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a15e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a162:	221a      	movs	r2, #26
 800a164:	fb02 f303 	mul.w	r3, r2, r3
 800a168:	3308      	adds	r3, #8
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	4413      	add	r3, r2
 800a16e:	3302      	adds	r3, #2
 800a170:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a172:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a174:	69f8      	ldr	r0, [r7, #28]
 800a176:	f000 f846 	bl	800a206 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a180:	2300      	movs	r3, #0
 800a182:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a184:	e022      	b.n	800a1cc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a186:	f107 0316 	add.w	r3, r7, #22
 800a18a:	4619      	mov	r1, r3
 800a18c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a18e:	f000 f8c9 	bl	800a324 <USBH_GetNextDesc>
 800a192:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	785b      	ldrb	r3, [r3, #1]
 800a198:	2b05      	cmp	r3, #5
 800a19a:	d117      	bne.n	800a1cc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a19c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a1a4:	3201      	adds	r2, #1
 800a1a6:	00d2      	lsls	r2, r2, #3
 800a1a8:	211a      	movs	r1, #26
 800a1aa:	fb01 f303 	mul.w	r3, r1, r3
 800a1ae:	4413      	add	r3, r2
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a1ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1bc:	69b8      	ldr	r0, [r7, #24]
 800a1be:	f000 f851 	bl	800a264 <USBH_ParseEPDesc>
            ep_ix++;
 800a1c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	791b      	ldrb	r3, [r3, #4]
 800a1d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d204      	bcs.n	800a1e2 <USBH_ParseCfgDesc+0x120>
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	885a      	ldrh	r2, [r3, #2]
 800a1dc:	8afb      	ldrh	r3, [r7, #22]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d8d1      	bhi.n	800a186 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a1e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a1ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d804      	bhi.n	800a1fe <USBH_ParseCfgDesc+0x13c>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	885a      	ldrh	r2, [r3, #2]
 800a1f8:	8afb      	ldrh	r3, [r7, #22]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d8a4      	bhi.n	800a148 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a1fe:	bf00      	nop
 800a200:	3728      	adds	r7, #40	; 0x28
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a206:	b480      	push	{r7}
 800a208:	b083      	sub	sp, #12
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781a      	ldrb	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	785a      	ldrb	r2, [r3, #1]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	789a      	ldrb	r2, [r3, #2]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	78da      	ldrb	r2, [r3, #3]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	791a      	ldrb	r2, [r3, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	795a      	ldrb	r2, [r3, #5]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	799a      	ldrb	r2, [r3, #6]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	79da      	ldrb	r2, [r3, #7]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	7a1a      	ldrb	r2, [r3, #8]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	721a      	strb	r2, [r3, #8]
}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781a      	ldrb	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	785a      	ldrb	r2, [r3, #1]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	789a      	ldrb	r2, [r3, #2]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	78da      	ldrb	r2, [r3, #3]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	3304      	adds	r3, #4
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	b29a      	uxth	r2, r3
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	3305      	adds	r3, #5
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	021b      	lsls	r3, r3, #8
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	799a      	ldrb	r2, [r3, #6]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	719a      	strb	r2, [r3, #6]
}
 800a2b2:	bf00      	nop
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b087      	sub	sp, #28
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d120      	bne.n	800a318 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	1e9a      	subs	r2, r3, #2
 800a2dc:	88fb      	ldrh	r3, [r7, #6]
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	bf28      	it	cs
 800a2e2:	4613      	movcs	r3, r2
 800a2e4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3302      	adds	r3, #2
 800a2ea:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	82fb      	strh	r3, [r7, #22]
 800a2f0:	e00b      	b.n	800a30a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a2f2:	8afb      	ldrh	r3, [r7, #22]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	781a      	ldrb	r2, [r3, #0]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	3301      	adds	r3, #1
 800a302:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a304:	8afb      	ldrh	r3, [r7, #22]
 800a306:	3302      	adds	r3, #2
 800a308:	82fb      	strh	r3, [r7, #22]
 800a30a:	8afa      	ldrh	r2, [r7, #22]
 800a30c:	8abb      	ldrh	r3, [r7, #20]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d3ef      	bcc.n	800a2f2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2200      	movs	r2, #0
 800a316:	701a      	strb	r2, [r3, #0]
  }
}
 800a318:	bf00      	nop
 800a31a:	371c      	adds	r7, #28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	881a      	ldrh	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	b29b      	uxth	r3, r3
 800a338:	4413      	add	r3, r2
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4413      	add	r3, r2
 800a34a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a34c:	68fb      	ldr	r3, [r7, #12]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b086      	sub	sp, #24
 800a35e:	af00      	add	r7, sp, #0
 800a360:	60f8      	str	r0, [r7, #12]
 800a362:	60b9      	str	r1, [r7, #8]
 800a364:	4613      	mov	r3, r2
 800a366:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a368:	2301      	movs	r3, #1
 800a36a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	789b      	ldrb	r3, [r3, #2]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d002      	beq.n	800a37a <USBH_CtlReq+0x20>
 800a374:	2b02      	cmp	r3, #2
 800a376:	d00f      	beq.n	800a398 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a378:	e027      	b.n	800a3ca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	88fa      	ldrh	r2, [r7, #6]
 800a384:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2201      	movs	r2, #1
 800a38a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2202      	movs	r2, #2
 800a390:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a392:	2301      	movs	r3, #1
 800a394:	75fb      	strb	r3, [r7, #23]
      break;
 800a396:	e018      	b.n	800a3ca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 f81b 	bl	800a3d4 <USBH_HandleControl>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <USBH_CtlReq+0x54>
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d106      	bne.n	800a3bc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	761a      	strb	r2, [r3, #24]
      break;
 800a3ba:	e005      	b.n	800a3c8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d102      	bne.n	800a3c8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	709a      	strb	r2, [r3, #2]
      break;
 800a3c8:	bf00      	nop
  }
  return status;
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af02      	add	r7, sp, #8
 800a3da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	7e1b      	ldrb	r3, [r3, #24]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	2b0a      	cmp	r3, #10
 800a3ec:	f200 8158 	bhi.w	800a6a0 <USBH_HandleControl+0x2cc>
 800a3f0:	a201      	add	r2, pc, #4	; (adr r2, 800a3f8 <USBH_HandleControl+0x24>)
 800a3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f6:	bf00      	nop
 800a3f8:	0800a425 	.word	0x0800a425
 800a3fc:	0800a43f 	.word	0x0800a43f
 800a400:	0800a4a9 	.word	0x0800a4a9
 800a404:	0800a4cf 	.word	0x0800a4cf
 800a408:	0800a507 	.word	0x0800a507
 800a40c:	0800a533 	.word	0x0800a533
 800a410:	0800a585 	.word	0x0800a585
 800a414:	0800a5a7 	.word	0x0800a5a7
 800a418:	0800a5e3 	.word	0x0800a5e3
 800a41c:	0800a60b 	.word	0x0800a60b
 800a420:	0800a649 	.word	0x0800a649
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f103 0110 	add.w	r1, r3, #16
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	795b      	ldrb	r3, [r3, #5]
 800a42e:	461a      	mov	r2, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 f945 	bl	800a6c0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2202      	movs	r2, #2
 800a43a:	761a      	strb	r2, [r3, #24]
      break;
 800a43c:	e13b      	b.n	800a6b6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	795b      	ldrb	r3, [r3, #5]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f003 f84b 	bl	800d4e0 <USBH_LL_GetURBState>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d11e      	bne.n	800a492 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	7c1b      	ldrb	r3, [r3, #16]
 800a458:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a45c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	8adb      	ldrh	r3, [r3, #22]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a466:	7b7b      	ldrb	r3, [r7, #13]
 800a468:	2b80      	cmp	r3, #128	; 0x80
 800a46a:	d103      	bne.n	800a474 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2203      	movs	r2, #3
 800a470:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a472:	e117      	b.n	800a6a4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2205      	movs	r2, #5
 800a478:	761a      	strb	r2, [r3, #24]
      break;
 800a47a:	e113      	b.n	800a6a4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800a47c:	7b7b      	ldrb	r3, [r7, #13]
 800a47e:	2b80      	cmp	r3, #128	; 0x80
 800a480:	d103      	bne.n	800a48a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2209      	movs	r2, #9
 800a486:	761a      	strb	r2, [r3, #24]
      break;
 800a488:	e10c      	b.n	800a6a4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2207      	movs	r2, #7
 800a48e:	761a      	strb	r2, [r3, #24]
      break;
 800a490:	e108      	b.n	800a6a4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	2b04      	cmp	r3, #4
 800a496:	d003      	beq.n	800a4a0 <USBH_HandleControl+0xcc>
 800a498:	7bbb      	ldrb	r3, [r7, #14]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	f040 8102 	bne.w	800a6a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	220b      	movs	r2, #11
 800a4a4:	761a      	strb	r2, [r3, #24]
      break;
 800a4a6:	e0fd      	b.n	800a6a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6899      	ldr	r1, [r3, #8]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	899a      	ldrh	r2, [r3, #12]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	791b      	ldrb	r3, [r3, #4]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f93c 	bl	800a73e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2204      	movs	r2, #4
 800a4ca:	761a      	strb	r2, [r3, #24]
      break;
 800a4cc:	e0f3      	b.n	800a6b6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	791b      	ldrb	r3, [r3, #4]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f003 f803 	bl	800d4e0 <USBH_LL_GetURBState>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d102      	bne.n	800a4ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2209      	movs	r2, #9
 800a4e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a4ea:	7bbb      	ldrb	r3, [r7, #14]
 800a4ec:	2b05      	cmp	r3, #5
 800a4ee:	d102      	bne.n	800a4f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a4f4:	e0d8      	b.n	800a6a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	f040 80d5 	bne.w	800a6a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	220b      	movs	r2, #11
 800a502:	761a      	strb	r2, [r3, #24]
      break;
 800a504:	e0d0      	b.n	800a6a8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6899      	ldr	r1, [r3, #8]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	899a      	ldrh	r2, [r3, #12]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	7958      	ldrb	r0, [r3, #5]
 800a512:	2301      	movs	r3, #1
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	4603      	mov	r3, r0
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f8eb 	bl	800a6f4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a524:	b29a      	uxth	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2206      	movs	r2, #6
 800a52e:	761a      	strb	r2, [r3, #24]
      break;
 800a530:	e0c1      	b.n	800a6b6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	795b      	ldrb	r3, [r3, #5]
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f002 ffd1 	bl	800d4e0 <USBH_LL_GetURBState>
 800a53e:	4603      	mov	r3, r0
 800a540:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d103      	bne.n	800a550 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2207      	movs	r2, #7
 800a54c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a54e:	e0ad      	b.n	800a6ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800a550:	7bbb      	ldrb	r3, [r7, #14]
 800a552:	2b05      	cmp	r3, #5
 800a554:	d105      	bne.n	800a562 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	220c      	movs	r2, #12
 800a55a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a55c:	2303      	movs	r3, #3
 800a55e:	73fb      	strb	r3, [r7, #15]
      break;
 800a560:	e0a4      	b.n	800a6ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	2b02      	cmp	r3, #2
 800a566:	d103      	bne.n	800a570 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2205      	movs	r2, #5
 800a56c:	761a      	strb	r2, [r3, #24]
      break;
 800a56e:	e09d      	b.n	800a6ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	2b04      	cmp	r3, #4
 800a574:	f040 809a 	bne.w	800a6ac <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	220b      	movs	r2, #11
 800a57c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a57e:	2302      	movs	r3, #2
 800a580:	73fb      	strb	r3, [r7, #15]
      break;
 800a582:	e093      	b.n	800a6ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	791b      	ldrb	r3, [r3, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	2100      	movs	r1, #0
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f8d6 	bl	800a73e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a598:	b29a      	uxth	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2208      	movs	r2, #8
 800a5a2:	761a      	strb	r2, [r3, #24]

      break;
 800a5a4:	e087      	b.n	800a6b6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	791b      	ldrb	r3, [r3, #4]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f002 ff97 	bl	800d4e0 <USBH_LL_GetURBState>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a5b6:	7bbb      	ldrb	r3, [r7, #14]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d105      	bne.n	800a5c8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	220d      	movs	r2, #13
 800a5c0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a5c6:	e073      	b.n	800a6b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800a5c8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ca:	2b04      	cmp	r3, #4
 800a5cc:	d103      	bne.n	800a5d6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	220b      	movs	r2, #11
 800a5d2:	761a      	strb	r2, [r3, #24]
      break;
 800a5d4:	e06c      	b.n	800a6b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800a5d6:	7bbb      	ldrb	r3, [r7, #14]
 800a5d8:	2b05      	cmp	r3, #5
 800a5da:	d169      	bne.n	800a6b0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	73fb      	strb	r3, [r7, #15]
      break;
 800a5e0:	e066      	b.n	800a6b0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	795a      	ldrb	r2, [r3, #5]
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f87f 	bl	800a6f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	220a      	movs	r2, #10
 800a606:	761a      	strb	r2, [r3, #24]
      break;
 800a608:	e055      	b.n	800a6b6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	795b      	ldrb	r3, [r3, #5]
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f002 ff65 	bl	800d4e0 <USBH_LL_GetURBState>
 800a616:	4603      	mov	r3, r0
 800a618:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d105      	bne.n	800a62c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	220d      	movs	r2, #13
 800a628:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a62a:	e043      	b.n	800a6b4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d103      	bne.n	800a63a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2209      	movs	r2, #9
 800a636:	761a      	strb	r2, [r3, #24]
      break;
 800a638:	e03c      	b.n	800a6b4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800a63a:	7bbb      	ldrb	r3, [r7, #14]
 800a63c:	2b04      	cmp	r3, #4
 800a63e:	d139      	bne.n	800a6b4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	220b      	movs	r2, #11
 800a644:	761a      	strb	r2, [r3, #24]
      break;
 800a646:	e035      	b.n	800a6b4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	7e5b      	ldrb	r3, [r3, #25]
 800a64c:	3301      	adds	r3, #1
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	765a      	strb	r2, [r3, #25]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	7e5b      	ldrb	r3, [r3, #25]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d806      	bhi.n	800a66a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a668:	e025      	b.n	800a6b6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a670:	2106      	movs	r1, #6
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	795b      	ldrb	r3, [r3, #5]
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f90c 	bl	800a8a0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	791b      	ldrb	r3, [r3, #4]
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f906 	bl	800a8a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a69a:	2302      	movs	r3, #2
 800a69c:	73fb      	strb	r3, [r7, #15]
      break;
 800a69e:	e00a      	b.n	800a6b6 <USBH_HandleControl+0x2e2>

    default:
      break;
 800a6a0:	bf00      	nop
 800a6a2:	e008      	b.n	800a6b6 <USBH_HandleControl+0x2e2>
      break;
 800a6a4:	bf00      	nop
 800a6a6:	e006      	b.n	800a6b6 <USBH_HandleControl+0x2e2>
      break;
 800a6a8:	bf00      	nop
 800a6aa:	e004      	b.n	800a6b6 <USBH_HandleControl+0x2e2>
      break;
 800a6ac:	bf00      	nop
 800a6ae:	e002      	b.n	800a6b6 <USBH_HandleControl+0x2e2>
      break;
 800a6b0:	bf00      	nop
 800a6b2:	e000      	b.n	800a6b6 <USBH_HandleControl+0x2e2>
      break;
 800a6b4:	bf00      	nop
  }

  return status;
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af04      	add	r7, sp, #16
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6ce:	79f9      	ldrb	r1, [r7, #7]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9303      	str	r3, [sp, #12]
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	9302      	str	r3, [sp, #8]
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	9301      	str	r3, [sp, #4]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f002 feca 	bl	800d47e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af04      	add	r7, sp, #16
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	4611      	mov	r1, r2
 800a700:	461a      	mov	r2, r3
 800a702:	460b      	mov	r3, r1
 800a704:	80fb      	strh	r3, [r7, #6]
 800a706:	4613      	mov	r3, r2
 800a708:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a710:	2b00      	cmp	r3, #0
 800a712:	d001      	beq.n	800a718 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a718:	7979      	ldrb	r1, [r7, #5]
 800a71a:	7e3b      	ldrb	r3, [r7, #24]
 800a71c:	9303      	str	r3, [sp, #12]
 800a71e:	88fb      	ldrh	r3, [r7, #6]
 800a720:	9302      	str	r3, [sp, #8]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	2301      	movs	r3, #1
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	2300      	movs	r3, #0
 800a72c:	2200      	movs	r2, #0
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f002 fea5 	bl	800d47e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b088      	sub	sp, #32
 800a742:	af04      	add	r7, sp, #16
 800a744:	60f8      	str	r0, [r7, #12]
 800a746:	60b9      	str	r1, [r7, #8]
 800a748:	4611      	mov	r1, r2
 800a74a:	461a      	mov	r2, r3
 800a74c:	460b      	mov	r3, r1
 800a74e:	80fb      	strh	r3, [r7, #6]
 800a750:	4613      	mov	r3, r2
 800a752:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a754:	7979      	ldrb	r1, [r7, #5]
 800a756:	2300      	movs	r3, #0
 800a758:	9303      	str	r3, [sp, #12]
 800a75a:	88fb      	ldrh	r3, [r7, #6]
 800a75c:	9302      	str	r3, [sp, #8]
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	2301      	movs	r3, #1
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	2300      	movs	r3, #0
 800a768:	2201      	movs	r2, #1
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f002 fe87 	bl	800d47e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a770:	2300      	movs	r3, #0

}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b088      	sub	sp, #32
 800a77e:	af04      	add	r7, sp, #16
 800a780:	60f8      	str	r0, [r7, #12]
 800a782:	60b9      	str	r1, [r7, #8]
 800a784:	4611      	mov	r1, r2
 800a786:	461a      	mov	r2, r3
 800a788:	460b      	mov	r3, r1
 800a78a:	80fb      	strh	r3, [r7, #6]
 800a78c:	4613      	mov	r3, r2
 800a78e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a79a:	2300      	movs	r3, #0
 800a79c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a79e:	7979      	ldrb	r1, [r7, #5]
 800a7a0:	7e3b      	ldrb	r3, [r7, #24]
 800a7a2:	9303      	str	r3, [sp, #12]
 800a7a4:	88fb      	ldrh	r3, [r7, #6]
 800a7a6:	9302      	str	r3, [sp, #8]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	9301      	str	r3, [sp, #4]
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f002 fe62 	bl	800d47e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b088      	sub	sp, #32
 800a7c8:	af04      	add	r7, sp, #16
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	80fb      	strh	r3, [r7, #6]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a7da:	7979      	ldrb	r1, [r7, #5]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	9303      	str	r3, [sp, #12]
 800a7e0:	88fb      	ldrh	r3, [r7, #6]
 800a7e2:	9302      	str	r3, [sp, #8]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f002 fe44 	bl	800d47e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af04      	add	r7, sp, #16
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	4608      	mov	r0, r1
 800a80a:	4611      	mov	r1, r2
 800a80c:	461a      	mov	r2, r3
 800a80e:	4603      	mov	r3, r0
 800a810:	70fb      	strb	r3, [r7, #3]
 800a812:	460b      	mov	r3, r1
 800a814:	70bb      	strb	r3, [r7, #2]
 800a816:	4613      	mov	r3, r2
 800a818:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a81a:	7878      	ldrb	r0, [r7, #1]
 800a81c:	78ba      	ldrb	r2, [r7, #2]
 800a81e:	78f9      	ldrb	r1, [r7, #3]
 800a820:	8b3b      	ldrh	r3, [r7, #24]
 800a822:	9302      	str	r3, [sp, #8]
 800a824:	7d3b      	ldrb	r3, [r7, #20]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	7c3b      	ldrb	r3, [r7, #16]
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	4603      	mov	r3, r0
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f002 fdd7 	bl	800d3e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b082      	sub	sp, #8
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	460b      	mov	r3, r1
 800a848:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	4619      	mov	r1, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f002 fdf6 	bl	800d440 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	460b      	mov	r3, r1
 800a868:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f836 	bl	800a8dc <USBH_GetFreePipe>
 800a870:	4603      	mov	r3, r0
 800a872:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a874:	89fb      	ldrh	r3, [r7, #14]
 800a876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00a      	beq.n	800a894 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a87e:	78fa      	ldrb	r2, [r7, #3]
 800a880:	89fb      	ldrh	r3, [r7, #14]
 800a882:	f003 030f 	and.w	r3, r3, #15
 800a886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a88a:	6879      	ldr	r1, [r7, #4]
 800a88c:	33e0      	adds	r3, #224	; 0xe0
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	440b      	add	r3, r1
 800a892:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a894:	89fb      	ldrh	r3, [r7, #14]
 800a896:	b2db      	uxtb	r3, r3
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a8ac:	78fb      	ldrb	r3, [r7, #3]
 800a8ae:	2b0a      	cmp	r3, #10
 800a8b0:	d80d      	bhi.n	800a8ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	33e0      	adds	r3, #224	; 0xe0
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	78fb      	ldrb	r3, [r7, #3]
 800a8c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a8c4:	6879      	ldr	r1, [r7, #4]
 800a8c6:	33e0      	adds	r3, #224	; 0xe0
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	440b      	add	r3, r1
 800a8cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]
 800a8ec:	e00f      	b.n	800a90e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	33e0      	adds	r3, #224	; 0xe0
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d102      	bne.n	800a908 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a902:	7bfb      	ldrb	r3, [r7, #15]
 800a904:	b29b      	uxth	r3, r3
 800a906:	e007      	b.n	800a918 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	3301      	adds	r3, #1
 800a90c:	73fb      	strb	r3, [r7, #15]
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	2b0a      	cmp	r3, #10
 800a912:	d9ec      	bls.n	800a8ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a914:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a92e:	79fb      	ldrb	r3, [r7, #7]
 800a930:	4a08      	ldr	r2, [pc, #32]	; (800a954 <disk_status+0x30>)
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	79fa      	ldrb	r2, [r7, #7]
 800a93c:	4905      	ldr	r1, [pc, #20]	; (800a954 <disk_status+0x30>)
 800a93e:	440a      	add	r2, r1
 800a940:	7a12      	ldrb	r2, [r2, #8]
 800a942:	4610      	mov	r0, r2
 800a944:	4798      	blx	r3
 800a946:	4603      	mov	r3, r0
 800a948:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20001378 	.word	0x20001378

0800a958 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	4a0d      	ldr	r2, [pc, #52]	; (800a9a0 <disk_initialize+0x48>)
 800a96a:	5cd3      	ldrb	r3, [r2, r3]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d111      	bne.n	800a994 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	4a0b      	ldr	r2, [pc, #44]	; (800a9a0 <disk_initialize+0x48>)
 800a974:	2101      	movs	r1, #1
 800a976:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	4a09      	ldr	r2, [pc, #36]	; (800a9a0 <disk_initialize+0x48>)
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	79fa      	ldrb	r2, [r7, #7]
 800a986:	4906      	ldr	r1, [pc, #24]	; (800a9a0 <disk_initialize+0x48>)
 800a988:	440a      	add	r2, r1
 800a98a:	7a12      	ldrb	r2, [r2, #8]
 800a98c:	4610      	mov	r0, r2
 800a98e:	4798      	blx	r3
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a994:	7bfb      	ldrb	r3, [r7, #15]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	20001378 	.word	0x20001378

0800a9a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a9a4:	b590      	push	{r4, r7, lr}
 800a9a6:	b087      	sub	sp, #28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	607a      	str	r2, [r7, #4]
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
 800a9b6:	4a0a      	ldr	r2, [pc, #40]	; (800a9e0 <disk_read+0x3c>)
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	689c      	ldr	r4, [r3, #8]
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	4a07      	ldr	r2, [pc, #28]	; (800a9e0 <disk_read+0x3c>)
 800a9c4:	4413      	add	r3, r2
 800a9c6:	7a18      	ldrb	r0, [r3, #8]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	47a0      	blx	r4
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a9d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd90      	pop	{r4, r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	20001378 	.word	0x20001378

0800a9e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a9e4:	b590      	push	{r4, r7, lr}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	607a      	str	r2, [r7, #4]
 800a9ee:	603b      	str	r3, [r7, #0]
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	4a0a      	ldr	r2, [pc, #40]	; (800aa20 <disk_write+0x3c>)
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	68dc      	ldr	r4, [r3, #12]
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
 800aa02:	4a07      	ldr	r2, [pc, #28]	; (800aa20 <disk_write+0x3c>)
 800aa04:	4413      	add	r3, r2
 800aa06:	7a18      	ldrb	r0, [r3, #8]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	68b9      	ldr	r1, [r7, #8]
 800aa0e:	47a0      	blx	r4
 800aa10:	4603      	mov	r3, r0
 800aa12:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa14:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	371c      	adds	r7, #28
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd90      	pop	{r4, r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20001378 	.word	0x20001378

0800aa24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	603a      	str	r2, [r7, #0]
 800aa2e:	71fb      	strb	r3, [r7, #7]
 800aa30:	460b      	mov	r3, r1
 800aa32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aa34:	79fb      	ldrb	r3, [r7, #7]
 800aa36:	4a09      	ldr	r2, [pc, #36]	; (800aa5c <disk_ioctl+0x38>)
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	79fa      	ldrb	r2, [r7, #7]
 800aa42:	4906      	ldr	r1, [pc, #24]	; (800aa5c <disk_ioctl+0x38>)
 800aa44:	440a      	add	r2, r1
 800aa46:	7a10      	ldrb	r0, [r2, #8]
 800aa48:	79b9      	ldrb	r1, [r7, #6]
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	4798      	blx	r3
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73fb      	strb	r3, [r7, #15]
  return res;
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	20001378 	.word	0x20001378

0800aa60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aa70:	89fb      	ldrh	r3, [r7, #14]
 800aa72:	021b      	lsls	r3, r3, #8
 800aa74:	b21a      	sxth	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	b21b      	sxth	r3, r3
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	b21b      	sxth	r3, r3
 800aa80:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aa82:	89fb      	ldrh	r3, [r7, #14]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3303      	adds	r3, #3
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	021b      	lsls	r3, r3, #8
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	3202      	adds	r2, #2
 800aaa8:	7812      	ldrb	r2, [r2, #0]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	3201      	adds	r2, #1
 800aab6:	7812      	ldrb	r2, [r2, #0]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	021b      	lsls	r3, r3, #8
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	7812      	ldrb	r2, [r2, #0]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]
	return rv;
 800aac8:	68fb      	ldr	r3, [r7, #12]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aad6:	b480      	push	{r7}
 800aad8:	b083      	sub	sp, #12
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	1c5a      	adds	r2, r3, #1
 800aae6:	607a      	str	r2, [r7, #4]
 800aae8:	887a      	ldrh	r2, [r7, #2]
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	701a      	strb	r2, [r3, #0]
 800aaee:	887b      	ldrh	r3, [r7, #2]
 800aaf0:	0a1b      	lsrs	r3, r3, #8
 800aaf2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	607a      	str	r2, [r7, #4]
 800aafa:	887a      	ldrh	r2, [r7, #2]
 800aafc:	b2d2      	uxtb	r2, r2
 800aafe:	701a      	strb	r2, [r3, #0]
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	1c5a      	adds	r2, r3, #1
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	701a      	strb	r2, [r3, #0]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	0a1b      	lsrs	r3, r3, #8
 800ab26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	607a      	str	r2, [r7, #4]
 800ab2e:	683a      	ldr	r2, [r7, #0]
 800ab30:	b2d2      	uxtb	r2, r2
 800ab32:	701a      	strb	r2, [r3, #0]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	0a1b      	lsrs	r3, r3, #8
 800ab38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	1c5a      	adds	r2, r3, #1
 800ab3e:	607a      	str	r2, [r7, #4]
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	b2d2      	uxtb	r2, r2
 800ab44:	701a      	strb	r2, [r3, #0]
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	0a1b      	lsrs	r3, r3, #8
 800ab4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	607a      	str	r2, [r7, #4]
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	b2d2      	uxtb	r2, r2
 800ab56:	701a      	strb	r2, [r3, #0]
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00d      	beq.n	800ab9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	1c53      	adds	r3, r2, #1
 800ab82:	613b      	str	r3, [r7, #16]
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	1c59      	adds	r1, r3, #1
 800ab88:	6179      	str	r1, [r7, #20]
 800ab8a:	7812      	ldrb	r2, [r2, #0]
 800ab8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	607b      	str	r3, [r7, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1f1      	bne.n	800ab7e <mem_cpy+0x1a>
	}
}
 800ab9a:	bf00      	nop
 800ab9c:	371c      	adds	r7, #28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aba6:	b480      	push	{r7}
 800aba8:	b087      	sub	sp, #28
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	617a      	str	r2, [r7, #20]
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3b01      	subs	r3, #1
 800abc6:	607b      	str	r3, [r7, #4]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1f3      	bne.n	800abb6 <mem_set+0x10>
}
 800abce:	bf00      	nop
 800abd0:	371c      	adds	r7, #28
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800abda:	b480      	push	{r7}
 800abdc:	b089      	sub	sp, #36	; 0x24
 800abde:	af00      	add	r7, sp, #0
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	60b9      	str	r1, [r7, #8]
 800abe4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	61fb      	str	r3, [r7, #28]
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	1c5a      	adds	r2, r3, #1
 800abf6:	61fa      	str	r2, [r7, #28]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	4619      	mov	r1, r3
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	61ba      	str	r2, [r7, #24]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	1acb      	subs	r3, r1, r3
 800ac06:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	607b      	str	r3, [r7, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <mem_cmp+0x40>
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d0eb      	beq.n	800abf2 <mem_cmp+0x18>

	return r;
 800ac1a:	697b      	ldr	r3, [r7, #20]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3724      	adds	r7, #36	; 0x24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ac32:	e002      	b.n	800ac3a <chk_chr+0x12>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3301      	adds	r3, #1
 800ac38:	607b      	str	r3, [r7, #4]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d005      	beq.n	800ac4e <chk_chr+0x26>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	461a      	mov	r2, r3
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d1f2      	bne.n	800ac34 <chk_chr+0xc>
	return *str;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	781b      	ldrb	r3, [r3, #0]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
	...

0800ac60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60bb      	str	r3, [r7, #8]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	60fb      	str	r3, [r7, #12]
 800ac72:	e029      	b.n	800acc8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ac74:	4a27      	ldr	r2, [pc, #156]	; (800ad14 <chk_lock+0xb4>)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	011b      	lsls	r3, r3, #4
 800ac7a:	4413      	add	r3, r2
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d01d      	beq.n	800acbe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac82:	4a24      	ldr	r2, [pc, #144]	; (800ad14 <chk_lock+0xb4>)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	011b      	lsls	r3, r3, #4
 800ac88:	4413      	add	r3, r2
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d116      	bne.n	800acc2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ac94:	4a1f      	ldr	r2, [pc, #124]	; (800ad14 <chk_lock+0xb4>)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	011b      	lsls	r3, r3, #4
 800ac9a:	4413      	add	r3, r2
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d10c      	bne.n	800acc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aca8:	4a1a      	ldr	r2, [pc, #104]	; (800ad14 <chk_lock+0xb4>)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	011b      	lsls	r3, r3, #4
 800acae:	4413      	add	r3, r2
 800acb0:	3308      	adds	r3, #8
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800acb8:	429a      	cmp	r2, r3
 800acba:	d102      	bne.n	800acc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acbc:	e007      	b.n	800acce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800acbe:	2301      	movs	r3, #1
 800acc0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3301      	adds	r3, #1
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d9d2      	bls.n	800ac74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d109      	bne.n	800ace8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d102      	bne.n	800ace0 <chk_lock+0x80>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d101      	bne.n	800ace4 <chk_lock+0x84>
 800ace0:	2300      	movs	r3, #0
 800ace2:	e010      	b.n	800ad06 <chk_lock+0xa6>
 800ace4:	2312      	movs	r3, #18
 800ace6:	e00e      	b.n	800ad06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d108      	bne.n	800ad00 <chk_lock+0xa0>
 800acee:	4a09      	ldr	r2, [pc, #36]	; (800ad14 <chk_lock+0xb4>)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	011b      	lsls	r3, r3, #4
 800acf4:	4413      	add	r3, r2
 800acf6:	330c      	adds	r3, #12
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acfe:	d101      	bne.n	800ad04 <chk_lock+0xa4>
 800ad00:	2310      	movs	r3, #16
 800ad02:	e000      	b.n	800ad06 <chk_lock+0xa6>
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	20001358 	.word	0x20001358

0800ad18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	607b      	str	r3, [r7, #4]
 800ad22:	e002      	b.n	800ad2a <enq_lock+0x12>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	3301      	adds	r3, #1
 800ad28:	607b      	str	r3, [r7, #4]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d806      	bhi.n	800ad3e <enq_lock+0x26>
 800ad30:	4a09      	ldr	r2, [pc, #36]	; (800ad58 <enq_lock+0x40>)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	011b      	lsls	r3, r3, #4
 800ad36:	4413      	add	r3, r2
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1f2      	bne.n	800ad24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	bf14      	ite	ne
 800ad44:	2301      	movne	r3, #1
 800ad46:	2300      	moveq	r3, #0
 800ad48:	b2db      	uxtb	r3, r3
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	370c      	adds	r7, #12
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	20001358 	.word	0x20001358

0800ad5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e01f      	b.n	800adac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ad6c:	4a41      	ldr	r2, [pc, #260]	; (800ae74 <inc_lock+0x118>)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	011b      	lsls	r3, r3, #4
 800ad72:	4413      	add	r3, r2
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d113      	bne.n	800ada6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ad7e:	4a3d      	ldr	r2, [pc, #244]	; (800ae74 <inc_lock+0x118>)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	4413      	add	r3, r2
 800ad86:	3304      	adds	r3, #4
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d109      	bne.n	800ada6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ad92:	4a38      	ldr	r2, [pc, #224]	; (800ae74 <inc_lock+0x118>)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	011b      	lsls	r3, r3, #4
 800ad98:	4413      	add	r3, r2
 800ad9a:	3308      	adds	r3, #8
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d006      	beq.n	800adb4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3301      	adds	r3, #1
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d9dc      	bls.n	800ad6c <inc_lock+0x10>
 800adb2:	e000      	b.n	800adb6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800adb4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d132      	bne.n	800ae22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	e002      	b.n	800adc8 <inc_lock+0x6c>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d806      	bhi.n	800addc <inc_lock+0x80>
 800adce:	4a29      	ldr	r2, [pc, #164]	; (800ae74 <inc_lock+0x118>)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	011b      	lsls	r3, r3, #4
 800add4:	4413      	add	r3, r2
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1f2      	bne.n	800adc2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d101      	bne.n	800ade6 <inc_lock+0x8a>
 800ade2:	2300      	movs	r3, #0
 800ade4:	e040      	b.n	800ae68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	4922      	ldr	r1, [pc, #136]	; (800ae74 <inc_lock+0x118>)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	011b      	lsls	r3, r3, #4
 800adf0:	440b      	add	r3, r1
 800adf2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689a      	ldr	r2, [r3, #8]
 800adf8:	491e      	ldr	r1, [pc, #120]	; (800ae74 <inc_lock+0x118>)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	011b      	lsls	r3, r3, #4
 800adfe:	440b      	add	r3, r1
 800ae00:	3304      	adds	r3, #4
 800ae02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	695a      	ldr	r2, [r3, #20]
 800ae08:	491a      	ldr	r1, [pc, #104]	; (800ae74 <inc_lock+0x118>)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	011b      	lsls	r3, r3, #4
 800ae0e:	440b      	add	r3, r1
 800ae10:	3308      	adds	r3, #8
 800ae12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ae14:	4a17      	ldr	r2, [pc, #92]	; (800ae74 <inc_lock+0x118>)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	011b      	lsls	r3, r3, #4
 800ae1a:	4413      	add	r3, r2
 800ae1c:	330c      	adds	r3, #12
 800ae1e:	2200      	movs	r2, #0
 800ae20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d009      	beq.n	800ae3c <inc_lock+0xe0>
 800ae28:	4a12      	ldr	r2, [pc, #72]	; (800ae74 <inc_lock+0x118>)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	011b      	lsls	r3, r3, #4
 800ae2e:	4413      	add	r3, r2
 800ae30:	330c      	adds	r3, #12
 800ae32:	881b      	ldrh	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <inc_lock+0xe0>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e015      	b.n	800ae68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d108      	bne.n	800ae54 <inc_lock+0xf8>
 800ae42:	4a0c      	ldr	r2, [pc, #48]	; (800ae74 <inc_lock+0x118>)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	4413      	add	r3, r2
 800ae4a:	330c      	adds	r3, #12
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	e001      	b.n	800ae58 <inc_lock+0xfc>
 800ae54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae58:	4906      	ldr	r1, [pc, #24]	; (800ae74 <inc_lock+0x118>)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	011b      	lsls	r3, r3, #4
 800ae5e:	440b      	add	r3, r1
 800ae60:	330c      	adds	r3, #12
 800ae62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3301      	adds	r3, #1
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	20001358 	.word	0x20001358

0800ae78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	607b      	str	r3, [r7, #4]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d825      	bhi.n	800aed8 <dec_lock+0x60>
		n = Files[i].ctr;
 800ae8c:	4a17      	ldr	r2, [pc, #92]	; (800aeec <dec_lock+0x74>)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	011b      	lsls	r3, r3, #4
 800ae92:	4413      	add	r3, r2
 800ae94:	330c      	adds	r3, #12
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ae9a:	89fb      	ldrh	r3, [r7, #14]
 800ae9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aea0:	d101      	bne.n	800aea6 <dec_lock+0x2e>
 800aea2:	2300      	movs	r3, #0
 800aea4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aea6:	89fb      	ldrh	r3, [r7, #14]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <dec_lock+0x3a>
 800aeac:	89fb      	ldrh	r3, [r7, #14]
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aeb2:	4a0e      	ldr	r2, [pc, #56]	; (800aeec <dec_lock+0x74>)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	011b      	lsls	r3, r3, #4
 800aeb8:	4413      	add	r3, r2
 800aeba:	330c      	adds	r3, #12
 800aebc:	89fa      	ldrh	r2, [r7, #14]
 800aebe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aec0:	89fb      	ldrh	r3, [r7, #14]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d105      	bne.n	800aed2 <dec_lock+0x5a>
 800aec6:	4a09      	ldr	r2, [pc, #36]	; (800aeec <dec_lock+0x74>)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	4413      	add	r3, r2
 800aece:	2200      	movs	r2, #0
 800aed0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	737b      	strb	r3, [r7, #13]
 800aed6:	e001      	b.n	800aedc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aed8:	2302      	movs	r3, #2
 800aeda:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aedc:	7b7b      	ldrb	r3, [r7, #13]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	20001358 	.word	0x20001358

0800aef0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	e010      	b.n	800af20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aefe:	4a0d      	ldr	r2, [pc, #52]	; (800af34 <clear_lock+0x44>)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	011b      	lsls	r3, r3, #4
 800af04:	4413      	add	r3, r2
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d105      	bne.n	800af1a <clear_lock+0x2a>
 800af0e:	4a09      	ldr	r2, [pc, #36]	; (800af34 <clear_lock+0x44>)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	011b      	lsls	r3, r3, #4
 800af14:	4413      	add	r3, r2
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3301      	adds	r3, #1
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d9eb      	bls.n	800aefe <clear_lock+0xe>
	}
}
 800af26:	bf00      	nop
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	20001358 	.word	0x20001358

0800af38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	78db      	ldrb	r3, [r3, #3]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d034      	beq.n	800afb6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	7858      	ldrb	r0, [r3, #1]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af5c:	2301      	movs	r3, #1
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	f7ff fd40 	bl	800a9e4 <disk_write>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d002      	beq.n	800af70 <sync_window+0x38>
			res = FR_DISK_ERR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	73fb      	strb	r3, [r7, #15]
 800af6e:	e022      	b.n	800afb6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	1ad2      	subs	r2, r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	429a      	cmp	r2, r3
 800af84:	d217      	bcs.n	800afb6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	789b      	ldrb	r3, [r3, #2]
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	e010      	b.n	800afb0 <sync_window+0x78>
					wsect += fs->fsize;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	4413      	add	r3, r2
 800af96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	7858      	ldrb	r0, [r3, #1]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afa2:	2301      	movs	r3, #1
 800afa4:	697a      	ldr	r2, [r7, #20]
 800afa6:	f7ff fd1d 	bl	800a9e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	3b01      	subs	r3, #1
 800afae:	613b      	str	r3, [r7, #16]
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d8eb      	bhi.n	800af8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d01b      	beq.n	800b010 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7ff ffad 	bl	800af38 <sync_window>
 800afde:	4603      	mov	r3, r0
 800afe0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d113      	bne.n	800b010 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	7858      	ldrb	r0, [r3, #1]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aff2:	2301      	movs	r3, #1
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	f7ff fcd5 	bl	800a9a4 <disk_read>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d004      	beq.n	800b00a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b000:	f04f 33ff 	mov.w	r3, #4294967295
 800b004:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b006:	2301      	movs	r3, #1
 800b008:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b010:	7bfb      	ldrb	r3, [r7, #15]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
	...

0800b01c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff ff87 	bl	800af38 <sync_window>
 800b02a:	4603      	mov	r3, r0
 800b02c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d158      	bne.n	800b0e6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b03      	cmp	r3, #3
 800b03a:	d148      	bne.n	800b0ce <sync_fs+0xb2>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	791b      	ldrb	r3, [r3, #4]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d144      	bne.n	800b0ce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3330      	adds	r3, #48	; 0x30
 800b048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b04c:	2100      	movs	r1, #0
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff fda9 	bl	800aba6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3330      	adds	r3, #48	; 0x30
 800b058:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b05c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b060:	4618      	mov	r0, r3
 800b062:	f7ff fd38 	bl	800aad6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3330      	adds	r3, #48	; 0x30
 800b06a:	4921      	ldr	r1, [pc, #132]	; (800b0f0 <sync_fs+0xd4>)
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff fd4d 	bl	800ab0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3330      	adds	r3, #48	; 0x30
 800b076:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b07a:	491e      	ldr	r1, [pc, #120]	; (800b0f4 <sync_fs+0xd8>)
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff fd45 	bl	800ab0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3330      	adds	r3, #48	; 0x30
 800b086:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	4619      	mov	r1, r3
 800b090:	4610      	mov	r0, r2
 800b092:	f7ff fd3b 	bl	800ab0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	3330      	adds	r3, #48	; 0x30
 800b09a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	f7ff fd31 	bl	800ab0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	7858      	ldrb	r0, [r3, #1]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	f7ff fc8e 	bl	800a9e4 <disk_write>
			fs->fsi_flag = 0;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	785b      	ldrb	r3, [r3, #1]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff fca4 	bl	800aa24 <disk_ioctl>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <sync_fs+0xca>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	41615252 	.word	0x41615252
 800b0f4:	61417272 	.word	0x61417272

0800b0f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	3b02      	subs	r3, #2
 800b106:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	3b02      	subs	r3, #2
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	429a      	cmp	r2, r3
 800b112:	d301      	bcc.n	800b118 <clust2sect+0x20>
 800b114:	2300      	movs	r3, #0
 800b116:	e008      	b.n	800b12a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	895b      	ldrh	r3, [r3, #10]
 800b11c:	461a      	mov	r2, r3
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	fb03 f202 	mul.w	r2, r3, r2
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b128:	4413      	add	r3, r2
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b086      	sub	sp, #24
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d904      	bls.n	800b156 <get_fat+0x20>
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	429a      	cmp	r2, r3
 800b154:	d302      	bcc.n	800b15c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b156:	2301      	movs	r3, #1
 800b158:	617b      	str	r3, [r7, #20]
 800b15a:	e08c      	b.n	800b276 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b15c:	f04f 33ff 	mov.w	r3, #4294967295
 800b160:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	2b02      	cmp	r3, #2
 800b168:	d045      	beq.n	800b1f6 <get_fat+0xc0>
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d05d      	beq.n	800b22a <get_fat+0xf4>
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d177      	bne.n	800b262 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	085b      	lsrs	r3, r3, #1
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	4413      	add	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6a1a      	ldr	r2, [r3, #32]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	0a5b      	lsrs	r3, r3, #9
 800b188:	4413      	add	r3, r2
 800b18a:	4619      	mov	r1, r3
 800b18c:	6938      	ldr	r0, [r7, #16]
 800b18e:	f7ff ff17 	bl	800afc0 <move_window>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d167      	bne.n	800b268 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	60fa      	str	r2, [r7, #12]
 800b19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1aa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	6a1a      	ldr	r2, [r3, #32]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	0a5b      	lsrs	r3, r3, #9
 800b1b4:	4413      	add	r3, r2
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	6938      	ldr	r0, [r7, #16]
 800b1ba:	f7ff ff01 	bl	800afc0 <move_window>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d153      	bne.n	800b26c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d002      	beq.n	800b1ec <get_fat+0xb6>
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	091b      	lsrs	r3, r3, #4
 800b1ea:	e002      	b.n	800b1f2 <get_fat+0xbc>
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1f2:	617b      	str	r3, [r7, #20]
			break;
 800b1f4:	e03f      	b.n	800b276 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	6a1a      	ldr	r2, [r3, #32]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	0a1b      	lsrs	r3, r3, #8
 800b1fe:	4413      	add	r3, r2
 800b200:	4619      	mov	r1, r3
 800b202:	6938      	ldr	r0, [r7, #16]
 800b204:	f7ff fedc 	bl	800afc0 <move_window>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d130      	bne.n	800b270 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b21c:	4413      	add	r3, r2
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff fc1e 	bl	800aa60 <ld_word>
 800b224:	4603      	mov	r3, r0
 800b226:	617b      	str	r3, [r7, #20]
			break;
 800b228:	e025      	b.n	800b276 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	6a1a      	ldr	r2, [r3, #32]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	09db      	lsrs	r3, r3, #7
 800b232:	4413      	add	r3, r2
 800b234:	4619      	mov	r1, r3
 800b236:	6938      	ldr	r0, [r7, #16]
 800b238:	f7ff fec2 	bl	800afc0 <move_window>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d118      	bne.n	800b274 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b250:	4413      	add	r3, r2
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff fc1c 	bl	800aa90 <ld_dword>
 800b258:	4603      	mov	r3, r0
 800b25a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b25e:	617b      	str	r3, [r7, #20]
			break;
 800b260:	e009      	b.n	800b276 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b262:	2301      	movs	r3, #1
 800b264:	617b      	str	r3, [r7, #20]
 800b266:	e006      	b.n	800b276 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b268:	bf00      	nop
 800b26a:	e004      	b.n	800b276 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b26c:	bf00      	nop
 800b26e:	e002      	b.n	800b276 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b270:	bf00      	nop
 800b272:	e000      	b.n	800b276 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b274:	bf00      	nop
		}
	}

	return val;
 800b276:	697b      	ldr	r3, [r7, #20]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b280:	b590      	push	{r4, r7, lr}
 800b282:	b089      	sub	sp, #36	; 0x24
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b28c:	2302      	movs	r3, #2
 800b28e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	2b01      	cmp	r3, #1
 800b294:	f240 80d6 	bls.w	800b444 <put_fat+0x1c4>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	695b      	ldr	r3, [r3, #20]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	f080 80d0 	bcs.w	800b444 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d073      	beq.n	800b394 <put_fat+0x114>
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	f000 8091 	beq.w	800b3d4 <put_fat+0x154>
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	f040 80c6 	bne.w	800b444 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	61bb      	str	r3, [r7, #24]
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	085b      	lsrs	r3, r3, #1
 800b2c0:	69ba      	ldr	r2, [r7, #24]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6a1a      	ldr	r2, [r3, #32]
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	0a5b      	lsrs	r3, r3, #9
 800b2ce:	4413      	add	r3, r2
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f7ff fe74 	bl	800afc0 <move_window>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b2dc:	7ffb      	ldrb	r3, [r7, #31]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f040 80a9 	bne.w	800b436 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	1c59      	adds	r1, r3, #1
 800b2ee:	61b9      	str	r1, [r7, #24]
 800b2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f4:	4413      	add	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00d      	beq.n	800b31e <put_fat+0x9e>
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	b25b      	sxtb	r3, r3
 800b308:	f003 030f 	and.w	r3, r3, #15
 800b30c:	b25a      	sxtb	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	b2db      	uxtb	r3, r3
 800b312:	011b      	lsls	r3, r3, #4
 800b314:	b25b      	sxtb	r3, r3
 800b316:	4313      	orrs	r3, r2
 800b318:	b25b      	sxtb	r3, r3
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	e001      	b.n	800b322 <put_fat+0xa2>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	b2db      	uxtb	r3, r3
 800b322:	697a      	ldr	r2, [r7, #20]
 800b324:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2201      	movs	r2, #1
 800b32a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6a1a      	ldr	r2, [r3, #32]
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	0a5b      	lsrs	r3, r3, #9
 800b334:	4413      	add	r3, r2
 800b336:	4619      	mov	r1, r3
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f7ff fe41 	bl	800afc0 <move_window>
 800b33e:	4603      	mov	r3, r0
 800b340:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b342:	7ffb      	ldrb	r3, [r7, #31]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d178      	bne.n	800b43a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b354:	4413      	add	r3, r2
 800b356:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d003      	beq.n	800b36a <put_fat+0xea>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	091b      	lsrs	r3, r3, #4
 800b366:	b2db      	uxtb	r3, r3
 800b368:	e00e      	b.n	800b388 <put_fat+0x108>
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	b25b      	sxtb	r3, r3
 800b370:	f023 030f 	bic.w	r3, r3, #15
 800b374:	b25a      	sxtb	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	0a1b      	lsrs	r3, r3, #8
 800b37a:	b25b      	sxtb	r3, r3
 800b37c:	f003 030f 	and.w	r3, r3, #15
 800b380:	b25b      	sxtb	r3, r3
 800b382:	4313      	orrs	r3, r2
 800b384:	b25b      	sxtb	r3, r3
 800b386:	b2db      	uxtb	r3, r3
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2201      	movs	r2, #1
 800b390:	70da      	strb	r2, [r3, #3]
			break;
 800b392:	e057      	b.n	800b444 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6a1a      	ldr	r2, [r3, #32]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	0a1b      	lsrs	r3, r3, #8
 800b39c:	4413      	add	r3, r2
 800b39e:	4619      	mov	r1, r3
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f7ff fe0d 	bl	800afc0 <move_window>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3aa:	7ffb      	ldrb	r3, [r7, #31]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d146      	bne.n	800b43e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	005b      	lsls	r3, r3, #1
 800b3ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b3be:	4413      	add	r3, r2
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	b292      	uxth	r2, r2
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff fb85 	bl	800aad6 <st_word>
			fs->wflag = 1;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	70da      	strb	r2, [r3, #3]
			break;
 800b3d2:	e037      	b.n	800b444 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6a1a      	ldr	r2, [r3, #32]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	09db      	lsrs	r3, r3, #7
 800b3dc:	4413      	add	r3, r2
 800b3de:	4619      	mov	r1, r3
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7ff fded 	bl	800afc0 <move_window>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3ea:	7ffb      	ldrb	r3, [r7, #31]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d128      	bne.n	800b442 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b404:	4413      	add	r3, r2
 800b406:	4618      	mov	r0, r3
 800b408:	f7ff fb42 	bl	800aa90 <ld_dword>
 800b40c:	4603      	mov	r3, r0
 800b40e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b412:	4323      	orrs	r3, r4
 800b414:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b424:	4413      	add	r3, r2
 800b426:	6879      	ldr	r1, [r7, #4]
 800b428:	4618      	mov	r0, r3
 800b42a:	f7ff fb6f 	bl	800ab0c <st_dword>
			fs->wflag = 1;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2201      	movs	r2, #1
 800b432:	70da      	strb	r2, [r3, #3]
			break;
 800b434:	e006      	b.n	800b444 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b436:	bf00      	nop
 800b438:	e004      	b.n	800b444 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b43a:	bf00      	nop
 800b43c:	e002      	b.n	800b444 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b43e:	bf00      	nop
 800b440:	e000      	b.n	800b444 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b442:	bf00      	nop
		}
	}
	return res;
 800b444:	7ffb      	ldrb	r3, [r7, #31]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3724      	adds	r7, #36	; 0x24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd90      	pop	{r4, r7, pc}

0800b44e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b088      	sub	sp, #32
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d904      	bls.n	800b474 <remove_chain+0x26>
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	429a      	cmp	r2, r3
 800b472:	d301      	bcc.n	800b478 <remove_chain+0x2a>
 800b474:	2302      	movs	r3, #2
 800b476:	e04b      	b.n	800b510 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00c      	beq.n	800b498 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b47e:	f04f 32ff 	mov.w	r2, #4294967295
 800b482:	6879      	ldr	r1, [r7, #4]
 800b484:	69b8      	ldr	r0, [r7, #24]
 800b486:	f7ff fefb 	bl	800b280 <put_fat>
 800b48a:	4603      	mov	r3, r0
 800b48c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b48e:	7ffb      	ldrb	r3, [r7, #31]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <remove_chain+0x4a>
 800b494:	7ffb      	ldrb	r3, [r7, #31]
 800b496:	e03b      	b.n	800b510 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7ff fe4b 	bl	800b136 <get_fat>
 800b4a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d031      	beq.n	800b50c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d101      	bne.n	800b4b2 <remove_chain+0x64>
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e02e      	b.n	800b510 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b8:	d101      	bne.n	800b4be <remove_chain+0x70>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e028      	b.n	800b510 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b4be:	2200      	movs	r2, #0
 800b4c0:	68b9      	ldr	r1, [r7, #8]
 800b4c2:	69b8      	ldr	r0, [r7, #24]
 800b4c4:	f7ff fedc 	bl	800b280 <put_fat>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b4cc:	7ffb      	ldrb	r3, [r7, #31]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <remove_chain+0x88>
 800b4d2:	7ffb      	ldrb	r3, [r7, #31]
 800b4d4:	e01c      	b.n	800b510 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	691a      	ldr	r2, [r3, #16]
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	3b02      	subs	r3, #2
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d20b      	bcs.n	800b4fc <remove_chain+0xae>
			fs->free_clst++;
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	791b      	ldrb	r3, [r3, #4]
 800b4f2:	f043 0301 	orr.w	r3, r3, #1
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	429a      	cmp	r2, r3
 800b508:	d3c6      	bcc.n	800b498 <remove_chain+0x4a>
 800b50a:	e000      	b.n	800b50e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b50c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10d      	bne.n	800b54a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d004      	beq.n	800b544 <create_chain+0x2c>
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	695b      	ldr	r3, [r3, #20]
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	429a      	cmp	r2, r3
 800b542:	d31b      	bcc.n	800b57c <create_chain+0x64>
 800b544:	2301      	movs	r3, #1
 800b546:	61bb      	str	r3, [r7, #24]
 800b548:	e018      	b.n	800b57c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff fdf2 	bl	800b136 <get_fat>
 800b552:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d801      	bhi.n	800b55e <create_chain+0x46>
 800b55a:	2301      	movs	r3, #1
 800b55c:	e070      	b.n	800b640 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b564:	d101      	bne.n	800b56a <create_chain+0x52>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	e06a      	b.n	800b640 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	429a      	cmp	r2, r3
 800b572:	d201      	bcs.n	800b578 <create_chain+0x60>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	e063      	b.n	800b640 <create_chain+0x128>
		scl = clst;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	3301      	adds	r3, #1
 800b584:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	69fa      	ldr	r2, [r7, #28]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d307      	bcc.n	800b5a0 <create_chain+0x88>
				ncl = 2;
 800b590:	2302      	movs	r3, #2
 800b592:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b594:	69fa      	ldr	r2, [r7, #28]
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d901      	bls.n	800b5a0 <create_chain+0x88>
 800b59c:	2300      	movs	r3, #0
 800b59e:	e04f      	b.n	800b640 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b5a0:	69f9      	ldr	r1, [r7, #28]
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7ff fdc7 	bl	800b136 <get_fat>
 800b5a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00e      	beq.n	800b5ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d003      	beq.n	800b5be <create_chain+0xa6>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5bc:	d101      	bne.n	800b5c2 <create_chain+0xaa>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	e03e      	b.n	800b640 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b5c2:	69fa      	ldr	r2, [r7, #28]
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d1da      	bne.n	800b580 <create_chain+0x68>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e038      	b.n	800b640 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b5ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d4:	69f9      	ldr	r1, [r7, #28]
 800b5d6:	6938      	ldr	r0, [r7, #16]
 800b5d8:	f7ff fe52 	bl	800b280 <put_fat>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d109      	bne.n	800b5fa <create_chain+0xe2>
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d006      	beq.n	800b5fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b5ec:	69fa      	ldr	r2, [r7, #28]
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6938      	ldr	r0, [r7, #16]
 800b5f2:	f7ff fe45 	bl	800b280 <put_fat>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d116      	bne.n	800b62e <create_chain+0x116>
		fs->last_clst = ncl;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	69fa      	ldr	r2, [r7, #28]
 800b604:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	691a      	ldr	r2, [r3, #16]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	3b02      	subs	r3, #2
 800b610:	429a      	cmp	r2, r3
 800b612:	d804      	bhi.n	800b61e <create_chain+0x106>
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	1e5a      	subs	r2, r3, #1
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	791b      	ldrb	r3, [r3, #4]
 800b622:	f043 0301 	orr.w	r3, r3, #1
 800b626:	b2da      	uxtb	r2, r3
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	711a      	strb	r2, [r3, #4]
 800b62c:	e007      	b.n	800b63e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d102      	bne.n	800b63a <create_chain+0x122>
 800b634:	f04f 33ff 	mov.w	r3, #4294967295
 800b638:	e000      	b.n	800b63c <create_chain+0x124>
 800b63a:	2301      	movs	r3, #1
 800b63c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b63e:	69fb      	ldr	r3, [r7, #28]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3720      	adds	r7, #32
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65c:	3304      	adds	r3, #4
 800b65e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	0a5b      	lsrs	r3, r3, #9
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	8952      	ldrh	r2, [r2, #10]
 800b668:	fbb3 f3f2 	udiv	r3, r3, r2
 800b66c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	1d1a      	adds	r2, r3, #4
 800b672:	613a      	str	r2, [r7, #16]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <clmt_clust+0x3a>
 800b67e:	2300      	movs	r3, #0
 800b680:	e010      	b.n	800b6a4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	429a      	cmp	r2, r3
 800b688:	d307      	bcc.n	800b69a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	617b      	str	r3, [r7, #20]
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	3304      	adds	r3, #4
 800b696:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b698:	e7e9      	b.n	800b66e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b69a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	4413      	add	r3, r2
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	371c      	adds	r7, #28
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6c6:	d204      	bcs.n	800b6d2 <dir_sdi+0x22>
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	f003 031f 	and.w	r3, r3, #31
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e063      	b.n	800b79e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d106      	bne.n	800b6f6 <dir_sdi+0x46>
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d902      	bls.n	800b6f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10c      	bne.n	800b716 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	095b      	lsrs	r3, r3, #5
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	8912      	ldrh	r2, [r2, #8]
 800b704:	4293      	cmp	r3, r2
 800b706:	d301      	bcc.n	800b70c <dir_sdi+0x5c>
 800b708:	2302      	movs	r3, #2
 800b70a:	e048      	b.n	800b79e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	61da      	str	r2, [r3, #28]
 800b714:	e029      	b.n	800b76a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	895b      	ldrh	r3, [r3, #10]
 800b71a:	025b      	lsls	r3, r3, #9
 800b71c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b71e:	e019      	b.n	800b754 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6979      	ldr	r1, [r7, #20]
 800b724:	4618      	mov	r0, r3
 800b726:	f7ff fd06 	bl	800b136 <get_fat>
 800b72a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d101      	bne.n	800b738 <dir_sdi+0x88>
 800b734:	2301      	movs	r3, #1
 800b736:	e032      	b.n	800b79e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d904      	bls.n	800b748 <dir_sdi+0x98>
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	429a      	cmp	r2, r3
 800b746:	d301      	bcc.n	800b74c <dir_sdi+0x9c>
 800b748:	2302      	movs	r3, #2
 800b74a:	e028      	b.n	800b79e <dir_sdi+0xee>
			ofs -= csz;
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d2e1      	bcs.n	800b720 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b75c:	6979      	ldr	r1, [r7, #20]
 800b75e:	6938      	ldr	r0, [r7, #16]
 800b760:	f7ff fcca 	bl	800b0f8 <clust2sect>
 800b764:	4602      	mov	r2, r0
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	69db      	ldr	r3, [r3, #28]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <dir_sdi+0xcc>
 800b778:	2302      	movs	r3, #2
 800b77a:	e010      	b.n	800b79e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	69da      	ldr	r2, [r3, #28]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	0a5b      	lsrs	r3, r3, #9
 800b784:	441a      	add	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b796:	441a      	add	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b086      	sub	sp, #24
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	3320      	adds	r3, #32
 800b7bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <dir_next+0x28>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7cc:	d301      	bcc.n	800b7d2 <dir_next+0x2c>
 800b7ce:	2304      	movs	r3, #4
 800b7d0:	e0aa      	b.n	800b928 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f040 8098 	bne.w	800b90e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10b      	bne.n	800b808 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	095b      	lsrs	r3, r3, #5
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	8912      	ldrh	r2, [r2, #8]
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	f0c0 8088 	bcc.w	800b90e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	61da      	str	r2, [r3, #28]
 800b804:	2304      	movs	r3, #4
 800b806:	e08f      	b.n	800b928 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	0a5b      	lsrs	r3, r3, #9
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	8952      	ldrh	r2, [r2, #10]
 800b810:	3a01      	subs	r2, #1
 800b812:	4013      	ands	r3, r2
 800b814:	2b00      	cmp	r3, #0
 800b816:	d17a      	bne.n	800b90e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	4619      	mov	r1, r3
 800b820:	4610      	mov	r0, r2
 800b822:	f7ff fc88 	bl	800b136 <get_fat>
 800b826:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d801      	bhi.n	800b832 <dir_next+0x8c>
 800b82e:	2302      	movs	r3, #2
 800b830:	e07a      	b.n	800b928 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b838:	d101      	bne.n	800b83e <dir_next+0x98>
 800b83a:	2301      	movs	r3, #1
 800b83c:	e074      	b.n	800b928 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	429a      	cmp	r2, r3
 800b846:	d358      	bcc.n	800b8fa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d104      	bne.n	800b858 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	61da      	str	r2, [r3, #28]
 800b854:	2304      	movs	r3, #4
 800b856:	e067      	b.n	800b928 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	4619      	mov	r1, r3
 800b860:	4610      	mov	r0, r2
 800b862:	f7ff fe59 	bl	800b518 <create_chain>
 800b866:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <dir_next+0xcc>
 800b86e:	2307      	movs	r3, #7
 800b870:	e05a      	b.n	800b928 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d101      	bne.n	800b87c <dir_next+0xd6>
 800b878:	2302      	movs	r3, #2
 800b87a:	e055      	b.n	800b928 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b882:	d101      	bne.n	800b888 <dir_next+0xe2>
 800b884:	2301      	movs	r3, #1
 800b886:	e04f      	b.n	800b928 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f7ff fb55 	bl	800af38 <sync_window>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <dir_next+0xf2>
 800b894:	2301      	movs	r3, #1
 800b896:	e047      	b.n	800b928 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3330      	adds	r3, #48	; 0x30
 800b89c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7ff f97f 	bl	800aba6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	613b      	str	r3, [r7, #16]
 800b8ac:	6979      	ldr	r1, [r7, #20]
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f7ff fc22 	bl	800b0f8 <clust2sect>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	62da      	str	r2, [r3, #44]	; 0x2c
 800b8ba:	e012      	b.n	800b8e2 <dir_next+0x13c>
						fs->wflag = 1;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f7ff fb38 	bl	800af38 <sync_window>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <dir_next+0x12c>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e02a      	b.n	800b928 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	613b      	str	r3, [r7, #16]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	1c5a      	adds	r2, r3, #1
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	62da      	str	r2, [r3, #44]	; 0x2c
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	895b      	ldrh	r3, [r3, #10]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d3e6      	bcc.n	800b8bc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	1ad2      	subs	r2, r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b900:	6979      	ldr	r1, [r7, #20]
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f7ff fbf8 	bl	800b0f8 <clust2sect>
 800b908:	4602      	mov	r2, r0
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b920:	441a      	add	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3718      	adds	r7, #24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b940:	2100      	movs	r1, #0
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff feb4 	bl	800b6b0 <dir_sdi>
 800b948:	4603      	mov	r3, r0
 800b94a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d12b      	bne.n	800b9aa <dir_alloc+0x7a>
		n = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	4619      	mov	r1, r3
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7ff fb2f 	bl	800afc0 <move_window>
 800b962:	4603      	mov	r3, r0
 800b964:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b966:	7dfb      	ldrb	r3, [r7, #23]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d11d      	bne.n	800b9a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2be5      	cmp	r3, #229	; 0xe5
 800b974:	d004      	beq.n	800b980 <dir_alloc+0x50>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d107      	bne.n	800b990 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	3301      	adds	r3, #1
 800b984:	613b      	str	r3, [r7, #16]
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d102      	bne.n	800b994 <dir_alloc+0x64>
 800b98e:	e00c      	b.n	800b9aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b990:	2300      	movs	r3, #0
 800b992:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b994:	2101      	movs	r1, #1
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7ff ff05 	bl	800b7a6 <dir_next>
 800b99c:	4603      	mov	r3, r0
 800b99e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0d7      	beq.n	800b956 <dir_alloc+0x26>
 800b9a6:	e000      	b.n	800b9aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b9a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d101      	bne.n	800b9b4 <dir_alloc+0x84>
 800b9b0:	2307      	movs	r3, #7
 800b9b2:	75fb      	strb	r3, [r7, #23]
	return res;
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	331a      	adds	r3, #26
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff f847 	bl	800aa60 <ld_word>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d109      	bne.n	800b9f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	3314      	adds	r3, #20
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7ff f83c 	bl	800aa60 <ld_word>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	041b      	lsls	r3, r3, #16
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	331a      	adds	r3, #26
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	b292      	uxth	r2, r2
 800ba10:	4611      	mov	r1, r2
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff f85f 	bl	800aad6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	d109      	bne.n	800ba34 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	f103 0214 	add.w	r2, r3, #20
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	0c1b      	lsrs	r3, r3, #16
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4610      	mov	r0, r2
 800ba30:	f7ff f851 	bl	800aad6 <st_word>
	}
}
 800ba34:	bf00      	nop
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f7ff fe2f 	bl	800b6b0 <dir_sdi>
 800ba52:	4603      	mov	r3, r0
 800ba54:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <dir_find+0x24>
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	e03e      	b.n	800bade <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	69db      	ldr	r3, [r3, #28]
 800ba64:	4619      	mov	r1, r3
 800ba66:	6938      	ldr	r0, [r7, #16]
 800ba68:	f7ff faaa 	bl	800afc0 <move_window>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d12f      	bne.n	800bad6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <dir_find+0x4e>
 800ba84:	2304      	movs	r3, #4
 800ba86:	75fb      	strb	r3, [r7, #23]
 800ba88:	e028      	b.n	800badc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	330b      	adds	r3, #11
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a1b      	ldr	r3, [r3, #32]
 800baa0:	330b      	adds	r3, #11
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	f003 0308 	and.w	r3, r3, #8
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10a      	bne.n	800bac2 <dir_find+0x86>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a18      	ldr	r0, [r3, #32]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	3324      	adds	r3, #36	; 0x24
 800bab4:	220b      	movs	r2, #11
 800bab6:	4619      	mov	r1, r3
 800bab8:	f7ff f88f 	bl	800abda <mem_cmp>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00b      	beq.n	800bada <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bac2:	2100      	movs	r1, #0
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f7ff fe6e 	bl	800b7a6 <dir_next>
 800baca:	4603      	mov	r3, r0
 800bacc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bace:	7dfb      	ldrb	r3, [r7, #23]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d0c5      	beq.n	800ba60 <dir_find+0x24>
 800bad4:	e002      	b.n	800badc <dir_find+0xa0>
		if (res != FR_OK) break;
 800bad6:	bf00      	nop
 800bad8:	e000      	b.n	800badc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bada:	bf00      	nop

	return res;
 800badc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800baf4:	2101      	movs	r1, #1
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff ff1a 	bl	800b930 <dir_alloc>
 800bafc:	4603      	mov	r3, r0
 800bafe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d11c      	bne.n	800bb40 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	68b8      	ldr	r0, [r7, #8]
 800bb0e:	f7ff fa57 	bl	800afc0 <move_window>
 800bb12:	4603      	mov	r3, r0
 800bb14:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bb16:	7bfb      	ldrb	r3, [r7, #15]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d111      	bne.n	800bb40 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a1b      	ldr	r3, [r3, #32]
 800bb20:	2220      	movs	r2, #32
 800bb22:	2100      	movs	r1, #0
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7ff f83e 	bl	800aba6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a18      	ldr	r0, [r3, #32]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	3324      	adds	r3, #36	; 0x24
 800bb32:	220b      	movs	r2, #11
 800bb34:	4619      	mov	r1, r3
 800bb36:	f7ff f815 	bl	800ab64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
	...

0800bb4c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	60fb      	str	r3, [r7, #12]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3324      	adds	r3, #36	; 0x24
 800bb60:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bb62:	220b      	movs	r2, #11
 800bb64:	2120      	movs	r1, #32
 800bb66:	68b8      	ldr	r0, [r7, #8]
 800bb68:	f7ff f81d 	bl	800aba6 <mem_set>
	si = i = 0; ni = 8;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	613b      	str	r3, [r7, #16]
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	617b      	str	r3, [r7, #20]
 800bb74:	2308      	movs	r3, #8
 800bb76:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	617a      	str	r2, [r7, #20]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	4413      	add	r3, r2
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bb86:	7ffb      	ldrb	r3, [r7, #31]
 800bb88:	2b20      	cmp	r3, #32
 800bb8a:	d94e      	bls.n	800bc2a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bb8c:	7ffb      	ldrb	r3, [r7, #31]
 800bb8e:	2b2f      	cmp	r3, #47	; 0x2f
 800bb90:	d006      	beq.n	800bba0 <create_name+0x54>
 800bb92:	7ffb      	ldrb	r3, [r7, #31]
 800bb94:	2b5c      	cmp	r3, #92	; 0x5c
 800bb96:	d110      	bne.n	800bbba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bb98:	e002      	b.n	800bba0 <create_name+0x54>
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	617b      	str	r3, [r7, #20]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	4413      	add	r3, r2
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b2f      	cmp	r3, #47	; 0x2f
 800bbaa:	d0f6      	beq.n	800bb9a <create_name+0x4e>
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b5c      	cmp	r3, #92	; 0x5c
 800bbb6:	d0f0      	beq.n	800bb9a <create_name+0x4e>
			break;
 800bbb8:	e038      	b.n	800bc2c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bbba:	7ffb      	ldrb	r3, [r7, #31]
 800bbbc:	2b2e      	cmp	r3, #46	; 0x2e
 800bbbe:	d003      	beq.n	800bbc8 <create_name+0x7c>
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d30c      	bcc.n	800bbe2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	2b0b      	cmp	r3, #11
 800bbcc:	d002      	beq.n	800bbd4 <create_name+0x88>
 800bbce:	7ffb      	ldrb	r3, [r7, #31]
 800bbd0:	2b2e      	cmp	r3, #46	; 0x2e
 800bbd2:	d001      	beq.n	800bbd8 <create_name+0x8c>
 800bbd4:	2306      	movs	r3, #6
 800bbd6:	e044      	b.n	800bc62 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bbd8:	2308      	movs	r3, #8
 800bbda:	613b      	str	r3, [r7, #16]
 800bbdc:	230b      	movs	r3, #11
 800bbde:	61bb      	str	r3, [r7, #24]
			continue;
 800bbe0:	e022      	b.n	800bc28 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bbe2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	da04      	bge.n	800bbf4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bbea:	7ffb      	ldrb	r3, [r7, #31]
 800bbec:	3b80      	subs	r3, #128	; 0x80
 800bbee:	4a1f      	ldr	r2, [pc, #124]	; (800bc6c <create_name+0x120>)
 800bbf0:	5cd3      	ldrb	r3, [r2, r3]
 800bbf2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bbf4:	7ffb      	ldrb	r3, [r7, #31]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	481d      	ldr	r0, [pc, #116]	; (800bc70 <create_name+0x124>)
 800bbfa:	f7ff f815 	bl	800ac28 <chk_chr>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d001      	beq.n	800bc08 <create_name+0xbc>
 800bc04:	2306      	movs	r3, #6
 800bc06:	e02c      	b.n	800bc62 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bc08:	7ffb      	ldrb	r3, [r7, #31]
 800bc0a:	2b60      	cmp	r3, #96	; 0x60
 800bc0c:	d905      	bls.n	800bc1a <create_name+0xce>
 800bc0e:	7ffb      	ldrb	r3, [r7, #31]
 800bc10:	2b7a      	cmp	r3, #122	; 0x7a
 800bc12:	d802      	bhi.n	800bc1a <create_name+0xce>
 800bc14:	7ffb      	ldrb	r3, [r7, #31]
 800bc16:	3b20      	subs	r3, #32
 800bc18:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	613a      	str	r2, [r7, #16]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	4413      	add	r3, r2
 800bc24:	7ffa      	ldrb	r2, [r7, #31]
 800bc26:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bc28:	e7a6      	b.n	800bb78 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bc2a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	441a      	add	r2, r3
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d101      	bne.n	800bc40 <create_name+0xf4>
 800bc3c:	2306      	movs	r3, #6
 800bc3e:	e010      	b.n	800bc62 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2be5      	cmp	r3, #229	; 0xe5
 800bc46:	d102      	bne.n	800bc4e <create_name+0x102>
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	2205      	movs	r2, #5
 800bc4c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bc4e:	7ffb      	ldrb	r3, [r7, #31]
 800bc50:	2b20      	cmp	r3, #32
 800bc52:	d801      	bhi.n	800bc58 <create_name+0x10c>
 800bc54:	2204      	movs	r2, #4
 800bc56:	e000      	b.n	800bc5a <create_name+0x10e>
 800bc58:	2200      	movs	r2, #0
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	330b      	adds	r3, #11
 800bc5e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bc60:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3720      	adds	r7, #32
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	0800d974 	.word	0x0800d974
 800bc70:	0800d89c 	.word	0x0800d89c

0800bc74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bc88:	e002      	b.n	800bc90 <follow_path+0x1c>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	603b      	str	r3, [r7, #0]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	2b2f      	cmp	r3, #47	; 0x2f
 800bc96:	d0f8      	beq.n	800bc8a <follow_path+0x16>
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	2b5c      	cmp	r3, #92	; 0x5c
 800bc9e:	d0f4      	beq.n	800bc8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	2200      	movs	r2, #0
 800bca4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	2b1f      	cmp	r3, #31
 800bcac:	d80a      	bhi.n	800bcc4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2280      	movs	r2, #128	; 0x80
 800bcb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7ff fcf9 	bl	800b6b0 <dir_sdi>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	75fb      	strb	r3, [r7, #23]
 800bcc2:	e043      	b.n	800bd4c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bcc4:	463b      	mov	r3, r7
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff ff3f 	bl	800bb4c <create_name>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d134      	bne.n	800bd42 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff feaf 	bl	800ba3c <dir_find>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bce8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bcea:	7dfb      	ldrb	r3, [r7, #23]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d00a      	beq.n	800bd06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	2b04      	cmp	r3, #4
 800bcf4:	d127      	bne.n	800bd46 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bcf6:	7afb      	ldrb	r3, [r7, #11]
 800bcf8:	f003 0304 	and.w	r3, r3, #4
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d122      	bne.n	800bd46 <follow_path+0xd2>
 800bd00:	2305      	movs	r3, #5
 800bd02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bd04:	e01f      	b.n	800bd46 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd06:	7afb      	ldrb	r3, [r7, #11]
 800bd08:	f003 0304 	and.w	r3, r3, #4
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d11c      	bne.n	800bd4a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	799b      	ldrb	r3, [r3, #6]
 800bd14:	f003 0310 	and.w	r3, r3, #16
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bd1c:	2305      	movs	r3, #5
 800bd1e:	75fb      	strb	r3, [r7, #23]
 800bd20:	e014      	b.n	800bd4c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	695b      	ldr	r3, [r3, #20]
 800bd2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd30:	4413      	add	r3, r2
 800bd32:	4619      	mov	r1, r3
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f7ff fe42 	bl	800b9be <ld_clust>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd40:	e7c0      	b.n	800bcc4 <follow_path+0x50>
			if (res != FR_OK) break;
 800bd42:	bf00      	nop
 800bd44:	e002      	b.n	800bd4c <follow_path+0xd8>
				break;
 800bd46:	bf00      	nop
 800bd48:	e000      	b.n	800bd4c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd4a:	bf00      	nop
			}
		}
	}

	return res;
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b087      	sub	sp, #28
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd62:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d031      	beq.n	800bdd0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	617b      	str	r3, [r7, #20]
 800bd72:	e002      	b.n	800bd7a <get_ldnumber+0x24>
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	3301      	adds	r3, #1
 800bd78:	617b      	str	r3, [r7, #20]
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	2b20      	cmp	r3, #32
 800bd80:	d903      	bls.n	800bd8a <get_ldnumber+0x34>
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	2b3a      	cmp	r3, #58	; 0x3a
 800bd88:	d1f4      	bne.n	800bd74 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	2b3a      	cmp	r3, #58	; 0x3a
 800bd90:	d11c      	bne.n	800bdcc <get_ldnumber+0x76>
			tp = *path;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	60fa      	str	r2, [r7, #12]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	3b30      	subs	r3, #48	; 0x30
 800bda2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2b09      	cmp	r3, #9
 800bda8:	d80e      	bhi.n	800bdc8 <get_ldnumber+0x72>
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d10a      	bne.n	800bdc8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d107      	bne.n	800bdc8 <get_ldnumber+0x72>
					vol = (int)i;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	697a      	ldr	r2, [r7, #20]
 800bdc6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	e002      	b.n	800bdd2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bdcc:	2300      	movs	r3, #0
 800bdce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bdd0:	693b      	ldr	r3, [r7, #16]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	371c      	adds	r7, #28
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
	...

0800bde0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	70da      	strb	r2, [r3, #3]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff f8e0 	bl	800afc0 <move_window>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <check_fs+0x2a>
 800be06:	2304      	movs	r3, #4
 800be08:	e038      	b.n	800be7c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	3330      	adds	r3, #48	; 0x30
 800be0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be12:	4618      	mov	r0, r3
 800be14:	f7fe fe24 	bl	800aa60 <ld_word>
 800be18:	4603      	mov	r3, r0
 800be1a:	461a      	mov	r2, r3
 800be1c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800be20:	429a      	cmp	r2, r3
 800be22:	d001      	beq.n	800be28 <check_fs+0x48>
 800be24:	2303      	movs	r3, #3
 800be26:	e029      	b.n	800be7c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be2e:	2be9      	cmp	r3, #233	; 0xe9
 800be30:	d009      	beq.n	800be46 <check_fs+0x66>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be38:	2beb      	cmp	r3, #235	; 0xeb
 800be3a:	d11e      	bne.n	800be7a <check_fs+0x9a>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800be42:	2b90      	cmp	r3, #144	; 0x90
 800be44:	d119      	bne.n	800be7a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	3330      	adds	r3, #48	; 0x30
 800be4a:	3336      	adds	r3, #54	; 0x36
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fe fe1f 	bl	800aa90 <ld_dword>
 800be52:	4603      	mov	r3, r0
 800be54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be58:	4a0a      	ldr	r2, [pc, #40]	; (800be84 <check_fs+0xa4>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d101      	bne.n	800be62 <check_fs+0x82>
 800be5e:	2300      	movs	r3, #0
 800be60:	e00c      	b.n	800be7c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	3330      	adds	r3, #48	; 0x30
 800be66:	3352      	adds	r3, #82	; 0x52
 800be68:	4618      	mov	r0, r3
 800be6a:	f7fe fe11 	bl	800aa90 <ld_dword>
 800be6e:	4602      	mov	r2, r0
 800be70:	4b05      	ldr	r3, [pc, #20]	; (800be88 <check_fs+0xa8>)
 800be72:	429a      	cmp	r2, r3
 800be74:	d101      	bne.n	800be7a <check_fs+0x9a>
 800be76:	2300      	movs	r3, #0
 800be78:	e000      	b.n	800be7c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800be7a:	2302      	movs	r3, #2
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	00544146 	.word	0x00544146
 800be88:	33544146 	.word	0x33544146

0800be8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b096      	sub	sp, #88	; 0x58
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	4613      	mov	r3, r2
 800be98:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2200      	movs	r2, #0
 800be9e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f7ff ff58 	bl	800bd56 <get_ldnumber>
 800bea6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beaa:	2b00      	cmp	r3, #0
 800beac:	da01      	bge.n	800beb2 <find_volume+0x26>
 800beae:	230b      	movs	r3, #11
 800beb0:	e22e      	b.n	800c310 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800beb2:	4aa8      	ldr	r2, [pc, #672]	; (800c154 <find_volume+0x2c8>)
 800beb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d101      	bne.n	800bec6 <find_volume+0x3a>
 800bec2:	230c      	movs	r3, #12
 800bec4:	e224      	b.n	800c310 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800beca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	f023 0301 	bic.w	r3, r3, #1
 800bed2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d01a      	beq.n	800bf12 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bede:	785b      	ldrb	r3, [r3, #1]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fe fd1f 	bl	800a924 <disk_status>
 800bee6:	4603      	mov	r3, r0
 800bee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800beec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10c      	bne.n	800bf12 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bef8:	79fb      	ldrb	r3, [r7, #7]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d007      	beq.n	800bf0e <find_volume+0x82>
 800befe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf02:	f003 0304 	and.w	r3, r3, #4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bf0a:	230a      	movs	r3, #10
 800bf0c:	e200      	b.n	800c310 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800bf0e:	2300      	movs	r3, #0
 800bf10:	e1fe      	b.n	800c310 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf14:	2200      	movs	r2, #0
 800bf16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bf18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1a:	b2da      	uxtb	r2, r3
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf22:	785b      	ldrb	r3, [r3, #1]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe fd17 	bl	800a958 <disk_initialize>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bf30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf34:	f003 0301 	and.w	r3, r3, #1
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d001      	beq.n	800bf40 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	e1e7      	b.n	800c310 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d007      	beq.n	800bf56 <find_volume+0xca>
 800bf46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf4a:	f003 0304 	and.w	r3, r3, #4
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bf52:	230a      	movs	r3, #10
 800bf54:	e1dc      	b.n	800c310 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bf5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf5e:	f7ff ff3f 	bl	800bde0 <check_fs>
 800bf62:	4603      	mov	r3, r0
 800bf64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bf68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d14b      	bne.n	800c008 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf70:	2300      	movs	r3, #0
 800bf72:	643b      	str	r3, [r7, #64]	; 0x40
 800bf74:	e01f      	b.n	800bfb6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf7e:	011b      	lsls	r3, r3, #4
 800bf80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bf84:	4413      	add	r3, r2
 800bf86:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d006      	beq.n	800bfa0 <find_volume+0x114>
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	3308      	adds	r3, #8
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fe fd7a 	bl	800aa90 <ld_dword>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	e000      	b.n	800bfa2 <find_volume+0x116>
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bfaa:	440b      	add	r3, r1
 800bfac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bfb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	643b      	str	r3, [r7, #64]	; 0x40
 800bfb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d9dc      	bls.n	800bf76 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bfc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <find_volume+0x140>
 800bfc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bfda:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bfdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d005      	beq.n	800bfee <find_volume+0x162>
 800bfe2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bfe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfe6:	f7ff fefb 	bl	800bde0 <check_fs>
 800bfea:	4603      	mov	r3, r0
 800bfec:	e000      	b.n	800bff0 <find_volume+0x164>
 800bfee:	2303      	movs	r3, #3
 800bff0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d905      	bls.n	800c008 <find_volume+0x17c>
 800bffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bffe:	3301      	adds	r3, #1
 800c000:	643b      	str	r3, [r7, #64]	; 0x40
 800c002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c004:	2b03      	cmp	r3, #3
 800c006:	d9e1      	bls.n	800bfcc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c00c:	2b04      	cmp	r3, #4
 800c00e:	d101      	bne.n	800c014 <find_volume+0x188>
 800c010:	2301      	movs	r3, #1
 800c012:	e17d      	b.n	800c310 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d901      	bls.n	800c020 <find_volume+0x194>
 800c01c:	230d      	movs	r3, #13
 800c01e:	e177      	b.n	800c310 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c022:	3330      	adds	r3, #48	; 0x30
 800c024:	330b      	adds	r3, #11
 800c026:	4618      	mov	r0, r3
 800c028:	f7fe fd1a 	bl	800aa60 <ld_word>
 800c02c:	4603      	mov	r3, r0
 800c02e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c032:	d001      	beq.n	800c038 <find_volume+0x1ac>
 800c034:	230d      	movs	r3, #13
 800c036:	e16b      	b.n	800c310 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03a:	3330      	adds	r3, #48	; 0x30
 800c03c:	3316      	adds	r3, #22
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fe fd0e 	bl	800aa60 <ld_word>
 800c044:	4603      	mov	r3, r0
 800c046:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d106      	bne.n	800c05c <find_volume+0x1d0>
 800c04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c050:	3330      	adds	r3, #48	; 0x30
 800c052:	3324      	adds	r3, #36	; 0x24
 800c054:	4618      	mov	r0, r3
 800c056:	f7fe fd1b 	bl	800aa90 <ld_dword>
 800c05a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c060:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	789b      	ldrb	r3, [r3, #2]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d005      	beq.n	800c080 <find_volume+0x1f4>
 800c074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c076:	789b      	ldrb	r3, [r3, #2]
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d001      	beq.n	800c080 <find_volume+0x1f4>
 800c07c:	230d      	movs	r3, #13
 800c07e:	e147      	b.n	800c310 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	789b      	ldrb	r3, [r3, #2]
 800c084:	461a      	mov	r2, r3
 800c086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c088:	fb02 f303 	mul.w	r3, r2, r3
 800c08c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c094:	b29a      	uxth	r2, r3
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09c:	895b      	ldrh	r3, [r3, #10]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d008      	beq.n	800c0b4 <find_volume+0x228>
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a4:	895b      	ldrh	r3, [r3, #10]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0aa:	895b      	ldrh	r3, [r3, #10]
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d001      	beq.n	800c0b8 <find_volume+0x22c>
 800c0b4:	230d      	movs	r3, #13
 800c0b6:	e12b      	b.n	800c310 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ba:	3330      	adds	r3, #48	; 0x30
 800c0bc:	3311      	adds	r3, #17
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fe fcce 	bl	800aa60 <ld_word>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	891b      	ldrh	r3, [r3, #8]
 800c0d0:	f003 030f 	and.w	r3, r3, #15
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <find_volume+0x252>
 800c0da:	230d      	movs	r3, #13
 800c0dc:	e118      	b.n	800c310 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	3330      	adds	r3, #48	; 0x30
 800c0e2:	3313      	adds	r3, #19
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fe fcbb 	bl	800aa60 <ld_word>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c0ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d106      	bne.n	800c102 <find_volume+0x276>
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f6:	3330      	adds	r3, #48	; 0x30
 800c0f8:	3320      	adds	r3, #32
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fcc8 	bl	800aa90 <ld_dword>
 800c100:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	3330      	adds	r3, #48	; 0x30
 800c106:	330e      	adds	r3, #14
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fca9 	bl	800aa60 <ld_word>
 800c10e:	4603      	mov	r3, r0
 800c110:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c112:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <find_volume+0x290>
 800c118:	230d      	movs	r3, #13
 800c11a:	e0f9      	b.n	800c310 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c11c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c11e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c120:	4413      	add	r3, r2
 800c122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c124:	8912      	ldrh	r2, [r2, #8]
 800c126:	0912      	lsrs	r2, r2, #4
 800c128:	b292      	uxth	r2, r2
 800c12a:	4413      	add	r3, r2
 800c12c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c12e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c132:	429a      	cmp	r2, r3
 800c134:	d201      	bcs.n	800c13a <find_volume+0x2ae>
 800c136:	230d      	movs	r3, #13
 800c138:	e0ea      	b.n	800c310 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c13a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c142:	8952      	ldrh	r2, [r2, #10]
 800c144:	fbb3 f3f2 	udiv	r3, r3, r2
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d103      	bne.n	800c158 <find_volume+0x2cc>
 800c150:	230d      	movs	r3, #13
 800c152:	e0dd      	b.n	800c310 <find_volume+0x484>
 800c154:	20001350 	.word	0x20001350
		fmt = FS_FAT32;
 800c158:	2303      	movs	r3, #3
 800c15a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c160:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c164:	4293      	cmp	r3, r2
 800c166:	d802      	bhi.n	800c16e <find_volume+0x2e2>
 800c168:	2302      	movs	r3, #2
 800c16a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c174:	4293      	cmp	r3, r2
 800c176:	d802      	bhi.n	800c17e <find_volume+0x2f2>
 800c178:	2301      	movs	r3, #1
 800c17a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	1c9a      	adds	r2, r3, #2
 800c182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c184:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c188:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c18a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c18c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c18e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c190:	441a      	add	r2, r3
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c196:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	441a      	add	r2, r3
 800c19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c1a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1a4:	2b03      	cmp	r3, #3
 800c1a6:	d11e      	bne.n	800c1e6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	3330      	adds	r3, #48	; 0x30
 800c1ac:	332a      	adds	r3, #42	; 0x2a
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fe fc56 	bl	800aa60 <ld_word>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d001      	beq.n	800c1be <find_volume+0x332>
 800c1ba:	230d      	movs	r3, #13
 800c1bc:	e0a8      	b.n	800c310 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	891b      	ldrh	r3, [r3, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <find_volume+0x33e>
 800c1c6:	230d      	movs	r3, #13
 800c1c8:	e0a2      	b.n	800c310 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1cc:	3330      	adds	r3, #48	; 0x30
 800c1ce:	332c      	adds	r3, #44	; 0x2c
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fe fc5d 	bl	800aa90 <ld_dword>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1de:	695b      	ldr	r3, [r3, #20]
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	647b      	str	r3, [r7, #68]	; 0x44
 800c1e4:	e01f      	b.n	800c226 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e8:	891b      	ldrh	r3, [r3, #8]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <find_volume+0x366>
 800c1ee:	230d      	movs	r3, #13
 800c1f0:	e08e      	b.n	800c310 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f4:	6a1a      	ldr	r2, [r3, #32]
 800c1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1f8:	441a      	add	r2, r3
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c1fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c202:	2b02      	cmp	r3, #2
 800c204:	d103      	bne.n	800c20e <find_volume+0x382>
 800c206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	005b      	lsls	r3, r3, #1
 800c20c:	e00a      	b.n	800c224 <find_volume+0x398>
 800c20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c210:	695a      	ldr	r2, [r3, #20]
 800c212:	4613      	mov	r3, r2
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	4413      	add	r3, r2
 800c218:	085a      	lsrs	r2, r3, #1
 800c21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21c:	695b      	ldr	r3, [r3, #20]
 800c21e:	f003 0301 	and.w	r3, r3, #1
 800c222:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c224:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	699a      	ldr	r2, [r3, #24]
 800c22a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c22c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c230:	0a5b      	lsrs	r3, r3, #9
 800c232:	429a      	cmp	r2, r3
 800c234:	d201      	bcs.n	800c23a <find_volume+0x3ae>
 800c236:	230d      	movs	r3, #13
 800c238:	e06a      	b.n	800c310 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23c:	f04f 32ff 	mov.w	r2, #4294967295
 800c240:	611a      	str	r2, [r3, #16]
 800c242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c244:	691a      	ldr	r2, [r3, #16]
 800c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c248:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24c:	2280      	movs	r2, #128	; 0x80
 800c24e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c254:	2b03      	cmp	r3, #3
 800c256:	d149      	bne.n	800c2ec <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25a:	3330      	adds	r3, #48	; 0x30
 800c25c:	3330      	adds	r3, #48	; 0x30
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fbfe 	bl	800aa60 <ld_word>
 800c264:	4603      	mov	r3, r0
 800c266:	2b01      	cmp	r3, #1
 800c268:	d140      	bne.n	800c2ec <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c26c:	3301      	adds	r3, #1
 800c26e:	4619      	mov	r1, r3
 800c270:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c272:	f7fe fea5 	bl	800afc0 <move_window>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d137      	bne.n	800c2ec <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	2200      	movs	r2, #0
 800c280:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c284:	3330      	adds	r3, #48	; 0x30
 800c286:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fe fbe8 	bl	800aa60 <ld_word>
 800c290:	4603      	mov	r3, r0
 800c292:	461a      	mov	r2, r3
 800c294:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c298:	429a      	cmp	r2, r3
 800c29a:	d127      	bne.n	800c2ec <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	3330      	adds	r3, #48	; 0x30
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fe fbf5 	bl	800aa90 <ld_dword>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	4b1b      	ldr	r3, [pc, #108]	; (800c318 <find_volume+0x48c>)
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d11e      	bne.n	800c2ec <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b0:	3330      	adds	r3, #48	; 0x30
 800c2b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fe fbea 	bl	800aa90 <ld_dword>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	4b17      	ldr	r3, [pc, #92]	; (800c31c <find_volume+0x490>)
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d113      	bne.n	800c2ec <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	3330      	adds	r3, #48	; 0x30
 800c2c8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fe fbdf 	bl	800aa90 <ld_dword>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2da:	3330      	adds	r3, #48	; 0x30
 800c2dc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fe fbd5 	bl	800aa90 <ld_dword>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ea:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c2f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c2f4:	4b0a      	ldr	r3, [pc, #40]	; (800c320 <find_volume+0x494>)
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	4b08      	ldr	r3, [pc, #32]	; (800c320 <find_volume+0x494>)
 800c2fe:	801a      	strh	r2, [r3, #0]
 800c300:	4b07      	ldr	r3, [pc, #28]	; (800c320 <find_volume+0x494>)
 800c302:	881a      	ldrh	r2, [r3, #0]
 800c304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c306:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c308:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c30a:	f7fe fdf1 	bl	800aef0 <clear_lock>
#endif
	return FR_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3758      	adds	r7, #88	; 0x58
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	41615252 	.word	0x41615252
 800c31c:	61417272 	.word	0x61417272
 800c320:	20001354 	.word	0x20001354

0800c324 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c32e:	2309      	movs	r3, #9
 800c330:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d01c      	beq.n	800c372 <validate+0x4e>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d018      	beq.n	800c372 <validate+0x4e>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d013      	beq.n	800c372 <validate+0x4e>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	889a      	ldrh	r2, [r3, #4]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	88db      	ldrh	r3, [r3, #6]
 800c354:	429a      	cmp	r2, r3
 800c356:	d10c      	bne.n	800c372 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	785b      	ldrb	r3, [r3, #1]
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fe fae0 	bl	800a924 <disk_status>
 800c364:	4603      	mov	r3, r0
 800c366:	f003 0301 	and.w	r3, r3, #1
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <validate+0x4e>
			res = FR_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c372:	7bfb      	ldrb	r3, [r7, #15]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d102      	bne.n	800c37e <validate+0x5a>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	e000      	b.n	800c380 <validate+0x5c>
 800c37e:	2300      	movs	r3, #0
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	6013      	str	r3, [r2, #0]
	return res;
 800c384:	7bfb      	ldrb	r3, [r7, #15]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
	...

0800c390 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	4613      	mov	r3, r2
 800c39c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c3a2:	f107 0310 	add.w	r3, r7, #16
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff fcd5 	bl	800bd56 <get_ldnumber>
 800c3ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	da01      	bge.n	800c3b8 <f_mount+0x28>
 800c3b4:	230b      	movs	r3, #11
 800c3b6:	e02b      	b.n	800c410 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c3b8:	4a17      	ldr	r2, [pc, #92]	; (800c418 <f_mount+0x88>)
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d005      	beq.n	800c3d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c3c8:	69b8      	ldr	r0, [r7, #24]
 800c3ca:	f7fe fd91 	bl	800aef0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d002      	beq.n	800c3e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	490d      	ldr	r1, [pc, #52]	; (800c418 <f_mount+0x88>)
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <f_mount+0x66>
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d001      	beq.n	800c3fa <f_mount+0x6a>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	e00a      	b.n	800c410 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c3fa:	f107 010c 	add.w	r1, r7, #12
 800c3fe:	f107 0308 	add.w	r3, r7, #8
 800c402:	2200      	movs	r2, #0
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff fd41 	bl	800be8c <find_volume>
 800c40a:	4603      	mov	r3, r0
 800c40c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3720      	adds	r7, #32
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	20001350 	.word	0x20001350

0800c41c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b098      	sub	sp, #96	; 0x60
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	4613      	mov	r3, r2
 800c428:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <f_open+0x18>
 800c430:	2309      	movs	r3, #9
 800c432:	e1ad      	b.n	800c790 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c434:	79fb      	ldrb	r3, [r7, #7]
 800c436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c43a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c43c:	79fa      	ldrb	r2, [r7, #7]
 800c43e:	f107 0110 	add.w	r1, r7, #16
 800c442:	f107 0308 	add.w	r3, r7, #8
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff fd20 	bl	800be8c <find_volume>
 800c44c:	4603      	mov	r3, r0
 800c44e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c456:	2b00      	cmp	r3, #0
 800c458:	f040 8191 	bne.w	800c77e <f_open+0x362>
		dj.obj.fs = fs;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	f107 0314 	add.w	r3, r7, #20
 800c466:	4611      	mov	r1, r2
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff fc03 	bl	800bc74 <follow_path>
 800c46e:	4603      	mov	r3, r0
 800c470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d11a      	bne.n	800c4b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c47c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c480:	b25b      	sxtb	r3, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	da03      	bge.n	800c48e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c486:	2306      	movs	r3, #6
 800c488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c48c:	e011      	b.n	800c4b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c48e:	79fb      	ldrb	r3, [r7, #7]
 800c490:	f023 0301 	bic.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	bf14      	ite	ne
 800c498:	2301      	movne	r3, #1
 800c49a:	2300      	moveq	r3, #0
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	461a      	mov	r2, r3
 800c4a0:	f107 0314 	add.w	r3, r7, #20
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fe fbda 	bl	800ac60 <chk_lock>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c4b2:	79fb      	ldrb	r3, [r7, #7]
 800c4b4:	f003 031c 	and.w	r3, r3, #28
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d07f      	beq.n	800c5bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c4bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d017      	beq.n	800c4f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c4c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4c8:	2b04      	cmp	r3, #4
 800c4ca:	d10e      	bne.n	800c4ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c4cc:	f7fe fc24 	bl	800ad18 <enq_lock>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d006      	beq.n	800c4e4 <f_open+0xc8>
 800c4d6:	f107 0314 	add.w	r3, r7, #20
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7ff fb03 	bl	800bae6 <dir_register>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	e000      	b.n	800c4e6 <f_open+0xca>
 800c4e4:	2312      	movs	r3, #18
 800c4e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	f043 0308 	orr.w	r3, r3, #8
 800c4f0:	71fb      	strb	r3, [r7, #7]
 800c4f2:	e010      	b.n	800c516 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c4f4:	7ebb      	ldrb	r3, [r7, #26]
 800c4f6:	f003 0311 	and.w	r3, r3, #17
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d003      	beq.n	800c506 <f_open+0xea>
					res = FR_DENIED;
 800c4fe:	2307      	movs	r3, #7
 800c500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c504:	e007      	b.n	800c516 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c506:	79fb      	ldrb	r3, [r7, #7]
 800c508:	f003 0304 	and.w	r3, r3, #4
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <f_open+0xfa>
 800c510:	2308      	movs	r3, #8
 800c512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d168      	bne.n	800c5f0 <f_open+0x1d4>
 800c51e:	79fb      	ldrb	r3, [r7, #7]
 800c520:	f003 0308 	and.w	r3, r3, #8
 800c524:	2b00      	cmp	r3, #0
 800c526:	d063      	beq.n	800c5f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c528:	f7fb fa04 	bl	8007934 <get_fattime>
 800c52c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c530:	330e      	adds	r3, #14
 800c532:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c534:	4618      	mov	r0, r3
 800c536:	f7fe fae9 	bl	800ab0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53c:	3316      	adds	r3, #22
 800c53e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe fae3 	bl	800ab0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c548:	330b      	adds	r3, #11
 800c54a:	2220      	movs	r2, #32
 800c54c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c552:	4611      	mov	r1, r2
 800c554:	4618      	mov	r0, r3
 800c556:	f7ff fa32 	bl	800b9be <ld_clust>
 800c55a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c560:	2200      	movs	r2, #0
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff fa4a 	bl	800b9fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c56a:	331c      	adds	r3, #28
 800c56c:	2100      	movs	r1, #0
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fe facc 	bl	800ab0c <st_dword>
					fs->wflag = 1;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	2201      	movs	r2, #1
 800c578:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d037      	beq.n	800c5f0 <f_open+0x1d4>
						dw = fs->winsect;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c584:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c586:	f107 0314 	add.w	r3, r7, #20
 800c58a:	2200      	movs	r2, #0
 800c58c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fe ff5d 	bl	800b44e <remove_chain>
 800c594:	4603      	mov	r3, r0
 800c596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c59a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d126      	bne.n	800c5f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe fd0a 	bl	800afc0 <move_window>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5b6:	3a01      	subs	r2, #1
 800c5b8:	60da      	str	r2, [r3, #12]
 800c5ba:	e019      	b.n	800c5f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c5bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d115      	bne.n	800c5f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c5c4:	7ebb      	ldrb	r3, [r7, #26]
 800c5c6:	f003 0310 	and.w	r3, r3, #16
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d003      	beq.n	800c5d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c5ce:	2304      	movs	r3, #4
 800c5d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c5d4:	e00c      	b.n	800c5f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c5d6:	79fb      	ldrb	r3, [r7, #7]
 800c5d8:	f003 0302 	and.w	r3, r3, #2
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d007      	beq.n	800c5f0 <f_open+0x1d4>
 800c5e0:	7ebb      	ldrb	r3, [r7, #26]
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <f_open+0x1d4>
						res = FR_DENIED;
 800c5ea:	2307      	movs	r3, #7
 800c5ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c5f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d128      	bne.n	800c64a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c5f8:	79fb      	ldrb	r3, [r7, #7]
 800c5fa:	f003 0308 	and.w	r3, r3, #8
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d003      	beq.n	800c60a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c602:	79fb      	ldrb	r3, [r7, #7]
 800c604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c608:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c618:	79fb      	ldrb	r3, [r7, #7]
 800c61a:	f023 0301 	bic.w	r3, r3, #1
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bf14      	ite	ne
 800c622:	2301      	movne	r3, #1
 800c624:	2300      	moveq	r3, #0
 800c626:	b2db      	uxtb	r3, r3
 800c628:	461a      	mov	r2, r3
 800c62a:	f107 0314 	add.w	r3, r7, #20
 800c62e:	4611      	mov	r1, r2
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe fb93 	bl	800ad5c <inc_lock>
 800c636:	4602      	mov	r2, r0
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d102      	bne.n	800c64a <f_open+0x22e>
 800c644:	2302      	movs	r3, #2
 800c646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c64a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f040 8095 	bne.w	800c77e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c658:	4611      	mov	r1, r2
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff f9af 	bl	800b9be <ld_clust>
 800c660:	4602      	mov	r2, r0
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c668:	331c      	adds	r3, #28
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fe fa10 	bl	800aa90 <ld_dword>
 800c670:	4602      	mov	r2, r0
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2200      	movs	r2, #0
 800c67a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	88da      	ldrh	r2, [r3, #6]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	79fa      	ldrb	r2, [r7, #7]
 800c68e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	3330      	adds	r3, #48	; 0x30
 800c6a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fe fa7a 	bl	800aba6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c6b2:	79fb      	ldrb	r3, [r7, #7]
 800c6b4:	f003 0320 	and.w	r3, r3, #32
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d060      	beq.n	800c77e <f_open+0x362>
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d05c      	beq.n	800c77e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	68da      	ldr	r2, [r3, #12]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	895b      	ldrh	r3, [r3, #10]
 800c6d0:	025b      	lsls	r3, r3, #9
 800c6d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	657b      	str	r3, [r7, #84]	; 0x54
 800c6e0:	e016      	b.n	800c710 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fe fd25 	bl	800b136 <get_fat>
 800c6ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c6ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d802      	bhi.n	800c6fa <f_open+0x2de>
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c6fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c700:	d102      	bne.n	800c708 <f_open+0x2ec>
 800c702:	2301      	movs	r3, #1
 800c704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c708:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c70a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	657b      	str	r3, [r7, #84]	; 0x54
 800c710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c714:	2b00      	cmp	r3, #0
 800c716:	d103      	bne.n	800c720 <f_open+0x304>
 800c718:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c71a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d8e0      	bhi.n	800c6e2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c724:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d127      	bne.n	800c77e <f_open+0x362>
 800c72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c734:	2b00      	cmp	r3, #0
 800c736:	d022      	beq.n	800c77e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fe fcdb 	bl	800b0f8 <clust2sect>
 800c742:	6478      	str	r0, [r7, #68]	; 0x44
 800c744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c746:	2b00      	cmp	r3, #0
 800c748:	d103      	bne.n	800c752 <f_open+0x336>
						res = FR_INT_ERR;
 800c74a:	2302      	movs	r3, #2
 800c74c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c750:	e015      	b.n	800c77e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c754:	0a5a      	lsrs	r2, r3, #9
 800c756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c758:	441a      	add	r2, r3
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	7858      	ldrb	r0, [r3, #1]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6a1a      	ldr	r2, [r3, #32]
 800c76c:	2301      	movs	r3, #1
 800c76e:	f7fe f919 	bl	800a9a4 <disk_read>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d002      	beq.n	800c77e <f_open+0x362>
 800c778:	2301      	movs	r3, #1
 800c77a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c77e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c782:	2b00      	cmp	r3, #0
 800c784:	d002      	beq.n	800c78c <f_open+0x370>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c78c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c790:	4618      	mov	r0, r3
 800c792:	3760      	adds	r7, #96	; 0x60
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b08e      	sub	sp, #56	; 0x38
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
 800c7a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f107 0214 	add.w	r2, r7, #20
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff fdb3 	bl	800c324 <validate>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c7c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d107      	bne.n	800c7dc <f_read+0x44>
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	7d5b      	ldrb	r3, [r3, #21]
 800c7d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c7d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <f_read+0x4a>
 800c7dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7e0:	e115      	b.n	800ca0e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	7d1b      	ldrb	r3, [r3, #20]
 800c7e6:	f003 0301 	and.w	r3, r3, #1
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d101      	bne.n	800c7f2 <f_read+0x5a>
 800c7ee:	2307      	movs	r3, #7
 800c7f0:	e10d      	b.n	800ca0e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	68da      	ldr	r2, [r3, #12]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	429a      	cmp	r2, r3
 800c804:	f240 80fe 	bls.w	800ca04 <f_read+0x26c>
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c80c:	e0fa      	b.n	800ca04 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c816:	2b00      	cmp	r3, #0
 800c818:	f040 80c6 	bne.w	800c9a8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	0a5b      	lsrs	r3, r3, #9
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	8952      	ldrh	r2, [r2, #10]
 800c826:	3a01      	subs	r2, #1
 800c828:	4013      	ands	r3, r2
 800c82a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d12f      	bne.n	800c892 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d103      	bne.n	800c842 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	633b      	str	r3, [r7, #48]	; 0x30
 800c840:	e013      	b.n	800c86a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d007      	beq.n	800c85a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	699b      	ldr	r3, [r3, #24]
 800c84e:	4619      	mov	r1, r3
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f7fe fef9 	bl	800b648 <clmt_clust>
 800c856:	6338      	str	r0, [r7, #48]	; 0x30
 800c858:	e007      	b.n	800c86a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	69db      	ldr	r3, [r3, #28]
 800c860:	4619      	mov	r1, r3
 800c862:	4610      	mov	r0, r2
 800c864:	f7fe fc67 	bl	800b136 <get_fat>
 800c868:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d804      	bhi.n	800c87a <f_read+0xe2>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2202      	movs	r2, #2
 800c874:	755a      	strb	r2, [r3, #21]
 800c876:	2302      	movs	r3, #2
 800c878:	e0c9      	b.n	800ca0e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c880:	d104      	bne.n	800c88c <f_read+0xf4>
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2201      	movs	r2, #1
 800c886:	755a      	strb	r2, [r3, #21]
 800c888:	2301      	movs	r3, #1
 800c88a:	e0c0      	b.n	800ca0e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c890:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	69db      	ldr	r3, [r3, #28]
 800c898:	4619      	mov	r1, r3
 800c89a:	4610      	mov	r0, r2
 800c89c:	f7fe fc2c 	bl	800b0f8 <clust2sect>
 800c8a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d104      	bne.n	800c8b2 <f_read+0x11a>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	755a      	strb	r2, [r3, #21]
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	e0ad      	b.n	800ca0e <f_read+0x276>
			sect += csect;
 800c8b2:	69ba      	ldr	r2, [r7, #24]
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	4413      	add	r3, r2
 800c8b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	0a5b      	lsrs	r3, r3, #9
 800c8be:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d039      	beq.n	800c93a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ca:	4413      	add	r3, r2
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	8952      	ldrh	r2, [r2, #10]
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d905      	bls.n	800c8e0 <f_read+0x148>
					cc = fs->csize - csect;
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	895b      	ldrh	r3, [r3, #10]
 800c8d8:	461a      	mov	r2, r3
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	7858      	ldrb	r0, [r3, #1]
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e6:	69ba      	ldr	r2, [r7, #24]
 800c8e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8ea:	f7fe f85b 	bl	800a9a4 <disk_read>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d004      	beq.n	800c8fe <f_read+0x166>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	755a      	strb	r2, [r3, #21]
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e087      	b.n	800ca0e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	7d1b      	ldrb	r3, [r3, #20]
 800c902:	b25b      	sxtb	r3, r3
 800c904:	2b00      	cmp	r3, #0
 800c906:	da14      	bge.n	800c932 <f_read+0x19a>
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6a1a      	ldr	r2, [r3, #32]
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	1ad3      	subs	r3, r2, r3
 800c910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c912:	429a      	cmp	r2, r3
 800c914:	d90d      	bls.n	800c932 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6a1a      	ldr	r2, [r3, #32]
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	025b      	lsls	r3, r3, #9
 800c920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c922:	18d0      	adds	r0, r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	3330      	adds	r3, #48	; 0x30
 800c928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c92c:	4619      	mov	r1, r3
 800c92e:	f7fe f919 	bl	800ab64 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c934:	025b      	lsls	r3, r3, #9
 800c936:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c938:	e050      	b.n	800c9dc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	69ba      	ldr	r2, [r7, #24]
 800c940:	429a      	cmp	r2, r3
 800c942:	d02e      	beq.n	800c9a2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	7d1b      	ldrb	r3, [r3, #20]
 800c948:	b25b      	sxtb	r3, r3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	da18      	bge.n	800c980 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	7858      	ldrb	r0, [r3, #1]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a1a      	ldr	r2, [r3, #32]
 800c95c:	2301      	movs	r3, #1
 800c95e:	f7fe f841 	bl	800a9e4 <disk_write>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d004      	beq.n	800c972 <f_read+0x1da>
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2201      	movs	r2, #1
 800c96c:	755a      	strb	r2, [r3, #21]
 800c96e:	2301      	movs	r3, #1
 800c970:	e04d      	b.n	800ca0e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	7d1b      	ldrb	r3, [r3, #20]
 800c976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c97a:	b2da      	uxtb	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	7858      	ldrb	r0, [r3, #1]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c98a:	2301      	movs	r3, #1
 800c98c:	69ba      	ldr	r2, [r7, #24]
 800c98e:	f7fe f809 	bl	800a9a4 <disk_read>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d004      	beq.n	800c9a2 <f_read+0x20a>
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2201      	movs	r2, #1
 800c99c:	755a      	strb	r2, [r3, #21]
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e035      	b.n	800ca0e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	69ba      	ldr	r2, [r7, #24]
 800c9a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c9b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d901      	bls.n	800c9c2 <f_read+0x22a>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	699b      	ldr	r3, [r3, #24]
 800c9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d0:	4413      	add	r3, r2
 800c9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9d8:	f7fe f8c4 	bl	800ab64 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e0:	4413      	add	r3, r2
 800c9e2:	627b      	str	r3, [r7, #36]	; 0x24
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	699a      	ldr	r2, [r3, #24]
 800c9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ea:	441a      	add	r2, r3
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	619a      	str	r2, [r3, #24]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f6:	441a      	add	r2, r3
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	601a      	str	r2, [r3, #0]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	1ad3      	subs	r3, r2, r3
 800ca02:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f47f af01 	bne.w	800c80e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3738      	adds	r7, #56	; 0x38
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b086      	sub	sp, #24
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f107 0208 	add.w	r2, r7, #8
 800ca24:	4611      	mov	r1, r2
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff fc7c 	bl	800c324 <validate>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca30:	7dfb      	ldrb	r3, [r7, #23]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d168      	bne.n	800cb08 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	7d1b      	ldrb	r3, [r3, #20]
 800ca3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d062      	beq.n	800cb08 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	7d1b      	ldrb	r3, [r3, #20]
 800ca46:	b25b      	sxtb	r3, r3
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	da15      	bge.n	800ca78 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	7858      	ldrb	r0, [r3, #1]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1a      	ldr	r2, [r3, #32]
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	f7fd ffc2 	bl	800a9e4 <disk_write>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <f_sync+0x54>
 800ca66:	2301      	movs	r3, #1
 800ca68:	e04f      	b.n	800cb0a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	7d1b      	ldrb	r3, [r3, #20]
 800ca6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca78:	f7fa ff5c 	bl	8007934 <get_fattime>
 800ca7c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca84:	4619      	mov	r1, r3
 800ca86:	4610      	mov	r0, r2
 800ca88:	f7fe fa9a 	bl	800afc0 <move_window>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca90:	7dfb      	ldrb	r3, [r7, #23]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d138      	bne.n	800cb08 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	330b      	adds	r3, #11
 800caa0:	781a      	ldrb	r2, [r3, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	330b      	adds	r3, #11
 800caa6:	f042 0220 	orr.w	r2, r2, #32
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6818      	ldr	r0, [r3, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	461a      	mov	r2, r3
 800cab8:	68f9      	ldr	r1, [r7, #12]
 800caba:	f7fe ff9f 	bl	800b9fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f103 021c 	add.w	r2, r3, #28
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	4619      	mov	r1, r3
 800caca:	4610      	mov	r0, r2
 800cacc:	f7fe f81e 	bl	800ab0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	3316      	adds	r3, #22
 800cad4:	6939      	ldr	r1, [r7, #16]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fe f818 	bl	800ab0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	3312      	adds	r3, #18
 800cae0:	2100      	movs	r1, #0
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fd fff7 	bl	800aad6 <st_word>
					fs->wflag = 1;
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	2201      	movs	r2, #1
 800caec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fe fa93 	bl	800b01c <sync_fs>
 800caf6:	4603      	mov	r3, r0
 800caf8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	7d1b      	ldrb	r3, [r3, #20]
 800cafe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b084      	sub	sp, #16
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff ff7b 	bl	800ca16 <f_sync>
 800cb20:	4603      	mov	r3, r0
 800cb22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d118      	bne.n	800cb5c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f107 0208 	add.w	r2, r7, #8
 800cb30:	4611      	mov	r1, r2
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7ff fbf6 	bl	800c324 <validate>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cb3c:	7bfb      	ldrb	r3, [r7, #15]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10c      	bne.n	800cb5c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fe f996 	bl	800ae78 <dec_lock>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d102      	bne.n	800cb5c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b090      	sub	sp, #64	; 0x40
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f107 0208 	add.w	r2, r7, #8
 800cb76:	4611      	mov	r1, r2
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7ff fbd3 	bl	800c324 <validate>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cb84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d103      	bne.n	800cb94 <f_lseek+0x2e>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	7d5b      	ldrb	r3, [r3, #21]
 800cb90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cb94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <f_lseek+0x3c>
 800cb9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cba0:	e1e6      	b.n	800cf70 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f000 80d1 	beq.w	800cd4e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb2:	d15a      	bne.n	800cc6a <f_lseek+0x104>
			tbl = fp->cltbl;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbc:	1d1a      	adds	r2, r3, #4
 800cbbe:	627a      	str	r2, [r7, #36]	; 0x24
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	617b      	str	r3, [r7, #20]
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d03a      	beq.n	800cc4a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd6:	613b      	str	r3, [r7, #16]
 800cbd8:	2300      	movs	r3, #0
 800cbda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbde:	3302      	adds	r3, #2
 800cbe0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe4:	60fb      	str	r3, [r7, #12]
 800cbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe8:	3301      	adds	r3, #1
 800cbea:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fe faa0 	bl	800b136 <get_fat>
 800cbf6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d804      	bhi.n	800cc08 <f_lseek+0xa2>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2202      	movs	r2, #2
 800cc02:	755a      	strb	r2, [r3, #21]
 800cc04:	2302      	movs	r3, #2
 800cc06:	e1b3      	b.n	800cf70 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc0e:	d104      	bne.n	800cc1a <f_lseek+0xb4>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	755a      	strb	r2, [r3, #21]
 800cc16:	2301      	movs	r3, #1
 800cc18:	e1aa      	b.n	800cf70 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d0de      	beq.n	800cbe2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cc24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d809      	bhi.n	800cc40 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2e:	1d1a      	adds	r2, r3, #4
 800cc30:	627a      	str	r2, [r7, #36]	; 0x24
 800cc32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc38:	1d1a      	adds	r2, r3, #4
 800cc3a:	627a      	str	r2, [r7, #36]	; 0x24
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	695b      	ldr	r3, [r3, #20]
 800cc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d3c4      	bcc.n	800cbd4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc50:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cc52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d803      	bhi.n	800cc62 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	e184      	b.n	800cf6c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cc62:	2311      	movs	r3, #17
 800cc64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cc68:	e180      	b.n	800cf6c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	683a      	ldr	r2, [r7, #0]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d902      	bls.n	800cc7a <f_lseek+0x114>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 8172 	beq.w	800cf6c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7fe fcda 	bl	800b648 <clmt_clust>
 800cc94:	4602      	mov	r2, r0
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	69db      	ldr	r3, [r3, #28]
 800cca0:	4619      	mov	r1, r3
 800cca2:	4610      	mov	r0, r2
 800cca4:	f7fe fa28 	bl	800b0f8 <clust2sect>
 800cca8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d104      	bne.n	800ccba <f_lseek+0x154>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2202      	movs	r2, #2
 800ccb4:	755a      	strb	r2, [r3, #21]
 800ccb6:	2302      	movs	r3, #2
 800ccb8:	e15a      	b.n	800cf70 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	3b01      	subs	r3, #1
 800ccbe:	0a5b      	lsrs	r3, r3, #9
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	8952      	ldrh	r2, [r2, #10]
 800ccc4:	3a01      	subs	r2, #1
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	69ba      	ldr	r2, [r7, #24]
 800ccca:	4413      	add	r3, r2
 800cccc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 8148 	beq.w	800cf6c <f_lseek+0x406>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a1b      	ldr	r3, [r3, #32]
 800cce0:	69ba      	ldr	r2, [r7, #24]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	f000 8142 	beq.w	800cf6c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	7d1b      	ldrb	r3, [r3, #20]
 800ccec:	b25b      	sxtb	r3, r3
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	da18      	bge.n	800cd24 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	7858      	ldrb	r0, [r3, #1]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6a1a      	ldr	r2, [r3, #32]
 800cd00:	2301      	movs	r3, #1
 800cd02:	f7fd fe6f 	bl	800a9e4 <disk_write>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d004      	beq.n	800cd16 <f_lseek+0x1b0>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	755a      	strb	r2, [r3, #21]
 800cd12:	2301      	movs	r3, #1
 800cd14:	e12c      	b.n	800cf70 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	7d1b      	ldrb	r3, [r3, #20]
 800cd1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	7858      	ldrb	r0, [r3, #1]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd2e:	2301      	movs	r3, #1
 800cd30:	69ba      	ldr	r2, [r7, #24]
 800cd32:	f7fd fe37 	bl	800a9a4 <disk_read>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d004      	beq.n	800cd46 <f_lseek+0x1e0>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	755a      	strb	r2, [r3, #21]
 800cd42:	2301      	movs	r3, #1
 800cd44:	e114      	b.n	800cf70 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	69ba      	ldr	r2, [r7, #24]
 800cd4a:	621a      	str	r2, [r3, #32]
 800cd4c:	e10e      	b.n	800cf6c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d908      	bls.n	800cd6a <f_lseek+0x204>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	7d1b      	ldrb	r3, [r3, #20]
 800cd5c:	f003 0302 	and.w	r3, r3, #2
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d102      	bne.n	800cd6a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cd70:	2300      	movs	r3, #0
 800cd72:	637b      	str	r3, [r7, #52]	; 0x34
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd78:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f000 80a7 	beq.w	800ced0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	895b      	ldrh	r3, [r3, #10]
 800cd86:	025b      	lsls	r3, r3, #9
 800cd88:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cd8a:	6a3b      	ldr	r3, [r7, #32]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d01b      	beq.n	800cdc8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	1e5a      	subs	r2, r3, #1
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	fbb2 f2f3 	udiv	r2, r2, r3
 800cd9a:	6a3b      	ldr	r3, [r7, #32]
 800cd9c:	1e59      	subs	r1, r3, #1
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d30f      	bcc.n	800cdc8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cda8:	6a3b      	ldr	r3, [r7, #32]
 800cdaa:	1e5a      	subs	r2, r3, #1
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	425b      	negs	r3, r3
 800cdb0:	401a      	ands	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	699b      	ldr	r3, [r3, #24]
 800cdba:	683a      	ldr	r2, [r7, #0]
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	69db      	ldr	r3, [r3, #28]
 800cdc4:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdc6:	e022      	b.n	800ce0e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d119      	bne.n	800ce08 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fe fb9d 	bl	800b518 <create_chain>
 800cdde:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d104      	bne.n	800cdf0 <f_lseek+0x28a>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2202      	movs	r2, #2
 800cdea:	755a      	strb	r2, [r3, #21]
 800cdec:	2302      	movs	r3, #2
 800cdee:	e0bf      	b.n	800cf70 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf6:	d104      	bne.n	800ce02 <f_lseek+0x29c>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	755a      	strb	r2, [r3, #21]
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e0b6      	b.n	800cf70 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce06:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce0c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d05d      	beq.n	800ced0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ce14:	e03a      	b.n	800ce8c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ce16:	683a      	ldr	r2, [r7, #0]
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	603b      	str	r3, [r7, #0]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	699a      	ldr	r2, [r3, #24]
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	441a      	add	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7d1b      	ldrb	r3, [r3, #20]
 800ce2e:	f003 0302 	and.w	r3, r3, #2
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00b      	beq.n	800ce4e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7fe fb6c 	bl	800b518 <create_chain>
 800ce40:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ce42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d108      	bne.n	800ce5a <f_lseek+0x2f4>
							ofs = 0; break;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	603b      	str	r3, [r7, #0]
 800ce4c:	e022      	b.n	800ce94 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fe f96f 	bl	800b136 <get_fat>
 800ce58:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce60:	d104      	bne.n	800ce6c <f_lseek+0x306>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2201      	movs	r2, #1
 800ce66:	755a      	strb	r2, [r3, #21]
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e081      	b.n	800cf70 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d904      	bls.n	800ce7c <f_lseek+0x316>
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d304      	bcc.n	800ce86 <f_lseek+0x320>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2202      	movs	r2, #2
 800ce80:	755a      	strb	r2, [r3, #21]
 800ce82:	2302      	movs	r3, #2
 800ce84:	e074      	b.n	800cf70 <f_lseek+0x40a>
					fp->clust = clst;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce8a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d8c0      	bhi.n	800ce16 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	699a      	ldr	r2, [r3, #24]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	441a      	add	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d012      	beq.n	800ced0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe f922 	bl	800b0f8 <clust2sect>
 800ceb4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ceb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d104      	bne.n	800cec6 <f_lseek+0x360>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2202      	movs	r2, #2
 800cec0:	755a      	strb	r2, [r3, #21]
 800cec2:	2302      	movs	r3, #2
 800cec4:	e054      	b.n	800cf70 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	0a5b      	lsrs	r3, r3, #9
 800ceca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cecc:	4413      	add	r3, r2
 800cece:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	699a      	ldr	r2, [r3, #24]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d90a      	bls.n	800cef2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	699a      	ldr	r2, [r3, #24]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	7d1b      	ldrb	r3, [r3, #20]
 800cee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d036      	beq.n	800cf6c <f_lseek+0x406>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6a1b      	ldr	r3, [r3, #32]
 800cf02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d031      	beq.n	800cf6c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	7d1b      	ldrb	r3, [r3, #20]
 800cf0c:	b25b      	sxtb	r3, r3
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	da18      	bge.n	800cf44 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	7858      	ldrb	r0, [r3, #1]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6a1a      	ldr	r2, [r3, #32]
 800cf20:	2301      	movs	r3, #1
 800cf22:	f7fd fd5f 	bl	800a9e4 <disk_write>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d004      	beq.n	800cf36 <f_lseek+0x3d0>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	755a      	strb	r2, [r3, #21]
 800cf32:	2301      	movs	r3, #1
 800cf34:	e01c      	b.n	800cf70 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	7d1b      	ldrb	r3, [r3, #20]
 800cf3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	7858      	ldrb	r0, [r3, #1]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf4e:	2301      	movs	r3, #1
 800cf50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf52:	f7fd fd27 	bl	800a9a4 <disk_read>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d004      	beq.n	800cf66 <f_lseek+0x400>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	755a      	strb	r2, [r3, #21]
 800cf62:	2301      	movs	r3, #1
 800cf64:	e004      	b.n	800cf70 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf6a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cf6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3740      	adds	r7, #64	; 0x40
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b087      	sub	sp, #28
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4613      	mov	r3, r2
 800cf84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cf86:	2301      	movs	r3, #1
 800cf88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cf8e:	4b1f      	ldr	r3, [pc, #124]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cf90:	7a5b      	ldrb	r3, [r3, #9]
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d131      	bne.n	800cffc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf98:	4b1c      	ldr	r3, [pc, #112]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cf9a:	7a5b      	ldrb	r3, [r3, #9]
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	4b1a      	ldr	r3, [pc, #104]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cfa6:	4b19      	ldr	r3, [pc, #100]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfa8:	7a5b      	ldrb	r3, [r3, #9]
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	4a17      	ldr	r2, [pc, #92]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4413      	add	r3, r2
 800cfb2:	68fa      	ldr	r2, [r7, #12]
 800cfb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cfb6:	4b15      	ldr	r3, [pc, #84]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfb8:	7a5b      	ldrb	r3, [r3, #9]
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	4b13      	ldr	r3, [pc, #76]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfc0:	4413      	add	r3, r2
 800cfc2:	79fa      	ldrb	r2, [r7, #7]
 800cfc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cfc6:	4b11      	ldr	r3, [pc, #68]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfc8:	7a5b      	ldrb	r3, [r3, #9]
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	1c5a      	adds	r2, r3, #1
 800cfce:	b2d1      	uxtb	r1, r2
 800cfd0:	4a0e      	ldr	r2, [pc, #56]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfd2:	7251      	strb	r1, [r2, #9]
 800cfd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cfd6:	7dbb      	ldrb	r3, [r7, #22]
 800cfd8:	3330      	adds	r3, #48	; 0x30
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	223a      	movs	r2, #58	; 0x3a
 800cfe6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	3302      	adds	r3, #2
 800cfec:	222f      	movs	r2, #47	; 0x2f
 800cfee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	3303      	adds	r3, #3
 800cff4:	2200      	movs	r2, #0
 800cff6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cff8:	2300      	movs	r3, #0
 800cffa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cffc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	371c      	adds	r7, #28
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	20001378 	.word	0x20001378

0800d010 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d01a:	2200      	movs	r2, #0
 800d01c:	6839      	ldr	r1, [r7, #0]
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7ff ffaa 	bl	800cf78 <FATFS_LinkDriverEx>
 800d024:	4603      	mov	r3, r0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
	...

0800d030 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d034:	2201      	movs	r2, #1
 800d036:	490e      	ldr	r1, [pc, #56]	; (800d070 <MX_USB_HOST_Init+0x40>)
 800d038:	480e      	ldr	r0, [pc, #56]	; (800d074 <MX_USB_HOST_Init+0x44>)
 800d03a:	f7fc f919 	bl	8009270 <USBH_Init>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d044:	f7f4 f922 	bl	800128c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d048:	490b      	ldr	r1, [pc, #44]	; (800d078 <MX_USB_HOST_Init+0x48>)
 800d04a:	480a      	ldr	r0, [pc, #40]	; (800d074 <MX_USB_HOST_Init+0x44>)
 800d04c:	f7fc f99e 	bl	800938c <USBH_RegisterClass>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d001      	beq.n	800d05a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d056:	f7f4 f919 	bl	800128c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d05a:	4806      	ldr	r0, [pc, #24]	; (800d074 <MX_USB_HOST_Init+0x44>)
 800d05c:	f7fc fa22 	bl	80094a4 <USBH_Start>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d066:	f7f4 f911 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d06a:	bf00      	nop
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	0800d091 	.word	0x0800d091
 800d074:	200018f8 	.word	0x200018f8
 800d078:	2000000c 	.word	0x2000000c

0800d07c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d080:	4802      	ldr	r0, [pc, #8]	; (800d08c <MX_USB_HOST_Process+0x10>)
 800d082:	f7fc fa1f 	bl	80094c4 <USBH_Process>
}
 800d086:	bf00      	nop
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	200018f8 	.word	0x200018f8

0800d090 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	460b      	mov	r3, r1
 800d09a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d09c:	78fb      	ldrb	r3, [r7, #3]
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	2b04      	cmp	r3, #4
 800d0a2:	d819      	bhi.n	800d0d8 <USBH_UserProcess+0x48>
 800d0a4:	a201      	add	r2, pc, #4	; (adr r2, 800d0ac <USBH_UserProcess+0x1c>)
 800d0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0aa:	bf00      	nop
 800d0ac:	0800d0d9 	.word	0x0800d0d9
 800d0b0:	0800d0c9 	.word	0x0800d0c9
 800d0b4:	0800d0d9 	.word	0x0800d0d9
 800d0b8:	0800d0d1 	.word	0x0800d0d1
 800d0bc:	0800d0c1 	.word	0x0800d0c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d0c0:	4b09      	ldr	r3, [pc, #36]	; (800d0e8 <USBH_UserProcess+0x58>)
 800d0c2:	2203      	movs	r2, #3
 800d0c4:	701a      	strb	r2, [r3, #0]
  break;
 800d0c6:	e008      	b.n	800d0da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d0c8:	4b07      	ldr	r3, [pc, #28]	; (800d0e8 <USBH_UserProcess+0x58>)
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	701a      	strb	r2, [r3, #0]
  break;
 800d0ce:	e004      	b.n	800d0da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d0d0:	4b05      	ldr	r3, [pc, #20]	; (800d0e8 <USBH_UserProcess+0x58>)
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	701a      	strb	r2, [r3, #0]
  break;
 800d0d6:	e000      	b.n	800d0da <USBH_UserProcess+0x4a>

  default:
  break;
 800d0d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d0da:	bf00      	nop
 800d0dc:	370c      	adds	r7, #12
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	20001384 	.word	0x20001384

0800d0ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	; 0x28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0f4:	f107 0314 	add.w	r3, r7, #20
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	601a      	str	r2, [r3, #0]
 800d0fc:	605a      	str	r2, [r3, #4]
 800d0fe:	609a      	str	r2, [r3, #8]
 800d100:	60da      	str	r2, [r3, #12]
 800d102:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d10c:	d147      	bne.n	800d19e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d10e:	2300      	movs	r3, #0
 800d110:	613b      	str	r3, [r7, #16]
 800d112:	4b25      	ldr	r3, [pc, #148]	; (800d1a8 <HAL_HCD_MspInit+0xbc>)
 800d114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d116:	4a24      	ldr	r2, [pc, #144]	; (800d1a8 <HAL_HCD_MspInit+0xbc>)
 800d118:	f043 0301 	orr.w	r3, r3, #1
 800d11c:	6313      	str	r3, [r2, #48]	; 0x30
 800d11e:	4b22      	ldr	r3, [pc, #136]	; (800d1a8 <HAL_HCD_MspInit+0xbc>)
 800d120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	613b      	str	r3, [r7, #16]
 800d128:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d12a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d12e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d130:	2300      	movs	r3, #0
 800d132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d134:	2300      	movs	r3, #0
 800d136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d138:	f107 0314 	add.w	r3, r7, #20
 800d13c:	4619      	mov	r1, r3
 800d13e:	481b      	ldr	r0, [pc, #108]	; (800d1ac <HAL_HCD_MspInit+0xc0>)
 800d140:	f7f4 fffe 	bl	8002140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d144:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d14a:	2302      	movs	r3, #2
 800d14c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d14e:	2300      	movs	r3, #0
 800d150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d152:	2303      	movs	r3, #3
 800d154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d156:	230a      	movs	r3, #10
 800d158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d15a:	f107 0314 	add.w	r3, r7, #20
 800d15e:	4619      	mov	r1, r3
 800d160:	4812      	ldr	r0, [pc, #72]	; (800d1ac <HAL_HCD_MspInit+0xc0>)
 800d162:	f7f4 ffed 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d166:	4b10      	ldr	r3, [pc, #64]	; (800d1a8 <HAL_HCD_MspInit+0xbc>)
 800d168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d16a:	4a0f      	ldr	r2, [pc, #60]	; (800d1a8 <HAL_HCD_MspInit+0xbc>)
 800d16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d170:	6353      	str	r3, [r2, #52]	; 0x34
 800d172:	2300      	movs	r3, #0
 800d174:	60fb      	str	r3, [r7, #12]
 800d176:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <HAL_HCD_MspInit+0xbc>)
 800d178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d17a:	4a0b      	ldr	r2, [pc, #44]	; (800d1a8 <HAL_HCD_MspInit+0xbc>)
 800d17c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d180:	6453      	str	r3, [r2, #68]	; 0x44
 800d182:	4b09      	ldr	r3, [pc, #36]	; (800d1a8 <HAL_HCD_MspInit+0xbc>)
 800d184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d18a:	60fb      	str	r3, [r7, #12]
 800d18c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d18e:	2200      	movs	r2, #0
 800d190:	2100      	movs	r1, #0
 800d192:	2043      	movs	r0, #67	; 0x43
 800d194:	f7f4 fbbf 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d198:	2043      	movs	r0, #67	; 0x43
 800d19a:	f7f4 fbd8 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d19e:	bf00      	nop
 800d1a0:	3728      	adds	r7, #40	; 0x28
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	40023800 	.word	0x40023800
 800d1ac:	40020000 	.word	0x40020000

0800d1b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fc fd53 	bl	8009c6a <USBH_LL_IncTimer>
}
 800d1c4:	bf00      	nop
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fc fd8b 	bl	8009cf6 <USBH_LL_Connect>
}
 800d1e0:	bf00      	nop
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fc fd94 	bl	8009d24 <USBH_LL_Disconnect>
}
 800d1fc:	bf00      	nop
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	70fb      	strb	r3, [r7, #3]
 800d210:	4613      	mov	r3, r2
 800d212:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fc fd45 	bl	8009cbe <USBH_LL_PortEnabled>
}
 800d234:	bf00      	nop
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fc fd45 	bl	8009cda <USBH_LL_PortDisabled>
}
 800d250:	bf00      	nop
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d266:	2b01      	cmp	r3, #1
 800d268:	d12a      	bne.n	800d2c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d26a:	4a18      	ldr	r2, [pc, #96]	; (800d2cc <USBH_LL_Init+0x74>)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a15      	ldr	r2, [pc, #84]	; (800d2cc <USBH_LL_Init+0x74>)
 800d276:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d27a:	4b14      	ldr	r3, [pc, #80]	; (800d2cc <USBH_LL_Init+0x74>)
 800d27c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d280:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d282:	4b12      	ldr	r3, [pc, #72]	; (800d2cc <USBH_LL_Init+0x74>)
 800d284:	2208      	movs	r2, #8
 800d286:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d288:	4b10      	ldr	r3, [pc, #64]	; (800d2cc <USBH_LL_Init+0x74>)
 800d28a:	2201      	movs	r2, #1
 800d28c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d28e:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <USBH_LL_Init+0x74>)
 800d290:	2200      	movs	r2, #0
 800d292:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d294:	4b0d      	ldr	r3, [pc, #52]	; (800d2cc <USBH_LL_Init+0x74>)
 800d296:	2202      	movs	r2, #2
 800d298:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d29a:	4b0c      	ldr	r3, [pc, #48]	; (800d2cc <USBH_LL_Init+0x74>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d2a0:	480a      	ldr	r0, [pc, #40]	; (800d2cc <USBH_LL_Init+0x74>)
 800d2a2:	f7f5 f918 	bl	80024d6 <HAL_HCD_Init>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d2ac:	f7f3 ffee 	bl	800128c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d2b0:	4806      	ldr	r0, [pc, #24]	; (800d2cc <USBH_LL_Init+0x74>)
 800d2b2:	f7f5 fd1b 	bl	8002cec <HAL_HCD_GetCurrentFrame>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7fc fcc6 	bl	8009c4c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3708      	adds	r7, #8
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20001cd0 	.word	0x20001cd0

0800d2d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7f5 fc88 	bl	8002bfc <HAL_HCD_Start>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 f986 	bl	800d604 <USBH_Get_USB_Status>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b084      	sub	sp, #16
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7f5 fc90 	bl	8002c42 <HAL_HCD_Stop>
 800d322:	4603      	mov	r3, r0
 800d324:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d326:	7bfb      	ldrb	r3, [r7, #15]
 800d328:	4618      	mov	r0, r3
 800d32a:	f000 f96b 	bl	800d604 <USBH_Get_USB_Status>
 800d32e:	4603      	mov	r3, r0
 800d330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d332:	7bbb      	ldrb	r3, [r7, #14]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d344:	2301      	movs	r3, #1
 800d346:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d34e:	4618      	mov	r0, r3
 800d350:	f7f5 fcda 	bl	8002d08 <HAL_HCD_GetCurrentSpeed>
 800d354:	4603      	mov	r3, r0
 800d356:	2b01      	cmp	r3, #1
 800d358:	d007      	beq.n	800d36a <USBH_LL_GetSpeed+0x2e>
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d302      	bcc.n	800d364 <USBH_LL_GetSpeed+0x28>
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d006      	beq.n	800d370 <USBH_LL_GetSpeed+0x34>
 800d362:	e008      	b.n	800d376 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d364:	2300      	movs	r3, #0
 800d366:	73fb      	strb	r3, [r7, #15]
    break;
 800d368:	e008      	b.n	800d37c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d36a:	2301      	movs	r3, #1
 800d36c:	73fb      	strb	r3, [r7, #15]
    break;
 800d36e:	e005      	b.n	800d37c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d370:	2302      	movs	r3, #2
 800d372:	73fb      	strb	r3, [r7, #15]
    break;
 800d374:	e002      	b.n	800d37c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d376:	2301      	movs	r3, #1
 800d378:	73fb      	strb	r3, [r7, #15]
    break;
 800d37a:	bf00      	nop
  }
  return  speed;
 800d37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b084      	sub	sp, #16
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7f5 fc6d 	bl	8002c7c <HAL_HCD_ResetPort>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 f92b 	bl	800d604 <USBH_Get_USB_Status>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d3ce:	78fa      	ldrb	r2, [r7, #3]
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7f5 fc75 	bl	8002cc2 <HAL_HCD_HC_GetXferCount>
 800d3d8:	4603      	mov	r3, r0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d3e2:	b590      	push	{r4, r7, lr}
 800d3e4:	b089      	sub	sp, #36	; 0x24
 800d3e6:	af04      	add	r7, sp, #16
 800d3e8:	6078      	str	r0, [r7, #4]
 800d3ea:	4608      	mov	r0, r1
 800d3ec:	4611      	mov	r1, r2
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	70fb      	strb	r3, [r7, #3]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	70bb      	strb	r3, [r7, #2]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d400:	2300      	movs	r3, #0
 800d402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d40a:	787c      	ldrb	r4, [r7, #1]
 800d40c:	78ba      	ldrb	r2, [r7, #2]
 800d40e:	78f9      	ldrb	r1, [r7, #3]
 800d410:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d412:	9302      	str	r3, [sp, #8]
 800d414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d418:	9301      	str	r3, [sp, #4]
 800d41a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	4623      	mov	r3, r4
 800d422:	f7f5 f8ba 	bl	800259a <HAL_HCD_HC_Init>
 800d426:	4603      	mov	r3, r0
 800d428:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 f8e9 	bl	800d604 <USBH_Get_USB_Status>
 800d432:	4603      	mov	r3, r0
 800d434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d436:	7bbb      	ldrb	r3, [r7, #14]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd90      	pop	{r4, r7, pc}

0800d440 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	460b      	mov	r3, r1
 800d44a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d45a:	78fa      	ldrb	r2, [r7, #3]
 800d45c:	4611      	mov	r1, r2
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f5 f933 	bl	80026ca <HAL_HCD_HC_Halt>
 800d464:	4603      	mov	r3, r0
 800d466:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d468:	7bfb      	ldrb	r3, [r7, #15]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f000 f8ca 	bl	800d604 <USBH_Get_USB_Status>
 800d470:	4603      	mov	r3, r0
 800d472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d474:	7bbb      	ldrb	r3, [r7, #14]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d47e:	b590      	push	{r4, r7, lr}
 800d480:	b089      	sub	sp, #36	; 0x24
 800d482:	af04      	add	r7, sp, #16
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	4608      	mov	r0, r1
 800d488:	4611      	mov	r1, r2
 800d48a:	461a      	mov	r2, r3
 800d48c:	4603      	mov	r3, r0
 800d48e:	70fb      	strb	r3, [r7, #3]
 800d490:	460b      	mov	r3, r1
 800d492:	70bb      	strb	r3, [r7, #2]
 800d494:	4613      	mov	r3, r2
 800d496:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d498:	2300      	movs	r3, #0
 800d49a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d49c:	2300      	movs	r3, #0
 800d49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d4a6:	787c      	ldrb	r4, [r7, #1]
 800d4a8:	78ba      	ldrb	r2, [r7, #2]
 800d4aa:	78f9      	ldrb	r1, [r7, #3]
 800d4ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d4b0:	9303      	str	r3, [sp, #12]
 800d4b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d4b4:	9302      	str	r3, [sp, #8]
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	4623      	mov	r3, r4
 800d4c2:	f7f5 f925 	bl	8002710 <HAL_HCD_HC_SubmitRequest>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d4ca:	7bfb      	ldrb	r3, [r7, #15]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f000 f899 	bl	800d604 <USBH_Get_USB_Status>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3714      	adds	r7, #20
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd90      	pop	{r4, r7, pc}

0800d4e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d4f2:	78fa      	ldrb	r2, [r7, #3]
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7f5 fbce 	bl	8002c98 <HAL_HCD_HC_GetURBState>
 800d4fc:	4603      	mov	r3, r0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b082      	sub	sp, #8
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
 800d50e:	460b      	mov	r3, r1
 800d510:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800d512:	20c8      	movs	r0, #200	; 0xc8
 800d514:	f7f4 f902 	bl	800171c <HAL_Delay>
  return USBH_OK;
 800d518:	2300      	movs	r3, #0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3708      	adds	r7, #8
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d522:	b480      	push	{r7}
 800d524:	b085      	sub	sp, #20
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	460b      	mov	r3, r1
 800d52c:	70fb      	strb	r3, [r7, #3]
 800d52e:	4613      	mov	r3, r2
 800d530:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d538:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d53a:	78fa      	ldrb	r2, [r7, #3]
 800d53c:	68f9      	ldr	r1, [r7, #12]
 800d53e:	4613      	mov	r3, r2
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	4413      	add	r3, r2
 800d544:	00db      	lsls	r3, r3, #3
 800d546:	440b      	add	r3, r1
 800d548:	333b      	adds	r3, #59	; 0x3b
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00a      	beq.n	800d566 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d550:	78fa      	ldrb	r2, [r7, #3]
 800d552:	68f9      	ldr	r1, [r7, #12]
 800d554:	4613      	mov	r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	00db      	lsls	r3, r3, #3
 800d55c:	440b      	add	r3, r1
 800d55e:	3350      	adds	r3, #80	; 0x50
 800d560:	78ba      	ldrb	r2, [r7, #2]
 800d562:	701a      	strb	r2, [r3, #0]
 800d564:	e009      	b.n	800d57a <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d566:	78fa      	ldrb	r2, [r7, #3]
 800d568:	68f9      	ldr	r1, [r7, #12]
 800d56a:	4613      	mov	r3, r2
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	4413      	add	r3, r2
 800d570:	00db      	lsls	r3, r3, #3
 800d572:	440b      	add	r3, r1
 800d574:	3351      	adds	r3, #81	; 0x51
 800d576:	78ba      	ldrb	r2, [r7, #2]
 800d578:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d57a:	2300      	movs	r3, #0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3714      	adds	r7, #20
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d59e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d5a0:	78fa      	ldrb	r2, [r7, #3]
 800d5a2:	68b9      	ldr	r1, [r7, #8]
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	440b      	add	r3, r1
 800d5ae:	333b      	adds	r3, #59	; 0x3b
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00a      	beq.n	800d5cc <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d5b6:	78fa      	ldrb	r2, [r7, #3]
 800d5b8:	68b9      	ldr	r1, [r7, #8]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	4413      	add	r3, r2
 800d5c0:	00db      	lsls	r3, r3, #3
 800d5c2:	440b      	add	r3, r1
 800d5c4:	3350      	adds	r3, #80	; 0x50
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	73fb      	strb	r3, [r7, #15]
 800d5ca:	e009      	b.n	800d5e0 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d5cc:	78fa      	ldrb	r2, [r7, #3]
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	4413      	add	r3, r2
 800d5d6:	00db      	lsls	r3, r3, #3
 800d5d8:	440b      	add	r3, r1
 800d5da:	3351      	adds	r3, #81	; 0x51
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3714      	adds	r7, #20
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b082      	sub	sp, #8
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7f4 f890 	bl	800171c <HAL_Delay>
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	4603      	mov	r3, r0
 800d60c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d60e:	2300      	movs	r3, #0
 800d610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d612:	79fb      	ldrb	r3, [r7, #7]
 800d614:	2b03      	cmp	r3, #3
 800d616:	d817      	bhi.n	800d648 <USBH_Get_USB_Status+0x44>
 800d618:	a201      	add	r2, pc, #4	; (adr r2, 800d620 <USBH_Get_USB_Status+0x1c>)
 800d61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d61e:	bf00      	nop
 800d620:	0800d631 	.word	0x0800d631
 800d624:	0800d637 	.word	0x0800d637
 800d628:	0800d63d 	.word	0x0800d63d
 800d62c:	0800d643 	.word	0x0800d643
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	73fb      	strb	r3, [r7, #15]
    break;
 800d634:	e00b      	b.n	800d64e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d636:	2302      	movs	r3, #2
 800d638:	73fb      	strb	r3, [r7, #15]
    break;
 800d63a:	e008      	b.n	800d64e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d63c:	2301      	movs	r3, #1
 800d63e:	73fb      	strb	r3, [r7, #15]
    break;
 800d640:	e005      	b.n	800d64e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d642:	2302      	movs	r3, #2
 800d644:	73fb      	strb	r3, [r7, #15]
    break;
 800d646:	e002      	b.n	800d64e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d648:	2302      	movs	r3, #2
 800d64a:	73fb      	strb	r3, [r7, #15]
    break;
 800d64c:	bf00      	nop
  }
  return usb_status;
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3714      	adds	r7, #20
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <__errno>:
 800d65c:	4b01      	ldr	r3, [pc, #4]	; (800d664 <__errno+0x8>)
 800d65e:	6818      	ldr	r0, [r3, #0]
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	2000002c 	.word	0x2000002c

0800d668 <__libc_init_array>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	4e0d      	ldr	r6, [pc, #52]	; (800d6a0 <__libc_init_array+0x38>)
 800d66c:	4c0d      	ldr	r4, [pc, #52]	; (800d6a4 <__libc_init_array+0x3c>)
 800d66e:	1ba4      	subs	r4, r4, r6
 800d670:	10a4      	asrs	r4, r4, #2
 800d672:	2500      	movs	r5, #0
 800d674:	42a5      	cmp	r5, r4
 800d676:	d109      	bne.n	800d68c <__libc_init_array+0x24>
 800d678:	4e0b      	ldr	r6, [pc, #44]	; (800d6a8 <__libc_init_array+0x40>)
 800d67a:	4c0c      	ldr	r4, [pc, #48]	; (800d6ac <__libc_init_array+0x44>)
 800d67c:	f000 f8f6 	bl	800d86c <_init>
 800d680:	1ba4      	subs	r4, r4, r6
 800d682:	10a4      	asrs	r4, r4, #2
 800d684:	2500      	movs	r5, #0
 800d686:	42a5      	cmp	r5, r4
 800d688:	d105      	bne.n	800d696 <__libc_init_array+0x2e>
 800d68a:	bd70      	pop	{r4, r5, r6, pc}
 800d68c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d690:	4798      	blx	r3
 800d692:	3501      	adds	r5, #1
 800d694:	e7ee      	b.n	800d674 <__libc_init_array+0xc>
 800d696:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d69a:	4798      	blx	r3
 800d69c:	3501      	adds	r5, #1
 800d69e:	e7f2      	b.n	800d686 <__libc_init_array+0x1e>
 800d6a0:	0800d9fc 	.word	0x0800d9fc
 800d6a4:	0800d9fc 	.word	0x0800d9fc
 800d6a8:	0800d9fc 	.word	0x0800d9fc
 800d6ac:	0800da00 	.word	0x0800da00

0800d6b0 <malloc>:
 800d6b0:	4b02      	ldr	r3, [pc, #8]	; (800d6bc <malloc+0xc>)
 800d6b2:	4601      	mov	r1, r0
 800d6b4:	6818      	ldr	r0, [r3, #0]
 800d6b6:	f000 b86d 	b.w	800d794 <_malloc_r>
 800d6ba:	bf00      	nop
 800d6bc:	2000002c 	.word	0x2000002c

0800d6c0 <free>:
 800d6c0:	4b02      	ldr	r3, [pc, #8]	; (800d6cc <free+0xc>)
 800d6c2:	4601      	mov	r1, r0
 800d6c4:	6818      	ldr	r0, [r3, #0]
 800d6c6:	f000 b817 	b.w	800d6f8 <_free_r>
 800d6ca:	bf00      	nop
 800d6cc:	2000002c 	.word	0x2000002c

0800d6d0 <memcpy>:
 800d6d0:	b510      	push	{r4, lr}
 800d6d2:	1e43      	subs	r3, r0, #1
 800d6d4:	440a      	add	r2, r1
 800d6d6:	4291      	cmp	r1, r2
 800d6d8:	d100      	bne.n	800d6dc <memcpy+0xc>
 800d6da:	bd10      	pop	{r4, pc}
 800d6dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6e4:	e7f7      	b.n	800d6d6 <memcpy+0x6>

0800d6e6 <memset>:
 800d6e6:	4402      	add	r2, r0
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d100      	bne.n	800d6f0 <memset+0xa>
 800d6ee:	4770      	bx	lr
 800d6f0:	f803 1b01 	strb.w	r1, [r3], #1
 800d6f4:	e7f9      	b.n	800d6ea <memset+0x4>
	...

0800d6f8 <_free_r>:
 800d6f8:	b538      	push	{r3, r4, r5, lr}
 800d6fa:	4605      	mov	r5, r0
 800d6fc:	2900      	cmp	r1, #0
 800d6fe:	d045      	beq.n	800d78c <_free_r+0x94>
 800d700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d704:	1f0c      	subs	r4, r1, #4
 800d706:	2b00      	cmp	r3, #0
 800d708:	bfb8      	it	lt
 800d70a:	18e4      	addlt	r4, r4, r3
 800d70c:	f000 f8ac 	bl	800d868 <__malloc_lock>
 800d710:	4a1f      	ldr	r2, [pc, #124]	; (800d790 <_free_r+0x98>)
 800d712:	6813      	ldr	r3, [r2, #0]
 800d714:	4610      	mov	r0, r2
 800d716:	b933      	cbnz	r3, 800d726 <_free_r+0x2e>
 800d718:	6063      	str	r3, [r4, #4]
 800d71a:	6014      	str	r4, [r2, #0]
 800d71c:	4628      	mov	r0, r5
 800d71e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d722:	f000 b8a2 	b.w	800d86a <__malloc_unlock>
 800d726:	42a3      	cmp	r3, r4
 800d728:	d90c      	bls.n	800d744 <_free_r+0x4c>
 800d72a:	6821      	ldr	r1, [r4, #0]
 800d72c:	1862      	adds	r2, r4, r1
 800d72e:	4293      	cmp	r3, r2
 800d730:	bf04      	itt	eq
 800d732:	681a      	ldreq	r2, [r3, #0]
 800d734:	685b      	ldreq	r3, [r3, #4]
 800d736:	6063      	str	r3, [r4, #4]
 800d738:	bf04      	itt	eq
 800d73a:	1852      	addeq	r2, r2, r1
 800d73c:	6022      	streq	r2, [r4, #0]
 800d73e:	6004      	str	r4, [r0, #0]
 800d740:	e7ec      	b.n	800d71c <_free_r+0x24>
 800d742:	4613      	mov	r3, r2
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	b10a      	cbz	r2, 800d74c <_free_r+0x54>
 800d748:	42a2      	cmp	r2, r4
 800d74a:	d9fa      	bls.n	800d742 <_free_r+0x4a>
 800d74c:	6819      	ldr	r1, [r3, #0]
 800d74e:	1858      	adds	r0, r3, r1
 800d750:	42a0      	cmp	r0, r4
 800d752:	d10b      	bne.n	800d76c <_free_r+0x74>
 800d754:	6820      	ldr	r0, [r4, #0]
 800d756:	4401      	add	r1, r0
 800d758:	1858      	adds	r0, r3, r1
 800d75a:	4282      	cmp	r2, r0
 800d75c:	6019      	str	r1, [r3, #0]
 800d75e:	d1dd      	bne.n	800d71c <_free_r+0x24>
 800d760:	6810      	ldr	r0, [r2, #0]
 800d762:	6852      	ldr	r2, [r2, #4]
 800d764:	605a      	str	r2, [r3, #4]
 800d766:	4401      	add	r1, r0
 800d768:	6019      	str	r1, [r3, #0]
 800d76a:	e7d7      	b.n	800d71c <_free_r+0x24>
 800d76c:	d902      	bls.n	800d774 <_free_r+0x7c>
 800d76e:	230c      	movs	r3, #12
 800d770:	602b      	str	r3, [r5, #0]
 800d772:	e7d3      	b.n	800d71c <_free_r+0x24>
 800d774:	6820      	ldr	r0, [r4, #0]
 800d776:	1821      	adds	r1, r4, r0
 800d778:	428a      	cmp	r2, r1
 800d77a:	bf04      	itt	eq
 800d77c:	6811      	ldreq	r1, [r2, #0]
 800d77e:	6852      	ldreq	r2, [r2, #4]
 800d780:	6062      	str	r2, [r4, #4]
 800d782:	bf04      	itt	eq
 800d784:	1809      	addeq	r1, r1, r0
 800d786:	6021      	streq	r1, [r4, #0]
 800d788:	605c      	str	r4, [r3, #4]
 800d78a:	e7c7      	b.n	800d71c <_free_r+0x24>
 800d78c:	bd38      	pop	{r3, r4, r5, pc}
 800d78e:	bf00      	nop
 800d790:	20001388 	.word	0x20001388

0800d794 <_malloc_r>:
 800d794:	b570      	push	{r4, r5, r6, lr}
 800d796:	1ccd      	adds	r5, r1, #3
 800d798:	f025 0503 	bic.w	r5, r5, #3
 800d79c:	3508      	adds	r5, #8
 800d79e:	2d0c      	cmp	r5, #12
 800d7a0:	bf38      	it	cc
 800d7a2:	250c      	movcc	r5, #12
 800d7a4:	2d00      	cmp	r5, #0
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	db01      	blt.n	800d7ae <_malloc_r+0x1a>
 800d7aa:	42a9      	cmp	r1, r5
 800d7ac:	d903      	bls.n	800d7b6 <_malloc_r+0x22>
 800d7ae:	230c      	movs	r3, #12
 800d7b0:	6033      	str	r3, [r6, #0]
 800d7b2:	2000      	movs	r0, #0
 800d7b4:	bd70      	pop	{r4, r5, r6, pc}
 800d7b6:	f000 f857 	bl	800d868 <__malloc_lock>
 800d7ba:	4a21      	ldr	r2, [pc, #132]	; (800d840 <_malloc_r+0xac>)
 800d7bc:	6814      	ldr	r4, [r2, #0]
 800d7be:	4621      	mov	r1, r4
 800d7c0:	b991      	cbnz	r1, 800d7e8 <_malloc_r+0x54>
 800d7c2:	4c20      	ldr	r4, [pc, #128]	; (800d844 <_malloc_r+0xb0>)
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	b91b      	cbnz	r3, 800d7d0 <_malloc_r+0x3c>
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f000 f83d 	bl	800d848 <_sbrk_r>
 800d7ce:	6020      	str	r0, [r4, #0]
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	f000 f838 	bl	800d848 <_sbrk_r>
 800d7d8:	1c43      	adds	r3, r0, #1
 800d7da:	d124      	bne.n	800d826 <_malloc_r+0x92>
 800d7dc:	230c      	movs	r3, #12
 800d7de:	6033      	str	r3, [r6, #0]
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f000 f842 	bl	800d86a <__malloc_unlock>
 800d7e6:	e7e4      	b.n	800d7b2 <_malloc_r+0x1e>
 800d7e8:	680b      	ldr	r3, [r1, #0]
 800d7ea:	1b5b      	subs	r3, r3, r5
 800d7ec:	d418      	bmi.n	800d820 <_malloc_r+0x8c>
 800d7ee:	2b0b      	cmp	r3, #11
 800d7f0:	d90f      	bls.n	800d812 <_malloc_r+0x7e>
 800d7f2:	600b      	str	r3, [r1, #0]
 800d7f4:	50cd      	str	r5, [r1, r3]
 800d7f6:	18cc      	adds	r4, r1, r3
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	f000 f836 	bl	800d86a <__malloc_unlock>
 800d7fe:	f104 000b 	add.w	r0, r4, #11
 800d802:	1d23      	adds	r3, r4, #4
 800d804:	f020 0007 	bic.w	r0, r0, #7
 800d808:	1ac3      	subs	r3, r0, r3
 800d80a:	d0d3      	beq.n	800d7b4 <_malloc_r+0x20>
 800d80c:	425a      	negs	r2, r3
 800d80e:	50e2      	str	r2, [r4, r3]
 800d810:	e7d0      	b.n	800d7b4 <_malloc_r+0x20>
 800d812:	428c      	cmp	r4, r1
 800d814:	684b      	ldr	r3, [r1, #4]
 800d816:	bf16      	itet	ne
 800d818:	6063      	strne	r3, [r4, #4]
 800d81a:	6013      	streq	r3, [r2, #0]
 800d81c:	460c      	movne	r4, r1
 800d81e:	e7eb      	b.n	800d7f8 <_malloc_r+0x64>
 800d820:	460c      	mov	r4, r1
 800d822:	6849      	ldr	r1, [r1, #4]
 800d824:	e7cc      	b.n	800d7c0 <_malloc_r+0x2c>
 800d826:	1cc4      	adds	r4, r0, #3
 800d828:	f024 0403 	bic.w	r4, r4, #3
 800d82c:	42a0      	cmp	r0, r4
 800d82e:	d005      	beq.n	800d83c <_malloc_r+0xa8>
 800d830:	1a21      	subs	r1, r4, r0
 800d832:	4630      	mov	r0, r6
 800d834:	f000 f808 	bl	800d848 <_sbrk_r>
 800d838:	3001      	adds	r0, #1
 800d83a:	d0cf      	beq.n	800d7dc <_malloc_r+0x48>
 800d83c:	6025      	str	r5, [r4, #0]
 800d83e:	e7db      	b.n	800d7f8 <_malloc_r+0x64>
 800d840:	20001388 	.word	0x20001388
 800d844:	2000138c 	.word	0x2000138c

0800d848 <_sbrk_r>:
 800d848:	b538      	push	{r3, r4, r5, lr}
 800d84a:	4c06      	ldr	r4, [pc, #24]	; (800d864 <_sbrk_r+0x1c>)
 800d84c:	2300      	movs	r3, #0
 800d84e:	4605      	mov	r5, r0
 800d850:	4608      	mov	r0, r1
 800d852:	6023      	str	r3, [r4, #0]
 800d854:	f7f3 fe7a 	bl	800154c <_sbrk>
 800d858:	1c43      	adds	r3, r0, #1
 800d85a:	d102      	bne.n	800d862 <_sbrk_r+0x1a>
 800d85c:	6823      	ldr	r3, [r4, #0]
 800d85e:	b103      	cbz	r3, 800d862 <_sbrk_r+0x1a>
 800d860:	602b      	str	r3, [r5, #0]
 800d862:	bd38      	pop	{r3, r4, r5, pc}
 800d864:	20001f94 	.word	0x20001f94

0800d868 <__malloc_lock>:
 800d868:	4770      	bx	lr

0800d86a <__malloc_unlock>:
 800d86a:	4770      	bx	lr

0800d86c <_init>:
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	bf00      	nop
 800d870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d872:	bc08      	pop	{r3}
 800d874:	469e      	mov	lr, r3
 800d876:	4770      	bx	lr

0800d878 <_fini>:
 800d878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87a:	bf00      	nop
 800d87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d87e:	bc08      	pop	{r3}
 800d880:	469e      	mov	lr, r3
 800d882:	4770      	bx	lr
