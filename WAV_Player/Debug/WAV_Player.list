
WAV_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d938  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800dac0  0800dac0  0001dac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddc4  0800ddc4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddc4  0800ddc4  0001ddc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddcc  0800ddcc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddcc  0800ddcc  0001ddcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddd0  0800ddd0  0001ddd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ddd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009f30  20000090  0800de64  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20009fc0  0800de64  00029fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000289d6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000525a  00000000  00000000  00048a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001488  00000000  00000000  0004dcf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001278  00000000  00000000  0004f178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000270ef  00000000  00000000  000503f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018c8d  00000000  00000000  000774df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc701  00000000  00000000  0009016c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c86d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e4  00000000  00000000  0015c8e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800daa8 	.word	0x0800daa8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800daa8 	.word	0x0800daa8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004de:	f107 020c 	add.w	r2, r7, #12
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2302      	movs	r3, #2
 80004e8:	2194      	movs	r1, #148	; 0x94
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <write_register+0x30>)
 80004ec:	f003 fe96 	bl	800421c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000ac 	.word	0x200000ac

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050c:	f107 020c 	add.w	r2, r7, #12
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <read_register+0x3c>)
 800051a:	f003 fe7f 	bl	800421c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <read_register+0x3c>)
 800052a:	f003 ff75 	bl	8004418 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac

0800053c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 800053c:	b084      	sub	sp, #16
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	f107 0c10 	add.w	ip, r7, #16
 8000548:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054c:	4b7b      	ldr	r3, [pc, #492]	; (800073c <CS43_Init+0x200>)
 800054e:	2200      	movs	r2, #0
 8000550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000554:	4b79      	ldr	r3, [pc, #484]	; (800073c <CS43_Init+0x200>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	69da      	ldr	r2, [r3, #28]
 800055a:	4b78      	ldr	r3, [pc, #480]	; (800073c <CS43_Init+0x200>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000562:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2110      	movs	r1, #16
 8000568:	4875      	ldr	r0, [pc, #468]	; (8000740 <CS43_Init+0x204>)
 800056a:	f002 f815 	bl	8002598 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800056e:	4b75      	ldr	r3, [pc, #468]	; (8000744 <CS43_Init+0x208>)
 8000570:	4618      	mov	r0, r3
 8000572:	f107 0110 	add.w	r1, r7, #16
 8000576:	2354      	movs	r3, #84	; 0x54
 8000578:	461a      	mov	r2, r3
 800057a:	f00d f9c7 	bl	800d90c <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800057e:	2301      	movs	r3, #1
 8000580:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	2002      	movs	r0, #2
 8000588:	f7ff ff9e 	bl	80004c8 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	b2db      	uxtb	r3, r3
 8000598:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800059a:	797b      	ldrb	r3, [r7, #5]
 800059c:	f043 030c 	orr.w	r3, r3, #12
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	f043 0303 	orr.w	r3, r3, #3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	3301      	adds	r3, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	2004      	movs	r0, #4
 80005b6:	f7ff ff87 	bl	80004c8 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	3301      	adds	r3, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	2005      	movs	r0, #5
 80005c6:	f7ff ff7f 	bl	80004c8 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	2006      	movs	r0, #6
 80005d0:	f7ff ff94 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d4:	797b      	ldrb	r3, [r7, #5]
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005f2:	797b      	ldrb	r3, [r7, #5]
 80005f4:	f023 0310 	bic.w	r3, r3, #16
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	f023 0304 	bic.w	r3, r3, #4
 8000602:	b2db      	uxtb	r3, r3
 8000604:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	f043 0303 	orr.w	r3, r3, #3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	3301      	adds	r3, #1
 800061e:	4619      	mov	r1, r3
 8000620:	2006      	movs	r0, #6
 8000622:	f7ff ff51 	bl	80004c8 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	3301      	adds	r3, #1
 800062a:	4619      	mov	r1, r3
 800062c:	2008      	movs	r0, #8
 800062e:	f7ff ff65 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	b2db      	uxtb	r3, r3
 800063a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	3301      	adds	r3, #1
 800064a:	4619      	mov	r1, r3
 800064c:	2008      	movs	r0, #8
 800064e:	f7ff ff3b 	bl	80004c8 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	3301      	adds	r3, #1
 8000656:	4619      	mov	r1, r3
 8000658:	2009      	movs	r0, #9
 800065a:	f7ff ff4f 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800065e:	797b      	ldrb	r3, [r7, #5]
 8000660:	f023 030f 	bic.w	r3, r3, #15
 8000664:	b2db      	uxtb	r3, r3
 8000666:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	3301      	adds	r3, #1
 8000676:	4619      	mov	r1, r3
 8000678:	2009      	movs	r0, #9
 800067a:	f7ff ff25 	bl	80004c8 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	3301      	adds	r3, #1
 8000682:	4619      	mov	r1, r3
 8000684:	200e      	movs	r0, #14
 8000686:	f7ff ff39 	bl	80004fc <read_register>
	if(outputMode == MODE_ANALOG)
 800068a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800068e:	2b01      	cmp	r3, #1
 8000690:	d119      	bne.n	80006c6 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000692:	797b      	ldrb	r3, [r7, #5]
 8000694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000698:	b2db      	uxtb	r3, r3
 800069a:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f023 0320 	bic.w	r3, r3, #32
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f023 0310 	bic.w	r3, r3, #16
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0308 	bic.w	r3, r3, #8
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
 80006c4:	e005      	b.n	80006d2 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006c6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006ce:	2302      	movs	r3, #2
 80006d0:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	3301      	adds	r3, #1
 80006d6:	4619      	mov	r1, r3
 80006d8:	200e      	movs	r0, #14
 80006da:	f7ff fef5 	bl	80004c8 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	3301      	adds	r3, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	200f      	movs	r0, #15
 80006e6:	f7ff ff09 	bl	80004fc <read_register>
	iData[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	200f      	movs	r0, #15
 80006f6:	f7ff fee7 	bl	80004c8 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	3301      	adds	r3, #1
 8000702:	4619      	mov	r1, r3
 8000704:	2014      	movs	r0, #20
 8000706:	f7ff fedf 	bl	80004c8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	3301      	adds	r3, #1
 800070e:	4619      	mov	r1, r3
 8000710:	2015      	movs	r0, #21
 8000712:	f7ff fed9 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	3301      	adds	r3, #1
 800071a:	4619      	mov	r1, r3
 800071c:	201a      	movs	r0, #26
 800071e:	f7ff fed3 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	3301      	adds	r3, #1
 8000726:	4619      	mov	r1, r3
 8000728:	201b      	movs	r0, #27
 800072a:	f7ff fecd 	bl	80004c8 <write_register>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000738:	b004      	add	sp, #16
 800073a:	4770      	bx	lr
 800073c:	2000946c 	.word	0x2000946c
 8000740:	40020c00 	.word	0x40020c00
 8000744:	200000ac 	.word	0x200000ac

08000748 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d82b      	bhi.n	80007b0 <CS43_Enable_RightLeft+0x68>
 8000758:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <CS43_Enable_RightLeft+0x18>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000771 	.word	0x08000771
 8000764:	08000781 	.word	0x08000781
 8000768:	08000791 	.word	0x08000791
 800076c:	080007a1 	.word	0x080007a1
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000770:	23c0      	movs	r3, #192	; 0xc0
 8000772:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000774:	7b7b      	ldrb	r3, [r7, #13]
 8000776:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800077a:	b2db      	uxtb	r3, r3
 800077c:	737b      	strb	r3, [r7, #13]
			break;
 800077e:	e018      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078a:	b2db      	uxtb	r3, r3
 800078c:	737b      	strb	r3, [r7, #13]
			break;
 800078e:	e010      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	23c0      	movs	r3, #192	; 0xc0
 8000792:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	b2db      	uxtb	r3, r3
 800079c:	737b      	strb	r3, [r7, #13]
			break;
 800079e:	e008      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	737b      	strb	r3, [r7, #13]
			break;
 80007ae:	e000      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007b0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	f043 030c 	orr.w	r3, r3, #12
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007bc:	7b7b      	ldrb	r3, [r7, #13]
 80007be:	f043 0303 	orr.w	r3, r3, #3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	3301      	adds	r3, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	2004      	movs	r0, #4
 80007d0:	f7ff fe7a 	bl	80004c8 <write_register>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3319      	adds	r3, #25
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	3301      	adds	r3, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	2020      	movs	r0, #32
 80007f8:	f7ff fe66 	bl	80004c8 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	3301      	adds	r3, #1
 8000802:	4619      	mov	r1, r3
 8000804:	2021      	movs	r0, #33	; 0x21
 8000806:	f7ff fe5f 	bl	80004c8 <write_register>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d019      	beq.n	8000856 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8000822:	23ff      	movs	r3, #255	; 0xff
 8000824:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	3301      	adds	r3, #1
 800082c:	4619      	mov	r1, r3
 800082e:	2004      	movs	r0, #4
 8000830:	f7ff fe4a 	bl	80004c8 <write_register>
    iData[1] = 0x01;
 8000834:	2301      	movs	r3, #1
 8000836:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	3301      	adds	r3, #1
 800083e:	4619      	mov	r1, r3
 8000840:	2022      	movs	r0, #34	; 0x22
 8000842:	f7ff fe41 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	3301      	adds	r3, #1
 800084c:	4619      	mov	r1, r3
 800084e:	2023      	movs	r0, #35	; 0x23
 8000850:	f7ff fe3a 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000854:	e018      	b.n	8000888 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	3301      	adds	r3, #1
 8000860:	4619      	mov	r1, r3
 8000862:	2022      	movs	r0, #34	; 0x22
 8000864:	f7ff fe30 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	3301      	adds	r3, #1
 800086e:	4619      	mov	r1, r3
 8000870:	2023      	movs	r0, #35	; 0x23
 8000872:	f7ff fe29 	bl	80004c8 <write_register>
    iData[1] = 0xAF;
 8000876:	23af      	movs	r3, #175	; 0xaf
 8000878:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	3301      	adds	r3, #1
 8000880:	4619      	mov	r1, r3
 8000882:	2004      	movs	r0, #4
 8000884:	f7ff fe20 	bl	80004c8 <write_register>
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff ffbb 	bl	8000812 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800089c:	2399      	movs	r3, #153	; 0x99
 800089e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	3301      	adds	r3, #1
 80008a4:	4619      	mov	r1, r3
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe0e 	bl	80004c8 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	3301      	adds	r3, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	2047      	movs	r0, #71	; 0x47
 80008b8:	f7ff fe06 	bl	80004c8 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	3301      	adds	r3, #1
 80008c0:	4619      	mov	r1, r3
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f7ff fe1a 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	3301      	adds	r3, #1
 80008d6:	4619      	mov	r1, r3
 80008d8:	2032      	movs	r0, #50	; 0x32
 80008da:	f7ff fdf5 	bl	80004c8 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	3301      	adds	r3, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	797b      	ldrb	r3, [r7, #5]
 80008ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	3301      	adds	r3, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde4 	bl	80004c8 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	2300      	movs	r3, #0
 8000902:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	3301      	adds	r3, #1
 8000908:	4619      	mov	r1, r3
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fddc 	bl	80004c8 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000910:	239e      	movs	r3, #158	; 0x9e
 8000912:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	3301      	adds	r3, #1
 8000918:	4619      	mov	r1, r3
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fdd4 	bl	80004c8 <write_register>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <CS43_Stop>:

void CS43_Stop(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff ff6f 	bl	8000812 <CS43_SetMute>
  iData[1] = 0x04;
 8000934:	2304      	movs	r3, #4
 8000936:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	3301      	adds	r3, #1
 800093c:	4619      	mov	r1, r3
 800093e:	200e      	movs	r0, #14
 8000940:	f7ff fdc2 	bl	80004c8 <write_register>
	iData[1] = 0x9F;
 8000944:	239f      	movs	r3, #159	; 0x9f
 8000946:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	3301      	adds	r3, #1
 800094c:	4619      	mov	r1, r3
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff fdba 	bl	80004c8 <write_register>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
 8000968:	23ff      	movs	r3, #255	; 0xff
 800096a:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 800096c:	2300      	movs	r3, #0
 800096e:	77fb      	strb	r3, [r7, #31]
 8000970:	e00b      	b.n	800098a <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000972:	7ffb      	ldrb	r3, [r7, #31]
 8000974:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <audioI2S_pllClockConfig+0x8c>)
 8000976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d101      	bne.n	8000984 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	3301      	adds	r3, #1
 8000988:	77fb      	strb	r3, [r7, #31]
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d9f0      	bls.n	8000972 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4618      	mov	r0, r3
 8000996:	f006 f85f 	bl	8006a58 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800099a:	7fbb      	ldrb	r3, [r7, #30]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d111      	bne.n	80009c8 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009a8:	7fbb      	ldrb	r3, [r7, #30]
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <audioI2S_pllClockConfig+0x90>)
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009b2:	7fbb      	ldrb	r3, [r7, #30]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <audioI2S_pllClockConfig+0x94>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f005 ff67 	bl	8006894 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009c6:	e00b      	b.n	80009e0 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009cc:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009d0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009d2:	2303      	movs	r3, #3
 80009d4:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 ff5a 	bl	8006894 <HAL_RCCEx_PeriphCLKConfig>
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	0800db18 	.word	0x0800db18
 80009ec:	0800db38 	.word	0x0800db38
 80009f0:	0800db58 	.word	0x0800db58

080009f4 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <I2S3_freqUpdate+0x80>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <I2S3_freqUpdate+0x84>)
 8000a02:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a16:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fa31 	bl	8004ec0 <HAL_I2S_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e000      	b.n	8000a6a <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a68:	2301      	movs	r3, #1
  }
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000100 	.word	0x20000100
 8000a78:	40003c00 	.word	0x40003c00

08000a7c <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <audioI2S_setHandle+0x1c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000100 	.word	0x20000100

08000a9c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff59 	bl	800095c <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffa2 	bl	80009f4 <I2S3_freqUpdate>
  return true;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000ac6:	f7ff fee3 	bl	8000890 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <audioI2S_play+0x38>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ad4:	d203      	bcs.n	8000ade <audioI2S_play+0x22>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	e001      	b.n	8000ae2 <audioI2S_play+0x26>
 8000ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	f004 fb2b 	bl	8005140 <HAL_I2S_Transmit_DMA>
  return true;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000100 	.word	0x20000100

08000af8 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000afc:	f7ff ff14 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <audioI2S_pause+0x18>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fbc3 	bl	8005290 <HAL_I2S_DMAPause>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000100 	.word	0x20000100

08000b14 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b18:	f7ff feba 	bl	8000890 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <audioI2S_resume+0x18>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 fc17 	bl	8005354 <HAL_I2S_DMAResume>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000100 	.word	0x20000100

08000b30 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b34:	f7ff fef8 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <audioI2S_stop+0x18>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 fc9d 	bl	800547c <HAL_I2S_DMAStop>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000100 	.word	0x20000100

08000b4c <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_I2S_TxCpltCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b5e:	f000 f9a3 	bl	8000ea8 <audioI2S_fullTransfer_Callback>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40003c00 	.word	0x40003c00

08000b70 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b82:	f000 f985 	bl	8000e90 <audioI2S_halfTransfer_Callback>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40003c00 	.word	0x40003c00

08000b94 <util_calculate_filter>:
static signed int firState[NUM_TAPS + BLOCK_SIZE -1];
const double firCoeffs[N+1] = {
		-1.0797e-05,0.0014823,0.0020912,-0.0001732,-0.0034742,-0.0032343,0.00037383,0.0010326,-0.0019219,0.0013617,0.01292,0.014535,-0.0060581,-0.026387,-0.01744,0.0053936,0.0032673,-0.011513,0.016685,0.077586,0.066834,-0.062882,-0.17929,-0.10982,0.10628,0.22634,0.10628,-0.10982,-0.17929,-0.062882,0.066834,0.077586,0.016685,-0.011513,0.0032673,0.0053936,-0.01744,-0.026387,-0.0060581,0.014535,0.01292,0.0013617,-0.0019219,0.0010326,0.00037383,-0.0032343,-0.0034742,-0.0001732,0.0020912,0.0014823,-1.0797e-05
			};
void util_calculate_filter(uint16_t *buffer, uint32_t len)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]

    // Create filter instance
    arm_fir_instance_q31 instance;

    // Ensure that the buffer length isn't longer than the sample size
    if (len > FILTER_SAMPLES)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ba4:	d902      	bls.n	8000bac <util_calculate_filter+0x18>
        len = FILTER_SAMPLES;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	603b      	str	r3, [r7, #0]

   for (i = 0; i < len ; i++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	82fb      	strh	r3, [r7, #22]
 8000bb0:	e00c      	b.n	8000bcc <util_calculate_filter+0x38>
    {
        firInput[i] = (int)buffer[i];
 8000bb2:	8afb      	ldrh	r3, [r7, #22]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	881a      	ldrh	r2, [r3, #0]
 8000bbc:	8afb      	ldrh	r3, [r7, #22]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <util_calculate_filter+0xc8>)
 8000bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for (i = 0; i < len ; i++)
 8000bc6:	8afb      	ldrh	r3, [r7, #22]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	82fb      	strh	r3, [r7, #22]
 8000bcc:	8afb      	ldrh	r3, [r7, #22]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8ee      	bhi.n	8000bb2 <util_calculate_filter+0x1e>
    }

    // Call Initialization function for the filter
    arm_fir_init_q31(&instance, NUM_TAPS, &firCoeffs, &firState, BLOCK_SIZE);
 8000bd4:	f107 0008 	add.w	r0, r7, #8
 8000bd8:	230a      	movs	r3, #10
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <util_calculate_filter+0xcc>)
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <util_calculate_filter+0xd0>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	f007 f837 	bl	8007c54 <arm_fir_init_q31>

    // Call the FIR process function, num of blocks to process = (FILTER_SAMPLES / BLOCK_SIZE)
    for (i = 0; i < (FILTER_SAMPLES / BLOCK_SIZE); i++) //
 8000be6:	2300      	movs	r3, #0
 8000be8:	82fb      	strh	r3, [r7, #22]
 8000bea:	e017      	b.n	8000c1c <util_calculate_filter+0x88>
    {
        // BLOCK_SIZE = samples to process per call
        //arm_fir_q31(&instance, &firInput[i * BLOCK_SIZE], &firOutput[i * BLOCK_SIZE], BLOCK_SIZE);
        arm_fir_q31(&instance, &firInput[i * BLOCK_SIZE], &firOutput[i * BLOCK_SIZE], BLOCK_SIZE);
 8000bec:	8afa      	ldrh	r2, [r7, #22]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <util_calculate_filter+0xc8>)
 8000bfa:	1899      	adds	r1, r3, r2
 8000bfc:	8afa      	ldrh	r2, [r7, #22]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <util_calculate_filter+0xd4>)
 8000c0a:	441a      	add	r2, r3
 8000c0c:	f107 0008 	add.w	r0, r7, #8
 8000c10:	230a      	movs	r3, #10
 8000c12:	f007 f840 	bl	8007c96 <arm_fir_q31>
    for (i = 0; i < (FILTER_SAMPLES / BLOCK_SIZE); i++) //
 8000c16:	8afb      	ldrh	r3, [r7, #22]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	82fb      	strh	r3, [r7, #22]
 8000c1c:	8afb      	ldrh	r3, [r7, #22]
 8000c1e:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 8000c22:	d9e3      	bls.n	8000bec <util_calculate_filter+0x58>
    }


    // Convert output back to uint16 for plotting
    for (i = 0; i < (len); i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	82fb      	strh	r3, [r7, #22]
 8000c28:	e00f      	b.n	8000c4a <util_calculate_filter+0xb6>
    {
       buffer[i] = (uint16_t)(firOutput[i] - 63500);
 8000c2a:	8afb      	ldrh	r3, [r7, #22]
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <util_calculate_filter+0xd4>)
 8000c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	8afb      	ldrh	r3, [r7, #22]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f202 72f4 	addw	r2, r2, #2036	; 0x7f4
 8000c40:	b292      	uxth	r2, r2
 8000c42:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < (len); i++)
 8000c44:	8afb      	ldrh	r3, [r7, #22]
 8000c46:	3301      	adds	r3, #1
 8000c48:	82fb      	strh	r3, [r7, #22]
 8000c4a:	8afb      	ldrh	r3, [r7, #22]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d8eb      	bhi.n	8000c2a <util_calculate_filter+0x96>
    }

}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20001348 	.word	0x20001348
 8000c60:	20009348 	.word	0x20009348
 8000c64:	0800db78 	.word	0x0800db78
 8000c68:	20005348 	.word	0x20005348

08000c6c <wavPlayer_reset>:



static void wavPlayer_reset(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <wavPlayer_reset+0x1c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <wavPlayer_reset+0x20>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20001338 	.word	0x20001338
 8000c8c:	20001340 	.word	0x20001340

08000c90 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <wavPlayer_fileSelect+0x48>)
 8000ca2:	f00b fcd9 	bl	800c658 <f_open>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000cac:	2300      	movs	r3, #0
 8000cae:	e00e      	b.n	8000cce <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	f107 010c 	add.w	r1, r7, #12
 8000cb8:	222c      	movs	r2, #44	; 0x2c
 8000cba:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <wavPlayer_fileSelect+0x48>)
 8000cbc:	f00b fe8a 	bl	800c9d4 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <wavPlayer_fileSelect+0x4c>)
 8000cc4:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <wavPlayer_fileSelect+0x50>)
 8000cca:	6013      	str	r3, [r2, #0]
  return true;
 8000ccc:	2301      	movs	r3, #1
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3738      	adds	r7, #56	; 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000104 	.word	0x20000104
 8000cdc:	20000334 	.word	0x20000334
 8000ce0:	2000133c 	.word	0x2000133c

08000ce4 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  isFinished = false;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <wavPlayer_play+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <wavPlayer_play+0x54>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fed2 	bl	8000a9c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4810      	ldr	r0, [pc, #64]	; (8000d3c <wavPlayer_play+0x58>)
 8000cfc:	f00c f851 	bl	800cda2 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <wavPlayer_play+0x5c>)
 8000d02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d06:	490f      	ldr	r1, [pc, #60]	; (8000d44 <wavPlayer_play+0x60>)
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <wavPlayer_play+0x58>)
 8000d0a:	f00b fe63 	bl	800c9d4 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <wavPlayer_play+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <wavPlayer_play+0x5c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <wavPlayer_play+0x68>)
 8000d1a:	6013      	str	r3, [r2, #0]
  //Start playing the WAV

  util_calculate_filter((uint16_t *)&audioBuffer[0],AUDIO_BUFFER_SIZE);
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <wavPlayer_play+0x60>)
 8000d22:	f7ff ff37 	bl	8000b94 <util_calculate_filter>

  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <wavPlayer_play+0x60>)
 8000d2c:	f7ff fec6 	bl	8000abc <audioI2S_play>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20001344 	.word	0x20001344
 8000d38:	2000133c 	.word	0x2000133c
 8000d3c:	20000104 	.word	0x20000104
 8000d40:	20001340 	.word	0x20001340
 8000d44:	20000338 	.word	0x20000338
 8000d48:	20000334 	.word	0x20000334
 8000d4c:	20001338 	.word	0x20001338

08000d50 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000d54:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <wavPlayer_process+0xdc>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d863      	bhi.n	8000e26 <wavPlayer_process+0xd6>
 8000d5e:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <wavPlayer_process+0x14>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000e25 	.word	0x08000e25
 8000d68:	08000d75 	.word	0x08000d75
 8000d6c:	08000dc1 	.word	0x08000dc1
 8000d70:	08000e0d 	.word	0x08000e0d
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <wavPlayer_process+0xe0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <wavPlayer_process+0xdc>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <wavPlayer_process+0xe0>)
 8000d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d86:	492b      	ldr	r1, [pc, #172]	; (8000e34 <wavPlayer_process+0xe4>)
 8000d88:	482b      	ldr	r0, [pc, #172]	; (8000e38 <wavPlayer_process+0xe8>)
 8000d8a:	f00b fe23 	bl	800c9d4 <f_read>

    util_calculate_filter((uint16_t *)&audioBuffer[0],AUDIO_BUFFER_SIZE);
 8000d8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d92:	4828      	ldr	r0, [pc, #160]	; (8000e34 <wavPlayer_process+0xe4>)
 8000d94:	f7ff fefe 	bl	8000b94 <util_calculate_filter>

    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <wavPlayer_process+0xec>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000da0:	d907      	bls.n	8000db2 <wavPlayer_process+0x62>
    {
      audioRemainSize -= playerReadBytes;
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <wavPlayer_process+0xec>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <wavPlayer_process+0xe0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <wavPlayer_process+0xec>)
 8000dae:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000db0:	e039      	b.n	8000e26 <wavPlayer_process+0xd6>
      audioRemainSize = 0;
 8000db2:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <wavPlayer_process+0xec>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <wavPlayer_process+0xdc>)
 8000dba:	2203      	movs	r2, #3
 8000dbc:	701a      	strb	r2, [r3, #0]
    break;
 8000dbe:	e032      	b.n	8000e26 <wavPlayer_process+0xd6>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <wavPlayer_process+0xe0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <wavPlayer_process+0xdc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <wavPlayer_process+0xe0>)
 8000dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dd2:	491b      	ldr	r1, [pc, #108]	; (8000e40 <wavPlayer_process+0xf0>)
 8000dd4:	4818      	ldr	r0, [pc, #96]	; (8000e38 <wavPlayer_process+0xe8>)
 8000dd6:	f00b fdfd 	bl	800c9d4 <f_read>

    util_calculate_filter((uint16_t *)&audioBuffer[0],AUDIO_BUFFER_SIZE);
 8000dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dde:	4815      	ldr	r0, [pc, #84]	; (8000e34 <wavPlayer_process+0xe4>)
 8000de0:	f7ff fed8 	bl	8000b94 <util_calculate_filter>

    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <wavPlayer_process+0xec>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dec:	d907      	bls.n	8000dfe <wavPlayer_process+0xae>
    {
      audioRemainSize -= playerReadBytes;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <wavPlayer_process+0xec>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <wavPlayer_process+0xe0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <wavPlayer_process+0xec>)
 8000dfa:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000dfc:	e013      	b.n	8000e26 <wavPlayer_process+0xd6>
      audioRemainSize = 0;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <wavPlayer_process+0xec>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <wavPlayer_process+0xdc>)
 8000e06:	2203      	movs	r2, #3
 8000e08:	701a      	strb	r2, [r3, #0]
    break;
 8000e0a:	e00c      	b.n	8000e26 <wavPlayer_process+0xd6>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000e0c:	480a      	ldr	r0, [pc, #40]	; (8000e38 <wavPlayer_process+0xe8>)
 8000e0e:	f00b ff9e 	bl	800cd4e <f_close>
    wavPlayer_reset();
 8000e12:	f7ff ff2b 	bl	8000c6c <wavPlayer_reset>
    isFinished = true;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <wavPlayer_process+0xf4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <wavPlayer_process+0xdc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
    break;
 8000e22:	e000      	b.n	8000e26 <wavPlayer_process+0xd6>
    break;
 8000e24:	bf00      	nop
  }
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20001345 	.word	0x20001345
 8000e30:	20001340 	.word	0x20001340
 8000e34:	20000338 	.word	0x20000338
 8000e38:	20000104 	.word	0x20000104
 8000e3c:	20001338 	.word	0x20001338
 8000e40:	20000b38 	.word	0x20000b38
 8000e44:	20001344 	.word	0x20001344

08000e48 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000e4c:	f7ff fe70 	bl	8000b30 <audioI2S_stop>
  isFinished = true;
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <wavPlayer_stop+0x14>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20001344 	.word	0x20001344

08000e60 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8000e64:	f7ff fe48 	bl	8000af8 <audioI2S_pause>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8000e70:	f7ff fe50 	bl	8000b14 <audioI2S_resume>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return isFinished;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <wavPlayer_isFinished+0x14>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20001344 	.word	0x20001344

08000e90 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <audioI2S_halfTransfer_Callback+0x14>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	20001345 	.word	0x20001345

08000ea8 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <audioI2S_fullTransfer_Callback+0x14>)
 8000eae:	2202      	movs	r2, #2
 8000eb0:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20001345 	.word	0x20001345

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b095      	sub	sp, #84	; 0x54
 8000ec4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec6:	f000 fc31 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eca:	f000 f8c9 	bl	8001060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 f9c5 	bl	800125c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed2:	f000 f9a3 	bl	800121c <MX_DMA_Init>
  MX_I2C1_Init();
 8000ed6:	f000 f945 	bl	8001164 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000eda:	f000 f971 	bl	80011c0 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000ede:	f006 fd91 	bl	8007a04 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000ee2:	f00c f9c3 	bl	800d26c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  CS43_Init(hi2c1, MODE_I2S);
 8000ee6:	4c55      	ldr	r4, [pc, #340]	; (800103c <main+0x17c>)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9311      	str	r3, [sp, #68]	; 0x44
 8000eec:	4668      	mov	r0, sp
 8000eee:	f104 0310 	add.w	r3, r4, #16
 8000ef2:	2244      	movs	r2, #68	; 0x44
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f00c fd09 	bl	800d90c <memcpy>
 8000efa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000efe:	f7ff fb1d 	bl	800053c <CS43_Init>
  CS43_SetVolume(255);//0-255
 8000f02:	20ff      	movs	r0, #255	; 0xff
 8000f04:	f7ff fc6a 	bl	80007dc <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f7ff fc1d 	bl	8000748 <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 8000f0e:	484c      	ldr	r0, [pc, #304]	; (8001040 <main+0x180>)
 8000f10:	f7ff fdb4 	bl	8000a7c <audioI2S_setHandle>

  bool isSdCardMounted=0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle=0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f1c:	f00c f9cc 	bl	800d2b8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000f20:	4b48      	ldr	r3, [pc, #288]	; (8001044 <main+0x184>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d106      	bne.n	8000f36 <main+0x76>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2e:	4846      	ldr	r0, [pc, #280]	; (8001048 <main+0x188>)
 8000f30:	f001 fb32 	bl	8002598 <HAL_GPIO_WritePin>
 8000f34:	e010      	b.n	8000f58 <main+0x98>
    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000f36:	4b43      	ldr	r3, [pc, #268]	; (8001044 <main+0x184>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d10c      	bne.n	8000f58 <main+0x98>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f44:	4840      	ldr	r0, [pc, #256]	; (8001048 <main+0x188>)
 8000f46:	f001 fb27 	bl	8002598 <HAL_GPIO_WritePin>
      f_mount(NULL, (TCHAR const*)"", 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	493f      	ldr	r1, [pc, #252]	; (800104c <main+0x18c>)
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f00b fb3c 	bl	800c5cc <f_mount>
      isSdCardMounted = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	71fb      	strb	r3, [r7, #7]
    }

    if(Appli_state == APPLICATION_READY)
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <main+0x184>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d1dd      	bne.n	8000f1c <main+0x5c>
    {
      if(!isSdCardMounted)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f083 0301 	eor.w	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <main+0xba>
      {
        f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4938      	ldr	r1, [pc, #224]	; (8001050 <main+0x190>)
 8000f70:	4838      	ldr	r0, [pc, #224]	; (8001054 <main+0x194>)
 8000f72:	f00b fb2b 	bl	800c5cc <f_mount>
        isSdCardMounted = 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	71fb      	strb	r3, [r7, #7]
      }
      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4836      	ldr	r0, [pc, #216]	; (8001058 <main+0x198>)
 8000f7e:	f001 faf3 	bl	8002568 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0c9      	beq.n	8000f1c <main+0x5c>
      {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8e:	482e      	ldr	r0, [pc, #184]	; (8001048 <main+0x188>)
 8000f90:	f001 fb02 	bl	8002598 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000f94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f98:	f000 fc3a 	bl	8001810 <HAL_Delay>
        wavPlayer_fileSelect(WAV_FILE1);
 8000f9c:	482f      	ldr	r0, [pc, #188]	; (800105c <main+0x19c>)
 8000f9e:	f7ff fe77 	bl	8000c90 <wavPlayer_fileSelect>
        wavPlayer_play();
 8000fa2:	f7ff fe9f 	bl	8000ce4 <wavPlayer_play>

        while(!wavPlayer_isFinished())
 8000fa6:	e035      	b.n	8001014 <main+0x154>
        {
          wavPlayer_process();
 8000fa8:	f7ff fed2 	bl	8000d50 <wavPlayer_process>
          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000fac:	2101      	movs	r1, #1
 8000fae:	482a      	ldr	r0, [pc, #168]	; (8001058 <main+0x198>)
 8000fb0:	f001 fada 	bl	8002568 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d02c      	beq.n	8001014 <main+0x154>
          {
            pauseResumeToggle^=1;
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	f083 0301 	eor.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	71bb      	strb	r3, [r7, #6]
            if(pauseResumeToggle)
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <main+0x12a>
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd8:	481b      	ldr	r0, [pc, #108]	; (8001048 <main+0x188>)
 8000fda:	f001 fadd 	bl	8002598 <HAL_GPIO_WritePin>
              wavPlayer_pause();
 8000fde:	f7ff ff3f 	bl	8000e60 <wavPlayer_pause>
              HAL_Delay(200);
 8000fe2:	20c8      	movs	r0, #200	; 0xc8
 8000fe4:	f000 fc14 	bl	8001810 <HAL_Delay>
 8000fe8:	e014      	b.n	8001014 <main+0x154>
            }
            else
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff0:	4815      	ldr	r0, [pc, #84]	; (8001048 <main+0x188>)
 8000ff2:	f001 fad1 	bl	8002598 <HAL_GPIO_WritePin>
              HAL_Delay(1000);
 8000ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffa:	f000 fc09 	bl	8001810 <HAL_Delay>
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000ffe:	2101      	movs	r1, #1
 8001000:	4815      	ldr	r0, [pc, #84]	; (8001058 <main+0x198>)
 8001002:	f001 fab1 	bl	8002568 <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <main+0x150>
              {
                wavPlayer_stop();
 800100c:	f7ff ff1c 	bl	8000e48 <wavPlayer_stop>
              }
              {
                wavPlayer_resume();
 8001010:	f7ff ff2c 	bl	8000e6c <wavPlayer_resume>
        while(!wavPlayer_isFinished())
 8001014:	f7ff ff30 	bl	8000e78 <wavPlayer_isFinished>
 8001018:	4603      	mov	r3, r0
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1c1      	bne.n	8000fa8 <main+0xe8>
              }
            }
          }
        }
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <main+0x188>)
 800102c:	f001 fab4 	bl	8002598 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8001030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001034:	f000 fbec 	bl	8001810 <HAL_Delay>
    MX_USB_HOST_Process();
 8001038:	e770      	b.n	8000f1c <main+0x5c>
 800103a:	bf00      	nop
 800103c:	200093b8 	.word	0x200093b8
 8001040:	2000946c 	.word	0x2000946c
 8001044:	200093ac 	.word	0x200093ac
 8001048:	40020c00 	.word	0x40020c00
 800104c:	0800dac0 	.word	0x0800dac0
 8001050:	200094b8 	.word	0x200094b8
 8001054:	200096ec 	.word	0x200096ec
 8001058:	40020000 	.word	0x40020000
 800105c:	0800dac4 	.word	0x0800dac4

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b098      	sub	sp, #96	; 0x60
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106a:	2230      	movs	r2, #48	; 0x30
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f00c fc57 	bl	800d922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b31      	ldr	r3, [pc, #196]	; (800115c <SystemClock_Config+0xfc>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a30      	ldr	r2, [pc, #192]	; (800115c <SystemClock_Config+0xfc>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <SystemClock_Config+0xfc>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <SystemClock_Config+0x100>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <SystemClock_Config+0x100>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <SystemClock_Config+0x100>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010de:	2308      	movs	r3, #8
 80010e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ec:	2307      	movs	r3, #7
 80010ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 ff7f 	bl	8005ff8 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001100:	f000 f93e 	bl	8001380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2105      	movs	r1, #5
 8001122:	4618      	mov	r0, r3
 8001124:	f005 f9d8 	bl	80064d8 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800112e:	f000 f927 	bl	8001380 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001132:	2301      	movs	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001136:	f240 130f 	movw	r3, #271	; 0x10f
 800113a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 800113c:	2306      	movs	r3, #6
 800113e:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4618      	mov	r0, r3
 8001146:	f005 fba5 	bl	8006894 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001150:	f000 f916 	bl	8001380 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3760      	adds	r7, #96	; 0x60
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000

08001164 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_I2C1_Init+0x50>)
 800116a:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_I2C1_Init+0x54>)
 800116c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_I2C1_Init+0x50>)
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <MX_I2C1_Init+0x58>)
 8001172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_I2C1_Init+0x50>)
 8001182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001186:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_I2C1_Init+0x50>)
 80011a2:	f002 ff03 	bl	8003fac <HAL_I2C_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ac:	f000 f8e8 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200093b8 	.word	0x200093b8
 80011b8:	40005400 	.word	0x40005400
 80011bc:	000186a0 	.word	0x000186a0

080011c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_I2S3_Init+0x54>)
 80011c6:	4a14      	ldr	r2, [pc, #80]	; (8001218 <MX_I2S3_Init+0x58>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_I2S3_Init+0x54>)
 80011cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_I2S3_Init+0x54>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_I2S3_Init+0x54>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <MX_I2S3_Init+0x54>)
 80011e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_I2S3_Init+0x54>)
 80011e8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80011ec:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_I2S3_Init+0x54>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_I2S3_Init+0x54>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_I2S3_Init+0x54>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_I2S3_Init+0x54>)
 8001202:	f003 fe5d 	bl	8004ec0 <HAL_I2S_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800120c:	f000 f8b8 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000946c 	.word	0x2000946c
 8001218:	40003c00 	.word	0x40003c00

0800121c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_DMA_Init+0x3c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <MX_DMA_Init+0x3c>)
 800122c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_DMA_Init+0x3c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2010      	movs	r0, #16
 8001244:	f000 fbe1 	bl	8001a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001248:	2010      	movs	r0, #16
 800124a:	f000 fbfa 	bl	8001a42 <HAL_NVIC_EnableIRQ>

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <MX_GPIO_Init+0x114>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a3d      	ldr	r2, [pc, #244]	; (8001370 <MX_GPIO_Init+0x114>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <MX_GPIO_Init+0x114>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <MX_GPIO_Init+0x114>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a36      	ldr	r2, [pc, #216]	; (8001370 <MX_GPIO_Init+0x114>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b34      	ldr	r3, [pc, #208]	; (8001370 <MX_GPIO_Init+0x114>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b30      	ldr	r3, [pc, #192]	; (8001370 <MX_GPIO_Init+0x114>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <MX_GPIO_Init+0x114>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <MX_GPIO_Init+0x114>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <MX_GPIO_Init+0x114>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a28      	ldr	r2, [pc, #160]	; (8001370 <MX_GPIO_Init+0x114>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <MX_GPIO_Init+0x114>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <MX_GPIO_Init+0x114>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <MX_GPIO_Init+0x114>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_GPIO_Init+0x114>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2101      	movs	r1, #1
 8001302:	481c      	ldr	r0, [pc, #112]	; (8001374 <MX_GPIO_Init+0x118>)
 8001304:	f001 f948 	bl	8002598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001308:	2200      	movs	r2, #0
 800130a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800130e:	481a      	ldr	r0, [pc, #104]	; (8001378 <MX_GPIO_Init+0x11c>)
 8001310:	f001 f942 	bl	8002598 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001314:	2301      	movs	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4812      	ldr	r0, [pc, #72]	; (8001374 <MX_GPIO_Init+0x118>)
 800132c:	f000 ff82 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001330:	2301      	movs	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	480e      	ldr	r0, [pc, #56]	; (800137c <MX_GPIO_Init+0x120>)
 8001344:	f000 ff76 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001348:	f24f 0310 	movw	r3, #61456	; 0xf010
 800134c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_GPIO_Init+0x11c>)
 8001362:	f000 ff67 	bl	8002234 <HAL_GPIO_Init>

}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40020000 	.word	0x40020000

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_MspInit+0x4c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <HAL_MspInit+0x4c>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_MspInit+0x4c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_MspInit+0x4c>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ce:	2007      	movs	r0, #7
 80013d0:	f000 fb10 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800

080013e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_I2C_MspInit+0x84>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d12c      	bne.n	800145c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_I2C_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_I2C_MspInit+0x88>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_I2C_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800141e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001424:	2312      	movs	r3, #18
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001428:	2301      	movs	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001430:	2304      	movs	r3, #4
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <HAL_I2C_MspInit+0x8c>)
 800143c:	f000 fefa 	bl	8002234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_I2C_MspInit+0x88>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_I2C_MspInit+0x88>)
 800144a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_I2C_MspInit+0x88>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40005400 	.word	0x40005400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400

08001470 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a45      	ldr	r2, [pc, #276]	; (80015a4 <HAL_I2S_MspInit+0x134>)
 800148e:	4293      	cmp	r3, r2
 8001490:	f040 8084 	bne.w	800159c <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <HAL_I2S_MspInit+0x138>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a42      	ldr	r2, [pc, #264]	; (80015a8 <HAL_I2S_MspInit+0x138>)
 800149e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
 80014a4:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <HAL_I2S_MspInit+0x138>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <HAL_I2S_MspInit+0x138>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a3b      	ldr	r2, [pc, #236]	; (80015a8 <HAL_I2S_MspInit+0x138>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6313      	str	r3, [r2, #48]	; 0x30
 80014c0:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <HAL_I2S_MspInit+0x138>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <HAL_I2S_MspInit+0x138>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <HAL_I2S_MspInit+0x138>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <HAL_I2S_MspInit+0x138>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014e8:	2310      	movs	r3, #16
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014f8:	2306      	movs	r3, #6
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	482a      	ldr	r0, [pc, #168]	; (80015ac <HAL_I2S_MspInit+0x13c>)
 8001504:	f000 fe96 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001508:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800151a:	2306      	movs	r3, #6
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4822      	ldr	r0, [pc, #136]	; (80015b0 <HAL_I2S_MspInit+0x140>)
 8001526:	f000 fe85 	bl	8002234 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 800152c:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <HAL_I2S_MspInit+0x148>)
 800152e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 800154c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001550:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 8001554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001558:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 800156a:	2204      	movs	r2, #4
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 8001570:	2203      	movs	r2, #3
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 8001582:	f000 fa79 	bl	8001a78 <HAL_DMA_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 800158c:	f7ff fef8 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 8001594:	639a      	str	r2, [r3, #56]	; 0x38
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_I2S_MspInit+0x144>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40003c00 	.word	0x40003c00
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020800 	.word	0x40020800
 80015b4:	2000940c 	.word	0x2000940c
 80015b8:	40026088 	.word	0x40026088

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001610:	f000 f8de 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA1_Stream5_IRQHandler+0x10>)
 800161e:	f000 fba1 	bl	8001d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000940c 	.word	0x2000940c

0800162c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <OTG_FS_IRQHandler+0x10>)
 8001632:	f001 fa59 	bl	8002ae8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20009cf8 	.word	0x20009cf8

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f00c f912 	bl	800d898 <__errno>
 8001674:	4602      	mov	r2, r0
 8001676:	230c      	movs	r3, #12
 8001678:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20020000 	.word	0x20020000
 80016a0:	00002000 	.word	0x00002000
 80016a4:	20009370 	.word	0x20009370
 80016a8:	20009fc0 	.word	0x20009fc0

080016ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <SystemInit+0x28>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <SystemInit+0x28>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SystemInit+0x28>)
 80016c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c6:	609a      	str	r2, [r3, #8]
#endif
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016de:	e003      	b.n	80016e8 <LoopCopyDataInit>

080016e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016e6:	3104      	adds	r1, #4

080016e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016f0:	d3f6      	bcc.n	80016e0 <CopyDataInit>
  ldr  r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016f4:	e002      	b.n	80016fc <LoopFillZerobss>

080016f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016f8:	f842 3b04 	str.w	r3, [r2], #4

080016fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001700:	d3f9      	bcc.n	80016f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001702:	f7ff ffd3 	bl	80016ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001706:	f00c f8cd 	bl	800d8a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fbd9 	bl	8000ec0 <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001710:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001714:	0800ddd4 	.word	0x0800ddd4
  ldr  r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800171c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001720:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001724:	20009fc0 	.word	0x20009fc0

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <HAL_Init+0x40>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_Init+0x40>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_Init+0x40>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f94d 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	2000      	movs	r0, #0
 800175c:	f000 f808 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff fe16 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f965 	bl	8001a5e <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f92d 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	200094b4 	.word	0x200094b4

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	200094b4 	.word	0x200094b4

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_Delay+0x40>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000008 	.word	0x20000008

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff29 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff3e 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff31 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff feb8 	bl	80017f8 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e099      	b.n	8001bc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab4:	e00f      	b.n	8001ad6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab6:	f7ff fe9f 	bl	80017f8 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d908      	bls.n	8001ad6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2203      	movs	r2, #3
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e078      	b.n	8001bc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1e8      	bne.n	8001ab6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <HAL_DMA_Init+0x158>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d107      	bne.n	8001b40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f023 0307 	bic.w	r3, r3, #7
 8001b56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d117      	bne.n	8001b9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00e      	beq.n	8001b9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fadf 	bl	8002140 <DMA_CheckFifoParam>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2240      	movs	r2, #64	; 0x40
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b96:	2301      	movs	r3, #1
 8001b98:	e016      	b.n	8001bc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fa96 	bl	80020d4 <DMA_CalcBaseAndBitshift>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	223f      	movs	r2, #63	; 0x3f
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	f010803f 	.word	0xf010803f

08001bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_DMA_Start_IT+0x26>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e040      	b.n	8001c7c <HAL_DMA_Start_IT+0xa8>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d12f      	bne.n	8001c6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2202      	movs	r2, #2
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fa28 	bl	8002078 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	223f      	movs	r2, #63	; 0x3f
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0216 	orr.w	r2, r2, #22
 8001c42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0208 	orr.w	r2, r2, #8
 8001c5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e005      	b.n	8001c7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c76:	2302      	movs	r3, #2
 8001c78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c92:	f7ff fdb1 	bl	80017f8 <HAL_GetTick>
 8001c96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d008      	beq.n	8001cb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e052      	b.n	8001d5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0216 	bic.w	r2, r2, #22
 8001cc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <HAL_DMA_Abort+0x62>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0208 	bic.w	r2, r2, #8
 8001cf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d06:	e013      	b.n	8001d30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d08:	f7ff fd76 	bl	80017f8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d90c      	bls.n	8001d30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2203      	movs	r2, #3
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e015      	b.n	8001d5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1e4      	bne.n	8001d08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	223f      	movs	r2, #63	; 0x3f
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d70:	4b92      	ldr	r3, [pc, #584]	; (8001fbc <HAL_DMA_IRQHandler+0x258>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a92      	ldr	r2, [pc, #584]	; (8001fc0 <HAL_DMA_IRQHandler+0x25c>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0a9b      	lsrs	r3, r3, #10
 8001d7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2208      	movs	r2, #8
 8001d90:	409a      	lsls	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d01a      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0204 	bic.w	r2, r2, #4
 8001db6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d012      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2201      	movs	r2, #1
 8001df4:	409a      	lsls	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	f043 0202 	orr.w	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00b      	beq.n	8001e3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	2204      	movs	r2, #4
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	f043 0204 	orr.w	r2, r3, #4
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	2210      	movs	r2, #16
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d043      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d03c      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	2210      	movs	r2, #16
 8001e60:	409a      	lsls	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d018      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d108      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d024      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
 8001e92:	e01f      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01b      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
 8001ea4:	e016      	b.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0208 	bic.w	r2, r2, #8
 8001ec2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2220      	movs	r2, #32
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 808e 	beq.w	8002002 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8086 	beq.w	8002002 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2220      	movs	r2, #32
 8001efc:	409a      	lsls	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d136      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0216 	bic.w	r2, r2, #22
 8001f1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <HAL_DMA_IRQHandler+0x1da>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0208 	bic.w	r2, r2, #8
 8001f4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	223f      	movs	r2, #63	; 0x3f
 8001f54:	409a      	lsls	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d07d      	beq.n	800206e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
        }
        return;
 8001f7a:	e078      	b.n	800206e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01c      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d108      	bne.n	8001faa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d030      	beq.n	8002002 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
 8001fa8:	e02b      	b.n	8002002 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d027      	beq.n	8002002 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	4798      	blx	r3
 8001fba:	e022      	b.n	8002002 <HAL_DMA_IRQHandler+0x29e>
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0210 	bic.w	r2, r2, #16
 8001fe0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	2b00      	cmp	r3, #0
 8002008:	d032      	beq.n	8002070 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d022      	beq.n	800205c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2205      	movs	r2, #5
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3301      	adds	r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	429a      	cmp	r2, r3
 8002038:	d307      	bcc.n	800204a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f2      	bne.n	800202e <HAL_DMA_IRQHandler+0x2ca>
 8002048:	e000      	b.n	800204c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800204a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
 800206c:	e000      	b.n	8002070 <HAL_DMA_IRQHandler+0x30c>
        return;
 800206e:	bf00      	nop
    }
  }
}
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop

08002078 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002094:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d108      	bne.n	80020b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020b6:	e007      	b.n	80020c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	60da      	str	r2, [r3, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3b10      	subs	r3, #16
 80020e4:	4a14      	ldr	r2, [pc, #80]	; (8002138 <DMA_CalcBaseAndBitshift+0x64>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020ee:	4a13      	ldr	r2, [pc, #76]	; (800213c <DMA_CalcBaseAndBitshift+0x68>)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d909      	bls.n	8002116 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	1d1a      	adds	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	659a      	str	r2, [r3, #88]	; 0x58
 8002114:	e007      	b.n	8002126 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	aaaaaaab 	.word	0xaaaaaaab
 800213c:	0800dd28 	.word	0x0800dd28

08002140 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d11f      	bne.n	800219a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d855      	bhi.n	800220c <DMA_CheckFifoParam+0xcc>
 8002160:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <DMA_CheckFifoParam+0x28>)
 8002162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002166:	bf00      	nop
 8002168:	08002179 	.word	0x08002179
 800216c:	0800218b 	.word	0x0800218b
 8002170:	08002179 	.word	0x08002179
 8002174:	0800220d 	.word	0x0800220d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d045      	beq.n	8002210 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002188:	e042      	b.n	8002210 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002192:	d13f      	bne.n	8002214 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002198:	e03c      	b.n	8002214 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a2:	d121      	bne.n	80021e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d836      	bhi.n	8002218 <DMA_CheckFifoParam+0xd8>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <DMA_CheckFifoParam+0x70>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	080021c1 	.word	0x080021c1
 80021b4:	080021c7 	.word	0x080021c7
 80021b8:	080021c1 	.word	0x080021c1
 80021bc:	080021d9 	.word	0x080021d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
      break;
 80021c4:	e02f      	b.n	8002226 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d024      	beq.n	800221c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d6:	e021      	b.n	800221c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021e0:	d11e      	bne.n	8002220 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021e6:	e01b      	b.n	8002220 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d902      	bls.n	80021f4 <DMA_CheckFifoParam+0xb4>
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d003      	beq.n	80021fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021f2:	e018      	b.n	8002226 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      break;
 80021f8:	e015      	b.n	8002226 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00e      	beq.n	8002224 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      break;
 800220a:	e00b      	b.n	8002224 <DMA_CheckFifoParam+0xe4>
      break;
 800220c:	bf00      	nop
 800220e:	e00a      	b.n	8002226 <DMA_CheckFifoParam+0xe6>
      break;
 8002210:	bf00      	nop
 8002212:	e008      	b.n	8002226 <DMA_CheckFifoParam+0xe6>
      break;
 8002214:	bf00      	nop
 8002216:	e006      	b.n	8002226 <DMA_CheckFifoParam+0xe6>
      break;
 8002218:	bf00      	nop
 800221a:	e004      	b.n	8002226 <DMA_CheckFifoParam+0xe6>
      break;
 800221c:	bf00      	nop
 800221e:	e002      	b.n	8002226 <DMA_CheckFifoParam+0xe6>
      break;   
 8002220:	bf00      	nop
 8002222:	e000      	b.n	8002226 <DMA_CheckFifoParam+0xe6>
      break;
 8002224:	bf00      	nop
    }
  } 
  
  return status; 
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e16b      	b.n	8002528 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002250:	2201      	movs	r2, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	429a      	cmp	r2, r3
 800226a:	f040 815a 	bne.w	8002522 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d00b      	beq.n	800228e <HAL_GPIO_Init+0x5a>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002282:	2b11      	cmp	r3, #17
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b12      	cmp	r3, #18
 800228c:	d130      	bne.n	80022f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c4:	2201      	movs	r2, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 0201 	and.w	r2, r3, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0xfc>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b12      	cmp	r3, #18
 800232e:	d123      	bne.n	8002378 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	69b9      	ldr	r1, [r7, #24]
 8002374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0203 	and.w	r2, r3, #3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80b4 	beq.w	8002522 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b5f      	ldr	r3, [pc, #380]	; (800253c <HAL_GPIO_Init+0x308>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	4a5e      	ldr	r2, [pc, #376]	; (800253c <HAL_GPIO_Init+0x308>)
 80023c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ca:	4b5c      	ldr	r3, [pc, #368]	; (800253c <HAL_GPIO_Init+0x308>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d6:	4a5a      	ldr	r2, [pc, #360]	; (8002540 <HAL_GPIO_Init+0x30c>)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	220f      	movs	r2, #15
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a51      	ldr	r2, [pc, #324]	; (8002544 <HAL_GPIO_Init+0x310>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d02b      	beq.n	800245a <HAL_GPIO_Init+0x226>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a50      	ldr	r2, [pc, #320]	; (8002548 <HAL_GPIO_Init+0x314>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d025      	beq.n	8002456 <HAL_GPIO_Init+0x222>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4f      	ldr	r2, [pc, #316]	; (800254c <HAL_GPIO_Init+0x318>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01f      	beq.n	8002452 <HAL_GPIO_Init+0x21e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4e      	ldr	r2, [pc, #312]	; (8002550 <HAL_GPIO_Init+0x31c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d019      	beq.n	800244e <HAL_GPIO_Init+0x21a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4d      	ldr	r2, [pc, #308]	; (8002554 <HAL_GPIO_Init+0x320>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_GPIO_Init+0x216>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4c      	ldr	r2, [pc, #304]	; (8002558 <HAL_GPIO_Init+0x324>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00d      	beq.n	8002446 <HAL_GPIO_Init+0x212>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4b      	ldr	r2, [pc, #300]	; (800255c <HAL_GPIO_Init+0x328>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <HAL_GPIO_Init+0x20e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_GPIO_Init+0x32c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_GPIO_Init+0x20a>
 800243a:	2307      	movs	r3, #7
 800243c:	e00e      	b.n	800245c <HAL_GPIO_Init+0x228>
 800243e:	2308      	movs	r3, #8
 8002440:	e00c      	b.n	800245c <HAL_GPIO_Init+0x228>
 8002442:	2306      	movs	r3, #6
 8002444:	e00a      	b.n	800245c <HAL_GPIO_Init+0x228>
 8002446:	2305      	movs	r3, #5
 8002448:	e008      	b.n	800245c <HAL_GPIO_Init+0x228>
 800244a:	2304      	movs	r3, #4
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x228>
 800244e:	2303      	movs	r3, #3
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x228>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x228>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x228>
 800245a:	2300      	movs	r3, #0
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246c:	4934      	ldr	r1, [pc, #208]	; (8002540 <HAL_GPIO_Init+0x30c>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800247a:	4b3a      	ldr	r3, [pc, #232]	; (8002564 <HAL_GPIO_Init+0x330>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800249e:	4a31      	ldr	r2, [pc, #196]	; (8002564 <HAL_GPIO_Init+0x330>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024a4:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <HAL_GPIO_Init+0x330>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c8:	4a26      	ldr	r2, [pc, #152]	; (8002564 <HAL_GPIO_Init+0x330>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ce:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_GPIO_Init+0x330>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <HAL_GPIO_Init+0x330>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_GPIO_Init+0x330>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800251c:	4a11      	ldr	r2, [pc, #68]	; (8002564 <HAL_GPIO_Init+0x330>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	f67f ae90 	bls.w	8002250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002530:	bf00      	nop
 8002532:	3724      	adds	r7, #36	; 0x24
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40023800 	.word	0x40023800
 8002540:	40013800 	.word	0x40013800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40020800 	.word	0x40020800
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40021400 	.word	0x40021400
 800255c:	40021800 	.word	0x40021800
 8002560:	40021c00 	.word	0x40021c00
 8002564:	40013c00 	.word	0x40013c00

08002568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	e001      	b.n	800258a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
 80025a4:	4613      	mov	r3, r2
 80025a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a8:	787b      	ldrb	r3, [r7, #1]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025b4:	e003      	b.n	80025be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025b6:	887b      	ldrh	r3, [r7, #2]
 80025b8:	041a      	lsls	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	619a      	str	r2, [r3, #24]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80025ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025cc:	b08f      	sub	sp, #60	; 0x3c
 80025ce:	af0a      	add	r7, sp, #40	; 0x28
 80025d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e054      	b.n	8002686 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f00a fe96 	bl	800d328 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2203      	movs	r2, #3
 8002600:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f004 fb16 	bl	8006c4c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	687e      	ldr	r6, [r7, #4]
 8002628:	466d      	mov	r5, sp
 800262a:	f106 0410 	add.w	r4, r6, #16
 800262e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800263a:	e885 0003 	stmia.w	r5, {r0, r1}
 800263e:	1d33      	adds	r3, r6, #4
 8002640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002642:	6838      	ldr	r0, [r7, #0]
 8002644:	f004 fa90 	bl	8006b68 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2101      	movs	r1, #1
 800264e:	4618      	mov	r0, r3
 8002650:	f004 fb0d 	bl	8006c6e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	687e      	ldr	r6, [r7, #4]
 800265c:	466d      	mov	r5, sp
 800265e:	f106 0410 	add.w	r4, r6, #16
 8002662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800266a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800266e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002672:	1d33      	adds	r3, r6, #4
 8002674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002676:	6838      	ldr	r0, [r7, #0]
 8002678:	f004 fc20 	bl	8006ebc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800268e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800268e:	b590      	push	{r4, r7, lr}
 8002690:	b089      	sub	sp, #36	; 0x24
 8002692:	af04      	add	r7, sp, #16
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	4608      	mov	r0, r1
 8002698:	4611      	mov	r1, r2
 800269a:	461a      	mov	r2, r3
 800269c:	4603      	mov	r3, r0
 800269e:	70fb      	strb	r3, [r7, #3]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70bb      	strb	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_HCD_HC_Init+0x28>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e07f      	b.n	80027b6 <HAL_HCD_HC_Init+0x128>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	440b      	add	r3, r1
 80026cc:	333d      	adds	r3, #61	; 0x3d
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	3338      	adds	r3, #56	; 0x38
 80026e2:	787a      	ldrb	r2, [r7, #1]
 80026e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	3340      	adds	r3, #64	; 0x40
 80026f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026f8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	440b      	add	r3, r1
 8002708:	3339      	adds	r3, #57	; 0x39
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	333f      	adds	r3, #63	; 0x3f
 800271e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002722:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	78bb      	ldrb	r3, [r7, #2]
 8002728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800272c:	b2d8      	uxtb	r0, r3
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	333a      	adds	r3, #58	; 0x3a
 800273c:	4602      	mov	r2, r0
 800273e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002740:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002744:	2b00      	cmp	r3, #0
 8002746:	da0a      	bge.n	800275e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	333b      	adds	r3, #59	; 0x3b
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e009      	b.n	8002772 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	333b      	adds	r3, #59	; 0x3b
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	440b      	add	r3, r1
 8002780:	333c      	adds	r3, #60	; 0x3c
 8002782:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002786:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	787c      	ldrb	r4, [r7, #1]
 800278e:	78ba      	ldrb	r2, [r7, #2]
 8002790:	78f9      	ldrb	r1, [r7, #3]
 8002792:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002794:	9302      	str	r3, [sp, #8]
 8002796:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	4623      	mov	r3, r4
 80027a4:	f004 fd0c 	bl	80071c0 <USB_HC_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}

080027be <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_HCD_HC_Halt+0x1e>
 80027d8:	2302      	movs	r3, #2
 80027da:	e00f      	b.n	80027fc <HAL_HCD_HC_Halt+0x3e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 ff48 	bl	8007682 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4603      	mov	r3, r0
 8002814:	70fb      	strb	r3, [r7, #3]
 8002816:	460b      	mov	r3, r1
 8002818:	70bb      	strb	r3, [r7, #2]
 800281a:	4613      	mov	r3, r2
 800281c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	333b      	adds	r3, #59	; 0x3b
 800282e:	78ba      	ldrb	r2, [r7, #2]
 8002830:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	333f      	adds	r3, #63	; 0x3f
 8002842:	787a      	ldrb	r2, [r7, #1]
 8002844:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002846:	7c3b      	ldrb	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d114      	bne.n	8002876 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	3342      	adds	r3, #66	; 0x42
 800285c:	2203      	movs	r2, #3
 800285e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	333d      	adds	r3, #61	; 0x3d
 8002870:	7f3a      	ldrb	r2, [r7, #28]
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e009      	b.n	800288a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	3342      	adds	r3, #66	; 0x42
 8002886:	2202      	movs	r2, #2
 8002888:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800288a:	787b      	ldrb	r3, [r7, #1]
 800288c:	2b03      	cmp	r3, #3
 800288e:	f200 80d6 	bhi.w	8002a3e <HAL_HCD_HC_SubmitRequest+0x23a>
 8002892:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	080028a9 	.word	0x080028a9
 800289c:	08002a29 	.word	0x08002a29
 80028a0:	08002915 	.word	0x08002915
 80028a4:	0800299f 	.word	0x0800299f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80028a8:	7c3b      	ldrb	r3, [r7, #16]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 80c9 	bne.w	8002a42 <HAL_HCD_HC_SubmitRequest+0x23e>
 80028b0:	78bb      	ldrb	r3, [r7, #2]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 80c5 	bne.w	8002a42 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80028b8:	8b3b      	ldrh	r3, [r7, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	3351      	adds	r3, #81	; 0x51
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	3351      	adds	r3, #81	; 0x51
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	3342      	adds	r3, #66	; 0x42
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028fc:	e0a1      	b.n	8002a42 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	3342      	adds	r3, #66	; 0x42
 800290e:	2202      	movs	r2, #2
 8002910:	701a      	strb	r2, [r3, #0]
      break;
 8002912:	e096      	b.n	8002a42 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002914:	78bb      	ldrb	r3, [r7, #2]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d120      	bne.n	800295c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	3351      	adds	r3, #81	; 0x51
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	3342      	adds	r3, #66	; 0x42
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002944:	e07e      	b.n	8002a44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	440b      	add	r3, r1
 8002954:	3342      	adds	r3, #66	; 0x42
 8002956:	2202      	movs	r2, #2
 8002958:	701a      	strb	r2, [r3, #0]
      break;
 800295a:	e073      	b.n	8002a44 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	3350      	adds	r3, #80	; 0x50
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10a      	bne.n	8002988 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	440b      	add	r3, r1
 8002980:	3342      	adds	r3, #66	; 0x42
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
      break;
 8002986:	e05d      	b.n	8002a44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	3342      	adds	r3, #66	; 0x42
 8002998:	2202      	movs	r2, #2
 800299a:	701a      	strb	r2, [r3, #0]
      break;
 800299c:	e052      	b.n	8002a44 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800299e:	78bb      	ldrb	r3, [r7, #2]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d120      	bne.n	80029e6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	3351      	adds	r3, #81	; 0x51
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3342      	adds	r3, #66	; 0x42
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029ce:	e039      	b.n	8002a44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	3342      	adds	r3, #66	; 0x42
 80029e0:	2202      	movs	r2, #2
 80029e2:	701a      	strb	r2, [r3, #0]
      break;
 80029e4:	e02e      	b.n	8002a44 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	3350      	adds	r3, #80	; 0x50
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	3342      	adds	r3, #66	; 0x42
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
      break;
 8002a10:	e018      	b.n	8002a44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	3342      	adds	r3, #66	; 0x42
 8002a22:	2202      	movs	r2, #2
 8002a24:	701a      	strb	r2, [r3, #0]
      break;
 8002a26:	e00d      	b.n	8002a44 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	3342      	adds	r3, #66	; 0x42
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
      break;
 8002a3c:	e002      	b.n	8002a44 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002a3e:	bf00      	nop
 8002a40:	e000      	b.n	8002a44 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002a42:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	3344      	adds	r3, #68	; 0x44
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	8b39      	ldrh	r1, [r7, #24]
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4403      	add	r3, r0
 8002a68:	3348      	adds	r3, #72	; 0x48
 8002a6a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	335c      	adds	r3, #92	; 0x5c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334c      	adds	r3, #76	; 0x4c
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3339      	adds	r3, #57	; 0x39
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	335d      	adds	r3, #93	; 0x5d
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	3338      	adds	r3, #56	; 0x38
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	18d1      	adds	r1, r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f004 fc7c 	bl	80073d4 <USB_HC_StartXfer>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop

08002ae8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 f999 	bl	8006e36 <USB_GetMode>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	f040 80ef 	bne.w	8002cea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 f97d 	bl	8006e10 <USB_ReadInterrupts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80e5 	beq.w	8002ce8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 f974 	bl	8006e10 <USB_ReadInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b32:	d104      	bne.n	8002b3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 f964 	bl	8006e10 <USB_ReadInterrupts>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b52:	d104      	bne.n	8002b5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 f954 	bl	8006e10 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b72:	d104      	bne.n	8002b7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 f944 	bl	8006e10 <USB_ReadInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d103      	bne.n	8002b9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2202      	movs	r2, #2
 8002b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f004 f936 	bl	8006e10 <USB_ReadInterrupts>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bae:	d115      	bne.n	8002bdc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bb8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d108      	bne.n	8002bdc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f00a fc2a 	bl	800d424 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 fa2c 	bl	8007034 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 f915 	bl	8006e10 <USB_ReadInterrupts>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf0:	d102      	bne.n	8002bf8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f001 f966 	bl	8003ec4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 f907 	bl	8006e10 <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d106      	bne.n	8002c1a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f00a fbed 	bl	800d3ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2208      	movs	r2, #8
 8002c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 f8f6 	bl	8006e10 <USB_ReadInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c2e:	d138      	bne.n	8002ca2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 fd13 	bl	8007660 <USB_HC_ReadInterrupt>
 8002c3a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	e025      	b.n	8002c8e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d018      	beq.n	8002c88 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6c:	d106      	bne.n	8002c7c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f8cf 	bl	8002e18 <HCD_HC_IN_IRQHandler>
 8002c7a:	e005      	b.n	8002c88 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fcfd 	bl	8003682 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d3d4      	bcc.n	8002c42 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 f8b2 	bl	8006e10 <USB_ReadInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d101      	bne.n	8002cba <HAL_HCD_IRQHandler+0x1d2>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_HCD_IRQHandler+0x1d4>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d014      	beq.n	8002cea <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0210 	bic.w	r2, r2, #16
 8002cce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f001 f84b 	bl	8003d6c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699a      	ldr	r2, [r3, #24]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0210 	orr.w	r2, r2, #16
 8002ce4:	619a      	str	r2, [r3, #24]
 8002ce6:	e000      	b.n	8002cea <HAL_HCD_IRQHandler+0x202>
      return;
 8002ce8:	bf00      	nop
    }
  }
}
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_HCD_Start+0x16>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e013      	b.n	8002d2e <HAL_HCD_Start+0x3e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 ff89 	bl	8006c2a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 f9ec 	bl	80070fc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_HCD_Stop+0x16>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e00d      	b.n	8002d68 <HAL_HCD_Stop+0x32>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f004 fdcd 	bl	80078f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f004 f993 	bl	80070a8 <USB_ResetPort>
 8002d82:	4603      	mov	r3, r0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	335c      	adds	r3, #92	; 0x5c
 8002da8:	781b      	ldrb	r3, [r3, #0]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	334c      	adds	r3, #76	; 0x4c
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 f9d5 	bl	800719c <USB_GetCurrentFrame>
 8002df2:	4603      	mov	r3, r0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 f9b0 	bl	800716e <USB_GetHostSpeed>
 8002e0e:	4603      	mov	r3, r0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d119      	bne.n	8002e7c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	461a      	mov	r2, r3
 8002e56:	2304      	movs	r3, #4
 8002e58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	0151      	lsls	r1, r2, #5
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	440a      	add	r2, r1
 8002e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	60d3      	str	r3, [r2, #12]
 8002e7a:	e0ce      	b.n	800301a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e92:	d12c      	bne.n	8002eee <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	335d      	adds	r3, #93	; 0x5d
 8002eb8:	2207      	movs	r2, #7
 8002eba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	0151      	lsls	r1, r2, #5
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fbcb 	bl	8007682 <USB_HC_Halt>
 8002eec:	e095      	b.n	800301a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d109      	bne.n	8002f18 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	2320      	movs	r3, #32
 8002f14:	6093      	str	r3, [r2, #8]
 8002f16:	e080      	b.n	800301a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d134      	bne.n	8002f98 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	0151      	lsls	r1, r2, #5
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	440a      	add	r2, r1
 8002f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	335d      	adds	r3, #93	; 0x5d
 8002f5e:	2205      	movs	r2, #5
 8002f60:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2310      	movs	r3, #16
 8002f72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	461a      	mov	r2, r3
 8002f82:	2308      	movs	r3, #8
 8002f84:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f004 fb76 	bl	8007682 <USB_HC_Halt>
 8002f96:	e040      	b.n	800301a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fae:	d134      	bne.n	800301a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	0151      	lsls	r1, r2, #5
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	440a      	add	r2, r1
 8002fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 fb51 	bl	8007682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	461a      	mov	r2, r3
 8002fee:	2310      	movs	r3, #16
 8002ff0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	335d      	adds	r3, #93	; 0x5d
 8003002:	2208      	movs	r2, #8
 8003004:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4413      	add	r3, r2
 800300e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003012:	461a      	mov	r2, r3
 8003014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003018:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003030:	d122      	bne.n	8003078 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	0151      	lsls	r1, r2, #5
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	440a      	add	r2, r1
 8003048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f004 fb10 	bl	8007682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306e:	461a      	mov	r2, r3
 8003070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003074:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003076:	e300      	b.n	800367a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	f040 80fd 	bne.w	800328a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	440b      	add	r3, r1
 80030a6:	3348      	adds	r3, #72	; 0x48
 80030a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	0159      	lsls	r1, r3, #5
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	440b      	add	r3, r1
 80030b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80030bc:	1ad1      	subs	r1, r2, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4403      	add	r3, r0
 80030cc:	334c      	adds	r3, #76	; 0x4c
 80030ce:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	440b      	add	r3, r1
 80030de:	335d      	adds	r3, #93	; 0x5d
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	3358      	adds	r3, #88	; 0x58
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003104:	461a      	mov	r2, r3
 8003106:	2301      	movs	r3, #1
 8003108:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	333f      	adds	r3, #63	; 0x3f
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	333f      	adds	r3, #63	; 0x3f
 8003130:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003132:	2b02      	cmp	r3, #2
 8003134:	d121      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	0151      	lsls	r1, r2, #5
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	440a      	add	r2, r1
 800314c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f004 fa8e 	bl	8007682 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	461a      	mov	r2, r3
 8003174:	2310      	movs	r3, #16
 8003176:	6093      	str	r3, [r2, #8]
 8003178:	e070      	b.n	800325c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	333f      	adds	r3, #63	; 0x3f
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d12a      	bne.n	80031e6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	0151      	lsls	r1, r2, #5
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	440a      	add	r2, r1
 80031a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	335c      	adds	r3, #92	; 0x5c
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	b2d8      	uxtb	r0, r3
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	440b      	add	r3, r1
 80031d6:	335c      	adds	r3, #92	; 0x5c
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	4601      	mov	r1, r0
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f00a f92e 	bl	800d440 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031e4:	e03a      	b.n	800325c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	333f      	adds	r3, #63	; 0x3f
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d12f      	bne.n	800325c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	440b      	add	r3, r1
 800320a:	335c      	adds	r3, #92	; 0x5c
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	3350      	adds	r3, #80	; 0x50
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	f083 0301 	eor.w	r3, r3, #1
 8003226:	b2d8      	uxtb	r0, r3
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	440b      	add	r3, r1
 8003236:	3350      	adds	r3, #80	; 0x50
 8003238:	4602      	mov	r2, r0
 800323a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	b2d8      	uxtb	r0, r3
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	335c      	adds	r3, #92	; 0x5c
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	4601      	mov	r1, r0
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f00a f8f2 	bl	800d440 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	3350      	adds	r3, #80	; 0x50
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2d8      	uxtb	r0, r3
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	440b      	add	r3, r1
 8003282:	3350      	adds	r3, #80	; 0x50
 8003284:	4602      	mov	r2, r0
 8003286:	701a      	strb	r2, [r3, #0]
}
 8003288:	e1f7      	b.n	800367a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b02      	cmp	r3, #2
 800329e:	f040 811a 	bne.w	80034d6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	0151      	lsls	r1, r2, #5
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	440a      	add	r2, r1
 80032b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032bc:	f023 0302 	bic.w	r3, r3, #2
 80032c0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	335d      	adds	r3, #93	; 0x5d
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d10a      	bne.n	80032ee <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	335c      	adds	r3, #92	; 0x5c
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e0d9      	b.n	80034a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	440b      	add	r3, r1
 80032fc:	335d      	adds	r3, #93	; 0x5d
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d10a      	bne.n	800331a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	335c      	adds	r3, #92	; 0x5c
 8003314:	2205      	movs	r2, #5
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e0c3      	b.n	80034a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	335d      	adds	r3, #93	; 0x5d
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b06      	cmp	r3, #6
 800332e:	d00a      	beq.n	8003346 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	335d      	adds	r3, #93	; 0x5d
 8003340:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003342:	2b08      	cmp	r3, #8
 8003344:	d156      	bne.n	80033f4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	3358      	adds	r3, #88	; 0x58
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	1c59      	adds	r1, r3, #1
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4403      	add	r3, r0
 8003368:	3358      	adds	r3, #88	; 0x58
 800336a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	3358      	adds	r3, #88	; 0x58
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b03      	cmp	r3, #3
 8003380:	d914      	bls.n	80033ac <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	440b      	add	r3, r1
 8003390:	3358      	adds	r3, #88	; 0x58
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	335c      	adds	r3, #92	; 0x5c
 80033a6:	2204      	movs	r2, #4
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e009      	b.n	80033c0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	335c      	adds	r3, #92	; 0x5c
 80033bc:	2202      	movs	r2, #2
 80033be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	461a      	mov	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e056      	b.n	80034a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	335d      	adds	r3, #93	; 0x5d
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b03      	cmp	r3, #3
 8003408:	d123      	bne.n	8003452 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	440b      	add	r3, r1
 8003418:	335c      	adds	r3, #92	; 0x5c
 800341a:	2202      	movs	r2, #2
 800341c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003434:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800343c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	e027      	b.n	80034a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	335d      	adds	r3, #93	; 0x5d
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b07      	cmp	r3, #7
 8003466:	d11c      	bne.n	80034a2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	3358      	adds	r3, #88	; 0x58
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1c59      	adds	r1, r3, #1
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4403      	add	r3, r0
 800348a:	3358      	adds	r3, #88	; 0x58
 800348c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	335c      	adds	r3, #92	; 0x5c
 800349e:	2204      	movs	r2, #4
 80034a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	461a      	mov	r2, r3
 80034b0:	2302      	movs	r3, #2
 80034b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	b2d8      	uxtb	r0, r3
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	335c      	adds	r3, #92	; 0x5c
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	4601      	mov	r1, r0
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f009 ffb6 	bl	800d440 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034d4:	e0d1      	b.n	800367a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d13e      	bne.n	800356a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	0151      	lsls	r1, r2, #5
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	440a      	add	r2, r1
 8003502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003506:	f043 0302 	orr.w	r3, r3, #2
 800350a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	440b      	add	r3, r1
 800351a:	3358      	adds	r3, #88	; 0x58
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	1c59      	adds	r1, r3, #1
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4403      	add	r3, r0
 800352e:	3358      	adds	r3, #88	; 0x58
 8003530:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	440b      	add	r3, r1
 8003540:	335d      	adds	r3, #93	; 0x5d
 8003542:	2206      	movs	r2, #6
 8003544:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f004 f896 	bl	8007682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003562:	461a      	mov	r2, r3
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	6093      	str	r3, [r2, #8]
}
 8003568:	e087      	b.n	800367a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b10      	cmp	r3, #16
 800357e:	d17c      	bne.n	800367a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	333f      	adds	r3, #63	; 0x3f
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d122      	bne.n	80035dc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	3358      	adds	r3, #88	; 0x58
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	0151      	lsls	r1, r2, #5
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	440a      	add	r2, r1
 80035c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f004 f854 	bl	8007682 <USB_HC_Halt>
 80035da:	e045      	b.n	8003668 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	440b      	add	r3, r1
 80035ea:	333f      	adds	r3, #63	; 0x3f
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	440b      	add	r3, r1
 8003600:	333f      	adds	r3, #63	; 0x3f
 8003602:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003604:	2b02      	cmp	r3, #2
 8003606:	d12f      	bne.n	8003668 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	3358      	adds	r3, #88	; 0x58
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d121      	bne.n	8003668 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	440b      	add	r3, r1
 8003632:	335d      	adds	r3, #93	; 0x5d
 8003634:	2203      	movs	r2, #3
 8003636:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	0151      	lsls	r1, r2, #5
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	440a      	add	r2, r1
 800364e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003652:	f043 0302 	orr.w	r3, r3, #2
 8003656:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f004 f80d 	bl	8007682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003674:	461a      	mov	r2, r3
 8003676:	2310      	movs	r3, #16
 8003678:	6093      	str	r3, [r2, #8]
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d119      	bne.n	80036e6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036be:	461a      	mov	r2, r3
 80036c0:	2304      	movs	r3, #4
 80036c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	0151      	lsls	r1, r2, #5
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	440a      	add	r2, r1
 80036da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036de:	f043 0302 	orr.w	r3, r3, #2
 80036e2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80036e4:	e33e      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d141      	bne.n	8003780 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003708:	461a      	mov	r2, r3
 800370a:	2320      	movs	r3, #32
 800370c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	440b      	add	r3, r1
 800371c:	333d      	adds	r3, #61	; 0x3d
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	f040 831f 	bne.w	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	333d      	adds	r3, #61	; 0x3d
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	440b      	add	r3, r1
 8003748:	335c      	adds	r3, #92	; 0x5c
 800374a:	2202      	movs	r2, #2
 800374c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	440a      	add	r2, r1
 8003764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f003 ff82 	bl	8007682 <USB_HC_Halt>
}
 800377e:	e2f1      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d13f      	bne.n	8003816 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	335d      	adds	r3, #93	; 0x5d
 80037a6:	2204      	movs	r2, #4
 80037a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	333d      	adds	r3, #61	; 0x3d
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	440b      	add	r3, r1
 80037cc:	3358      	adds	r3, #88	; 0x58
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	0151      	lsls	r1, r2, #5
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	440a      	add	r2, r1
 80037e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f003 ff40 	bl	8007682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	461a      	mov	r2, r3
 8003810:	2340      	movs	r3, #64	; 0x40
 8003812:	6093      	str	r3, [r2, #8]
}
 8003814:	e2a6      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382c:	d122      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	440a      	add	r2, r1
 8003844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f003 ff12 	bl	8007682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386a:	461a      	mov	r2, r3
 800386c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003870:	6093      	str	r3, [r2, #8]
}
 8003872:	e277      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d135      	bne.n	80038f6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	440b      	add	r3, r1
 8003898:	3358      	adds	r3, #88	; 0x58
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	0151      	lsls	r1, r2, #5
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	440a      	add	r2, r1
 80038b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f003 feda 	bl	8007682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038da:	461a      	mov	r2, r3
 80038dc:	2301      	movs	r3, #1
 80038de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	440b      	add	r3, r1
 80038ee:	335d      	adds	r3, #93	; 0x5d
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
}
 80038f4:	e236      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b08      	cmp	r3, #8
 800390a:	d12b      	bne.n	8003964 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4413      	add	r3, r2
 8003914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003918:	461a      	mov	r2, r3
 800391a:	2308      	movs	r3, #8
 800391c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	0151      	lsls	r1, r2, #5
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	440a      	add	r2, r1
 8003934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f003 fe9a 	bl	8007682 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	440b      	add	r3, r1
 800395c:	335d      	adds	r3, #93	; 0x5d
 800395e:	2205      	movs	r2, #5
 8003960:	701a      	strb	r2, [r3, #0]
}
 8003962:	e1ff      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b10      	cmp	r3, #16
 8003978:	d155      	bne.n	8003a26 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	3358      	adds	r3, #88	; 0x58
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	440b      	add	r3, r1
 800399c:	335d      	adds	r3, #93	; 0x5d
 800399e:	2203      	movs	r2, #3
 80039a0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	333d      	adds	r3, #61	; 0x3d
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d114      	bne.n	80039e2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	333c      	adds	r3, #60	; 0x3c
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	440b      	add	r3, r1
 80039dc:	333d      	adds	r3, #61	; 0x3d
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	0151      	lsls	r1, r2, #5
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	440a      	add	r2, r1
 80039f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 fe38 	bl	8007682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2310      	movs	r3, #16
 8003a22:	6093      	str	r3, [r2, #8]
}
 8003a24:	e19e      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	2b80      	cmp	r3, #128	; 0x80
 8003a3a:	d12b      	bne.n	8003a94 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a56:	f043 0302 	orr.w	r3, r3, #2
 8003a5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f003 fe0b 	bl	8007682 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	440b      	add	r3, r1
 8003a7a:	335d      	adds	r3, #93	; 0x5d
 8003a7c:	2206      	movs	r2, #6
 8003a7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	6093      	str	r3, [r2, #8]
}
 8003a92:	e167      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d135      	bne.n	8003b18 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	0151      	lsls	r1, r2, #5
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ac6:	f043 0302 	orr.w	r3, r3, #2
 8003aca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f003 fdd3 	bl	8007682 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2310      	movs	r3, #16
 8003aec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afa:	461a      	mov	r2, r3
 8003afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	335d      	adds	r3, #93	; 0x5d
 8003b12:	2208      	movs	r2, #8
 8003b14:	701a      	strb	r2, [r3, #0]
}
 8003b16:	e125      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	f040 811a 	bne.w	8003d64 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	0151      	lsls	r1, r2, #5
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	440a      	add	r2, r1
 8003b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b4a:	f023 0302 	bic.w	r3, r3, #2
 8003b4e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	335d      	adds	r3, #93	; 0x5d
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d137      	bne.n	8003bd6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	440b      	add	r3, r1
 8003b74:	335c      	adds	r3, #92	; 0x5c
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	440b      	add	r3, r1
 8003b88:	333f      	adds	r3, #63	; 0x3f
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d00b      	beq.n	8003ba8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	440b      	add	r3, r1
 8003b9e:	333f      	adds	r3, #63	; 0x3f
 8003ba0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	f040 80c5 	bne.w	8003d32 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3351      	adds	r3, #81	; 0x51
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	f083 0301 	eor.w	r3, r3, #1
 8003bbe:	b2d8      	uxtb	r0, r3
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	440b      	add	r3, r1
 8003bce:	3351      	adds	r3, #81	; 0x51
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e0ad      	b.n	8003d32 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	335d      	adds	r3, #93	; 0x5d
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d10a      	bne.n	8003c02 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	335c      	adds	r3, #92	; 0x5c
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	e097      	b.n	8003d32 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	335d      	adds	r3, #93	; 0x5d
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d10a      	bne.n	8003c2e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	335c      	adds	r3, #92	; 0x5c
 8003c28:	2202      	movs	r2, #2
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	e081      	b.n	8003d32 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	440b      	add	r3, r1
 8003c3c:	335d      	adds	r3, #93	; 0x5d
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	d10a      	bne.n	8003c5a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	440b      	add	r3, r1
 8003c52:	335c      	adds	r3, #92	; 0x5c
 8003c54:	2205      	movs	r2, #5
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	e06b      	b.n	8003d32 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	440b      	add	r3, r1
 8003c68:	335d      	adds	r3, #93	; 0x5d
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d00a      	beq.n	8003c86 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	440b      	add	r3, r1
 8003c7e:	335d      	adds	r3, #93	; 0x5d
 8003c80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d155      	bne.n	8003d32 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	440b      	add	r3, r1
 8003c94:	3358      	adds	r3, #88	; 0x58
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	1c59      	adds	r1, r3, #1
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4403      	add	r3, r0
 8003ca8:	3358      	adds	r3, #88	; 0x58
 8003caa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	440b      	add	r3, r1
 8003cba:	3358      	adds	r3, #88	; 0x58
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d914      	bls.n	8003cec <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	440b      	add	r3, r1
 8003cd0:	3358      	adds	r3, #88	; 0x58
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	440b      	add	r3, r1
 8003ce4:	335c      	adds	r3, #92	; 0x5c
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e009      	b.n	8003d00 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	440b      	add	r3, r1
 8003cfa:	335c      	adds	r3, #92	; 0x5c
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d16:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d1e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2302      	movs	r3, #2
 8003d42:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	b2d8      	uxtb	r0, r3
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	335c      	adds	r3, #92	; 0x5c
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4601      	mov	r1, r0
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f009 fb6e 	bl	800d440 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d64:	bf00      	nop
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	; 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	0c5b      	lsrs	r3, r3, #17
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003da0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d003      	beq.n	8003db0 <HCD_RXQLVL_IRQHandler+0x44>
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	f000 8082 	beq.w	8003eb2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003dae:	e083      	b.n	8003eb8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d07f      	beq.n	8003eb6 <HCD_RXQLVL_IRQHandler+0x14a>
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3344      	adds	r3, #68	; 0x44
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d074      	beq.n	8003eb6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	440b      	add	r3, r1
 8003dde:	3344      	adds	r3, #68	; 0x44
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	b292      	uxth	r2, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	f002 ffe9 	bl	8006dbe <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	440b      	add	r3, r1
 8003dfa:	3344      	adds	r3, #68	; 0x44
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	18d1      	adds	r1, r2, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4403      	add	r3, r0
 8003e10:	3344      	adds	r3, #68	; 0x44
 8003e12:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	334c      	adds	r3, #76	; 0x4c
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	18d1      	adds	r1, r2, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4403      	add	r3, r0
 8003e38:	334c      	adds	r3, #76	; 0x4c
 8003e3a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HCD_RXQLVL_IRQHandler+0x154>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d031      	beq.n	8003eb6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e68:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e70:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	440b      	add	r3, r1
 8003e92:	3350      	adds	r3, #80	; 0x50
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	f083 0301 	eor.w	r3, r3, #1
 8003e9a:	b2d8      	uxtb	r0, r3
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3350      	adds	r3, #80	; 0x50
 8003eac:	4602      	mov	r2, r0
 8003eae:	701a      	strb	r2, [r3, #0]
      break;
 8003eb0:	e001      	b.n	8003eb6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e000      	b.n	8003eb8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003eb6:	bf00      	nop
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3728      	adds	r7, #40	; 0x28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	1ff80000 	.word	0x1ff80000

08003ec4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ef0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d10b      	bne.n	8003f14 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d102      	bne.n	8003f0c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f009 fa7e 	bl	800d408 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f043 0302 	orr.w	r3, r3, #2
 8003f12:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d132      	bne.n	8003f84 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f043 0308 	orr.w	r3, r3, #8
 8003f24:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d126      	bne.n	8003f7e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d113      	bne.n	8003f60 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f42:	d106      	bne.n	8003f52 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2102      	movs	r1, #2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f003 f872 	bl	8007034 <USB_InitFSLSPClkSel>
 8003f50:	e011      	b.n	8003f76 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f003 f86b 	bl	8007034 <USB_InitFSLSPClkSel>
 8003f5e:	e00a      	b.n	8003f76 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d106      	bne.n	8003f76 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f74:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f009 fa70 	bl	800d45c <HAL_HCD_PortEnabled_Callback>
 8003f7c:	e002      	b.n	8003f84 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f009 fa7a 	bl	800d478 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d103      	bne.n	8003f96 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f043 0320 	orr.w	r3, r3, #32
 8003f94:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	6013      	str	r3, [r2, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e11f      	b.n	80041fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd fa04 	bl	80013e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2224      	movs	r2, #36	; 0x24
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800400e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004010:	f002 fc2c 	bl	800686c <HAL_RCC_GetPCLK1Freq>
 8004014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4a7b      	ldr	r2, [pc, #492]	; (8004208 <HAL_I2C_Init+0x25c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d807      	bhi.n	8004030 <HAL_I2C_Init+0x84>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a7a      	ldr	r2, [pc, #488]	; (800420c <HAL_I2C_Init+0x260>)
 8004024:	4293      	cmp	r3, r2
 8004026:	bf94      	ite	ls
 8004028:	2301      	movls	r3, #1
 800402a:	2300      	movhi	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e006      	b.n	800403e <HAL_I2C_Init+0x92>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a77      	ldr	r2, [pc, #476]	; (8004210 <HAL_I2C_Init+0x264>)
 8004034:	4293      	cmp	r3, r2
 8004036:	bf94      	ite	ls
 8004038:	2301      	movls	r3, #1
 800403a:	2300      	movhi	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0db      	b.n	80041fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4a72      	ldr	r2, [pc, #456]	; (8004214 <HAL_I2C_Init+0x268>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0c9b      	lsrs	r3, r3, #18
 8004050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4a64      	ldr	r2, [pc, #400]	; (8004208 <HAL_I2C_Init+0x25c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d802      	bhi.n	8004080 <HAL_I2C_Init+0xd4>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	3301      	adds	r3, #1
 800407e:	e009      	b.n	8004094 <HAL_I2C_Init+0xe8>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004086:	fb02 f303 	mul.w	r3, r2, r3
 800408a:	4a63      	ldr	r2, [pc, #396]	; (8004218 <HAL_I2C_Init+0x26c>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	099b      	lsrs	r3, r3, #6
 8004092:	3301      	adds	r3, #1
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	430b      	orrs	r3, r1
 800409a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4956      	ldr	r1, [pc, #344]	; (8004208 <HAL_I2C_Init+0x25c>)
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d80d      	bhi.n	80040d0 <HAL_I2C_Init+0x124>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1e59      	subs	r1, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c2:	3301      	adds	r3, #1
 80040c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	bf38      	it	cc
 80040cc:	2304      	movcc	r3, #4
 80040ce:	e04f      	b.n	8004170 <HAL_I2C_Init+0x1c4>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d111      	bne.n	80040fc <HAL_I2C_Init+0x150>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1e58      	subs	r0, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	440b      	add	r3, r1
 80040e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e012      	b.n	8004122 <HAL_I2C_Init+0x176>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1e58      	subs	r0, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6859      	ldr	r1, [r3, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	0099      	lsls	r1, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004112:	3301      	adds	r3, #1
 8004114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Init+0x17e>
 8004126:	2301      	movs	r3, #1
 8004128:	e022      	b.n	8004170 <HAL_I2C_Init+0x1c4>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10e      	bne.n	8004150 <HAL_I2C_Init+0x1a4>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1e58      	subs	r0, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	440b      	add	r3, r1
 8004140:	fbb0 f3f3 	udiv	r3, r0, r3
 8004144:	3301      	adds	r3, #1
 8004146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414e:	e00f      	b.n	8004170 <HAL_I2C_Init+0x1c4>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1e58      	subs	r0, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	0099      	lsls	r1, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	fbb0 f3f3 	udiv	r3, r0, r3
 8004166:	3301      	adds	r3, #1
 8004168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	6809      	ldr	r1, [r1, #0]
 8004174:	4313      	orrs	r3, r2
 8004176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800419e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6911      	ldr	r1, [r2, #16]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68d2      	ldr	r2, [r2, #12]
 80041aa:	4311      	orrs	r1, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	000186a0 	.word	0x000186a0
 800420c:	001e847f 	.word	0x001e847f
 8004210:	003d08ff 	.word	0x003d08ff
 8004214:	431bde83 	.word	0x431bde83
 8004218:	10624dd3 	.word	0x10624dd3

0800421c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	461a      	mov	r2, r3
 8004228:	460b      	mov	r3, r1
 800422a:	817b      	strh	r3, [r7, #10]
 800422c:	4613      	mov	r3, r2
 800422e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004230:	f7fd fae2 	bl	80017f8 <HAL_GetTick>
 8004234:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b20      	cmp	r3, #32
 8004240:	f040 80e0 	bne.w	8004404 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2319      	movs	r3, #25
 800424a:	2201      	movs	r2, #1
 800424c:	4970      	ldr	r1, [pc, #448]	; (8004410 <HAL_I2C_Master_Transmit+0x1f4>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fc58 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
 800425c:	e0d3      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_I2C_Master_Transmit+0x50>
 8004268:	2302      	movs	r3, #2
 800426a:	e0cc      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d007      	beq.n	8004292 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2221      	movs	r2, #33	; 0x21
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2210      	movs	r2, #16
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	893a      	ldrh	r2, [r7, #8]
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a50      	ldr	r2, [pc, #320]	; (8004414 <HAL_I2C_Master_Transmit+0x1f8>)
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042d4:	8979      	ldrh	r1, [r7, #10]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	6a3a      	ldr	r2, [r7, #32]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fac2 	bl	8004864 <I2C_MasterRequestWrite>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e08d      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004300:	e066      	b.n	80043d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	6a39      	ldr	r1, [r7, #32]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fcd2 	bl	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00d      	beq.n	800432e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b04      	cmp	r3, #4
 8004318:	d107      	bne.n	800432a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e06b      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d11b      	bne.n	80043a4 <HAL_I2C_Master_Transmit+0x188>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	d017      	beq.n	80043a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	6a39      	ldr	r1, [r7, #32]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fcc2 	bl	8004d32 <I2C_WaitOnBTFFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d107      	bne.n	80043cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e01a      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d194      	bne.n	8004302 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	00100002 	.word	0x00100002
 8004414:	ffff0000 	.word	0xffff0000

08004418 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08c      	sub	sp, #48	; 0x30
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	461a      	mov	r2, r3
 8004424:	460b      	mov	r3, r1
 8004426:	817b      	strh	r3, [r7, #10]
 8004428:	4613      	mov	r3, r2
 800442a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800442c:	f7fd f9e4 	bl	80017f8 <HAL_GetTick>
 8004430:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b20      	cmp	r3, #32
 800443c:	f040 820b 	bne.w	8004856 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2319      	movs	r3, #25
 8004446:	2201      	movs	r2, #1
 8004448:	497c      	ldr	r1, [pc, #496]	; (800463c <HAL_I2C_Master_Receive+0x224>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fb5a 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
 8004458:	e1fe      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_I2C_Master_Receive+0x50>
 8004464:	2302      	movs	r3, #2
 8004466:	e1f7      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d007      	beq.n	800448e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2222      	movs	r2, #34	; 0x22
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2210      	movs	r2, #16
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	893a      	ldrh	r2, [r7, #8]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a5c      	ldr	r2, [pc, #368]	; (8004640 <HAL_I2C_Master_Receive+0x228>)
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044d0:	8979      	ldrh	r1, [r7, #10]
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fa46 	bl	8004968 <I2C_MasterRequestRead>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1b8      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d113      	bne.n	8004516 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	623b      	str	r3, [r7, #32]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e18c      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451a:	2b01      	cmp	r3, #1
 800451c:	d11b      	bne.n	8004556 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e16c      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455a:	2b02      	cmp	r3, #2
 800455c:	d11b      	bne.n	8004596 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	e14c      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045bc:	e138      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	f200 80f1 	bhi.w	80047aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d123      	bne.n	8004618 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fbed 	bl	8004db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e139      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004616:	e10b      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	2b02      	cmp	r3, #2
 800461e:	d14e      	bne.n	80046be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	2200      	movs	r2, #0
 8004628:	4906      	ldr	r1, [pc, #24]	; (8004644 <HAL_I2C_Master_Receive+0x22c>)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fa6a 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e10e      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
 800463a:	bf00      	nop
 800463c:	00100002 	.word	0x00100002
 8004640:	ffff0000 	.word	0xffff0000
 8004644:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046bc:	e0b8      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	2200      	movs	r2, #0
 80046c6:	4966      	ldr	r1, [pc, #408]	; (8004860 <HAL_I2C_Master_Receive+0x448>)
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fa1b 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0bf      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	2200      	movs	r2, #0
 8004722:	494f      	ldr	r1, [pc, #316]	; (8004860 <HAL_I2C_Master_Receive+0x448>)
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f9ed 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e091      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047a8:	e042      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fb00 	bl	8004db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e04c      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d118      	bne.n	8004830 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	f47f aec2 	bne.w	80045be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3728      	adds	r7, #40	; 0x28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	00010004 	.word	0x00010004

08004864 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	460b      	mov	r3, r1
 8004872:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d006      	beq.n	800488e <I2C_MasterRequestWrite+0x2a>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d003      	beq.n	800488e <I2C_MasterRequestWrite+0x2a>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800488c:	d108      	bne.n	80048a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e00b      	b.n	80048b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	2b12      	cmp	r3, #18
 80048a6:	d107      	bne.n	80048b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f91d 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048de:	d103      	bne.n	80048e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e035      	b.n	8004958 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048f4:	d108      	bne.n	8004908 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048f6:	897b      	ldrh	r3, [r7, #10]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004904:	611a      	str	r2, [r3, #16]
 8004906:	e01b      	b.n	8004940 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004908:	897b      	ldrh	r3, [r7, #10]
 800490a:	11db      	asrs	r3, r3, #7
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f003 0306 	and.w	r3, r3, #6
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f063 030f 	orn	r3, r3, #15
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	490e      	ldr	r1, [pc, #56]	; (8004960 <I2C_MasterRequestWrite+0xfc>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f943 	bl	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e010      	b.n	8004958 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004936:	897b      	ldrh	r3, [r7, #10]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4907      	ldr	r1, [pc, #28]	; (8004964 <I2C_MasterRequestWrite+0x100>)
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f933 	bl	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	00010008 	.word	0x00010008
 8004964:	00010002 	.word	0x00010002

08004968 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	460b      	mov	r3, r1
 8004976:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800498c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d006      	beq.n	80049a2 <I2C_MasterRequestRead+0x3a>
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d003      	beq.n	80049a2 <I2C_MasterRequestRead+0x3a>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049a0:	d108      	bne.n	80049b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e00b      	b.n	80049cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	2b11      	cmp	r3, #17
 80049ba:	d107      	bne.n	80049cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f893 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00d      	beq.n	8004a00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f2:	d103      	bne.n	80049fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e079      	b.n	8004af4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a08:	d108      	bne.n	8004a1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	611a      	str	r2, [r3, #16]
 8004a1a:	e05f      	b.n	8004adc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a1c:	897b      	ldrh	r3, [r7, #10]
 8004a1e:	11db      	asrs	r3, r3, #7
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 0306 	and.w	r3, r3, #6
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f063 030f 	orn	r3, r3, #15
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4930      	ldr	r1, [pc, #192]	; (8004afc <I2C_MasterRequestRead+0x194>)
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f8b9 	bl	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e054      	b.n	8004af4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a4a:	897b      	ldrh	r3, [r7, #10]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4929      	ldr	r1, [pc, #164]	; (8004b00 <I2C_MasterRequestRead+0x198>)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f8a9 	bl	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e044      	b.n	8004af4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f831 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab6:	d103      	bne.n	8004ac0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e017      	b.n	8004af4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ac4:	897b      	ldrh	r3, [r7, #10]
 8004ac6:	11db      	asrs	r3, r3, #7
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 0306 	and.w	r3, r3, #6
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f063 030e 	orn	r3, r3, #14
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4907      	ldr	r1, [pc, #28]	; (8004b00 <I2C_MasterRequestRead+0x198>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f865 	bl	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	00010008 	.word	0x00010008
 8004b00:	00010002 	.word	0x00010002

08004b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b14:	e025      	b.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d021      	beq.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1e:	f7fc fe6b 	bl	80017f8 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d116      	bne.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f043 0220 	orr.w	r2, r3, #32
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e023      	b.n	8004baa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10d      	bne.n	8004b88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	43da      	mvns	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4013      	ands	r3, r2
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf0c      	ite	eq
 8004b7e:	2301      	moveq	r3, #1
 8004b80:	2300      	movne	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	e00c      	b.n	8004ba2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d0b6      	beq.n	8004b16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bc0:	e051      	b.n	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd0:	d123      	bne.n	8004c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f043 0204 	orr.w	r2, r3, #4
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e046      	b.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d021      	beq.n	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c22:	f7fc fde9 	bl	80017f8 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d302      	bcc.n	8004c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d116      	bne.n	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f043 0220 	orr.w	r2, r3, #32
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e020      	b.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d10c      	bne.n	8004c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	43da      	mvns	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bf14      	ite	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	2300      	moveq	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e00b      	b.n	8004ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	43da      	mvns	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4013      	ands	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf14      	ite	ne
 8004c9c:	2301      	movne	r3, #1
 8004c9e:	2300      	moveq	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d18d      	bne.n	8004bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cbc:	e02d      	b.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f8ce 	bl	8004e60 <I2C_IsAcknowledgeFailed>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e02d      	b.n	8004d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d021      	beq.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd6:	f7fc fd8f 	bl	80017f8 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d116      	bne.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e007      	b.n	8004d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d1ca      	bne.n	8004cbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d3e:	e02d      	b.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f88d 	bl	8004e60 <I2C_IsAcknowledgeFailed>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e02d      	b.n	8004dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d56:	d021      	beq.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d58:	f7fc fd4e 	bl	80017f8 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d302      	bcc.n	8004d6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d116      	bne.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e007      	b.n	8004dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d1ca      	bne.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dc0:	e042      	b.n	8004e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d119      	bne.n	8004e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0210 	mvn.w	r2, #16
 8004dd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e029      	b.n	8004e58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e04:	f7fc fcf8 	bl	80017f8 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d302      	bcc.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d116      	bne.n	8004e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e007      	b.n	8004e58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d1b5      	bne.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e76:	d11b      	bne.n	8004eb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	f043 0204 	orr.w	r2, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
	...

08004ec0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e128      	b.n	8005124 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a90      	ldr	r2, [pc, #576]	; (800512c <HAL_I2S_Init+0x26c>)
 8004eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fc fabf 	bl	8001470 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f08:	f023 030f 	bic.w	r3, r3, #15
 8004f0c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2202      	movs	r2, #2
 8004f14:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d060      	beq.n	8004fe0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f26:	2310      	movs	r3, #16
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	e001      	b.n	8004f30 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d802      	bhi.n	8004f3e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004f3e:	2001      	movs	r0, #1
 8004f40:	f001 fdb6 	bl	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f44:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f4e:	d125      	bne.n	8004f9c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d010      	beq.n	8004f7a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	3305      	adds	r3, #5
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	e01f      	b.n	8004fba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	3305      	adds	r3, #5
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	e00e      	b.n	8004fba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	461a      	mov	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb6:	3305      	adds	r3, #5
 8004fb8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4a5c      	ldr	r2, [pc, #368]	; (8005130 <HAL_I2S_Init+0x270>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	08db      	lsrs	r3, r3, #3
 8004fc4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	e003      	b.n	8004fe8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d902      	bls.n	8004ff4 <HAL_I2S_Init+0x134>
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	2bff      	cmp	r3, #255	; 0xff
 8004ff2:	d907      	bls.n	8005004 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff8:	f043 0210 	orr.w	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e08f      	b.n	8005124 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	ea42 0103 	orr.w	r1, r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	430a      	orrs	r2, r1
 8005016:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005022:	f023 030f 	bic.w	r3, r3, #15
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6851      	ldr	r1, [r2, #4]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6892      	ldr	r2, [r2, #8]
 800502e:	4311      	orrs	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	68d2      	ldr	r2, [r2, #12]
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6992      	ldr	r2, [r2, #24]
 800503a:	430a      	orrs	r2, r1
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005046:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d161      	bne.n	8005114 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a38      	ldr	r2, [pc, #224]	; (8005134 <HAL_I2S_Init+0x274>)
 8005054:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a37      	ldr	r2, [pc, #220]	; (8005138 <HAL_I2S_Init+0x278>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <HAL_I2S_Init+0x1a4>
 8005060:	4b36      	ldr	r3, [pc, #216]	; (800513c <HAL_I2S_Init+0x27c>)
 8005062:	e001      	b.n	8005068 <HAL_I2S_Init+0x1a8>
 8005064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	4932      	ldr	r1, [pc, #200]	; (8005138 <HAL_I2S_Init+0x278>)
 8005070:	428a      	cmp	r2, r1
 8005072:	d101      	bne.n	8005078 <HAL_I2S_Init+0x1b8>
 8005074:	4a31      	ldr	r2, [pc, #196]	; (800513c <HAL_I2S_Init+0x27c>)
 8005076:	e001      	b.n	800507c <HAL_I2S_Init+0x1bc>
 8005078:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800507c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005080:	f023 030f 	bic.w	r3, r3, #15
 8005084:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2b      	ldr	r2, [pc, #172]	; (8005138 <HAL_I2S_Init+0x278>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d101      	bne.n	8005094 <HAL_I2S_Init+0x1d4>
 8005090:	4b2a      	ldr	r3, [pc, #168]	; (800513c <HAL_I2S_Init+0x27c>)
 8005092:	e001      	b.n	8005098 <HAL_I2S_Init+0x1d8>
 8005094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005098:	2202      	movs	r2, #2
 800509a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a25      	ldr	r2, [pc, #148]	; (8005138 <HAL_I2S_Init+0x278>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d101      	bne.n	80050aa <HAL_I2S_Init+0x1ea>
 80050a6:	4b25      	ldr	r3, [pc, #148]	; (800513c <HAL_I2S_Init+0x27c>)
 80050a8:	e001      	b.n	80050ae <HAL_I2S_Init+0x1ee>
 80050aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ba:	d003      	beq.n	80050c4 <HAL_I2S_Init+0x204>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80050c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	e001      	b.n	80050d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	b299      	uxth	r1, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80050e6:	4303      	orrs	r3, r0
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	430b      	orrs	r3, r1
 80050ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80050ee:	4313      	orrs	r3, r2
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	897b      	ldrh	r3, [r7, #10]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <HAL_I2S_Init+0x278>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_I2S_Init+0x24c>
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <HAL_I2S_Init+0x27c>)
 800510a:	e001      	b.n	8005110 <HAL_I2S_Init+0x250>
 800510c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005110:	897a      	ldrh	r2, [r7, #10]
 8005112:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	080059bd 	.word	0x080059bd
 8005130:	cccccccd 	.word	0xcccccccd
 8005134:	08005b45 	.word	0x08005b45
 8005138:	40003800 	.word	0x40003800
 800513c:	40003400 	.word	0x40003400

08005140 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_I2S_Transmit_DMA+0x1a>
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e08e      	b.n	800527c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_I2S_Transmit_DMA+0x2e>
 800516a:	2302      	movs	r3, #2
 800516c:	e086      	b.n	800527c <HAL_I2S_Transmit_DMA+0x13c>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d005      	beq.n	800518e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
 800518c:	e076      	b.n	800527c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2203      	movs	r2, #3
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d002      	beq.n	80051ba <HAL_I2S_Transmit_DMA+0x7a>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d10a      	bne.n	80051d0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80051c4:	88fb      	ldrh	r3, [r7, #6]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051ce:	e005      	b.n	80051dc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	4a28      	ldr	r2, [pc, #160]	; (8005284 <HAL_I2S_Transmit_DMA+0x144>)
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	4a27      	ldr	r2, [pc, #156]	; (8005288 <HAL_I2S_Transmit_DMA+0x148>)
 80051ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	4a26      	ldr	r2, [pc, #152]	; (800528c <HAL_I2S_Transmit_DMA+0x14c>)
 80051f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80051fc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005204:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800520c:	f7fc fce2 	bl	8001bd4 <HAL_DMA_Start_IT>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00f      	beq.n	8005236 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f043 0208 	orr.w	r2, r3, #8
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e022      	b.n	800527c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005240:	2b00      	cmp	r3, #0
 8005242:	d107      	bne.n	8005254 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005252:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0202 	orr.w	r2, r2, #2
 8005270:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	0800589b 	.word	0x0800589b
 8005288:	08005859 	.word	0x08005859
 800528c:	080058b7 	.word	0x080058b7

08005290 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_I2S_DMAPause+0x18>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e04a      	b.n	800533e <HAL_I2S_DMAPause+0xae>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d108      	bne.n	80052ce <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0202 	bic.w	r2, r2, #2
 80052ca:	605a      	str	r2, [r3, #4]
 80052cc:	e032      	b.n	8005334 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d108      	bne.n	80052ec <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	e023      	b.n	8005334 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b05      	cmp	r3, #5
 80052f6:	d11d      	bne.n	8005334 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0203 	bic.w	r2, r2, #3
 8005306:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0f      	ldr	r2, [pc, #60]	; (800534c <HAL_I2S_DMAPause+0xbc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <HAL_I2S_DMAPause+0x86>
 8005312:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <HAL_I2S_DMAPause+0xc0>)
 8005314:	e001      	b.n	800531a <HAL_I2S_DMAPause+0x8a>
 8005316:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	490a      	ldr	r1, [pc, #40]	; (800534c <HAL_I2S_DMAPause+0xbc>)
 8005322:	428b      	cmp	r3, r1
 8005324:	d101      	bne.n	800532a <HAL_I2S_DMAPause+0x9a>
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <HAL_I2S_DMAPause+0xc0>)
 8005328:	e001      	b.n	800532e <HAL_I2S_DMAPause+0x9e>
 800532a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800532e:	f022 0203 	bic.w	r2, r2, #3
 8005332:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40003800 	.word	0x40003800
 8005350:	40003400 	.word	0x40003400

08005354 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_I2S_DMAResume+0x18>
 8005368:	2302      	movs	r3, #2
 800536a:	e07d      	b.n	8005468 <HAL_I2S_DMAResume+0x114>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b03      	cmp	r3, #3
 800537e:	d108      	bne.n	8005392 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0202 	orr.w	r2, r2, #2
 800538e:	605a      	str	r2, [r3, #4]
 8005390:	e056      	b.n	8005440 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b04      	cmp	r3, #4
 800539c:	d108      	bne.n	80053b0 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	e047      	b.n	8005440 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b05      	cmp	r3, #5
 80053ba:	d141      	bne.n	8005440 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0203 	orr.w	r2, r2, #3
 80053ca:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a28      	ldr	r2, [pc, #160]	; (8005474 <HAL_I2S_DMAResume+0x120>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d101      	bne.n	80053da <HAL_I2S_DMAResume+0x86>
 80053d6:	4b28      	ldr	r3, [pc, #160]	; (8005478 <HAL_I2S_DMAResume+0x124>)
 80053d8:	e001      	b.n	80053de <HAL_I2S_DMAResume+0x8a>
 80053da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4923      	ldr	r1, [pc, #140]	; (8005474 <HAL_I2S_DMAResume+0x120>)
 80053e6:	428b      	cmp	r3, r1
 80053e8:	d101      	bne.n	80053ee <HAL_I2S_DMAResume+0x9a>
 80053ea:	4b23      	ldr	r3, [pc, #140]	; (8005478 <HAL_I2S_DMAResume+0x124>)
 80053ec:	e001      	b.n	80053f2 <HAL_I2S_DMAResume+0x9e>
 80053ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053f2:	f042 0203 	orr.w	r2, r2, #3
 80053f6:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <HAL_I2S_DMAResume+0x120>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <HAL_I2S_DMAResume+0xb2>
 8005402:	4b1d      	ldr	r3, [pc, #116]	; (8005478 <HAL_I2S_DMAResume+0x124>)
 8005404:	e001      	b.n	800540a <HAL_I2S_DMAResume+0xb6>
 8005406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005410:	2b00      	cmp	r3, #0
 8005412:	d115      	bne.n	8005440 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a16      	ldr	r2, [pc, #88]	; (8005474 <HAL_I2S_DMAResume+0x120>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d101      	bne.n	8005422 <HAL_I2S_DMAResume+0xce>
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <HAL_I2S_DMAResume+0x124>)
 8005420:	e001      	b.n	8005426 <HAL_I2S_DMAResume+0xd2>
 8005422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4911      	ldr	r1, [pc, #68]	; (8005474 <HAL_I2S_DMAResume+0x120>)
 800542e:	428b      	cmp	r3, r1
 8005430:	d101      	bne.n	8005436 <HAL_I2S_DMAResume+0xe2>
 8005432:	4b11      	ldr	r3, [pc, #68]	; (8005478 <HAL_I2S_DMAResume+0x124>)
 8005434:	e001      	b.n	800543a <HAL_I2S_DMAResume+0xe6>
 8005436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800543a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800543e:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544a:	2b00      	cmp	r3, #0
 800544c:	d107      	bne.n	800545e <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800545c:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40003800 	.word	0x40003800
 8005478:	40003400 	.word	0x40003400

0800547c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d004      	beq.n	800549c <HAL_I2S_DMAStop+0x20>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 80d1 	bne.w	800563e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00f      	beq.n	80054c4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fc fbeb 	bl	8001c84 <HAL_DMA_Abort>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	f043 0208 	orr.w	r2, r3, #8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80054c4:	2364      	movs	r3, #100	; 0x64
 80054c6:	2201      	movs	r2, #1
 80054c8:	2102      	movs	r1, #2
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fb00 	bl	8005ad0 <I2S_WaitFlagStateUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80054ee:	2364      	movs	r3, #100	; 0x64
 80054f0:	2200      	movs	r2, #0
 80054f2:	2180      	movs	r1, #128	; 0x80
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 faeb 	bl	8005ad0 <I2S_WaitFlagStateUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	f043 0201 	orr.w	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69da      	ldr	r2, [r3, #28]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005526:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0202 	bic.w	r2, r2, #2
 8005544:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b05      	cmp	r3, #5
 8005550:	f040 8165 	bne.w	800581e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00f      	beq.n	800557c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	4618      	mov	r0, r3
 8005562:	f7fc fb8f 	bl	8001c84 <HAL_DMA_Abort>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	f043 0208 	orr.w	r2, r3, #8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a8a      	ldr	r2, [pc, #552]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d101      	bne.n	800558a <HAL_I2S_DMAStop+0x10e>
 8005586:	4b8a      	ldr	r3, [pc, #552]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 8005588:	e001      	b.n	800558e <HAL_I2S_DMAStop+0x112>
 800558a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4985      	ldr	r1, [pc, #532]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 8005596:	428b      	cmp	r3, r1
 8005598:	d101      	bne.n	800559e <HAL_I2S_DMAStop+0x122>
 800559a:	4b85      	ldr	r3, [pc, #532]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 800559c:	e001      	b.n	80055a2 <HAL_I2S_DMAStop+0x126>
 800559e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a6:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80055a8:	2300      	movs	r3, #0
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a7e      	ldr	r2, [pc, #504]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d101      	bne.n	80055ba <HAL_I2S_DMAStop+0x13e>
 80055b6:	4b7e      	ldr	r3, [pc, #504]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80055b8:	e001      	b.n	80055be <HAL_I2S_DMAStop+0x142>
 80055ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a79      	ldr	r2, [pc, #484]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d101      	bne.n	80055d0 <HAL_I2S_DMAStop+0x154>
 80055cc:	4b78      	ldr	r3, [pc, #480]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80055ce:	e001      	b.n	80055d4 <HAL_I2S_DMAStop+0x158>
 80055d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a73      	ldr	r2, [pc, #460]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d101      	bne.n	80055e8 <HAL_I2S_DMAStop+0x16c>
 80055e4:	4b72      	ldr	r3, [pc, #456]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80055e6:	e001      	b.n	80055ec <HAL_I2S_DMAStop+0x170>
 80055e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	496e      	ldr	r1, [pc, #440]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80055f4:	428b      	cmp	r3, r1
 80055f6:	d101      	bne.n	80055fc <HAL_I2S_DMAStop+0x180>
 80055f8:	4b6d      	ldr	r3, [pc, #436]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80055fa:	e001      	b.n	8005600 <HAL_I2S_DMAStop+0x184>
 80055fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10c      	bne.n	8005628 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005626:	e0fa      	b.n	800581e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5f      	ldr	r2, [pc, #380]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d101      	bne.n	8005636 <HAL_I2S_DMAStop+0x1ba>
 8005632:	4b5f      	ldr	r3, [pc, #380]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 8005634:	e001      	b.n	800563a <HAL_I2S_DMAStop+0x1be>
 8005636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800563a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800563c:	e0ef      	b.n	800581e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005646:	d005      	beq.n	8005654 <HAL_I2S_DMAStop+0x1d8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005650:	f040 80e5 	bne.w	800581e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00f      	beq.n	800567c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	4618      	mov	r0, r3
 8005662:	f7fc fb0f 	bl	8001c84 <HAL_DMA_Abort>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	f043 0208 	orr.w	r2, r3, #8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b05      	cmp	r3, #5
 8005686:	f040 809a 	bne.w	80057be <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00f      	beq.n	80056b2 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	4618      	mov	r0, r3
 8005698:	f7fc faf4 	bl	8001c84 <HAL_DMA_Abort>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a6:	f043 0208 	orr.w	r2, r3, #8
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80056b2:	f7fc f8a1 	bl	80017f8 <HAL_GetTick>
 80056b6:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80056b8:	e012      	b.n	80056e0 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80056ba:	f7fc f89d 	bl	80017f8 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b64      	cmp	r3, #100	; 0x64
 80056c6:	d90b      	bls.n	80056e0 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056cc:	f043 0201 	orr.w	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a31      	ldr	r2, [pc, #196]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d101      	bne.n	80056ee <HAL_I2S_DMAStop+0x272>
 80056ea:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80056ec:	e001      	b.n	80056f2 <HAL_I2S_DMAStop+0x276>
 80056ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d1de      	bne.n	80056ba <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80056fc:	e012      	b.n	8005724 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80056fe:	f7fc f87b 	bl	80017f8 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b64      	cmp	r3, #100	; 0x64
 800570a:	d90b      	bls.n	8005724 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005710:	f043 0201 	orr.w	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d101      	bne.n	8005732 <HAL_I2S_DMAStop+0x2b6>
 800572e:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 8005730:	e001      	b.n	8005736 <HAL_I2S_DMAStop+0x2ba>
 8005732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	d0de      	beq.n	80056fe <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d101      	bne.n	800574e <HAL_I2S_DMAStop+0x2d2>
 800574a:	4b19      	ldr	r3, [pc, #100]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 800574c:	e001      	b.n	8005752 <HAL_I2S_DMAStop+0x2d6>
 800574e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4914      	ldr	r1, [pc, #80]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 800575a:	428b      	cmp	r3, r1
 800575c:	d101      	bne.n	8005762 <HAL_I2S_DMAStop+0x2e6>
 800575e:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 8005760:	e001      	b.n	8005766 <HAL_I2S_DMAStop+0x2ea>
 8005762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_I2S_DMAStop+0x302>
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 800577c:	e001      	b.n	8005782 <HAL_I2S_DMAStop+0x306>
 800577e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a07      	ldr	r2, [pc, #28]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <HAL_I2S_DMAStop+0x31a>
 8005792:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 8005794:	e001      	b.n	800579a <HAL_I2S_DMAStop+0x31e>
 8005796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4902      	ldr	r1, [pc, #8]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80057a2:	428b      	cmp	r3, r1
 80057a4:	d106      	bne.n	80057b4 <HAL_I2S_DMAStop+0x338>
 80057a6:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80057a8:	e006      	b.n	80057b8 <HAL_I2S_DMAStop+0x33c>
 80057aa:	bf00      	nop
 80057ac:	40003800 	.word	0x40003800
 80057b0:	40003400 	.word	0x40003400
 80057b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b8:	f022 0202 	bic.w	r2, r2, #2
 80057bc:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057cc:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fc:	d10c      	bne.n	8005818 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	77fb      	strb	r3, [r7, #31]
 8005816:	e002      	b.n	800581e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005826:	7ffb      	ldrb	r3, [r7, #31]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10e      	bne.n	800588c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0202 	bic.w	r2, r2, #2
 800587c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f7fb f95d 	bl	8000b4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005892:	bf00      	nop
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7fb f961 	bl	8000b70 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80058ae:	bf00      	nop
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0203 	bic.w	r2, r2, #3
 80058d2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ec:	f043 0208 	orr.w	r2, r3, #8
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff ffa5 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	881a      	ldrh	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	1c9a      	adds	r2, r3, #2
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10e      	bne.n	8005956 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005946:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7fb f8fb 	bl	8000b4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	b292      	uxth	r2, r2
 8005972:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	1c9a      	adds	r2, r3, #2
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10e      	bne.n	80059b4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff ff3e 	bl	8005830 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d13a      	bne.n	8005a4e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d109      	bne.n	80059f6 <I2S_IRQHandler+0x3a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b40      	cmp	r3, #64	; 0x40
 80059ee:	d102      	bne.n	80059f6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff ffb4 	bl	800595e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d126      	bne.n	8005a4e <I2S_IRQHandler+0x92>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d11f      	bne.n	8005a4e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a1c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	f043 0202 	orr.w	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff fefb 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d136      	bne.n	8005ac8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d109      	bne.n	8005a78 <I2S_IRQHandler+0xbc>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d102      	bne.n	8005a78 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff ff45 	bl	8005902 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d122      	bne.n	8005ac8 <I2S_IRQHandler+0x10c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d11b      	bne.n	8005ac8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a9e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	f043 0204 	orr.w	r2, r3, #4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff febe 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ae0:	f7fb fe8a 	bl	80017f8 <HAL_GetTick>
 8005ae4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005ae6:	e018      	b.n	8005b1a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d014      	beq.n	8005b1a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005af0:	f7fb fe82 	bl	80017f8 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d902      	bls.n	8005b06 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d109      	bne.n	8005b1a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e00f      	b.n	8005b3a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4013      	ands	r3, r2
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	bf0c      	ite	eq
 8005b2a:	2301      	moveq	r3, #1
 8005b2c:	2300      	movne	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d1d7      	bne.n	8005ae8 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4aa2      	ldr	r2, [pc, #648]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005b5e:	4ba2      	ldr	r3, [pc, #648]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b60:	e001      	b.n	8005b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005b62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a9b      	ldr	r2, [pc, #620]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d101      	bne.n	8005b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005b7c:	4b9a      	ldr	r3, [pc, #616]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b7e:	e001      	b.n	8005b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005b80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b90:	d004      	beq.n	8005b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 8099 	bne.w	8005cce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d107      	bne.n	8005bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f925 	bl	8005e00 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d107      	bne.n	8005bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f9c8 	bl	8005f60 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b40      	cmp	r3, #64	; 0x40
 8005bd8:	d13a      	bne.n	8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d035      	beq.n	8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a7e      	ldr	r2, [pc, #504]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005bee:	4b7e      	ldr	r3, [pc, #504]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005bf0:	e001      	b.n	8005bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005bf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4979      	ldr	r1, [pc, #484]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005bfe:	428b      	cmp	r3, r1
 8005c00:	d101      	bne.n	8005c06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005c02:	4b79      	ldr	r3, [pc, #484]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c04:	e001      	b.n	8005c0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c0e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	f043 0202 	orr.w	r2, r3, #2
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff fdfa 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	f040 80be 	bne.w	8005dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 80b8 	beq.w	8005dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a59      	ldr	r2, [pc, #356]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d101      	bne.n	8005c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005c82:	4b59      	ldr	r3, [pc, #356]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c84:	e001      	b.n	8005c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005c86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4954      	ldr	r1, [pc, #336]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c92:	428b      	cmp	r3, r1
 8005c94:	d101      	bne.n	8005c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005c96:	4b54      	ldr	r3, [pc, #336]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c98:	e001      	b.n	8005c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ca2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f043 0204 	orr.w	r2, r3, #4
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fdbc 	bl	8005844 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ccc:	e084      	b.n	8005dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d107      	bne.n	8005ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f8be 	bl	8005e64 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f8fd 	bl	8005efc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d12f      	bne.n	8005d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02a      	beq.n	8005d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d24:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2e      	ldr	r2, [pc, #184]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d101      	bne.n	8005d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005d30:	4b2d      	ldr	r3, [pc, #180]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d32:	e001      	b.n	8005d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4929      	ldr	r1, [pc, #164]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d40:	428b      	cmp	r3, r1
 8005d42:	d101      	bne.n	8005d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005d44:	4b28      	ldr	r3, [pc, #160]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d46:	e001      	b.n	8005d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	f043 0202 	orr.w	r2, r3, #2
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fd6c 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d131      	bne.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02c      	beq.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005d8a:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d8c:	e001      	b.n	8005d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005d8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4912      	ldr	r1, [pc, #72]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d9a:	428b      	cmp	r3, r1
 8005d9c:	d101      	bne.n	8005da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005d9e:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005da0:	e001      	b.n	8005da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005da6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005daa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dba:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	f043 0204 	orr.w	r2, r3, #4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff fd37 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dd6:	e000      	b.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dd8:	bf00      	nop
}
 8005dda:	bf00      	nop
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40003800 	.word	0x40003800
 8005de8:	40003400 	.word	0x40003400

08005dec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	1c99      	adds	r1, r3, #2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6251      	str	r1, [r2, #36]	; 0x24
 8005e12:	881a      	ldrh	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d113      	bne.n	8005e5a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ffc9 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	1c99      	adds	r1, r3, #2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6251      	str	r1, [r2, #36]	; 0x24
 8005e76:	8819      	ldrh	r1, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d101      	bne.n	8005e86 <I2SEx_TxISR_I2SExt+0x22>
 8005e82:	4b1d      	ldr	r3, [pc, #116]	; (8005ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8005e84:	e001      	b.n	8005e8a <I2SEx_TxISR_I2SExt+0x26>
 8005e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d121      	bne.n	8005eea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a12      	ldr	r2, [pc, #72]	; (8005ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d101      	bne.n	8005eb4 <I2SEx_TxISR_I2SExt+0x50>
 8005eb0:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8005eb2:	e001      	b.n	8005eb8 <I2SEx_TxISR_I2SExt+0x54>
 8005eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	490d      	ldr	r1, [pc, #52]	; (8005ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	d101      	bne.n	8005ec8 <I2SEx_TxISR_I2SExt+0x64>
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8005ec6:	e001      	b.n	8005ecc <I2SEx_TxISR_I2SExt+0x68>
 8005ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ecc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ed0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff81 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40003800 	.word	0x40003800
 8005ef8:	40003400 	.word	0x40003400

08005efc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68d8      	ldr	r0, [r3, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	1c99      	adds	r1, r3, #2
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f14:	b282      	uxth	r2, r0
 8005f16:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d113      	bne.n	8005f58 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f3e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff ff4a 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a20      	ldr	r2, [pc, #128]	; (8005ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d101      	bne.n	8005f76 <I2SEx_RxISR_I2SExt+0x16>
 8005f72:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8005f74:	e001      	b.n	8005f7a <I2SEx_RxISR_I2SExt+0x1a>
 8005f76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f7a:	68d8      	ldr	r0, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	1c99      	adds	r1, r3, #2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f86:	b282      	uxth	r2, r0
 8005f88:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d121      	bne.n	8005fe6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d101      	bne.n	8005fb0 <I2SEx_RxISR_I2SExt+0x50>
 8005fac:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8005fae:	e001      	b.n	8005fb4 <I2SEx_RxISR_I2SExt+0x54>
 8005fb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	490d      	ldr	r1, [pc, #52]	; (8005ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	d101      	bne.n	8005fc4 <I2SEx_RxISR_I2SExt+0x64>
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8005fc2:	e001      	b.n	8005fc8 <I2SEx_RxISR_I2SExt+0x68>
 8005fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fcc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ff03 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40003800 	.word	0x40003800
 8005ff4:	40003400 	.word	0x40003400

08005ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e25b      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d075      	beq.n	8006102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006016:	4ba3      	ldr	r3, [pc, #652]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b04      	cmp	r3, #4
 8006020:	d00c      	beq.n	800603c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006022:	4ba0      	ldr	r3, [pc, #640]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800602a:	2b08      	cmp	r3, #8
 800602c:	d112      	bne.n	8006054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800602e:	4b9d      	ldr	r3, [pc, #628]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800603a:	d10b      	bne.n	8006054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603c:	4b99      	ldr	r3, [pc, #612]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d05b      	beq.n	8006100 <HAL_RCC_OscConfig+0x108>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d157      	bne.n	8006100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e236      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605c:	d106      	bne.n	800606c <HAL_RCC_OscConfig+0x74>
 800605e:	4b91      	ldr	r3, [pc, #580]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a90      	ldr	r2, [pc, #576]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e01d      	b.n	80060a8 <HAL_RCC_OscConfig+0xb0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006074:	d10c      	bne.n	8006090 <HAL_RCC_OscConfig+0x98>
 8006076:	4b8b      	ldr	r3, [pc, #556]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a8a      	ldr	r2, [pc, #552]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800607c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	4b88      	ldr	r3, [pc, #544]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a87      	ldr	r2, [pc, #540]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	e00b      	b.n	80060a8 <HAL_RCC_OscConfig+0xb0>
 8006090:	4b84      	ldr	r3, [pc, #528]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a83      	ldr	r2, [pc, #524]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	4b81      	ldr	r3, [pc, #516]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a80      	ldr	r2, [pc, #512]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80060a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d013      	beq.n	80060d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b0:	f7fb fba2 	bl	80017f8 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fb fb9e 	bl	80017f8 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	; 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e1fb      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ca:	4b76      	ldr	r3, [pc, #472]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0xc0>
 80060d6:	e014      	b.n	8006102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d8:	f7fb fb8e 	bl	80017f8 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060e0:	f7fb fb8a 	bl	80017f8 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b64      	cmp	r3, #100	; 0x64
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e1e7      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f2:	4b6c      	ldr	r3, [pc, #432]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f0      	bne.n	80060e0 <HAL_RCC_OscConfig+0xe8>
 80060fe:	e000      	b.n	8006102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d063      	beq.n	80061d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800610e:	4b65      	ldr	r3, [pc, #404]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800611a:	4b62      	ldr	r3, [pc, #392]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006122:	2b08      	cmp	r3, #8
 8006124:	d11c      	bne.n	8006160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006126:	4b5f      	ldr	r3, [pc, #380]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d116      	bne.n	8006160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006132:	4b5c      	ldr	r3, [pc, #368]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_RCC_OscConfig+0x152>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d001      	beq.n	800614a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e1bb      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614a:	4b56      	ldr	r3, [pc, #344]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4952      	ldr	r1, [pc, #328]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800615a:	4313      	orrs	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615e:	e03a      	b.n	80061d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006168:	4b4f      	ldr	r3, [pc, #316]	; (80062a8 <HAL_RCC_OscConfig+0x2b0>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7fb fb43 	bl	80017f8 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006176:	f7fb fb3f 	bl	80017f8 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e19c      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006188:	4b46      	ldr	r3, [pc, #280]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006194:	4b43      	ldr	r3, [pc, #268]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4940      	ldr	r1, [pc, #256]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	600b      	str	r3, [r1, #0]
 80061a8:	e015      	b.n	80061d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061aa:	4b3f      	ldr	r3, [pc, #252]	; (80062a8 <HAL_RCC_OscConfig+0x2b0>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fb fb22 	bl	80017f8 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b8:	f7fb fb1e 	bl	80017f8 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e17b      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ca:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d030      	beq.n	8006244 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ea:	4b30      	ldr	r3, [pc, #192]	; (80062ac <HAL_RCC_OscConfig+0x2b4>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fb fb02 	bl	80017f8 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061f8:	f7fb fafe 	bl	80017f8 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e15b      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800620a:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800620c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f0      	beq.n	80061f8 <HAL_RCC_OscConfig+0x200>
 8006216:	e015      	b.n	8006244 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006218:	4b24      	ldr	r3, [pc, #144]	; (80062ac <HAL_RCC_OscConfig+0x2b4>)
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621e:	f7fb faeb 	bl	80017f8 <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006226:	f7fb fae7 	bl	80017f8 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e144      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006238:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800623a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1f0      	bne.n	8006226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80a0 	beq.w	8006392 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006252:	2300      	movs	r3, #0
 8006254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006256:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10f      	bne.n	8006282 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	4a0e      	ldr	r2, [pc, #56]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800626c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006270:	6413      	str	r3, [r2, #64]	; 0x40
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627a:	60bb      	str	r3, [r7, #8]
 800627c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <HAL_RCC_OscConfig+0x2b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d121      	bne.n	80062d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <HAL_RCC_OscConfig+0x2b8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a07      	ldr	r2, [pc, #28]	; (80062b0 <HAL_RCC_OscConfig+0x2b8>)
 8006294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800629a:	f7fb faad 	bl	80017f8 <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a0:	e011      	b.n	80062c6 <HAL_RCC_OscConfig+0x2ce>
 80062a2:	bf00      	nop
 80062a4:	40023800 	.word	0x40023800
 80062a8:	42470000 	.word	0x42470000
 80062ac:	42470e80 	.word	0x42470e80
 80062b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b4:	f7fb faa0 	bl	80017f8 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e0fd      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c6:	4b81      	ldr	r3, [pc, #516]	; (80064cc <HAL_RCC_OscConfig+0x4d4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d106      	bne.n	80062e8 <HAL_RCC_OscConfig+0x2f0>
 80062da:	4b7d      	ldr	r3, [pc, #500]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	4a7c      	ldr	r2, [pc, #496]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70
 80062e6:	e01c      	b.n	8006322 <HAL_RCC_OscConfig+0x32a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b05      	cmp	r3, #5
 80062ee:	d10c      	bne.n	800630a <HAL_RCC_OscConfig+0x312>
 80062f0:	4b77      	ldr	r3, [pc, #476]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	4a76      	ldr	r2, [pc, #472]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 80062f6:	f043 0304 	orr.w	r3, r3, #4
 80062fa:	6713      	str	r3, [r2, #112]	; 0x70
 80062fc:	4b74      	ldr	r3, [pc, #464]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 80062fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006300:	4a73      	ldr	r2, [pc, #460]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	6713      	str	r3, [r2, #112]	; 0x70
 8006308:	e00b      	b.n	8006322 <HAL_RCC_OscConfig+0x32a>
 800630a:	4b71      	ldr	r3, [pc, #452]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	4a70      	ldr	r2, [pc, #448]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 8006310:	f023 0301 	bic.w	r3, r3, #1
 8006314:	6713      	str	r3, [r2, #112]	; 0x70
 8006316:	4b6e      	ldr	r3, [pc, #440]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	4a6d      	ldr	r2, [pc, #436]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 800631c:	f023 0304 	bic.w	r3, r3, #4
 8006320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d015      	beq.n	8006356 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632a:	f7fb fa65 	bl	80017f8 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006330:	e00a      	b.n	8006348 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006332:	f7fb fa61 	bl	80017f8 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006340:	4293      	cmp	r3, r2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e0bc      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006348:	4b61      	ldr	r3, [pc, #388]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0ee      	beq.n	8006332 <HAL_RCC_OscConfig+0x33a>
 8006354:	e014      	b.n	8006380 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006356:	f7fb fa4f 	bl	80017f8 <HAL_GetTick>
 800635a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800635c:	e00a      	b.n	8006374 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800635e:	f7fb fa4b 	bl	80017f8 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	f241 3288 	movw	r2, #5000	; 0x1388
 800636c:	4293      	cmp	r3, r2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e0a6      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006374:	4b56      	ldr	r3, [pc, #344]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 8006376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1ee      	bne.n	800635e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d105      	bne.n	8006392 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006386:	4b52      	ldr	r3, [pc, #328]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	4a51      	ldr	r2, [pc, #324]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 800638c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006390:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8092 	beq.w	80064c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800639c:	4b4c      	ldr	r3, [pc, #304]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d05c      	beq.n	8006462 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d141      	bne.n	8006434 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063b0:	4b48      	ldr	r3, [pc, #288]	; (80064d4 <HAL_RCC_OscConfig+0x4dc>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b6:	f7fb fa1f 	bl	80017f8 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063be:	f7fb fa1b 	bl	80017f8 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e078      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d0:	4b3f      	ldr	r3, [pc, #252]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f0      	bne.n	80063be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	019b      	lsls	r3, r3, #6
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	3b01      	subs	r3, #1
 80063f6:	041b      	lsls	r3, r3, #16
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	061b      	lsls	r3, r3, #24
 8006400:	4933      	ldr	r1, [pc, #204]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 8006402:	4313      	orrs	r3, r2
 8006404:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006406:	4b33      	ldr	r3, [pc, #204]	; (80064d4 <HAL_RCC_OscConfig+0x4dc>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640c:	f7fb f9f4 	bl	80017f8 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006414:	f7fb f9f0 	bl	80017f8 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e04d      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006426:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <HAL_RCC_OscConfig+0x41c>
 8006432:	e045      	b.n	80064c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006434:	4b27      	ldr	r3, [pc, #156]	; (80064d4 <HAL_RCC_OscConfig+0x4dc>)
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643a:	f7fb f9dd 	bl	80017f8 <HAL_GetTick>
 800643e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006442:	f7fb f9d9 	bl	80017f8 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e036      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006454:	4b1e      	ldr	r3, [pc, #120]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1f0      	bne.n	8006442 <HAL_RCC_OscConfig+0x44a>
 8006460:	e02e      	b.n	80064c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e029      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800646e:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <HAL_RCC_OscConfig+0x4d8>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	429a      	cmp	r2, r3
 8006480:	d11c      	bne.n	80064bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800648c:	429a      	cmp	r2, r3
 800648e:	d115      	bne.n	80064bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006496:	4013      	ands	r3, r2
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800649c:	4293      	cmp	r3, r2
 800649e:	d10d      	bne.n	80064bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d106      	bne.n	80064bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d001      	beq.n	80064c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40007000 	.word	0x40007000
 80064d0:	40023800 	.word	0x40023800
 80064d4:	42470060 	.word	0x42470060

080064d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e0cc      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064ec:	4b68      	ldr	r3, [pc, #416]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d90c      	bls.n	8006514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	4b65      	ldr	r3, [pc, #404]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b63      	ldr	r3, [pc, #396]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d001      	beq.n	8006514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0b8      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d020      	beq.n	8006562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800652c:	4b59      	ldr	r3, [pc, #356]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a58      	ldr	r2, [pc, #352]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006544:	4b53      	ldr	r3, [pc, #332]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a52      	ldr	r2, [pc, #328]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800654e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006550:	4b50      	ldr	r3, [pc, #320]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	494d      	ldr	r1, [pc, #308]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	4313      	orrs	r3, r2
 8006560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d044      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d107      	bne.n	8006586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	4b47      	ldr	r3, [pc, #284]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d119      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e07f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d003      	beq.n	8006596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006592:	2b03      	cmp	r3, #3
 8006594:	d107      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006596:	4b3f      	ldr	r3, [pc, #252]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e06f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a6:	4b3b      	ldr	r3, [pc, #236]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e067      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065b6:	4b37      	ldr	r3, [pc, #220]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 0203 	bic.w	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4934      	ldr	r1, [pc, #208]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c8:	f7fb f916 	bl	80017f8 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d0:	f7fb f912 	bl	80017f8 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	; 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e04f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	4b2b      	ldr	r3, [pc, #172]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 020c 	and.w	r2, r3, #12
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d1eb      	bne.n	80065d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d20c      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b22      	ldr	r3, [pc, #136]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b20      	ldr	r3, [pc, #128]	; (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e032      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4916      	ldr	r1, [pc, #88]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	490e      	ldr	r1, [pc, #56]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800665e:	f000 f821 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8006662:	4601      	mov	r1, r0
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <HAL_RCC_ClockConfig+0x1c0>)
 8006670:	5cd3      	ldrb	r3, [r2, r3]
 8006672:	fa21 f303 	lsr.w	r3, r1, r3
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <HAL_RCC_ClockConfig+0x1c4>)
 8006678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800667a:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <HAL_RCC_ClockConfig+0x1c8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fb f876 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40023c00 	.word	0x40023c00
 8006694:	40023800 	.word	0x40023800
 8006698:	0800dd10 	.word	0x0800dd10
 800669c:	20000000 	.word	0x20000000
 80066a0:	20000004 	.word	0x20000004

080066a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	2300      	movs	r3, #0
 80066b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066ba:	4b63      	ldr	r3, [pc, #396]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 030c 	and.w	r3, r3, #12
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d007      	beq.n	80066d6 <HAL_RCC_GetSysClockFreq+0x32>
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d008      	beq.n	80066dc <HAL_RCC_GetSysClockFreq+0x38>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 80b4 	bne.w	8006838 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066d0:	4b5e      	ldr	r3, [pc, #376]	; (800684c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80066d2:	60bb      	str	r3, [r7, #8]
       break;
 80066d4:	e0b3      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066d6:	4b5e      	ldr	r3, [pc, #376]	; (8006850 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80066d8:	60bb      	str	r3, [r7, #8]
      break;
 80066da:	e0b0      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066dc:	4b5a      	ldr	r3, [pc, #360]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066e6:	4b58      	ldr	r3, [pc, #352]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d04a      	beq.n	8006788 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066f2:	4b55      	ldr	r3, [pc, #340]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	f04f 0400 	mov.w	r4, #0
 80066fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	ea03 0501 	and.w	r5, r3, r1
 8006708:	ea04 0602 	and.w	r6, r4, r2
 800670c:	4629      	mov	r1, r5
 800670e:	4632      	mov	r2, r6
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	f04f 0400 	mov.w	r4, #0
 8006718:	0154      	lsls	r4, r2, #5
 800671a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800671e:	014b      	lsls	r3, r1, #5
 8006720:	4619      	mov	r1, r3
 8006722:	4622      	mov	r2, r4
 8006724:	1b49      	subs	r1, r1, r5
 8006726:	eb62 0206 	sbc.w	r2, r2, r6
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	f04f 0400 	mov.w	r4, #0
 8006732:	0194      	lsls	r4, r2, #6
 8006734:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006738:	018b      	lsls	r3, r1, #6
 800673a:	1a5b      	subs	r3, r3, r1
 800673c:	eb64 0402 	sbc.w	r4, r4, r2
 8006740:	f04f 0100 	mov.w	r1, #0
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	00e2      	lsls	r2, r4, #3
 800674a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800674e:	00d9      	lsls	r1, r3, #3
 8006750:	460b      	mov	r3, r1
 8006752:	4614      	mov	r4, r2
 8006754:	195b      	adds	r3, r3, r5
 8006756:	eb44 0406 	adc.w	r4, r4, r6
 800675a:	f04f 0100 	mov.w	r1, #0
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	0262      	lsls	r2, r4, #9
 8006764:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006768:	0259      	lsls	r1, r3, #9
 800676a:	460b      	mov	r3, r1
 800676c:	4614      	mov	r4, r2
 800676e:	4618      	mov	r0, r3
 8006770:	4621      	mov	r1, r4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f04f 0400 	mov.w	r4, #0
 8006778:	461a      	mov	r2, r3
 800677a:	4623      	mov	r3, r4
 800677c:	f7f9 fd24 	bl	80001c8 <__aeabi_uldivmod>
 8006780:	4603      	mov	r3, r0
 8006782:	460c      	mov	r4, r1
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e049      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006788:	4b2f      	ldr	r3, [pc, #188]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	099b      	lsrs	r3, r3, #6
 800678e:	f04f 0400 	mov.w	r4, #0
 8006792:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	ea03 0501 	and.w	r5, r3, r1
 800679e:	ea04 0602 	and.w	r6, r4, r2
 80067a2:	4629      	mov	r1, r5
 80067a4:	4632      	mov	r2, r6
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	f04f 0400 	mov.w	r4, #0
 80067ae:	0154      	lsls	r4, r2, #5
 80067b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067b4:	014b      	lsls	r3, r1, #5
 80067b6:	4619      	mov	r1, r3
 80067b8:	4622      	mov	r2, r4
 80067ba:	1b49      	subs	r1, r1, r5
 80067bc:	eb62 0206 	sbc.w	r2, r2, r6
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	f04f 0400 	mov.w	r4, #0
 80067c8:	0194      	lsls	r4, r2, #6
 80067ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80067ce:	018b      	lsls	r3, r1, #6
 80067d0:	1a5b      	subs	r3, r3, r1
 80067d2:	eb64 0402 	sbc.w	r4, r4, r2
 80067d6:	f04f 0100 	mov.w	r1, #0
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	00e2      	lsls	r2, r4, #3
 80067e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80067e4:	00d9      	lsls	r1, r3, #3
 80067e6:	460b      	mov	r3, r1
 80067e8:	4614      	mov	r4, r2
 80067ea:	195b      	adds	r3, r3, r5
 80067ec:	eb44 0406 	adc.w	r4, r4, r6
 80067f0:	f04f 0100 	mov.w	r1, #0
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	02a2      	lsls	r2, r4, #10
 80067fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80067fe:	0299      	lsls	r1, r3, #10
 8006800:	460b      	mov	r3, r1
 8006802:	4614      	mov	r4, r2
 8006804:	4618      	mov	r0, r3
 8006806:	4621      	mov	r1, r4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f04f 0400 	mov.w	r4, #0
 800680e:	461a      	mov	r2, r3
 8006810:	4623      	mov	r3, r4
 8006812:	f7f9 fcd9 	bl	80001c8 <__aeabi_uldivmod>
 8006816:	4603      	mov	r3, r0
 8006818:	460c      	mov	r4, r1
 800681a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	0c1b      	lsrs	r3, r3, #16
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	3301      	adds	r3, #1
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	fbb2 f3f3 	udiv	r3, r2, r3
 8006834:	60bb      	str	r3, [r7, #8]
      break;
 8006836:	e002      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006838:	4b04      	ldr	r3, [pc, #16]	; (800684c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800683a:	60bb      	str	r3, [r7, #8]
      break;
 800683c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800683e:	68bb      	ldr	r3, [r7, #8]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006848:	40023800 	.word	0x40023800
 800684c:	00f42400 	.word	0x00f42400
 8006850:	007a1200 	.word	0x007a1200

08006854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006858:	4b03      	ldr	r3, [pc, #12]	; (8006868 <HAL_RCC_GetHCLKFreq+0x14>)
 800685a:	681b      	ldr	r3, [r3, #0]
}
 800685c:	4618      	mov	r0, r3
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	20000000 	.word	0x20000000

0800686c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006870:	f7ff fff0 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 8006874:	4601      	mov	r1, r0
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	0a9b      	lsrs	r3, r3, #10
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	4a03      	ldr	r2, [pc, #12]	; (8006890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006882:	5cd3      	ldrb	r3, [r2, r3]
 8006884:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40023800 	.word	0x40023800
 8006890:	0800dd20 	.word	0x0800dd20

08006894 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d105      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d035      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068bc:	4b62      	ldr	r3, [pc, #392]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068c2:	f7fa ff99 	bl	80017f8 <HAL_GetTick>
 80068c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068c8:	e008      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068ca:	f7fa ff95 	bl	80017f8 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e0b0      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068dc:	4b5b      	ldr	r3, [pc, #364]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1f0      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	019a      	lsls	r2, r3, #6
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	071b      	lsls	r3, r3, #28
 80068f4:	4955      	ldr	r1, [pc, #340]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068fc:	4b52      	ldr	r3, [pc, #328]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006902:	f7fa ff79 	bl	80017f8 <HAL_GetTick>
 8006906:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006908:	e008      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800690a:	f7fa ff75 	bl	80017f8 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e090      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800691c:	4b4b      	ldr	r3, [pc, #300]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0f0      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 8083 	beq.w	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	4b44      	ldr	r3, [pc, #272]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	4a43      	ldr	r2, [pc, #268]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006944:	6413      	str	r3, [r2, #64]	; 0x40
 8006946:	4b41      	ldr	r3, [pc, #260]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006952:	4b3f      	ldr	r3, [pc, #252]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a3e      	ldr	r2, [pc, #248]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800695c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800695e:	f7fa ff4b 	bl	80017f8 <HAL_GetTick>
 8006962:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006964:	e008      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006966:	f7fa ff47 	bl	80017f8 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e062      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006978:	4b35      	ldr	r3, [pc, #212]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0f0      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006984:	4b31      	ldr	r3, [pc, #196]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d02f      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d028      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069a2:	4b2a      	ldr	r3, [pc, #168]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069ac:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069b2:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069b8:	4a24      	ldr	r2, [pc, #144]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069be:	4b23      	ldr	r3, [pc, #140]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d114      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069ca:	f7fa ff15 	bl	80017f8 <HAL_GetTick>
 80069ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d0:	e00a      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069d2:	f7fa ff11 	bl	80017f8 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e02a      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e8:	4b18      	ldr	r3, [pc, #96]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0ee      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a00:	d10d      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a16:	490d      	ldr	r1, [pc, #52]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	608b      	str	r3, [r1, #8]
 8006a1c:	e005      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a28:	6093      	str	r3, [r2, #8]
 8006a2a:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a36:	4905      	ldr	r1, [pc, #20]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	42470068 	.word	0x42470068
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	40007000 	.word	0x40007000
 8006a54:	42470e40 	.word	0x42470e40

08006a58 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2203      	movs	r2, #3
 8006a64:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006a66:	4b11      	ldr	r3, [pc, #68]	; (8006aac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6c:	099b      	lsrs	r3, r3, #6
 8006a6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a76:	4b0d      	ldr	r3, [pc, #52]	; (8006aac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7c:	0f1b      	lsrs	r3, r3, #28
 8006a7e:	f003 0207 	and.w	r2, r3, #7
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006a86:	4b09      	ldr	r3, [pc, #36]	; (8006aac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006a8e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a94:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006aa0:	bf00      	nop
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	40023800 	.word	0x40023800

08006ab0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d13d      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ace:	4b22      	ldr	r3, [pc, #136]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ad6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d12f      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ae2:	4b1e      	ldr	r3, [pc, #120]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ae4:	617b      	str	r3, [r7, #20]
          break;
 8006ae6:	e02f      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006af4:	d108      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006af6:	4b18      	ldr	r3, [pc, #96]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006afe:	4a18      	ldr	r2, [pc, #96]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	e007      	b.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b08:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b10:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b16:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b18:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b1e:	099b      	lsrs	r3, r3, #6
 8006b20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	fb02 f303 	mul.w	r3, r2, r3
 8006b2a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b32:	0f1b      	lsrs	r3, r3, #28
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3e:	617b      	str	r3, [r7, #20]
          break;
 8006b40:	e002      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]
          break;
 8006b46:	bf00      	nop
        }
      }
      break;
 8006b48:	bf00      	nop
    }
  }
  return frequency;
 8006b4a:	697b      	ldr	r3, [r7, #20]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	00bb8000 	.word	0x00bb8000
 8006b60:	007a1200 	.word	0x007a1200
 8006b64:	00f42400 	.word	0x00f42400

08006b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b68:	b084      	sub	sp, #16
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	f107 001c 	add.w	r0, r7, #28
 8006b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d122      	bne.n	8006bc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d105      	bne.n	8006bba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f94a 	bl	8006e54 <USB_CoreReset>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
 8006bc4:	e01a      	b.n	8006bfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f93e 	bl	8006e54 <USB_CoreReset>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38
 8006bee:	e005      	b.n	8006bfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d10b      	bne.n	8006c1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f043 0206 	orr.w	r2, r3, #6
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f043 0220 	orr.w	r2, r3, #32
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c26:	b004      	add	sp, #16
 8006c28:	4770      	bx	lr

08006c2a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f043 0201 	orr.w	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f023 0201 	bic.w	r2, r3, #1
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	460b      	mov	r3, r1
 8006c78:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d106      	bne.n	8006c9a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	e00b      	b.n	8006cb2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d106      	bne.n	8006cae <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60da      	str	r2, [r3, #12]
 8006cac:	e001      	b.n	8006cb2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e003      	b.n	8006cba <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006cb2:	2032      	movs	r0, #50	; 0x32
 8006cb4:	f7fa fdac 	bl	8001810 <HAL_Delay>

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	019b      	lsls	r3, r3, #6
 8006cd6:	f043 0220 	orr.w	r2, r3, #32
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <USB_FlushTxFifo+0x48>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d901      	bls.n	8006cf0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e006      	b.n	8006cfe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d0f0      	beq.n	8006cde <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	00030d40 	.word	0x00030d40

08006d10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2210      	movs	r2, #16
 8006d20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <USB_FlushRxFifo+0x40>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d901      	bls.n	8006d34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e006      	b.n	8006d42 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d0f0      	beq.n	8006d22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	00030d40 	.word	0x00030d40

08006d54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b089      	sub	sp, #36	; 0x24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	461a      	mov	r2, r3
 8006d62:	460b      	mov	r3, r1
 8006d64:	71fb      	strb	r3, [r7, #7]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006d72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d11a      	bne.n	8006db0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d7a:	88bb      	ldrh	r3, [r7, #4]
 8006d7c:	3303      	adds	r3, #3
 8006d7e:	089b      	lsrs	r3, r3, #2
 8006d80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d82:	2300      	movs	r3, #0
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	e00f      	b.n	8006da8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	031a      	lsls	r2, r3, #12
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d94:	461a      	mov	r2, r3
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	3301      	adds	r3, #1
 8006da6:	61bb      	str	r3, [r7, #24]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d3eb      	bcc.n	8006d88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3724      	adds	r7, #36	; 0x24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b089      	sub	sp, #36	; 0x24
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006dd4:	88fb      	ldrh	r3, [r7, #6]
 8006dd6:	3303      	adds	r3, #3
 8006dd8:	089b      	lsrs	r3, r3, #2
 8006dda:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	e00b      	b.n	8006dfa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	601a      	str	r2, [r3, #0]
    pDest++;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	3304      	adds	r3, #4
 8006df2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	3301      	adds	r3, #1
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d3ef      	bcc.n	8006de2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e02:	69fb      	ldr	r3, [r7, #28]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3724      	adds	r7, #36	; 0x24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	4013      	ands	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e28:	68fb      	ldr	r3, [r7, #12]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f003 0301 	and.w	r3, r3, #1
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <USB_CoreReset+0x64>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d901      	bls.n	8006e72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e01b      	b.n	8006eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	daf2      	bge.n	8006e60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f043 0201 	orr.w	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <USB_CoreReset+0x64>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d901      	bls.n	8006e9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e006      	b.n	8006eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d0f0      	beq.n	8006e8a <USB_CoreReset+0x36>

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	00030d40 	.word	0x00030d40

08006ebc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	f107 001c 	add.w	r0, r7, #28
 8006eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed8:	461a      	mov	r2, r3
 8006eda:	2300      	movs	r3, #0
 8006edc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d018      	beq.n	8006f40 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d10a      	bne.n	8006f2a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f22:	f043 0304 	orr.w	r3, r3, #4
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	e014      	b.n	8006f54 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f38:	f023 0304 	bic.w	r3, r3, #4
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	e009      	b.n	8006f54 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f4e:	f023 0304 	bic.w	r3, r3, #4
 8006f52:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006f54:	2110      	movs	r1, #16
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff feb4 	bl	8006cc4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff fed7 	bl	8006d10 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	e015      	b.n	8006f94 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f74:	461a      	mov	r2, r3
 8006f76:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3301      	adds	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d3e5      	bcc.n	8006f68 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f8ac 	bl	80070fc <USB_DriveVbus>

  HAL_Delay(200U);
 8006fa4:	20c8      	movs	r0, #200	; 0xc8
 8006fa6:	f7fa fc33 	bl	8001810 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a14      	ldr	r2, [pc, #80]	; (8007020 <USB_HostInit+0x164>)
 8006fd0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a13      	ldr	r2, [pc, #76]	; (8007024 <USB_HostInit+0x168>)
 8006fd6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006fda:	e009      	b.n	8006ff0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2280      	movs	r2, #128	; 0x80
 8006fe0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a10      	ldr	r2, [pc, #64]	; (8007028 <USB_HostInit+0x16c>)
 8006fe6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a10      	ldr	r2, [pc, #64]	; (800702c <USB_HostInit+0x170>)
 8006fec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d105      	bne.n	8007002 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f043 0210 	orr.w	r2, r3, #16
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <USB_HostInit+0x174>)
 8007008:	4313      	orrs	r3, r2
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800701a:	b004      	add	sp, #16
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	01000200 	.word	0x01000200
 8007024:	00e00300 	.word	0x00e00300
 8007028:	00600080 	.word	0x00600080
 800702c:	004000e0 	.word	0x004000e0
 8007030:	a3200008 	.word	0xa3200008

08007034 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007052:	f023 0303 	bic.w	r3, r3, #3
 8007056:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	68f9      	ldr	r1, [r7, #12]
 8007068:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800706c:	4313      	orrs	r3, r2
 800706e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d107      	bne.n	8007086 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800707c:	461a      	mov	r2, r3
 800707e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007082:	6053      	str	r3, [r2, #4]
 8007084:	e009      	b.n	800709a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d106      	bne.n	800709a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007092:	461a      	mov	r2, r3
 8007094:	f241 7370 	movw	r3, #6000	; 0x1770
 8007098:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80070c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80070d8:	2064      	movs	r0, #100	; 0x64
 80070da:	f7fa fb99 	bl	8001810 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070ec:	200a      	movs	r0, #10
 80070ee:	f7fa fb8f 	bl	8001810 <HAL_Delay>

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007120:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d109      	bne.n	8007140 <USB_DriveVbus+0x44>
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d106      	bne.n	8007140 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800713a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800713e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d109      	bne.n	8007160 <USB_DriveVbus+0x64>
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800715a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800715e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800716e:	b480      	push	{r7}
 8007170:	b085      	sub	sp, #20
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	0c5b      	lsrs	r3, r3, #17
 800718c:	f003 0303 	and.w	r3, r3, #3
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	b29b      	uxth	r3, r3
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
	...

080071c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	461a      	mov	r2, r3
 80071ce:	4603      	mov	r3, r0
 80071d0:	70fb      	strb	r3, [r7, #3]
 80071d2:	460b      	mov	r3, r1
 80071d4:	70bb      	strb	r3, [r7, #2]
 80071d6:	4613      	mov	r3, r2
 80071d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ee:	461a      	mov	r2, r3
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295
 80071f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d87e      	bhi.n	80072fc <USB_HC_Init+0x13c>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <USB_HC_Init+0x44>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007215 	.word	0x08007215
 8007208:	080072bf 	.word	0x080072bf
 800720c:	08007215 	.word	0x08007215
 8007210:	08007281 	.word	0x08007281
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4413      	add	r3, r2
 800721c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007220:	461a      	mov	r2, r3
 8007222:	f240 439d 	movw	r3, #1181	; 0x49d
 8007226:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007228:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800722c:	2b00      	cmp	r3, #0
 800722e:	da10      	bge.n	8007252 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4413      	add	r3, r2
 8007238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	78fa      	ldrb	r2, [r7, #3]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	440a      	add	r2, r1
 8007246:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800724a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007250:	e057      	b.n	8007302 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d051      	beq.n	8007302 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	4413      	add	r3, r2
 8007266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	78fa      	ldrb	r2, [r7, #3]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	440a      	add	r2, r1
 8007274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007278:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800727c:	60d3      	str	r3, [r2, #12]
      break;
 800727e:	e040      	b.n	8007302 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4413      	add	r3, r2
 8007288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728c:	461a      	mov	r2, r3
 800728e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007292:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007294:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	da34      	bge.n	8007306 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	78fa      	ldrb	r2, [r7, #3]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80072bc:	e023      	b.n	8007306 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ca:	461a      	mov	r2, r3
 80072cc:	f240 2325 	movw	r3, #549	; 0x225
 80072d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	da17      	bge.n	800730a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	78fa      	ldrb	r2, [r7, #3]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80072f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072fa:	e006      	b.n	800730a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007300:	e004      	b.n	800730c <USB_HC_Init+0x14c>
      break;
 8007302:	bf00      	nop
 8007304:	e002      	b.n	800730c <USB_HC_Init+0x14c>
      break;
 8007306:	bf00      	nop
 8007308:	e000      	b.n	800730c <USB_HC_Init+0x14c>
      break;
 800730a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	f003 030f 	and.w	r3, r3, #15
 800731a:	2101      	movs	r1, #1
 800731c:	fa01 f303 	lsl.w	r3, r1, r3
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007326:	4313      	orrs	r3, r2
 8007328:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007336:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800733a:	2b00      	cmp	r3, #0
 800733c:	da03      	bge.n	8007346 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800733e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	e001      	b.n	800734a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800734a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d103      	bne.n	800735a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e001      	b.n	800735e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800735e:	787b      	ldrb	r3, [r7, #1]
 8007360:	059b      	lsls	r3, r3, #22
 8007362:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007366:	78bb      	ldrb	r3, [r7, #2]
 8007368:	02db      	lsls	r3, r3, #11
 800736a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800736e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007370:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007374:	049b      	lsls	r3, r3, #18
 8007376:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800737a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800737c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800737e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007382:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	0159      	lsls	r1, r3, #5
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	440b      	add	r3, r1
 8007390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007394:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800739a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800739c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d10f      	bne.n	80073c4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	78fa      	ldrb	r2, [r7, #3]
 80073b4:	0151      	lsls	r1, r2, #5
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	440a      	add	r2, r1
 80073ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073c2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop

080073d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08c      	sub	sp, #48	; 0x30
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	785b      	ldrb	r3, [r3, #1]
 80073ea:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80073ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d028      	beq.n	8007450 <USB_HC_StartXfer+0x7c>
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	791b      	ldrb	r3, [r3, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d124      	bne.n	8007450 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10b      	bne.n	8007424 <USB_HC_StartXfer+0x50>
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	795b      	ldrb	r3, [r3, #5]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d107      	bne.n	8007424 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	785b      	ldrb	r3, [r3, #1]
 8007418:	4619      	mov	r1, r3
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fa30 	bl	8007880 <USB_DoPing>
      return HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	e114      	b.n	800764e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d112      	bne.n	8007450 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	4413      	add	r3, r2
 8007432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	6a3a      	ldr	r2, [r7, #32]
 800743e:	440a      	add	r2, r1
 8007440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007444:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007448:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2200      	movs	r2, #0
 800744e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d018      	beq.n	800748a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	8912      	ldrh	r2, [r2, #8]
 8007460:	4413      	add	r3, r2
 8007462:	3b01      	subs	r3, #1
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	8912      	ldrh	r2, [r2, #8]
 8007468:	fbb3 f3f2 	udiv	r3, r3, r2
 800746c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800746e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007470:	8b7b      	ldrh	r3, [r7, #26]
 8007472:	429a      	cmp	r2, r3
 8007474:	d90b      	bls.n	800748e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8007476:	8b7b      	ldrh	r3, [r7, #26]
 8007478:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800747a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	8912      	ldrh	r2, [r2, #8]
 8007480:	fb02 f203 	mul.w	r2, r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	611a      	str	r2, [r3, #16]
 8007488:	e001      	b.n	800748e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800748a:	2301      	movs	r3, #1
 800748c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	78db      	ldrb	r3, [r3, #3]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d006      	beq.n	80074a4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007496:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	8912      	ldrh	r2, [r2, #8]
 800749c:	fb02 f203 	mul.w	r2, r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074ae:	04d9      	lsls	r1, r3, #19
 80074b0:	4b69      	ldr	r3, [pc, #420]	; (8007658 <USB_HC_StartXfer+0x284>)
 80074b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	7a9b      	ldrb	r3, [r3, #10]
 80074ba:	075b      	lsls	r3, r3, #29
 80074bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074c0:	69f9      	ldr	r1, [r7, #28]
 80074c2:	0148      	lsls	r0, r1, #5
 80074c4:	6a39      	ldr	r1, [r7, #32]
 80074c6:	4401      	add	r1, r0
 80074c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	68d9      	ldr	r1, [r3, #12]
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e6:	460a      	mov	r2, r1
 80074e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf0c      	ite	eq
 80074fa:	2301      	moveq	r3, #1
 80074fc:	2300      	movne	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	4413      	add	r3, r2
 800750a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	6a3a      	ldr	r2, [r7, #32]
 8007516:	440a      	add	r2, r1
 8007518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800751c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007520:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	4413      	add	r3, r2
 800752a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	7e7b      	ldrb	r3, [r7, #25]
 8007532:	075b      	lsls	r3, r3, #29
 8007534:	69f9      	ldr	r1, [r7, #28]
 8007536:	0148      	lsls	r0, r1, #5
 8007538:	6a39      	ldr	r1, [r7, #32]
 800753a:	4401      	add	r1, r0
 800753c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007540:	4313      	orrs	r3, r2
 8007542:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	4413      	add	r3, r2
 800754c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a42      	ldr	r2, [pc, #264]	; (800765c <USB_HC_StartXfer+0x288>)
 8007554:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007556:	4b41      	ldr	r3, [pc, #260]	; (800765c <USB_HC_StartXfer+0x288>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800755e:	4a3f      	ldr	r2, [pc, #252]	; (800765c <USB_HC_StartXfer+0x288>)
 8007560:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	78db      	ldrb	r3, [r3, #3]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d006      	beq.n	8007578 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800756a:	4b3c      	ldr	r3, [pc, #240]	; (800765c <USB_HC_StartXfer+0x288>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007572:	4a3a      	ldr	r2, [pc, #232]	; (800765c <USB_HC_StartXfer+0x288>)
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	e005      	b.n	8007584 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007578:	4b38      	ldr	r3, [pc, #224]	; (800765c <USB_HC_StartXfer+0x288>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007580:	4a36      	ldr	r2, [pc, #216]	; (800765c <USB_HC_StartXfer+0x288>)
 8007582:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007584:	4b35      	ldr	r3, [pc, #212]	; (800765c <USB_HC_StartXfer+0x288>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800758c:	4a33      	ldr	r2, [pc, #204]	; (800765c <USB_HC_StartXfer+0x288>)
 800758e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	4413      	add	r3, r2
 8007598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800759c:	461a      	mov	r2, r3
 800759e:	4b2f      	ldr	r3, [pc, #188]	; (800765c <USB_HC_StartXfer+0x288>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	e04f      	b.n	800764e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	78db      	ldrb	r3, [r3, #3]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d14a      	bne.n	800764c <USB_HC_StartXfer+0x278>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d046      	beq.n	800764c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	79db      	ldrb	r3, [r3, #7]
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d830      	bhi.n	8007628 <USB_HC_StartXfer+0x254>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <USB_HC_StartXfer+0x1f8>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075dd 	.word	0x080075dd
 80075d0:	08007601 	.word	0x08007601
 80075d4:	080075dd 	.word	0x080075dd
 80075d8:	08007601 	.word	0x08007601
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	3303      	adds	r3, #3
 80075e2:	089b      	lsrs	r3, r3, #2
 80075e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80075e6:	8afa      	ldrh	r2, [r7, #22]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d91c      	bls.n	800762c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	f043 0220 	orr.w	r2, r3, #32
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80075fe:	e015      	b.n	800762c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	3303      	adds	r3, #3
 8007606:	089b      	lsrs	r3, r3, #2
 8007608:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800760a:	8afa      	ldrh	r2, [r7, #22]
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	b29b      	uxth	r3, r3
 8007616:	429a      	cmp	r2, r3
 8007618:	d90a      	bls.n	8007630 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	619a      	str	r2, [r3, #24]
        }
        break;
 8007626:	e003      	b.n	8007630 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007628:	bf00      	nop
 800762a:	e002      	b.n	8007632 <USB_HC_StartXfer+0x25e>
        break;
 800762c:	bf00      	nop
 800762e:	e000      	b.n	8007632 <USB_HC_StartXfer+0x25e>
        break;
 8007630:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	68d9      	ldr	r1, [r3, #12]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	785a      	ldrb	r2, [r3, #1]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	b298      	uxth	r0, r3
 8007640:	2300      	movs	r3, #0
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	4603      	mov	r3, r0
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff fb84 	bl	8006d54 <USB_WritePacket>
  }

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3728      	adds	r7, #40	; 0x28
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	1ff80000 	.word	0x1ff80000
 800765c:	20009374 	.word	0x20009374

08007660 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	b29b      	uxth	r3, r3
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	0c9b      	lsrs	r3, r3, #18
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <USB_HC_Halt+0x3a>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d16c      	bne.n	8007796 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076da:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d143      	bne.n	8007770 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007706:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	4413      	add	r3, r2
 8007710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	440a      	add	r2, r1
 800771e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007722:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007726:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4413      	add	r3, r2
 8007730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	440a      	add	r2, r1
 800773e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007742:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007746:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	3301      	adds	r3, #1
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007754:	d81d      	bhi.n	8007792 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800776c:	d0ec      	beq.n	8007748 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800776e:	e080      	b.n	8007872 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	440a      	add	r2, r1
 8007786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800778a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800778e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007790:	e06f      	b.n	8007872 <USB_HC_Halt+0x1f0>
          break;
 8007792:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007794:	e06d      	b.n	8007872 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	4413      	add	r3, r2
 800779e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	0151      	lsls	r1, r2, #5
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	440a      	add	r2, r1
 80077ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077b4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d143      	bne.n	800784e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	0151      	lsls	r1, r2, #5
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	440a      	add	r2, r1
 80077fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007804:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	4413      	add	r3, r2
 800780e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	0151      	lsls	r1, r2, #5
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	440a      	add	r2, r1
 800781c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007820:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007824:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	3301      	adds	r3, #1
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007832:	d81d      	bhi.n	8007870 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	4413      	add	r3, r2
 800783c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800784a:	d0ec      	beq.n	8007826 <USB_HC_Halt+0x1a4>
 800784c:	e011      	b.n	8007872 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	4413      	add	r3, r2
 8007856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	0151      	lsls	r1, r2, #5
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	440a      	add	r2, r1
 8007864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	e000      	b.n	8007872 <USB_HC_Halt+0x1f0>
          break;
 8007870:	bf00      	nop
    }
  }

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007894:	2301      	movs	r3, #1
 8007896:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	04da      	lsls	r2, r3, #19
 800789c:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <USB_DoPing+0x74>)
 800789e:	4013      	ands	r3, r2
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	0151      	lsls	r1, r2, #5
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	440a      	add	r2, r1
 80078a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078de:	461a      	mov	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	1ff80000 	.word	0x1ff80000

080078f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff f99f 	bl	8006c4c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800790e:	2110      	movs	r1, #16
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff f9d7 	bl	8006cc4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff f9fa 	bl	8006d10 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800791c:	2300      	movs	r3, #0
 800791e:	613b      	str	r3, [r7, #16]
 8007920:	e01f      	b.n	8007962 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007938:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007940:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007948:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4413      	add	r3, r2
 8007952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007956:	461a      	mov	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	3301      	adds	r3, #1
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b0f      	cmp	r3, #15
 8007966:	d9dc      	bls.n	8007922 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007968:	2300      	movs	r3, #0
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	e034      	b.n	80079d8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007984:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800798c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007994:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a2:	461a      	mov	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	3301      	adds	r3, #1
 80079ac:	617b      	str	r3, [r7, #20]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079b4:	d80c      	bhi.n	80079d0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079cc:	d0ec      	beq.n	80079a8 <USB_StopHost+0xb0>
 80079ce:	e000      	b.n	80079d2 <USB_StopHost+0xda>
        break;
 80079d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	3301      	adds	r3, #1
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	2b0f      	cmp	r3, #15
 80079dc:	d9c7      	bls.n	800796e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079e4:	461a      	mov	r2, r3
 80079e6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295
 80079f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff f918 	bl	8006c2a <USB_EnableGlobalInt>

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007a08:	4904      	ldr	r1, [pc, #16]	; (8007a1c <MX_FATFS_Init+0x18>)
 8007a0a:	4805      	ldr	r0, [pc, #20]	; (8007a20 <MX_FATFS_Init+0x1c>)
 8007a0c:	f005 fc1e 	bl	800d24c <FATFS_LinkDriver>
 8007a10:	4603      	mov	r3, r0
 8007a12:	461a      	mov	r2, r3
 8007a14:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <MX_FATFS_Init+0x20>)
 8007a16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007a18:	bf00      	nop
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	200094b8 	.word	0x200094b8
 8007a20:	0800dd30 	.word	0x0800dd30
 8007a24:	2000991c 	.word	0x2000991c

08007a28 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007a2c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	4619      	mov	r1, r3
 8007a62:	4808      	ldr	r0, [pc, #32]	; (8007a84 <USBH_status+0x34>)
 8007a64:	f000 feb5 	bl	80087d2 <USBH_MSC_UnitIsReady>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <USBH_status+0x24>
  {
    res = RES_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
 8007a72:	e001      	b.n	8007a78 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20009920 	.word	0x20009920

08007a88 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b094      	sub	sp, #80	; 0x50
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007a9e:	7bf9      	ldrb	r1, [r7, #15]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	4812      	ldr	r0, [pc, #72]	; (8007af4 <USBH_read+0x6c>)
 8007aaa:	f000 fedc 	bl	8008866 <USBH_MSC_Read>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <USBH_read+0x34>
  {
    res = RES_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007aba:	e015      	b.n	8007ae8 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007abc:	f107 0210 	add.w	r2, r7, #16
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	480b      	ldr	r0, [pc, #44]	; (8007af4 <USBH_read+0x6c>)
 8007ac6:	f000 feaa 	bl	800881e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007aca:	7f7b      	ldrb	r3, [r7, #29]
 8007acc:	2b28      	cmp	r3, #40	; 0x28
 8007ace:	d003      	beq.n	8007ad8 <USBH_read+0x50>
 8007ad0:	2b3a      	cmp	r3, #58	; 0x3a
 8007ad2:	d001      	beq.n	8007ad8 <USBH_read+0x50>
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d103      	bne.n	8007ae0 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007ade:	e003      	b.n	8007ae8 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007ae6:	bf00      	nop
    }
  }

  return res;
 8007ae8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3748      	adds	r7, #72	; 0x48
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	20009920 	.word	0x20009920

08007af8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b094      	sub	sp, #80	; 0x50
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007b0e:	7bf9      	ldrb	r1, [r7, #15]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4817      	ldr	r0, [pc, #92]	; (8007b78 <USBH_write+0x80>)
 8007b1a:	f000 ff0d 	bl	8008938 <USBH_MSC_Write>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d103      	bne.n	8007b2c <USBH_write+0x34>
  {
    res = RES_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007b2a:	e01f      	b.n	8007b6c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007b2c:	f107 0210 	add.w	r2, r7, #16
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	4619      	mov	r1, r3
 8007b34:	4810      	ldr	r0, [pc, #64]	; (8007b78 <USBH_write+0x80>)
 8007b36:	f000 fe72 	bl	800881e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007b3a:	7f7b      	ldrb	r3, [r7, #29]
 8007b3c:	2b27      	cmp	r3, #39	; 0x27
 8007b3e:	d009      	beq.n	8007b54 <USBH_write+0x5c>
 8007b40:	2b27      	cmp	r3, #39	; 0x27
 8007b42:	dc02      	bgt.n	8007b4a <USBH_write+0x52>
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d009      	beq.n	8007b5c <USBH_write+0x64>
 8007b48:	e00c      	b.n	8007b64 <USBH_write+0x6c>
 8007b4a:	2b28      	cmp	r3, #40	; 0x28
 8007b4c:	d006      	beq.n	8007b5c <USBH_write+0x64>
 8007b4e:	2b3a      	cmp	r3, #58	; 0x3a
 8007b50:	d004      	beq.n	8007b5c <USBH_write+0x64>
 8007b52:	e007      	b.n	8007b64 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007b54:	2302      	movs	r3, #2
 8007b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b5a:	e007      	b.n	8007b6c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b62:	e003      	b.n	8007b6c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b6a:	bf00      	nop
    }
  }

  return res;
 8007b6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3748      	adds	r7, #72	; 0x48
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20009920 	.word	0x20009920

08007b7c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b090      	sub	sp, #64	; 0x40
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	603a      	str	r2, [r7, #0]
 8007b86:	71fb      	strb	r3, [r7, #7]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007b92:	79bb      	ldrb	r3, [r7, #6]
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d852      	bhi.n	8007c3e <USBH_ioctl+0xc2>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <USBH_ioctl+0x24>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bb1 	.word	0x08007bb1
 8007ba4:	08007bb9 	.word	0x08007bb9
 8007ba8:	08007be3 	.word	0x08007be3
 8007bac:	08007c0f 	.word	0x08007c0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007bb6:	e045      	b.n	8007c44 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007bb8:	f107 0208 	add.w	r2, r7, #8
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4823      	ldr	r0, [pc, #140]	; (8007c50 <USBH_ioctl+0xd4>)
 8007bc2:	f000 fe2c 	bl	800881e <USBH_MSC_GetLUNInfo>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d106      	bne.n	8007bda <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007bd8:	e034      	b.n	8007c44 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007be0:	e030      	b.n	8007c44 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007be2:	f107 0208 	add.w	r2, r7, #8
 8007be6:	79fb      	ldrb	r3, [r7, #7]
 8007be8:	4619      	mov	r1, r3
 8007bea:	4819      	ldr	r0, [pc, #100]	; (8007c50 <USBH_ioctl+0xd4>)
 8007bec:	f000 fe17 	bl	800881e <USBH_MSC_GetLUNInfo>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d107      	bne.n	8007c06 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007bf6:	8a3b      	ldrh	r3, [r7, #16]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007c04:	e01e      	b.n	8007c44 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007c0c:	e01a      	b.n	8007c44 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007c0e:	f107 0208 	add.w	r2, r7, #8
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	4619      	mov	r1, r3
 8007c16:	480e      	ldr	r0, [pc, #56]	; (8007c50 <USBH_ioctl+0xd4>)
 8007c18:	f000 fe01 	bl	800881e <USBH_MSC_GetLUNInfo>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d109      	bne.n	8007c36 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007c22:	8a3b      	ldrh	r3, [r7, #16]
 8007c24:	0a5b      	lsrs	r3, r3, #9
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007c34:	e006      	b.n	8007c44 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007c3c:	e002      	b.n	8007c44 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007c3e:	2304      	movs	r3, #4
 8007c40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007c44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3740      	adds	r7, #64	; 0x40
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	20009920 	.word	0x20009920

08007c54 <arm_fir_init_q31>:
        arm_fir_instance_q31 * S,
        uint16_t numTaps,
  const q31_t * pCoeffs,
        q31_t * pState,
        uint32_t blockSize)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	607a      	str	r2, [r7, #4]
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	460b      	mov	r3, r1
 8007c62:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	897a      	ldrh	r2, [r7, #10]
 8007c68:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(q31_t));
 8007c70:	897a      	ldrh	r2, [r7, #10]
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	4413      	add	r3, r2
 8007c76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	461a      	mov	r2, r3
 8007c80:	2100      	movs	r1, #0
 8007c82:	6838      	ldr	r0, [r7, #0]
 8007c84:	f005 fe4d 	bl	800d922 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	605a      	str	r2, [r3, #4]
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <arm_fir_q31>:
void arm_fir_q31(
  const arm_fir_instance_q31 * S,
  const q31_t * pSrc,
        q31_t * pDst,
        uint32_t blockSize)
{
 8007c96:	b4f0      	push	{r4, r5, r6, r7}
 8007c98:	b090      	sub	sp, #64	; 0x40
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	607a      	str	r2, [r7, #4]
 8007ca2:	603b      	str	r3, [r7, #0]
        q31_t *pState = S->pState;                     /* State pointer */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	61bb      	str	r3, [r7, #24]
        q31_t *pStateCurnt;                            /* Points to the current sample of the state */
        q31_t *px;                                     /* Temporary pointer for state buffer */
  const q31_t *pb;                                     /* Temporary pointer for coefficient buffer */
        q63_t acc0;                                    /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	617b      	str	r3, [r7, #20]
        q31_t c0;                                      /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  blkCnt = blockSize % 0x3U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8007ccc:	e04a      	b.n	8007d64 <arm_fir_q31+0xce>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	1d13      	adds	r3, r2, #4
 8007cd2:	60bb      	str	r3, [r7, #8]
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	1d19      	adds	r1, r3, #4
 8007cd8:	63b9      	str	r1, [r7, #56]	; 0x38
 8007cda:	6812      	ldr	r2, [r2, #0]
 8007cdc:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0;
 8007cde:	f04f 0300 	mov.w	r3, #0
 8007ce2:	f04f 0400 	mov.w	r4, #0
 8007ce6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    /* Initialize state pointer */
    px = pState;
 8007cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	633b      	str	r3, [r7, #48]	; 0x30

    i = numTaps;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Perform the multiply-accumulates */
    do
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += (q63_t) *px++ * *pb++;
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf8:	1d1a      	adds	r2, r3, #4
 8007cfa:	637a      	str	r2, [r7, #52]	; 0x34
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	1d18      	adds	r0, r3, #4
 8007d08:	6338      	str	r0, [r7, #48]	; 0x30
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8007d10:	fb03 f502 	mul.w	r5, r3, r2
 8007d14:	fb01 f004 	mul.w	r0, r1, r4
 8007d18:	4428      	add	r0, r5
 8007d1a:	fba1 5603 	umull	r5, r6, r1, r3
 8007d1e:	1982      	adds	r2, r0, r6
 8007d20:	4616      	mov	r6, r2
 8007d22:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007d26:	186b      	adds	r3, r5, r1
 8007d28:	eb46 0402 	adc.w	r4, r6, r2
 8007d2c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

      i--;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	3b01      	subs	r3, #1
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
    } while (i > 0U);
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1dc      	bne.n	8007cf6 <arm_fir_q31+0x60>

    /* Result is in 2.62 format. Convert to 1.31 and store in destination buffer. */
    *pDst++ = (q31_t) (acc0 >> 31U);
 8007d3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007d40:	f04f 0300 	mov.w	r3, #0
 8007d44:	f04f 0400 	mov.w	r4, #0
 8007d48:	0fcb      	lsrs	r3, r1, #31
 8007d4a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8007d4e:	17d4      	asrs	r4, r2, #31
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	1d11      	adds	r1, r2, #4
 8007d54:	6079      	str	r1, [r7, #4]
 8007d56:	6013      	str	r3, [r2, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8007d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Decrement loop counter */
    blkCnt--;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1b1      	bne.n	8007cce <arm_fir_q31+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	623b      	str	r3, [r7, #32]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8007d76:	e00a      	b.n	8007d8e <arm_fir_q31+0xf8>
  {
    *pStateCurnt++ = *pState++;
 8007d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d7a:	1d13      	adds	r3, r2, #4
 8007d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	1d19      	adds	r1, r3, #4
 8007d82:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d84:	6812      	ldr	r2, [r2, #0]
 8007d86:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	623b      	str	r3, [r7, #32]
  while (tapCnt > 0U)
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1f1      	bne.n	8007d78 <arm_fir_q31+0xe2>
  }

}
 8007d94:	bf00      	nop
 8007d96:	3740      	adds	r7, #64	; 0x40
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bcf0      	pop	{r4, r5, r6, r7}
 8007d9c:	4770      	bx	lr

08007d9e <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007d9e:	b590      	push	{r4, r7, lr}
 8007da0:	b089      	sub	sp, #36	; 0x24
 8007da2:	af04      	add	r7, sp, #16
 8007da4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dac:	7919      	ldrb	r1, [r3, #4]
 8007dae:	2350      	movs	r3, #80	; 0x50
 8007db0:	2206      	movs	r2, #6
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 fc4e 	bl	8009654 <USBH_FindInterface>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	2bff      	cmp	r3, #255	; 0xff
 8007dc0:	d002      	beq.n	8007dc8 <USBH_MSC_InterfaceInit+0x2a>
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d901      	bls.n	8007dcc <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e0ef      	b.n	8007fac <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fc23 	bl	800961c <USBH_SelectInterface>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007de0:	2302      	movs	r3, #2
 8007de2:	e0e3      	b.n	8007fac <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007dea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007dee:	f005 fd7d 	bl	800d8ec <malloc>
 8007df2:	4603      	mov	r3, r0
 8007df4:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007e06:	2302      	movs	r3, #2
 8007e08:	e0d0      	b.n	8007fac <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e0e:	2100      	movs	r1, #0
 8007e10:	68b8      	ldr	r0, [r7, #8]
 8007e12:	f005 fd86 	bl	800d922 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	211a      	movs	r1, #26
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	4413      	add	r3, r2
 8007e22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	b25b      	sxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	da16      	bge.n	8007e5c <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	211a      	movs	r1, #26
 8007e34:	fb01 f303 	mul.w	r3, r1, r3
 8007e38:	4413      	add	r3, r2
 8007e3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	211a      	movs	r1, #26
 8007e4a:	fb01 f303 	mul.w	r3, r1, r3
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e54:	881a      	ldrh	r2, [r3, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	815a      	strh	r2, [r3, #10]
 8007e5a:	e015      	b.n	8007e88 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	211a      	movs	r1, #26
 8007e62:	fb01 f303 	mul.w	r3, r1, r3
 8007e66:	4413      	add	r3, r2
 8007e68:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e6c:	781a      	ldrb	r2, [r3, #0]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	211a      	movs	r1, #26
 8007e78:	fb01 f303 	mul.w	r3, r1, r3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e82:	881a      	ldrh	r2, [r3, #0]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	211a      	movs	r1, #26
 8007e8e:	fb01 f303 	mul.w	r3, r1, r3
 8007e92:	4413      	add	r3, r2
 8007e94:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	b25b      	sxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	da16      	bge.n	8007ece <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	211a      	movs	r1, #26
 8007ea6:	fb01 f303 	mul.w	r3, r1, r3
 8007eaa:	4413      	add	r3, r2
 8007eac:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007eb0:	781a      	ldrb	r2, [r3, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	211a      	movs	r1, #26
 8007ebc:	fb01 f303 	mul.w	r3, r1, r3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ec6:	881a      	ldrh	r2, [r3, #0]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	815a      	strh	r2, [r3, #10]
 8007ecc:	e015      	b.n	8007efa <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	211a      	movs	r1, #26
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	4413      	add	r3, r2
 8007eda:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ede:	781a      	ldrb	r2, [r3, #0]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	211a      	movs	r1, #26
 8007eea:	fb01 f303 	mul.w	r3, r1, r3
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ef4:	881a      	ldrh	r2, [r3, #0]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2200      	movs	r2, #0
 8007efe:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2200      	movs	r2, #0
 8007f04:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	799b      	ldrb	r3, [r3, #6]
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f002 fdc1 	bl	800aa9a <USBH_AllocPipe>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	79db      	ldrb	r3, [r3, #7]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f002 fdb7 	bl	800aa9a <USBH_AllocPipe>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fda3 	bl	8008a80 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	7959      	ldrb	r1, [r3, #5]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	7998      	ldrb	r0, [r3, #6]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	8912      	ldrh	r2, [r2, #8]
 8007f52:	9202      	str	r2, [sp, #8]
 8007f54:	2202      	movs	r2, #2
 8007f56:	9201      	str	r2, [sp, #4]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f002 fd6c 	bl	800aa3c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	7919      	ldrb	r1, [r3, #4]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	79d8      	ldrb	r0, [r3, #7]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	8952      	ldrh	r2, [r2, #10]
 8007f7c:	9202      	str	r2, [sp, #8]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	9201      	str	r2, [sp, #4]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4623      	mov	r3, r4
 8007f86:	4602      	mov	r2, r0
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f002 fd57 	bl	800aa3c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	791b      	ldrb	r3, [r3, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f005 fbe1 	bl	800d75e <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	795b      	ldrb	r3, [r3, #5]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f005 fbda 	bl	800d75e <USBH_LL_SetToggle>

  return USBH_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd90      	pop	{r4, r7, pc}

08007fb4 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	795b      	ldrb	r3, [r3, #5]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00e      	beq.n	8007fec <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	795b      	ldrb	r3, [r3, #5]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f002 fd50 	bl	800aa7a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	795b      	ldrb	r3, [r3, #5]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f002 fd7b 	bl	800aadc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	791b      	ldrb	r3, [r3, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00e      	beq.n	8008012 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	791b      	ldrb	r3, [r3, #4]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f002 fd3d 	bl	800aa7a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	791b      	ldrb	r3, [r3, #4]
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f002 fd68 	bl	800aadc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00b      	beq.n	8008036 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	4618      	mov	r0, r3
 8008028:	f005 fc68 	bl	800d8fc <free>
    phost->pActiveClass->pData = 0U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008032:	2200      	movs	r2, #0
 8008034:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008052:	2301      	movs	r3, #1
 8008054:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	7b9b      	ldrb	r3, [r3, #14]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d004      	beq.n	8008068 <USBH_MSC_ClassRequest+0x28>
 800805e:	2b03      	cmp	r3, #3
 8008060:	d03e      	beq.n	80080e0 <USBH_MSC_ClassRequest+0xa0>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d000      	beq.n	8008068 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8008066:	e04a      	b.n	80080fe <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fce9 	bl	8008a44 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008072:	4603      	mov	r3, r0
 8008074:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d104      	bne.n	8008086 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2200      	movs	r2, #0
 8008080:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d135      	bne.n	80080f8 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d804      	bhi.n	800809e <USBH_MSC_ClassRequest+0x5e>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	3301      	adds	r3, #1
 800809a:	b2da      	uxtb	r2, r3
 800809c:	e000      	b.n	80080a0 <USBH_MSC_ClassRequest+0x60>
 800809e:	2202      	movs	r2, #2
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80080a4:	2300      	movs	r3, #0
 80080a6:	73bb      	strb	r3, [r7, #14]
 80080a8:	e014      	b.n	80080d4 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	2134      	movs	r1, #52	; 0x34
 80080b0:	fb01 f303 	mul.w	r3, r1, r3
 80080b4:	4413      	add	r3, r2
 80080b6:	3392      	adds	r3, #146	; 0x92
 80080b8:	2202      	movs	r2, #2
 80080ba:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	2134      	movs	r1, #52	; 0x34
 80080c2:	fb01 f303 	mul.w	r3, r1, r3
 80080c6:	4413      	add	r3, r2
 80080c8:	33c1      	adds	r3, #193	; 0xc1
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	3301      	adds	r3, #1
 80080d2:	73bb      	strb	r3, [r7, #14]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	7bba      	ldrb	r2, [r7, #14]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d3e5      	bcc.n	80080aa <USBH_MSC_ClassRequest+0x6a>
      break;
 80080de:	e00b      	b.n	80080f8 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80080e0:	2100      	movs	r1, #0
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f002 f877 	bl	800a1d6 <USBH_ClrFeature>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	7bda      	ldrb	r2, [r3, #15]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	739a      	strb	r2, [r3, #14]
      break;
 80080f6:	e001      	b.n	80080fc <USBH_MSC_ClassRequest+0xbc>
      break;
 80080f8:	bf00      	nop
 80080fa:	e000      	b.n	80080fe <USBH_MSC_ClassRequest+0xbe>
      break;
 80080fc:	bf00      	nop
  }

  return status;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800811a:	2301      	movs	r3, #1
 800811c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800811e:	2301      	movs	r3, #1
 8008120:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008122:	2301      	movs	r3, #1
 8008124:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	7b1b      	ldrb	r3, [r3, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <USBH_MSC_Process+0x2e>
 800812e:	2b01      	cmp	r3, #1
 8008130:	f000 8271 	beq.w	8008616 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008134:	e272      	b.n	800861c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	429a      	cmp	r2, r3
 8008144:	f080 824f 	bcs.w	80085e6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800814e:	4619      	mov	r1, r3
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	2334      	movs	r3, #52	; 0x34
 8008154:	fb03 f301 	mul.w	r3, r3, r1
 8008158:	4413      	add	r3, r2
 800815a:	3391      	adds	r3, #145	; 0x91
 800815c:	2201      	movs	r2, #1
 800815e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008166:	4619      	mov	r1, r3
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	2334      	movs	r3, #52	; 0x34
 800816c:	fb03 f301 	mul.w	r3, r3, r1
 8008170:	4413      	add	r3, r2
 8008172:	3390      	adds	r3, #144	; 0x90
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b08      	cmp	r3, #8
 8008178:	f200 8243 	bhi.w	8008602 <USBH_MSC_Process+0x4fa>
 800817c:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <USBH_MSC_Process+0x7c>)
 800817e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008182:	bf00      	nop
 8008184:	080081a9 	.word	0x080081a9
 8008188:	08008603 	.word	0x08008603
 800818c:	08008271 	.word	0x08008271
 8008190:	080083f5 	.word	0x080083f5
 8008194:	080081cf 	.word	0x080081cf
 8008198:	080084c1 	.word	0x080084c1
 800819c:	08008603 	.word	0x08008603
 80081a0:	08008603 	.word	0x08008603
 80081a4:	080085d5 	.word	0x080085d5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081ae:	4619      	mov	r1, r3
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	2334      	movs	r3, #52	; 0x34
 80081b4:	fb03 f301 	mul.w	r3, r3, r1
 80081b8:	4413      	add	r3, r2
 80081ba:	3390      	adds	r3, #144	; 0x90
 80081bc:	2204      	movs	r2, #4
 80081be:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80081cc:	e222      	b.n	8008614 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081d4:	b2d9      	uxtb	r1, r3
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081dc:	461a      	mov	r2, r3
 80081de:	2334      	movs	r3, #52	; 0x34
 80081e0:	fb03 f302 	mul.w	r3, r3, r2
 80081e4:	3398      	adds	r3, #152	; 0x98
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	4413      	add	r3, r2
 80081ea:	3307      	adds	r3, #7
 80081ec:	461a      	mov	r2, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 ff68 	bl	80090c4 <USBH_MSC_SCSI_Inquiry>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10b      	bne.n	8008216 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008204:	4619      	mov	r1, r3
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	2334      	movs	r3, #52	; 0x34
 800820a:	fb03 f301 	mul.w	r3, r3, r1
 800820e:	4413      	add	r3, r2
 8008210:	3390      	adds	r3, #144	; 0x90
 8008212:	2202      	movs	r2, #2
 8008214:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d10c      	bne.n	8008236 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008222:	4619      	mov	r1, r3
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	2334      	movs	r3, #52	; 0x34
 8008228:	fb03 f301 	mul.w	r3, r3, r1
 800822c:	4413      	add	r3, r2
 800822e:	3390      	adds	r3, #144	; 0x90
 8008230:	2205      	movs	r2, #5
 8008232:	701a      	strb	r2, [r3, #0]
            break;
 8008234:	e1e7      	b.n	8008606 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b04      	cmp	r3, #4
 800823a:	f040 81e4 	bne.w	8008606 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008244:	4619      	mov	r1, r3
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	2334      	movs	r3, #52	; 0x34
 800824a:	fb03 f301 	mul.w	r3, r3, r1
 800824e:	4413      	add	r3, r2
 8008250:	3390      	adds	r3, #144	; 0x90
 8008252:	2201      	movs	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800825c:	4619      	mov	r1, r3
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	2334      	movs	r3, #52	; 0x34
 8008262:	fb03 f301 	mul.w	r3, r3, r1
 8008266:	4413      	add	r3, r2
 8008268:	3391      	adds	r3, #145	; 0x91
 800826a:	2202      	movs	r2, #2
 800826c:	701a      	strb	r2, [r3, #0]
            break;
 800826e:	e1ca      	b.n	8008606 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008276:	b2db      	uxtb	r3, r3
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fe64 	bl	8008f48 <USBH_MSC_SCSI_TestUnitReady>
 8008280:	4603      	mov	r3, r0
 8008282:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d149      	bne.n	800831e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008290:	4619      	mov	r1, r3
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	2334      	movs	r3, #52	; 0x34
 8008296:	fb03 f301 	mul.w	r3, r3, r1
 800829a:	4413      	add	r3, r2
 800829c:	3392      	adds	r3, #146	; 0x92
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00c      	beq.n	80082be <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082aa:	4619      	mov	r1, r3
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	2334      	movs	r3, #52	; 0x34
 80082b0:	fb03 f301 	mul.w	r3, r3, r1
 80082b4:	4413      	add	r3, r2
 80082b6:	33c1      	adds	r3, #193	; 0xc1
 80082b8:	2201      	movs	r2, #1
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	e00b      	b.n	80082d6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082c4:	4619      	mov	r1, r3
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	2334      	movs	r3, #52	; 0x34
 80082ca:	fb03 f301 	mul.w	r3, r3, r1
 80082ce:	4413      	add	r3, r2
 80082d0:	33c1      	adds	r3, #193	; 0xc1
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082dc:	4619      	mov	r1, r3
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	2334      	movs	r3, #52	; 0x34
 80082e2:	fb03 f301 	mul.w	r3, r3, r1
 80082e6:	4413      	add	r3, r2
 80082e8:	3390      	adds	r3, #144	; 0x90
 80082ea:	2203      	movs	r2, #3
 80082ec:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082f4:	4619      	mov	r1, r3
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	2334      	movs	r3, #52	; 0x34
 80082fa:	fb03 f301 	mul.w	r3, r3, r1
 80082fe:	4413      	add	r3, r2
 8008300:	3391      	adds	r3, #145	; 0x91
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800830c:	4619      	mov	r1, r3
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	2334      	movs	r3, #52	; 0x34
 8008312:	fb03 f301 	mul.w	r3, r3, r1
 8008316:	4413      	add	r3, r2
 8008318:	3392      	adds	r3, #146	; 0x92
 800831a:	2200      	movs	r2, #0
 800831c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b02      	cmp	r3, #2
 8008322:	d14a      	bne.n	80083ba <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800832a:	4619      	mov	r1, r3
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	2334      	movs	r3, #52	; 0x34
 8008330:	fb03 f301 	mul.w	r3, r3, r1
 8008334:	4413      	add	r3, r2
 8008336:	3392      	adds	r3, #146	; 0x92
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d00c      	beq.n	8008358 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008344:	4619      	mov	r1, r3
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	2334      	movs	r3, #52	; 0x34
 800834a:	fb03 f301 	mul.w	r3, r3, r1
 800834e:	4413      	add	r3, r2
 8008350:	33c1      	adds	r3, #193	; 0xc1
 8008352:	2201      	movs	r2, #1
 8008354:	701a      	strb	r2, [r3, #0]
 8008356:	e00b      	b.n	8008370 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800835e:	4619      	mov	r1, r3
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	2334      	movs	r3, #52	; 0x34
 8008364:	fb03 f301 	mul.w	r3, r3, r1
 8008368:	4413      	add	r3, r2
 800836a:	33c1      	adds	r3, #193	; 0xc1
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008376:	4619      	mov	r1, r3
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	2334      	movs	r3, #52	; 0x34
 800837c:	fb03 f301 	mul.w	r3, r3, r1
 8008380:	4413      	add	r3, r2
 8008382:	3390      	adds	r3, #144	; 0x90
 8008384:	2205      	movs	r2, #5
 8008386:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800838e:	4619      	mov	r1, r3
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	2334      	movs	r3, #52	; 0x34
 8008394:	fb03 f301 	mul.w	r3, r3, r1
 8008398:	4413      	add	r3, r2
 800839a:	3391      	adds	r3, #145	; 0x91
 800839c:	2201      	movs	r2, #1
 800839e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083a6:	4619      	mov	r1, r3
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	2334      	movs	r3, #52	; 0x34
 80083ac:	fb03 f301 	mul.w	r3, r3, r1
 80083b0:	4413      	add	r3, r2
 80083b2:	3392      	adds	r3, #146	; 0x92
 80083b4:	2202      	movs	r2, #2
 80083b6:	701a      	strb	r2, [r3, #0]
            break;
 80083b8:	e127      	b.n	800860a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b04      	cmp	r3, #4
 80083be:	f040 8124 	bne.w	800860a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083c8:	4619      	mov	r1, r3
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	2334      	movs	r3, #52	; 0x34
 80083ce:	fb03 f301 	mul.w	r3, r3, r1
 80083d2:	4413      	add	r3, r2
 80083d4:	3390      	adds	r3, #144	; 0x90
 80083d6:	2201      	movs	r2, #1
 80083d8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083e0:	4619      	mov	r1, r3
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	2334      	movs	r3, #52	; 0x34
 80083e6:	fb03 f301 	mul.w	r3, r3, r1
 80083ea:	4413      	add	r3, r2
 80083ec:	3391      	adds	r3, #145	; 0x91
 80083ee:	2202      	movs	r2, #2
 80083f0:	701a      	strb	r2, [r3, #0]
            break;
 80083f2:	e10a      	b.n	800860a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083fa:	b2d9      	uxtb	r1, r3
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008402:	461a      	mov	r2, r3
 8008404:	2334      	movs	r3, #52	; 0x34
 8008406:	fb03 f302 	mul.w	r3, r3, r2
 800840a:	3390      	adds	r3, #144	; 0x90
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4413      	add	r3, r2
 8008410:	3304      	adds	r3, #4
 8008412:	461a      	mov	r2, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fdda 	bl	8008fce <USBH_MSC_SCSI_ReadCapacity>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d120      	bne.n	8008466 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800842a:	4619      	mov	r1, r3
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	2334      	movs	r3, #52	; 0x34
 8008430:	fb03 f301 	mul.w	r3, r3, r1
 8008434:	4413      	add	r3, r2
 8008436:	3390      	adds	r3, #144	; 0x90
 8008438:	2201      	movs	r2, #1
 800843a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008442:	4619      	mov	r1, r3
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	2334      	movs	r3, #52	; 0x34
 8008448:	fb03 f301 	mul.w	r3, r3, r1
 800844c:	4413      	add	r3, r2
 800844e:	3391      	adds	r3, #145	; 0x91
 8008450:	2200      	movs	r2, #0
 8008452:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800845a:	3301      	adds	r3, #1
 800845c:	b29a      	uxth	r2, r3
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008464:	e0d3      	b.n	800860e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	2b02      	cmp	r3, #2
 800846a:	d10c      	bne.n	8008486 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008472:	4619      	mov	r1, r3
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	2334      	movs	r3, #52	; 0x34
 8008478:	fb03 f301 	mul.w	r3, r3, r1
 800847c:	4413      	add	r3, r2
 800847e:	3390      	adds	r3, #144	; 0x90
 8008480:	2205      	movs	r2, #5
 8008482:	701a      	strb	r2, [r3, #0]
            break;
 8008484:	e0c3      	b.n	800860e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	2b04      	cmp	r3, #4
 800848a:	f040 80c0 	bne.w	800860e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008494:	4619      	mov	r1, r3
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	2334      	movs	r3, #52	; 0x34
 800849a:	fb03 f301 	mul.w	r3, r3, r1
 800849e:	4413      	add	r3, r2
 80084a0:	3390      	adds	r3, #144	; 0x90
 80084a2:	2201      	movs	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084ac:	4619      	mov	r1, r3
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	2334      	movs	r3, #52	; 0x34
 80084b2:	fb03 f301 	mul.w	r3, r3, r1
 80084b6:	4413      	add	r3, r2
 80084b8:	3391      	adds	r3, #145	; 0x91
 80084ba:	2202      	movs	r2, #2
 80084bc:	701a      	strb	r2, [r3, #0]
            break;
 80084be:	e0a6      	b.n	800860e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084c6:	b2d9      	uxtb	r1, r3
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084ce:	461a      	mov	r2, r3
 80084d0:	2334      	movs	r3, #52	; 0x34
 80084d2:	fb03 f302 	mul.w	r3, r3, r2
 80084d6:	3398      	adds	r3, #152	; 0x98
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4413      	add	r3, r2
 80084dc:	3304      	adds	r3, #4
 80084de:	461a      	mov	r2, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fe94 	bl	800920e <USBH_MSC_SCSI_RequestSense>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d145      	bne.n	800857c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084f6:	4619      	mov	r1, r3
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	2334      	movs	r3, #52	; 0x34
 80084fc:	fb03 f301 	mul.w	r3, r3, r1
 8008500:	4413      	add	r3, r2
 8008502:	339c      	adds	r3, #156	; 0x9c
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b06      	cmp	r3, #6
 8008508:	d00c      	beq.n	8008524 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008510:	4619      	mov	r1, r3
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	2334      	movs	r3, #52	; 0x34
 8008516:	fb03 f301 	mul.w	r3, r3, r1
 800851a:	4413      	add	r3, r2
 800851c:	339c      	adds	r3, #156	; 0x9c
 800851e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008520:	2b02      	cmp	r3, #2
 8008522:	d117      	bne.n	8008554 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	f242 720f 	movw	r2, #9999	; 0x270f
 8008536:	4293      	cmp	r3, r2
 8008538:	d80c      	bhi.n	8008554 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008540:	4619      	mov	r1, r3
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	2334      	movs	r3, #52	; 0x34
 8008546:	fb03 f301 	mul.w	r3, r3, r1
 800854a:	4413      	add	r3, r2
 800854c:	3390      	adds	r3, #144	; 0x90
 800854e:	2202      	movs	r2, #2
 8008550:	701a      	strb	r2, [r3, #0]
                  break;
 8008552:	e05f      	b.n	8008614 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800855a:	4619      	mov	r1, r3
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	2334      	movs	r3, #52	; 0x34
 8008560:	fb03 f301 	mul.w	r3, r3, r1
 8008564:	4413      	add	r3, r2
 8008566:	3390      	adds	r3, #144	; 0x90
 8008568:	2201      	movs	r2, #1
 800856a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008572:	3301      	adds	r3, #1
 8008574:	b29a      	uxth	r2, r3
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d10c      	bne.n	800859c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008588:	4619      	mov	r1, r3
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	2334      	movs	r3, #52	; 0x34
 800858e:	fb03 f301 	mul.w	r3, r3, r1
 8008592:	4413      	add	r3, r2
 8008594:	3390      	adds	r3, #144	; 0x90
 8008596:	2208      	movs	r2, #8
 8008598:	701a      	strb	r2, [r3, #0]
            break;
 800859a:	e03a      	b.n	8008612 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d137      	bne.n	8008612 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085a8:	4619      	mov	r1, r3
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	2334      	movs	r3, #52	; 0x34
 80085ae:	fb03 f301 	mul.w	r3, r3, r1
 80085b2:	4413      	add	r3, r2
 80085b4:	3390      	adds	r3, #144	; 0x90
 80085b6:	2201      	movs	r2, #1
 80085b8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085c0:	4619      	mov	r1, r3
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	2334      	movs	r3, #52	; 0x34
 80085c6:	fb03 f301 	mul.w	r3, r3, r1
 80085ca:	4413      	add	r3, r2
 80085cc:	3391      	adds	r3, #145	; 0x91
 80085ce:	2202      	movs	r2, #2
 80085d0:	701a      	strb	r2, [r3, #0]
            break;
 80085d2:	e01e      	b.n	8008612 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085da:	3301      	adds	r3, #1
 80085dc:	b29a      	uxth	r2, r3
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80085e4:	e016      	b.n	8008614 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2201      	movs	r2, #1
 80085f2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085fa:	2102      	movs	r1, #2
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	4798      	blx	r3
      break;
 8008600:	e00c      	b.n	800861c <USBH_MSC_Process+0x514>
            break;
 8008602:	bf00      	nop
 8008604:	e00a      	b.n	800861c <USBH_MSC_Process+0x514>
            break;
 8008606:	bf00      	nop
 8008608:	e008      	b.n	800861c <USBH_MSC_Process+0x514>
            break;
 800860a:	bf00      	nop
 800860c:	e006      	b.n	800861c <USBH_MSC_Process+0x514>
            break;
 800860e:	bf00      	nop
 8008610:	e004      	b.n	800861c <USBH_MSC_Process+0x514>
            break;
 8008612:	bf00      	nop
      break;
 8008614:	e002      	b.n	800861c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]
      break;
 800861a:	bf00      	nop
  }
  return error;
 800861c:	7dfb      	ldrb	r3, [r7, #23]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop

08008628 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b088      	sub	sp, #32
 8008642:	af02      	add	r7, sp, #8
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008654:	2301      	movs	r3, #1
 8008656:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008658:	2301      	movs	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800865c:	78fb      	ldrb	r3, [r7, #3]
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	2134      	movs	r1, #52	; 0x34
 8008662:	fb01 f303 	mul.w	r3, r1, r3
 8008666:	4413      	add	r3, r2
 8008668:	3390      	adds	r3, #144	; 0x90
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b06      	cmp	r3, #6
 800866e:	d004      	beq.n	800867a <USBH_MSC_RdWrProcess+0x3c>
 8008670:	2b07      	cmp	r3, #7
 8008672:	d037      	beq.n	80086e4 <USBH_MSC_RdWrProcess+0xa6>
 8008674:	2b05      	cmp	r3, #5
 8008676:	d06a      	beq.n	800874e <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8008678:	e0a6      	b.n	80087c8 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800867a:	78f9      	ldrb	r1, [r7, #3]
 800867c:	2300      	movs	r3, #0
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	2300      	movs	r3, #0
 8008682:	2200      	movs	r2, #0
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fea6 	bl	80093d6 <USBH_MSC_SCSI_Read>
 800868a:	4603      	mov	r3, r0
 800868c:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	2134      	movs	r1, #52	; 0x34
 800869a:	fb01 f303 	mul.w	r3, r1, r3
 800869e:	4413      	add	r3, r2
 80086a0:	3390      	adds	r3, #144	; 0x90
 80086a2:	2201      	movs	r2, #1
 80086a4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	75fb      	strb	r3, [r7, #23]
      break;
 80086aa:	e088      	b.n	80087be <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d109      	bne.n	80086c6 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	2134      	movs	r1, #52	; 0x34
 80086b8:	fb01 f303 	mul.w	r3, r1, r3
 80086bc:	4413      	add	r3, r2
 80086be:	3390      	adds	r3, #144	; 0x90
 80086c0:	2205      	movs	r2, #5
 80086c2:	701a      	strb	r2, [r3, #0]
      break;
 80086c4:	e07b      	b.n	80087be <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d178      	bne.n	80087be <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	2134      	movs	r1, #52	; 0x34
 80086d2:	fb01 f303 	mul.w	r3, r1, r3
 80086d6:	4413      	add	r3, r2
 80086d8:	3390      	adds	r3, #144	; 0x90
 80086da:	2208      	movs	r2, #8
 80086dc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80086de:	2302      	movs	r3, #2
 80086e0:	75fb      	strb	r3, [r7, #23]
      break;
 80086e2:	e06c      	b.n	80087be <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80086e4:	78f9      	ldrb	r1, [r7, #3]
 80086e6:	2300      	movs	r3, #0
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	2300      	movs	r3, #0
 80086ec:	2200      	movs	r2, #0
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fe06 	bl	8009300 <USBH_MSC_SCSI_Write>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10b      	bne.n	8008716 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	2134      	movs	r1, #52	; 0x34
 8008704:	fb01 f303 	mul.w	r3, r1, r3
 8008708:	4413      	add	r3, r2
 800870a:	3390      	adds	r3, #144	; 0x90
 800870c:	2201      	movs	r2, #1
 800870e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	75fb      	strb	r3, [r7, #23]
      break;
 8008714:	e055      	b.n	80087c2 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	2b02      	cmp	r3, #2
 800871a:	d109      	bne.n	8008730 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	2134      	movs	r1, #52	; 0x34
 8008722:	fb01 f303 	mul.w	r3, r1, r3
 8008726:	4413      	add	r3, r2
 8008728:	3390      	adds	r3, #144	; 0x90
 800872a:	2205      	movs	r2, #5
 800872c:	701a      	strb	r2, [r3, #0]
      break;
 800872e:	e048      	b.n	80087c2 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	2b04      	cmp	r3, #4
 8008734:	d145      	bne.n	80087c2 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008736:	78fb      	ldrb	r3, [r7, #3]
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	2134      	movs	r1, #52	; 0x34
 800873c:	fb01 f303 	mul.w	r3, r1, r3
 8008740:	4413      	add	r3, r2
 8008742:	3390      	adds	r3, #144	; 0x90
 8008744:	2208      	movs	r2, #8
 8008746:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008748:	2302      	movs	r3, #2
 800874a:	75fb      	strb	r3, [r7, #23]
      break;
 800874c:	e039      	b.n	80087c2 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	2234      	movs	r2, #52	; 0x34
 8008752:	fb02 f303 	mul.w	r3, r2, r3
 8008756:	3398      	adds	r3, #152	; 0x98
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4413      	add	r3, r2
 800875c:	1d1a      	adds	r2, r3, #4
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fd53 	bl	800920e <USBH_MSC_SCSI_RequestSense>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d113      	bne.n	800879a <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	2134      	movs	r1, #52	; 0x34
 8008778:	fb01 f303 	mul.w	r3, r1, r3
 800877c:	4413      	add	r3, r2
 800877e:	3390      	adds	r3, #144	; 0x90
 8008780:	2201      	movs	r2, #1
 8008782:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	2134      	movs	r1, #52	; 0x34
 800878a:	fb01 f303 	mul.w	r3, r1, r3
 800878e:	4413      	add	r3, r2
 8008790:	3391      	adds	r3, #145	; 0x91
 8008792:	2202      	movs	r2, #2
 8008794:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8008796:	2302      	movs	r3, #2
 8008798:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d012      	beq.n	80087c6 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	2b04      	cmp	r3, #4
 80087a4:	d10f      	bne.n	80087c6 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	2134      	movs	r1, #52	; 0x34
 80087ac:	fb01 f303 	mul.w	r3, r1, r3
 80087b0:	4413      	add	r3, r2
 80087b2:	3390      	adds	r3, #144	; 0x90
 80087b4:	2208      	movs	r2, #8
 80087b6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80087b8:	2302      	movs	r3, #2
 80087ba:	75fb      	strb	r3, [r7, #23]
      break;
 80087bc:	e003      	b.n	80087c6 <USBH_MSC_RdWrProcess+0x188>
      break;
 80087be:	bf00      	nop
 80087c0:	e002      	b.n	80087c8 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80087c2:	bf00      	nop
 80087c4:	e000      	b.n	80087c8 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80087c6:	bf00      	nop

  }
  return error;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	460b      	mov	r3, r1
 80087dc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b0b      	cmp	r3, #11
 80087f0:	d10c      	bne.n	800880c <USBH_MSC_UnitIsReady+0x3a>
 80087f2:	78fb      	ldrb	r3, [r7, #3]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	2134      	movs	r1, #52	; 0x34
 80087f8:	fb01 f303 	mul.w	r3, r1, r3
 80087fc:	4413      	add	r3, r2
 80087fe:	3391      	adds	r3, #145	; 0x91
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d102      	bne.n	800880c <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008806:	2301      	movs	r3, #1
 8008808:	73fb      	strb	r3, [r7, #15]
 800880a:	e001      	b.n	8008810 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008810:	7bfb      	ldrb	r3, [r7, #15]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b086      	sub	sp, #24
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	460b      	mov	r3, r1
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b0b      	cmp	r3, #11
 800883e:	d10d      	bne.n	800885c <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	2234      	movs	r2, #52	; 0x34
 8008844:	fb02 f303 	mul.w	r3, r2, r3
 8008848:	3390      	adds	r3, #144	; 0x90
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	4413      	add	r3, r2
 800884e:	2234      	movs	r2, #52	; 0x34
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f005 f85a 	bl	800d90c <memcpy>
    return USBH_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	e000      	b.n	800885e <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800885c:	2302      	movs	r3, #2
  }
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b088      	sub	sp, #32
 800886a:	af02      	add	r7, sp, #8
 800886c:	60f8      	str	r0, [r7, #12]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	603b      	str	r3, [r7, #0]
 8008872:	460b      	mov	r3, r1
 8008874:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00e      	beq.n	80088aa <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008892:	2b0b      	cmp	r3, #11
 8008894:	d109      	bne.n	80088aa <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008896:	7afb      	ldrb	r3, [r7, #11]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	2134      	movs	r1, #52	; 0x34
 800889c:	fb01 f303 	mul.w	r3, r1, r3
 80088a0:	4413      	add	r3, r2
 80088a2:	3390      	adds	r3, #144	; 0x90
 80088a4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d001      	beq.n	80088ae <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80088aa:	2302      	movs	r3, #2
 80088ac:	e040      	b.n	8008930 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2206      	movs	r2, #6
 80088b2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80088b4:	7afb      	ldrb	r3, [r7, #11]
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	2134      	movs	r1, #52	; 0x34
 80088ba:	fb01 f303 	mul.w	r3, r1, r3
 80088be:	4413      	add	r3, r2
 80088c0:	3390      	adds	r3, #144	; 0x90
 80088c2:	2206      	movs	r2, #6
 80088c4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80088c6:	7afb      	ldrb	r3, [r7, #11]
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80088d0:	7af9      	ldrb	r1, [r7, #11]
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 fd7b 	bl	80093d6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088e6:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80088e8:	e016      	b.n	8008918 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	1ad2      	subs	r2, r2, r3
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80088fa:	fb01 f303 	mul.w	r3, r1, r3
 80088fe:	429a      	cmp	r2, r3
 8008900:	d805      	bhi.n	800890e <USBH_MSC_Read+0xa8>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2201      	movs	r2, #1
 8008912:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008914:	2302      	movs	r3, #2
 8008916:	e00b      	b.n	8008930 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	4619      	mov	r1, r3
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f7ff fe8e 	bl	800863e <USBH_MSC_RdWrProcess>
 8008922:	4603      	mov	r3, r0
 8008924:	2b01      	cmp	r3, #1
 8008926:	d0e0      	beq.n	80088ea <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2201      	movs	r2, #1
 800892c:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af02      	add	r7, sp, #8
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	460b      	mov	r3, r1
 8008946:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00e      	beq.n	800897c <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008964:	2b0b      	cmp	r3, #11
 8008966:	d109      	bne.n	800897c <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	2134      	movs	r1, #52	; 0x34
 800896e:	fb01 f303 	mul.w	r3, r1, r3
 8008972:	4413      	add	r3, r2
 8008974:	3390      	adds	r3, #144	; 0x90
 8008976:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008978:	2b01      	cmp	r3, #1
 800897a:	d001      	beq.n	8008980 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800897c:	2302      	movs	r3, #2
 800897e:	e040      	b.n	8008a02 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2207      	movs	r2, #7
 8008984:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008986:	7afb      	ldrb	r3, [r7, #11]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	2134      	movs	r1, #52	; 0x34
 800898c:	fb01 f303 	mul.w	r3, r1, r3
 8008990:	4413      	add	r3, r2
 8008992:	3390      	adds	r3, #144	; 0x90
 8008994:	2207      	movs	r2, #7
 8008996:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	b29a      	uxth	r2, r3
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80089a2:	7af9      	ldrb	r1, [r7, #11]
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 fca7 	bl	8009300 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089b8:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80089ba:	e016      	b.n	80089ea <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	1ad2      	subs	r2, r2, r3
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	f242 7110 	movw	r1, #10000	; 0x2710
 80089cc:	fb01 f303 	mul.w	r3, r1, r3
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d805      	bhi.n	80089e0 <USBH_MSC_Write+0xa8>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d104      	bne.n	80089ea <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	2201      	movs	r2, #1
 80089e4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80089e6:	2302      	movs	r3, #2
 80089e8:	e00b      	b.n	8008a02 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80089ea:	7afb      	ldrb	r3, [r7, #11]
 80089ec:	4619      	mov	r1, r3
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7ff fe25 	bl	800863e <USBH_MSC_RdWrProcess>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d0e0      	beq.n	80089bc <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2201      	movs	r2, #1
 80089fe:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2221      	movs	r2, #33	; 0x21
 8008a16:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	22ff      	movs	r2, #255	; 0xff
 8008a1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8008a30:	2200      	movs	r2, #0
 8008a32:	2100      	movs	r1, #0
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 fdae 	bl	800a596 <USBH_CtlReq>
 8008a3a:	4603      	mov	r3, r0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	22a1      	movs	r2, #161	; 0xa1
 8008a52:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	22fe      	movs	r2, #254	; 0xfe
 8008a58:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 fd90 	bl	800a596 <USBH_CtlReq>
 8008a76:	4603      	mov	r3, r0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4a09      	ldr	r2, [pc, #36]	; (8008abc <USBH_MSC_BOT_Init+0x3c>)
 8008a96:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4a09      	ldr	r2, [pc, #36]	; (8008ac0 <USBH_MSC_BOT_Init+0x40>)
 8008a9c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	43425355 	.word	0x43425355
 8008ac0:	20304050 	.word	0x20304050

08008ac4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008af4:	3b01      	subs	r3, #1
 8008af6:	2b0a      	cmp	r3, #10
 8008af8:	f200 81a1 	bhi.w	8008e3e <USBH_MSC_BOT_Process+0x37a>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <USBH_MSC_BOT_Process+0x40>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b31 	.word	0x08008b31
 8008b08:	08008b5b 	.word	0x08008b5b
 8008b0c:	08008bc5 	.word	0x08008bc5
 8008b10:	08008be3 	.word	0x08008be3
 8008b14:	08008c67 	.word	0x08008c67
 8008b18:	08008c8b 	.word	0x08008c8b
 8008b1c:	08008d25 	.word	0x08008d25
 8008b20:	08008d41 	.word	0x08008d41
 8008b24:	08008d93 	.word	0x08008d93
 8008b28:	08008dc3 	.word	0x08008dc3
 8008b2c:	08008e25 	.word	0x08008e25
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	795a      	ldrb	r2, [r3, #5]
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	221f      	movs	r2, #31
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 ff2f 	bl	800a9b6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008b58:	e180      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	795b      	ldrb	r3, [r3, #5]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f004 fddb 	bl	800d71c <USBH_LL_GetURBState>
 8008b66:	4603      	mov	r3, r0
 8008b68:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008b6a:	7d3b      	ldrb	r3, [r7, #20]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d118      	bne.n	8008ba2 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00f      	beq.n	8008b98 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008b7e:	b25b      	sxtb	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	da04      	bge.n	8008b8e <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	2203      	movs	r2, #3
 8008b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b8c:	e159      	b.n	8008e42 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	2205      	movs	r2, #5
 8008b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b96:	e154      	b.n	8008e42 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2207      	movs	r2, #7
 8008b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ba0:	e14f      	b.n	8008e42 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ba2:	7d3b      	ldrb	r3, [r7, #20]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d104      	bne.n	8008bb2 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008bb0:	e147      	b.n	8008e42 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8008bb2:	7d3b      	ldrb	r3, [r7, #20]
 8008bb4:	2b05      	cmp	r3, #5
 8008bb6:	f040 8144 	bne.w	8008e42 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	220a      	movs	r2, #10
 8008bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008bc2:	e13e      	b.n	8008e42 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	895a      	ldrh	r2, [r3, #10]
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	791b      	ldrb	r3, [r3, #4]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 ff14 	bl	800aa00 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	2204      	movs	r2, #4
 8008bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008be0:	e13c      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	791b      	ldrb	r3, [r3, #4]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f004 fd97 	bl	800d71c <USBH_LL_GetURBState>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008bf2:	7d3b      	ldrb	r3, [r7, #20]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d12d      	bne.n	8008c54 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	8952      	ldrh	r2, [r2, #10]
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d910      	bls.n	8008c26 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	8952      	ldrh	r2, [r2, #10]
 8008c0e:	441a      	add	r2, r3
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	8952      	ldrh	r2, [r2, #10]
 8008c1e:	1a9a      	subs	r2, r3, r2
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c24:	e002      	b.n	8008c2c <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00a      	beq.n	8008c4a <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	895a      	ldrh	r2, [r3, #10]
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	791b      	ldrb	r3, [r3, #4]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f001 fedc 	bl	800aa00 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008c48:	e0fd      	b.n	8008e46 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2207      	movs	r2, #7
 8008c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c52:	e0f8      	b.n	8008e46 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8008c54:	7d3b      	ldrb	r3, [r7, #20]
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	f040 80f5 	bne.w	8008e46 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	2209      	movs	r2, #9
 8008c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c64:	e0ef      	b.n	8008e46 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	891a      	ldrh	r2, [r3, #8]
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	7958      	ldrb	r0, [r3, #5]
 8008c74:	2301      	movs	r3, #1
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	4603      	mov	r3, r0
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fe9b 	bl	800a9b6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2206      	movs	r2, #6
 8008c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c88:	e0e8      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	795b      	ldrb	r3, [r3, #5]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f004 fd43 	bl	800d71c <USBH_LL_GetURBState>
 8008c96:	4603      	mov	r3, r0
 8008c98:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008c9a:	7d3b      	ldrb	r3, [r7, #20]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d130      	bne.n	8008d02 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	8912      	ldrh	r2, [r2, #8]
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d910      	bls.n	8008cce <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	8912      	ldrh	r2, [r2, #8]
 8008cb6:	441a      	add	r2, r3
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	8912      	ldrh	r2, [r2, #8]
 8008cc6:	1a9a      	subs	r2, r3, r2
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ccc:	e002      	b.n	8008cd4 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00d      	beq.n	8008cf8 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	891a      	ldrh	r2, [r3, #8]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	7958      	ldrb	r0, [r3, #5]
 8008cea:	2301      	movs	r3, #1
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	4603      	mov	r3, r0
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 fe60 	bl	800a9b6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008cf6:	e0a8      	b.n	8008e4a <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2207      	movs	r2, #7
 8008cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d00:	e0a3      	b.n	8008e4a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d02:	7d3b      	ldrb	r3, [r7, #20]
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d104      	bne.n	8008d12 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	2205      	movs	r2, #5
 8008d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d10:	e09b      	b.n	8008e4a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8008d12:	7d3b      	ldrb	r3, [r7, #20]
 8008d14:	2b05      	cmp	r3, #5
 8008d16:	f040 8098 	bne.w	8008e4a <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	220a      	movs	r2, #10
 8008d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d22:	e092      	b.n	8008e4a <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	791b      	ldrb	r3, [r3, #4]
 8008d2e:	220d      	movs	r2, #13
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f001 fe65 	bl	800aa00 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2208      	movs	r2, #8
 8008d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d3e:	e08d      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	791b      	ldrb	r3, [r3, #4]
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f004 fce8 	bl	800d71c <USBH_LL_GetURBState>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008d50:	7d3b      	ldrb	r3, [r7, #20]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d115      	bne.n	8008d82 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f8aa 	bl	8008ec0 <USBH_MSC_DecodeCSW>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008d70:	7d7b      	ldrb	r3, [r7, #21]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008d7a:	e068      	b.n	8008e4e <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d80:	e065      	b.n	8008e4e <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8008d82:	7d3b      	ldrb	r3, [r7, #20]
 8008d84:	2b05      	cmp	r3, #5
 8008d86:	d162      	bne.n	8008e4e <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2209      	movs	r2, #9
 8008d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d90:	e05d      	b.n	8008e4e <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	2200      	movs	r2, #0
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f865 	bl	8008e68 <USBH_MSC_BOT_Abort>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008da2:	7dbb      	ldrb	r3, [r7, #22]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2207      	movs	r2, #7
 8008dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008db0:	e04f      	b.n	8008e52 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008db2:	7dbb      	ldrb	r3, [r7, #22]
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d14c      	bne.n	8008e52 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	220b      	movs	r2, #11
 8008dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008dc0:	e047      	b.n	8008e52 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f84d 	bl	8008e68 <USBH_MSC_BOT_Abort>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008dd2:	7dbb      	ldrb	r3, [r7, #22]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d11d      	bne.n	8008e14 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	795b      	ldrb	r3, [r3, #5]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f004 fcf0 	bl	800d7c4 <USBH_LL_GetToggle>
 8008de4:	4603      	mov	r3, r0
 8008de6:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	7959      	ldrb	r1, [r3, #5]
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	f1c3 0301 	rsb	r3, r3, #1
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f004 fcb1 	bl	800d75e <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	791b      	ldrb	r3, [r3, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f004 fcaa 	bl	800d75e <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	2209      	movs	r2, #9
 8008e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008e12:	e020      	b.n	8008e56 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8008e14:	7dbb      	ldrb	r3, [r7, #22]
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d11d      	bne.n	8008e56 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	220b      	movs	r2, #11
 8008e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008e22:	e018      	b.n	8008e56 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff fdf0 	bl	8008a0a <USBH_MSC_BOT_REQ_Reset>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d112      	bne.n	8008e5a <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008e3c:	e00d      	b.n	8008e5a <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8008e3e:	bf00      	nop
 8008e40:	e00c      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>
      break;
 8008e42:	bf00      	nop
 8008e44:	e00a      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>
      break;
 8008e46:	bf00      	nop
 8008e48:	e008      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>
      break;
 8008e4a:	bf00      	nop
 8008e4c:	e006      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>
      break;
 8008e4e:	bf00      	nop
 8008e50:	e004      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>
      break;
 8008e52:	bf00      	nop
 8008e54:	e002      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>
      break;
 8008e56:	bf00      	nop
 8008e58:	e000      	b.n	8008e5c <USBH_MSC_BOT_Process+0x398>
      break;
 8008e5a:	bf00      	nop
  }
  return status;
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop

08008e68 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
 8008e74:	4613      	mov	r3, r2
 8008e76:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008e86:	78bb      	ldrb	r3, [r7, #2]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <USBH_MSC_BOT_Abort+0x2a>
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d009      	beq.n	8008ea4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008e90:	e011      	b.n	8008eb6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	79db      	ldrb	r3, [r3, #7]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 f99c 	bl	800a1d6 <USBH_ClrFeature>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea2:	e008      	b.n	8008eb6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	799b      	ldrb	r3, [r3, #6]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f001 f993 	bl	800a1d6 <USBH_ClrFeature>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008eb4:	bf00      	nop
  }
  return status;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ece:	69db      	ldr	r3, [r3, #28]
 8008ed0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	791b      	ldrb	r3, [r3, #4]
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f004 fb8b 	bl	800d5f8 <USBH_LL_GetLastXferSize>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b0d      	cmp	r3, #13
 8008ee6:	d002      	beq.n	8008eee <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008ee8:	2302      	movs	r3, #2
 8008eea:	73fb      	strb	r3, [r7, #15]
 8008eec:	e024      	b.n	8008f38 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ef2:	4a14      	ldr	r2, [pc, #80]	; (8008f44 <USBH_MSC_DecodeCSW+0x84>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d11d      	bne.n	8008f34 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d119      	bne.n	8008f38 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d102      	bne.n	8008f14 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73fb      	strb	r3, [r7, #15]
 8008f12:	e011      	b.n	8008f38 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d102      	bne.n	8008f24 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
 8008f22:	e009      	b.n	8008f38 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d104      	bne.n	8008f38 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	73fb      	strb	r3, [r7, #15]
 8008f32:	e001      	b.n	8008f38 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008f34:	2302      	movs	r3, #2
 8008f36:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	53425355 	.word	0x53425355

08008f48 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008f54:	2302      	movs	r3, #2
 8008f56:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d002      	beq.n	8008f72 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d021      	beq.n	8008fb4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008f70:	e028      	b.n	8008fc4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2200      	movs	r2, #0
 8008f76:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	220a      	movs	r2, #10
 8008f84:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	3363      	adds	r3, #99	; 0x63
 8008f8c:	2210      	movs	r2, #16
 8008f8e:	2100      	movs	r1, #0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f004 fcc6 	bl	800d922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fb2:	e007      	b.n	8008fc4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff fd83 	bl	8008ac4 <USBH_MSC_BOT_Process>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fc2:	bf00      	nop
  }

  return error;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b086      	sub	sp, #24
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	607a      	str	r2, [r7, #4]
 8008fda:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d002      	beq.n	8008ffa <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d027      	beq.n	8009048 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008ff8:	e05f      	b.n	80090ba <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	2280      	movs	r2, #128	; 0x80
 8009004:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	220a      	movs	r2, #10
 800900c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3363      	adds	r3, #99	; 0x63
 8009014:	2210      	movs	r2, #16
 8009016:	2100      	movs	r1, #0
 8009018:	4618      	mov	r0, r3
 800901a:	f004 fc82 	bl	800d922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	2225      	movs	r2, #37	; 0x25
 8009022:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2202      	movs	r2, #2
 8009032:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f103 0210 	add.w	r2, r3, #16
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009042:	2301      	movs	r3, #1
 8009044:	75fb      	strb	r3, [r7, #23]
      break;
 8009046:	e038      	b.n	80090ba <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009048:	7afb      	ldrb	r3, [r7, #11]
 800904a:	4619      	mov	r1, r3
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f7ff fd39 	bl	8008ac4 <USBH_MSC_BOT_Process>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d12d      	bne.n	80090b8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009062:	3303      	adds	r3, #3
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800906e:	3302      	adds	r3, #2
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	021b      	lsls	r3, r3, #8
 8009074:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800907c:	3301      	adds	r3, #1
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009082:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	061b      	lsls	r3, r3, #24
 800908e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909a:	3307      	adds	r3, #7
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	b29a      	uxth	r2, r3
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a6:	3306      	adds	r3, #6
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	021b      	lsls	r3, r3, #8
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	4313      	orrs	r3, r2
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	809a      	strh	r2, [r3, #4]
      break;
 80090b8:	bf00      	nop
  }

  return error;
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	460b      	mov	r3, r1
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80090d2:	2302      	movs	r3, #2
 80090d4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d002      	beq.n	80090f0 <USBH_MSC_SCSI_Inquiry+0x2c>
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d03d      	beq.n	800916a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80090ee:	e089      	b.n	8009204 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2224      	movs	r2, #36	; 0x24
 80090f4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2280      	movs	r2, #128	; 0x80
 80090fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	220a      	movs	r2, #10
 8009102:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	3363      	adds	r3, #99	; 0x63
 800910a:	220a      	movs	r2, #10
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f004 fc07 	bl	800d922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	2212      	movs	r2, #18
 8009118:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	015b      	lsls	r3, r3, #5
 8009120:	b2da      	uxtb	r2, r3
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	2224      	movs	r2, #36	; 0x24
 800913c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f103 0210 	add.w	r2, r3, #16
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009164:	2301      	movs	r3, #1
 8009166:	75fb      	strb	r3, [r7, #23]
      break;
 8009168:	e04c      	b.n	8009204 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800916a:	7afb      	ldrb	r3, [r7, #11]
 800916c:	4619      	mov	r1, r3
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7ff fca8 	bl	8008ac4 <USBH_MSC_BOT_Process>
 8009174:	4603      	mov	r3, r0
 8009176:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d141      	bne.n	8009202 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800917e:	2222      	movs	r2, #34	; 0x22
 8009180:	2100      	movs	r1, #0
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f004 fbcd 	bl	800d922 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 031f 	and.w	r3, r3, #31
 8009194:	b2da      	uxtb	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	095b      	lsrs	r3, r3, #5
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091b0:	3301      	adds	r3, #1
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	b25b      	sxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da03      	bge.n	80091c2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	709a      	strb	r2, [r3, #2]
 80091c0:	e002      	b.n	80091c8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	1cd8      	adds	r0, r3, #3
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091d2:	3308      	adds	r3, #8
 80091d4:	2208      	movs	r2, #8
 80091d6:	4619      	mov	r1, r3
 80091d8:	f004 fb98 	bl	800d90c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f103 000c 	add.w	r0, r3, #12
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e8:	3310      	adds	r3, #16
 80091ea:	2210      	movs	r2, #16
 80091ec:	4619      	mov	r1, r3
 80091ee:	f004 fb8d 	bl	800d90c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	331d      	adds	r3, #29
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80091fc:	3220      	adds	r2, #32
 80091fe:	6812      	ldr	r2, [r2, #0]
 8009200:	601a      	str	r2, [r3, #0]
      break;
 8009202:	bf00      	nop
  }

  return error;
 8009204:	7dfb      	ldrb	r3, [r7, #23]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b086      	sub	sp, #24
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	460b      	mov	r3, r1
 8009218:	607a      	str	r2, [r7, #4]
 800921a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800921c:	2302      	movs	r3, #2
 800921e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009230:	2b01      	cmp	r3, #1
 8009232:	d002      	beq.n	800923a <USBH_MSC_SCSI_RequestSense+0x2c>
 8009234:	2b02      	cmp	r3, #2
 8009236:	d03d      	beq.n	80092b4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009238:	e05d      	b.n	80092f6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	220e      	movs	r2, #14
 800923e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	2280      	movs	r2, #128	; 0x80
 8009244:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	220a      	movs	r2, #10
 800924c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	3363      	adds	r3, #99	; 0x63
 8009254:	2210      	movs	r2, #16
 8009256:	2100      	movs	r1, #0
 8009258:	4618      	mov	r0, r3
 800925a:	f004 fb62 	bl	800d922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2203      	movs	r2, #3
 8009262:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009266:	7afb      	ldrb	r3, [r7, #11]
 8009268:	015b      	lsls	r3, r3, #5
 800926a:	b2da      	uxtb	r2, r3
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	220e      	movs	r2, #14
 8009286:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2202      	movs	r2, #2
 800929e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f103 0210 	add.w	r2, r3, #16
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80092ae:	2301      	movs	r3, #1
 80092b0:	75fb      	strb	r3, [r7, #23]
      break;
 80092b2:	e020      	b.n	80092f6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80092b4:	7afb      	ldrb	r3, [r7, #11]
 80092b6:	4619      	mov	r1, r3
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7ff fc03 	bl	8008ac4 <USBH_MSC_BOT_Process>
 80092be:	4603      	mov	r3, r0
 80092c0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d115      	bne.n	80092f4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ce:	3302      	adds	r3, #2
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	f003 030f 	and.w	r3, r3, #15
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092e2:	7b1a      	ldrb	r2, [r3, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ee:	7b5a      	ldrb	r2, [r3, #13]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	709a      	strb	r2, [r3, #2]
      break;
 80092f4:	bf00      	nop
  }

  return error;
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	460b      	mov	r3, r1
 800930e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009310:	2302      	movs	r3, #2
 8009312:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009324:	2b01      	cmp	r3, #1
 8009326:	d002      	beq.n	800932e <USBH_MSC_SCSI_Write+0x2e>
 8009328:	2b02      	cmp	r3, #2
 800932a:	d047      	beq.n	80093bc <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800932c:	e04e      	b.n	80093cc <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009334:	461a      	mov	r2, r3
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	fb03 f202 	mul.w	r2, r3, r2
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	220a      	movs	r2, #10
 800934c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	3363      	adds	r3, #99	; 0x63
 8009354:	2210      	movs	r2, #16
 8009356:	2100      	movs	r1, #0
 8009358:	4618      	mov	r0, r3
 800935a:	f004 fae2 	bl	800d922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	222a      	movs	r2, #42	; 0x2a
 8009362:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009366:	79fa      	ldrb	r2, [r7, #7]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800936e:	79ba      	ldrb	r2, [r7, #6]
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009376:	797a      	ldrb	r2, [r7, #5]
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800937e:	1d3b      	adds	r3, r7, #4
 8009380:	781a      	ldrb	r2, [r3, #0]
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009388:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009392:	f107 0320 	add.w	r3, r7, #32
 8009396:	781a      	ldrb	r2, [r3, #0]
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	2202      	movs	r2, #2
 80093aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80093b6:	2301      	movs	r3, #1
 80093b8:	75fb      	strb	r3, [r7, #23]
      break;
 80093ba:	e007      	b.n	80093cc <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	4619      	mov	r1, r3
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f7ff fb7f 	bl	8008ac4 <USBH_MSC_BOT_Process>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75fb      	strb	r3, [r7, #23]
      break;
 80093ca:	bf00      	nop
  }

  return error;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b086      	sub	sp, #24
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	603b      	str	r3, [r7, #0]
 80093e2:	460b      	mov	r3, r1
 80093e4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80093e6:	2302      	movs	r3, #2
 80093e8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d002      	beq.n	8009404 <USBH_MSC_SCSI_Read+0x2e>
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d047      	beq.n	8009492 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009402:	e04e      	b.n	80094a2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800940a:	461a      	mov	r2, r3
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	fb03 f202 	mul.w	r2, r3, r2
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	2280      	movs	r2, #128	; 0x80
 800941a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	220a      	movs	r2, #10
 8009422:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	3363      	adds	r3, #99	; 0x63
 800942a:	2210      	movs	r2, #16
 800942c:	2100      	movs	r1, #0
 800942e:	4618      	mov	r0, r3
 8009430:	f004 fa77 	bl	800d922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2228      	movs	r2, #40	; 0x28
 8009438:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800943c:	79fa      	ldrb	r2, [r7, #7]
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009444:	79ba      	ldrb	r2, [r7, #6]
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800944c:	797a      	ldrb	r2, [r7, #5]
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009454:	1d3b      	adds	r3, r7, #4
 8009456:	781a      	ldrb	r2, [r3, #0]
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800945e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009468:	f107 0320 	add.w	r3, r7, #32
 800946c:	781a      	ldrb	r2, [r3, #0]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	2202      	movs	r2, #2
 8009480:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800948c:	2301      	movs	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]
      break;
 8009490:	e007      	b.n	80094a2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009492:	7afb      	ldrb	r3, [r7, #11]
 8009494:	4619      	mov	r1, r3
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7ff fb14 	bl	8008ac4 <USBH_MSC_BOT_Process>
 800949c:	4603      	mov	r3, r0
 800949e:	75fb      	strb	r3, [r7, #23]
      break;
 80094a0:	bf00      	nop
  }

  return error;
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	4613      	mov	r3, r2
 80094b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80094c0:	2302      	movs	r3, #2
 80094c2:	e029      	b.n	8009518 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	79fa      	ldrb	r2, [r7, #7]
 80094c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f000 f81f 	bl	8009520 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d003      	beq.n	8009510 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f003 ffbf 	bl	800d494 <USBH_LL_Init>

  return USBH_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009528:	2300      	movs	r3, #0
 800952a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	e009      	b.n	8009546 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	33e0      	adds	r3, #224	; 0xe0
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	2200      	movs	r2, #0
 800953e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3301      	adds	r3, #1
 8009544:	60fb      	str	r3, [r7, #12]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b0e      	cmp	r3, #14
 800954a:	d9f2      	bls.n	8009532 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	e009      	b.n	8009566 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4413      	add	r3, r2
 8009558:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800955c:	2200      	movs	r2, #0
 800955e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3301      	adds	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800956c:	d3f1      	bcc.n	8009552 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2240      	movs	r2, #64	; 0x40
 8009592:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d016      	beq.n	800960a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10e      	bne.n	8009604 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095ec:	1c59      	adds	r1, r3, #1
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	33de      	adds	r3, #222	; 0xde
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
 8009602:	e004      	b.n	800960e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009604:	2302      	movs	r3, #2
 8009606:	73fb      	strb	r3, [r7, #15]
 8009608:	e001      	b.n	800960e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800960a:	2302      	movs	r3, #2
 800960c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800960e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	429a      	cmp	r2, r3
 8009636:	d204      	bcs.n	8009642 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	78fa      	ldrb	r2, [r7, #3]
 800963c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009640:	e001      	b.n	8009646 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009642:	2302      	movs	r3, #2
 8009644:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009646:	7bfb      	ldrb	r3, [r7, #15]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	4608      	mov	r0, r1
 800965e:	4611      	mov	r1, r2
 8009660:	461a      	mov	r2, r3
 8009662:	4603      	mov	r3, r0
 8009664:	70fb      	strb	r3, [r7, #3]
 8009666:	460b      	mov	r3, r1
 8009668:	70bb      	strb	r3, [r7, #2]
 800966a:	4613      	mov	r3, r2
 800966c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009672:	2300      	movs	r3, #0
 8009674:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800967c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800967e:	e025      	b.n	80096cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	221a      	movs	r2, #26
 8009684:	fb02 f303 	mul.w	r3, r2, r3
 8009688:	3308      	adds	r3, #8
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4413      	add	r3, r2
 800968e:	3302      	adds	r3, #2
 8009690:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	795b      	ldrb	r3, [r3, #5]
 8009696:	78fa      	ldrb	r2, [r7, #3]
 8009698:	429a      	cmp	r2, r3
 800969a:	d002      	beq.n	80096a2 <USBH_FindInterface+0x4e>
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	2bff      	cmp	r3, #255	; 0xff
 80096a0:	d111      	bne.n	80096c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80096a6:	78ba      	ldrb	r2, [r7, #2]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d002      	beq.n	80096b2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80096ac:	78bb      	ldrb	r3, [r7, #2]
 80096ae:	2bff      	cmp	r3, #255	; 0xff
 80096b0:	d109      	bne.n	80096c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80096b6:	787a      	ldrb	r2, [r7, #1]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d002      	beq.n	80096c2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80096bc:	787b      	ldrb	r3, [r7, #1]
 80096be:	2bff      	cmp	r3, #255	; 0xff
 80096c0:	d101      	bne.n	80096c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	e006      	b.n	80096d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	3301      	adds	r3, #1
 80096ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d9d6      	bls.n	8009680 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80096d2:	23ff      	movs	r3, #255	; 0xff
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	371c      	adds	r7, #28
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f003 ff0f 	bl	800d50c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80096ee:	2101      	movs	r1, #1
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f004 f826 	bl	800d742 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b088      	sub	sp, #32
 8009704:	af04      	add	r7, sp, #16
 8009706:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009708:	2302      	movs	r3, #2
 800970a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800970c:	2300      	movs	r3, #0
 800970e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b01      	cmp	r3, #1
 800971a:	d102      	bne.n	8009722 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2203      	movs	r2, #3
 8009720:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b0b      	cmp	r3, #11
 800972a:	f200 81b3 	bhi.w	8009a94 <USBH_Process+0x394>
 800972e:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <USBH_Process+0x34>)
 8009730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009734:	08009765 	.word	0x08009765
 8009738:	08009797 	.word	0x08009797
 800973c:	080097ff 	.word	0x080097ff
 8009740:	08009a2f 	.word	0x08009a2f
 8009744:	08009a95 	.word	0x08009a95
 8009748:	080098a3 	.word	0x080098a3
 800974c:	080099d5 	.word	0x080099d5
 8009750:	080098d9 	.word	0x080098d9
 8009754:	080098f9 	.word	0x080098f9
 8009758:	08009919 	.word	0x08009919
 800975c:	08009947 	.word	0x08009947
 8009760:	08009a17 	.word	0x08009a17
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 8193 	beq.w	8009a98 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009778:	20c8      	movs	r0, #200	; 0xc8
 800977a:	f004 f856 	bl	800d82a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f003 ff1f 	bl	800d5c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009794:	e180      	b.n	8009a98 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800979c:	2b01      	cmp	r3, #1
 800979e:	d107      	bne.n	80097b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2202      	movs	r2, #2
 80097ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097ae:	e182      	b.n	8009ab6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80097b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097ba:	d914      	bls.n	80097e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097c2:	3301      	adds	r3, #1
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d903      	bls.n	80097de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	220d      	movs	r2, #13
 80097da:	701a      	strb	r2, [r3, #0]
      break;
 80097dc:	e16b      	b.n	8009ab6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	701a      	strb	r2, [r3, #0]
      break;
 80097e4:	e167      	b.n	8009ab6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80097ec:	f103 020a 	add.w	r2, r3, #10
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80097f6:	200a      	movs	r0, #10
 80097f8:	f004 f817 	bl	800d82a <USBH_Delay>
      break;
 80097fc:	e15b      	b.n	8009ab6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009804:	2b00      	cmp	r3, #0
 8009806:	d005      	beq.n	8009814 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800980e:	2104      	movs	r1, #4
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009814:	2064      	movs	r0, #100	; 0x64
 8009816:	f004 f808 	bl	800d82a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f003 feac 	bl	800d578 <USBH_LL_GetSpeed>
 8009820:	4603      	mov	r3, r0
 8009822:	461a      	mov	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2205      	movs	r2, #5
 800982e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009830:	2100      	movs	r1, #0
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f001 f931 	bl	800aa9a <USBH_AllocPipe>
 8009838:	4603      	mov	r3, r0
 800983a:	461a      	mov	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009840:	2180      	movs	r1, #128	; 0x80
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f001 f929 	bl	800aa9a <USBH_AllocPipe>
 8009848:	4603      	mov	r3, r0
 800984a:	461a      	mov	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	7919      	ldrb	r1, [r3, #4]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009864:	b292      	uxth	r2, r2
 8009866:	9202      	str	r2, [sp, #8]
 8009868:	2200      	movs	r2, #0
 800986a:	9201      	str	r2, [sp, #4]
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	4603      	mov	r3, r0
 8009870:	2280      	movs	r2, #128	; 0x80
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 f8e2 	bl	800aa3c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	7959      	ldrb	r1, [r3, #5]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800988c:	b292      	uxth	r2, r2
 800988e:	9202      	str	r2, [sp, #8]
 8009890:	2200      	movs	r2, #0
 8009892:	9201      	str	r2, [sp, #4]
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	4603      	mov	r3, r0
 8009898:	2200      	movs	r2, #0
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f001 f8ce 	bl	800aa3c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80098a0:	e109      	b.n	8009ab6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f90c 	bl	8009ac0 <USBH_HandleEnum>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f040 80f3 	bne.w	8009a9c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d103      	bne.n	80098d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2208      	movs	r2, #8
 80098cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80098ce:	e0e5      	b.n	8009a9c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2207      	movs	r2, #7
 80098d4:	701a      	strb	r2, [r3, #0]
      break;
 80098d6:	e0e1      	b.n	8009a9c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 80de 	beq.w	8009aa0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098ea:	2101      	movs	r1, #1
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2208      	movs	r2, #8
 80098f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80098f6:	e0d3      	b.n	8009aa0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80098fe:	b29b      	uxth	r3, r3
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fc20 	bl	800a148 <USBH_SetCfg>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	f040 80ca 	bne.w	8009aa4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2209      	movs	r2, #9
 8009914:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009916:	e0c5      	b.n	8009aa4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009926:	2101      	movs	r1, #1
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fc30 	bl	800a18e <USBH_SetFeature>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	f040 80b9 	bne.w	8009aa8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	220a      	movs	r2, #10
 800993a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800993c:	e0b4      	b.n	8009aa8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	220a      	movs	r2, #10
 8009942:	701a      	strb	r2, [r3, #0]
      break;
 8009944:	e0b0      	b.n	8009aa8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 80ad 	beq.w	8009aac <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800995a:	2300      	movs	r3, #0
 800995c:	73fb      	strb	r3, [r7, #15]
 800995e:	e016      	b.n	800998e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009960:	7bfa      	ldrb	r2, [r7, #15]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	32de      	adds	r2, #222	; 0xde
 8009966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996a:	791a      	ldrb	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009972:	429a      	cmp	r2, r3
 8009974:	d108      	bne.n	8009988 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009976:	7bfa      	ldrb	r2, [r7, #15]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	32de      	adds	r2, #222	; 0xde
 800997c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009986:	e005      	b.n	8009994 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	3301      	adds	r3, #1
 800998c:	73fb      	strb	r3, [r7, #15]
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0e5      	beq.n	8009960 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800999a:	2b00      	cmp	r3, #0
 800999c:	d016      	beq.n	80099cc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d109      	bne.n	80099c4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2206      	movs	r2, #6
 80099b4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099bc:	2103      	movs	r1, #3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80099c2:	e073      	b.n	8009aac <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	220d      	movs	r2, #13
 80099c8:	701a      	strb	r2, [r3, #0]
      break;
 80099ca:	e06f      	b.n	8009aac <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	220d      	movs	r2, #13
 80099d0:	701a      	strb	r2, [r3, #0]
      break;
 80099d2:	e06b      	b.n	8009aac <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d017      	beq.n	8009a0e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	4798      	blx	r3
 80099ea:	4603      	mov	r3, r0
 80099ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d103      	bne.n	80099fe <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	220b      	movs	r2, #11
 80099fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80099fc:	e058      	b.n	8009ab0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d154      	bne.n	8009ab0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	220d      	movs	r2, #13
 8009a0a:	701a      	strb	r2, [r3, #0]
      break;
 8009a0c:	e050      	b.n	8009ab0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	220d      	movs	r2, #13
 8009a12:	701a      	strb	r2, [r3, #0]
      break;
 8009a14:	e04c      	b.n	8009ab0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d049      	beq.n	8009ab4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	4798      	blx	r3
      }
      break;
 8009a2c:	e042      	b.n	8009ab4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff fd72 	bl	8009520 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d009      	beq.n	8009a5a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d005      	beq.n	8009a70 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a6a:	2105      	movs	r1, #5
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d107      	bne.n	8009a8c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7ff fe2b 	bl	80096e0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009a8a:	e014      	b.n	8009ab6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f003 fd3d 	bl	800d50c <USBH_LL_Start>
      break;
 8009a92:	e010      	b.n	8009ab6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009a94:	bf00      	nop
 8009a96:	e00e      	b.n	8009ab6 <USBH_Process+0x3b6>
      break;
 8009a98:	bf00      	nop
 8009a9a:	e00c      	b.n	8009ab6 <USBH_Process+0x3b6>
      break;
 8009a9c:	bf00      	nop
 8009a9e:	e00a      	b.n	8009ab6 <USBH_Process+0x3b6>
    break;
 8009aa0:	bf00      	nop
 8009aa2:	e008      	b.n	8009ab6 <USBH_Process+0x3b6>
      break;
 8009aa4:	bf00      	nop
 8009aa6:	e006      	b.n	8009ab6 <USBH_Process+0x3b6>
      break;
 8009aa8:	bf00      	nop
 8009aaa:	e004      	b.n	8009ab6 <USBH_Process+0x3b6>
      break;
 8009aac:	bf00      	nop
 8009aae:	e002      	b.n	8009ab6 <USBH_Process+0x3b6>
      break;
 8009ab0:	bf00      	nop
 8009ab2:	e000      	b.n	8009ab6 <USBH_Process+0x3b6>
      break;
 8009ab4:	bf00      	nop
  }
  return USBH_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af04      	add	r7, sp, #16
 8009ac6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009acc:	2301      	movs	r3, #1
 8009ace:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	2b07      	cmp	r3, #7
 8009ad6:	f200 81c1 	bhi.w	8009e5c <USBH_HandleEnum+0x39c>
 8009ada:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <USBH_HandleEnum+0x20>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009b01 	.word	0x08009b01
 8009ae4:	08009bbf 	.word	0x08009bbf
 8009ae8:	08009c29 	.word	0x08009c29
 8009aec:	08009cb7 	.word	0x08009cb7
 8009af0:	08009d21 	.word	0x08009d21
 8009af4:	08009d91 	.word	0x08009d91
 8009af8:	08009dd7 	.word	0x08009dd7
 8009afc:	08009e1d 	.word	0x08009e1d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009b00:	2108      	movs	r1, #8
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fa50 	bl	8009fa8 <USBH_Get_DevDesc>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d130      	bne.n	8009b74 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	7919      	ldrb	r1, [r3, #4]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b36:	b292      	uxth	r2, r2
 8009b38:	9202      	str	r2, [sp, #8]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	9201      	str	r2, [sp, #4]
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	4603      	mov	r3, r0
 8009b42:	2280      	movs	r2, #128	; 0x80
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 ff79 	bl	800aa3c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	7959      	ldrb	r1, [r3, #5]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b5e:	b292      	uxth	r2, r2
 8009b60:	9202      	str	r2, [sp, #8]
 8009b62:	2200      	movs	r2, #0
 8009b64:	9201      	str	r2, [sp, #4]
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 ff65 	bl	800aa3c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b72:	e175      	b.n	8009e60 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	f040 8172 	bne.w	8009e60 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b82:	3301      	adds	r3, #1
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d903      	bls.n	8009b9e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	220d      	movs	r2, #13
 8009b9a:	701a      	strb	r2, [r3, #0]
      break;
 8009b9c:	e160      	b.n	8009e60 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	795b      	ldrb	r3, [r3, #5]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 ff99 	bl	800aadc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	791b      	ldrb	r3, [r3, #4]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 ff93 	bl	800aadc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	701a      	strb	r2, [r3, #0]
      break;
 8009bbc:	e150      	b.n	8009e60 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009bbe:	2112      	movs	r1, #18
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f9f1 	bl	8009fa8 <USBH_Get_DevDesc>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d103      	bne.n	8009bd8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009bd6:	e145      	b.n	8009e64 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	f040 8142 	bne.w	8009e64 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009be6:	3301      	adds	r3, #1
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d903      	bls.n	8009c02 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	220d      	movs	r2, #13
 8009bfe:	701a      	strb	r2, [r3, #0]
      break;
 8009c00:	e130      	b.n	8009e64 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	795b      	ldrb	r3, [r3, #5]
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 ff67 	bl	800aadc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	791b      	ldrb	r3, [r3, #4]
 8009c12:	4619      	mov	r1, r3
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 ff61 	bl	800aadc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	701a      	strb	r2, [r3, #0]
      break;
 8009c26:	e11d      	b.n	8009e64 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009c28:	2101      	movs	r1, #1
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fa68 	bl	800a100 <USBH_SetAddress>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d132      	bne.n	8009ca0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009c3a:	2002      	movs	r0, #2
 8009c3c:	f003 fdf5 	bl	800d82a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2203      	movs	r2, #3
 8009c4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	7919      	ldrb	r1, [r3, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c62:	b292      	uxth	r2, r2
 8009c64:	9202      	str	r2, [sp, #8]
 8009c66:	2200      	movs	r2, #0
 8009c68:	9201      	str	r2, [sp, #4]
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2280      	movs	r2, #128	; 0x80
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fee3 	bl	800aa3c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	7959      	ldrb	r1, [r3, #5]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c8a:	b292      	uxth	r2, r2
 8009c8c:	9202      	str	r2, [sp, #8]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	9201      	str	r2, [sp, #4]
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	4603      	mov	r3, r0
 8009c96:	2200      	movs	r2, #0
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fecf 	bl	800aa3c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009c9e:	e0e3      	b.n	8009e68 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	f040 80e0 	bne.w	8009e68 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	220d      	movs	r2, #13
 8009cac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	705a      	strb	r2, [r3, #1]
      break;
 8009cb4:	e0d8      	b.n	8009e68 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009cb6:	2109      	movs	r1, #9
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f99d 	bl	8009ff8 <USBH_Get_CfgDesc>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d103      	bne.n	8009cd0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2204      	movs	r2, #4
 8009ccc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009cce:	e0cd      	b.n	8009e6c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	f040 80ca 	bne.w	8009e6c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cde:	3301      	adds	r3, #1
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d903      	bls.n	8009cfa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	220d      	movs	r2, #13
 8009cf6:	701a      	strb	r2, [r3, #0]
      break;
 8009cf8:	e0b8      	b.n	8009e6c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	795b      	ldrb	r3, [r3, #5]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 feeb 	bl	800aadc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	791b      	ldrb	r3, [r3, #4]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fee5 	bl	800aadc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	701a      	strb	r2, [r3, #0]
      break;
 8009d1e:	e0a5      	b.n	8009e6c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f965 	bl	8009ff8 <USBH_Get_CfgDesc>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d32:	7bbb      	ldrb	r3, [r7, #14]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d103      	bne.n	8009d40 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2205      	movs	r2, #5
 8009d3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d3e:	e097      	b.n	8009e70 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	f040 8094 	bne.w	8009e70 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d4e:	3301      	adds	r3, #1
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d903      	bls.n	8009d6a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	220d      	movs	r2, #13
 8009d66:	701a      	strb	r2, [r3, #0]
      break;
 8009d68:	e082      	b.n	8009e70 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	795b      	ldrb	r3, [r3, #5]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 feb3 	bl	800aadc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	791b      	ldrb	r3, [r3, #4]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fead 	bl	800aadc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	701a      	strb	r2, [r3, #0]
      break;
 8009d8e:	e06f      	b.n	8009e70 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d019      	beq.n	8009dce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009da6:	23ff      	movs	r3, #255	; 0xff
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f949 	bl	800a040 <USBH_Get_StringDesc>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d103      	bne.n	8009dc0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2206      	movs	r2, #6
 8009dbc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009dbe:	e059      	b.n	8009e74 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d156      	bne.n	8009e74 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2206      	movs	r2, #6
 8009dca:	705a      	strb	r2, [r3, #1]
      break;
 8009dcc:	e052      	b.n	8009e74 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2206      	movs	r2, #6
 8009dd2:	705a      	strb	r2, [r3, #1]
      break;
 8009dd4:	e04e      	b.n	8009e74 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d019      	beq.n	8009e14 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009dec:	23ff      	movs	r3, #255	; 0xff
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f926 	bl	800a040 <USBH_Get_StringDesc>
 8009df4:	4603      	mov	r3, r0
 8009df6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d103      	bne.n	8009e06 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2207      	movs	r2, #7
 8009e02:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009e04:	e038      	b.n	8009e78 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d135      	bne.n	8009e78 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2207      	movs	r2, #7
 8009e10:	705a      	strb	r2, [r3, #1]
      break;
 8009e12:	e031      	b.n	8009e78 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2207      	movs	r2, #7
 8009e18:	705a      	strb	r2, [r3, #1]
      break;
 8009e1a:	e02d      	b.n	8009e78 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d017      	beq.n	8009e56 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e32:	23ff      	movs	r3, #255	; 0xff
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f903 	bl	800a040 <USBH_Get_StringDesc>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009e3e:	7bbb      	ldrb	r3, [r7, #14]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d102      	bne.n	8009e4a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009e48:	e018      	b.n	8009e7c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	2b03      	cmp	r3, #3
 8009e4e:	d115      	bne.n	8009e7c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73fb      	strb	r3, [r7, #15]
      break;
 8009e54:	e012      	b.n	8009e7c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73fb      	strb	r3, [r7, #15]
      break;
 8009e5a:	e00f      	b.n	8009e7c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009e5c:	bf00      	nop
 8009e5e:	e00e      	b.n	8009e7e <USBH_HandleEnum+0x3be>
      break;
 8009e60:	bf00      	nop
 8009e62:	e00c      	b.n	8009e7e <USBH_HandleEnum+0x3be>
      break;
 8009e64:	bf00      	nop
 8009e66:	e00a      	b.n	8009e7e <USBH_HandleEnum+0x3be>
      break;
 8009e68:	bf00      	nop
 8009e6a:	e008      	b.n	8009e7e <USBH_HandleEnum+0x3be>
      break;
 8009e6c:	bf00      	nop
 8009e6e:	e006      	b.n	8009e7e <USBH_HandleEnum+0x3be>
      break;
 8009e70:	bf00      	nop
 8009e72:	e004      	b.n	8009e7e <USBH_HandleEnum+0x3be>
      break;
 8009e74:	bf00      	nop
 8009e76:	e002      	b.n	8009e7e <USBH_HandleEnum+0x3be>
      break;
 8009e78:	bf00      	nop
 8009e7a:	e000      	b.n	8009e7e <USBH_HandleEnum+0x3be>
      break;
 8009e7c:	bf00      	nop
  }
  return Status;
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b082      	sub	sp, #8
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f804 	bl	8009eca <USBH_HandleSof>
}
 8009ec2:	bf00      	nop
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b0b      	cmp	r3, #11
 8009eda:	d10a      	bne.n	8009ef2 <USBH_HandleSof+0x28>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d005      	beq.n	8009ef2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	4798      	blx	r3
  }
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009f0a:	bf00      	nop
}
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009f16:	b480      	push	{r7}
 8009f18:	b083      	sub	sp, #12
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009f26:	bf00      	nop
}
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b083      	sub	sp, #12
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f003 fade 	bl	800d542 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	791b      	ldrb	r3, [r3, #4]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fda5 	bl	800aadc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	795b      	ldrb	r3, [r3, #5]
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fd9f 	bl	800aadc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af02      	add	r7, sp, #8
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f864 	bl	800a096 <USBH_GetDescriptor>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	73fb      	strb	r3, [r7, #15]
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10a      	bne.n	8009fee <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fe4:	78fa      	ldrb	r2, [r7, #3]
 8009fe6:	b292      	uxth	r2, r2
 8009fe8:	4619      	mov	r1, r3
 8009fea:	f000 f918 	bl	800a21e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af02      	add	r7, sp, #8
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	331c      	adds	r3, #28
 800a008:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a00a:	887b      	ldrh	r3, [r7, #2]
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a014:	2100      	movs	r1, #0
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f83d 	bl	800a096 <USBH_GetDescriptor>
 800a01c:	4603      	mov	r3, r0
 800a01e:	72fb      	strb	r3, [r7, #11]
 800a020:	7afb      	ldrb	r3, [r7, #11]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d107      	bne.n	800a036 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a02c:	887a      	ldrh	r2, [r7, #2]
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	4618      	mov	r0, r3
 800a032:	f000 f964 	bl	800a2fe <USBH_ParseCfgDesc>
  }

  return status;
 800a036:	7afb      	ldrb	r3, [r7, #11]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af02      	add	r7, sp, #8
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	461a      	mov	r2, r3
 800a04c:	460b      	mov	r3, r1
 800a04e:	72fb      	strb	r3, [r7, #11]
 800a050:	4613      	mov	r3, r2
 800a052:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a054:	7afb      	ldrb	r3, [r7, #11]
 800a056:	b29b      	uxth	r3, r3
 800a058:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a05c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a064:	893b      	ldrh	r3, [r7, #8]
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	460b      	mov	r3, r1
 800a06a:	2100      	movs	r1, #0
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f000 f812 	bl	800a096 <USBH_GetDescriptor>
 800a072:	4603      	mov	r3, r0
 800a074:	75fb      	strb	r3, [r7, #23]
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d107      	bne.n	800a08c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a082:	893a      	ldrh	r2, [r7, #8]
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fa37 	bl	800a4fa <USBH_ParseStringDesc>
  }

  return status;
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b084      	sub	sp, #16
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	60f8      	str	r0, [r7, #12]
 800a09e:	607b      	str	r3, [r7, #4]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	72fb      	strb	r3, [r7, #11]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	789b      	ldrb	r3, [r3, #2]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d11c      	bne.n	800a0ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a0b0:	7afb      	ldrb	r3, [r7, #11]
 800a0b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2206      	movs	r2, #6
 800a0c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	893a      	ldrh	r2, [r7, #8]
 800a0c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a0c8:	893b      	ldrh	r3, [r7, #8]
 800a0ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a0ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0d2:	d104      	bne.n	800a0de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f240 4209 	movw	r2, #1033	; 0x409
 800a0da:	829a      	strh	r2, [r3, #20]
 800a0dc:	e002      	b.n	800a0e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8b3a      	ldrh	r2, [r7, #24]
 800a0e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a0ea:	8b3b      	ldrh	r3, [r7, #24]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	6879      	ldr	r1, [r7, #4]
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 fa50 	bl	800a596 <USBH_CtlReq>
 800a0f6:	4603      	mov	r3, r0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	789b      	ldrb	r3, [r3, #2]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d10f      	bne.n	800a134 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2205      	movs	r2, #5
 800a11e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	b29a      	uxth	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a134:	2200      	movs	r2, #0
 800a136:	2100      	movs	r1, #0
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fa2c 	bl	800a596 <USBH_CtlReq>
 800a13e:	4603      	mov	r3, r0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	789b      	ldrb	r3, [r3, #2]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d10e      	bne.n	800a17a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2209      	movs	r2, #9
 800a166:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	887a      	ldrh	r2, [r7, #2]
 800a16c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a17a:	2200      	movs	r2, #0
 800a17c:	2100      	movs	r1, #0
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fa09 	bl	800a596 <USBH_CtlReq>
 800a184:	4603      	mov	r3, r0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	789b      	ldrb	r3, [r3, #2]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d10f      	bne.n	800a1c2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2203      	movs	r2, #3
 800a1ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a1ae:	78fb      	ldrb	r3, [r7, #3]
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f9e5 	bl	800a596 <USBH_CtlReq>
 800a1cc:	4603      	mov	r3, r0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b082      	sub	sp, #8
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	789b      	ldrb	r3, [r3, #2]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d10f      	bne.n	800a20a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a1fc:	78fb      	ldrb	r3, [r7, #3]
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a20a:	2200      	movs	r2, #0
 800a20c:	2100      	movs	r1, #0
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f9c1 	bl	800a596 <USBH_CtlReq>
 800a214:	4603      	mov	r3, r0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a21e:	b480      	push	{r7}
 800a220:	b085      	sub	sp, #20
 800a222:	af00      	add	r7, sp, #0
 800a224:	60f8      	str	r0, [r7, #12]
 800a226:	60b9      	str	r1, [r7, #8]
 800a228:	4613      	mov	r3, r2
 800a22a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	781a      	ldrb	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	785a      	ldrb	r2, [r3, #1]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	3302      	adds	r3, #2
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	b29a      	uxth	r2, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	3303      	adds	r3, #3
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	b29b      	uxth	r3, r3
 800a250:	4313      	orrs	r3, r2
 800a252:	b29a      	uxth	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	791a      	ldrb	r2, [r3, #4]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	795a      	ldrb	r2, [r3, #5]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	799a      	ldrb	r2, [r3, #6]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	79da      	ldrb	r2, [r3, #7]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a278:	88fb      	ldrh	r3, [r7, #6]
 800a27a:	2b08      	cmp	r3, #8
 800a27c:	d939      	bls.n	800a2f2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	3308      	adds	r3, #8
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	b29a      	uxth	r2, r3
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	3309      	adds	r3, #9
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	021b      	lsls	r3, r3, #8
 800a290:	b29b      	uxth	r3, r3
 800a292:	4313      	orrs	r3, r2
 800a294:	b29a      	uxth	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	330a      	adds	r3, #10
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	330b      	adds	r3, #11
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	021b      	lsls	r3, r3, #8
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	330c      	adds	r3, #12
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	330d      	adds	r3, #13
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	7b9a      	ldrb	r2, [r3, #14]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	7bda      	ldrb	r2, [r3, #15]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	7c1a      	ldrb	r2, [r3, #16]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	7c5a      	ldrb	r2, [r3, #17]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	745a      	strb	r2, [r3, #17]
  }
}
 800a2f2:	bf00      	nop
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b08a      	sub	sp, #40	; 0x28
 800a302:	af00      	add	r7, sp, #0
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	4613      	mov	r3, r2
 800a30a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a310:	2300      	movs	r3, #0
 800a312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	781a      	ldrb	r2, [r3, #0]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	785a      	ldrb	r2, [r3, #1]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	3302      	adds	r3, #2
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	b29a      	uxth	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	3303      	adds	r3, #3
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	021b      	lsls	r3, r3, #8
 800a342:	b29b      	uxth	r3, r3
 800a344:	4313      	orrs	r3, r2
 800a346:	b29a      	uxth	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	791a      	ldrb	r2, [r3, #4]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	795a      	ldrb	r2, [r3, #5]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	799a      	ldrb	r2, [r3, #6]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	79da      	ldrb	r2, [r3, #7]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	7a1a      	ldrb	r2, [r3, #8]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a374:	88fb      	ldrh	r3, [r7, #6]
 800a376:	2b09      	cmp	r3, #9
 800a378:	d95f      	bls.n	800a43a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a37a:	2309      	movs	r3, #9
 800a37c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a37e:	2300      	movs	r3, #0
 800a380:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a382:	e051      	b.n	800a428 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a384:	f107 0316 	add.w	r3, r7, #22
 800a388:	4619      	mov	r1, r3
 800a38a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a38c:	f000 f8e8 	bl	800a560 <USBH_GetNextDesc>
 800a390:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	2b04      	cmp	r3, #4
 800a398:	d146      	bne.n	800a428 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a39a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a39e:	221a      	movs	r2, #26
 800a3a0:	fb02 f303 	mul.w	r3, r2, r3
 800a3a4:	3308      	adds	r3, #8
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	3302      	adds	r3, #2
 800a3ac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a3ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3b0:	69f8      	ldr	r0, [r7, #28]
 800a3b2:	f000 f846 	bl	800a442 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a3c0:	e022      	b.n	800a408 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a3c2:	f107 0316 	add.w	r3, r7, #22
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3ca:	f000 f8c9 	bl	800a560 <USBH_GetNextDesc>
 800a3ce:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	785b      	ldrb	r3, [r3, #1]
 800a3d4:	2b05      	cmp	r3, #5
 800a3d6:	d117      	bne.n	800a408 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a3d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a3e0:	3201      	adds	r2, #1
 800a3e2:	00d2      	lsls	r2, r2, #3
 800a3e4:	211a      	movs	r1, #26
 800a3e6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ea:	4413      	add	r3, r2
 800a3ec:	3308      	adds	r3, #8
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a3f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3f8:	69b8      	ldr	r0, [r7, #24]
 800a3fa:	f000 f851 	bl	800a4a0 <USBH_ParseEPDesc>
            ep_ix++;
 800a3fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a402:	3301      	adds	r3, #1
 800a404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	791b      	ldrb	r3, [r3, #4]
 800a40c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a410:	429a      	cmp	r2, r3
 800a412:	d204      	bcs.n	800a41e <USBH_ParseCfgDesc+0x120>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	885a      	ldrh	r2, [r3, #2]
 800a418:	8afb      	ldrh	r3, [r7, #22]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d8d1      	bhi.n	800a3c2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a41e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a422:	3301      	adds	r3, #1
 800a424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d804      	bhi.n	800a43a <USBH_ParseCfgDesc+0x13c>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	885a      	ldrh	r2, [r3, #2]
 800a434:	8afb      	ldrh	r3, [r7, #22]
 800a436:	429a      	cmp	r2, r3
 800a438:	d8a4      	bhi.n	800a384 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a43a:	bf00      	nop
 800a43c:	3728      	adds	r7, #40	; 0x28
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	785a      	ldrb	r2, [r3, #1]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	789a      	ldrb	r2, [r3, #2]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	78da      	ldrb	r2, [r3, #3]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	791a      	ldrb	r2, [r3, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	795a      	ldrb	r2, [r3, #5]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	799a      	ldrb	r2, [r3, #6]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	79da      	ldrb	r2, [r3, #7]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	7a1a      	ldrb	r2, [r3, #8]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	721a      	strb	r2, [r3, #8]
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781a      	ldrb	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	785a      	ldrb	r2, [r3, #1]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	789a      	ldrb	r2, [r3, #2]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	78da      	ldrb	r2, [r3, #3]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	3305      	adds	r3, #5
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	021b      	lsls	r3, r3, #8
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	799a      	ldrb	r2, [r3, #6]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	719a      	strb	r2, [r3, #6]
}
 800a4ee:	bf00      	nop
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b087      	sub	sp, #28
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	60b9      	str	r1, [r7, #8]
 800a504:	4613      	mov	r3, r2
 800a506:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	3301      	adds	r3, #1
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	2b03      	cmp	r3, #3
 800a510:	d120      	bne.n	800a554 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	1e9a      	subs	r2, r3, #2
 800a518:	88fb      	ldrh	r3, [r7, #6]
 800a51a:	4293      	cmp	r3, r2
 800a51c:	bf28      	it	cs
 800a51e:	4613      	movcs	r3, r2
 800a520:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3302      	adds	r3, #2
 800a526:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a528:	2300      	movs	r3, #0
 800a52a:	82fb      	strh	r3, [r7, #22]
 800a52c:	e00b      	b.n	800a546 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a52e:	8afb      	ldrh	r3, [r7, #22]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	4413      	add	r3, r2
 800a534:	781a      	ldrb	r2, [r3, #0]
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	3301      	adds	r3, #1
 800a53e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a540:	8afb      	ldrh	r3, [r7, #22]
 800a542:	3302      	adds	r3, #2
 800a544:	82fb      	strh	r3, [r7, #22]
 800a546:	8afa      	ldrh	r2, [r7, #22]
 800a548:	8abb      	ldrh	r3, [r7, #20]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d3ef      	bcc.n	800a52e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
  }
}
 800a554:	bf00      	nop
 800a556:	371c      	adds	r7, #28
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	881a      	ldrh	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	b29b      	uxth	r3, r3
 800a574:	4413      	add	r3, r2
 800a576:	b29a      	uxth	r2, r3
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4413      	add	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a588:	68fb      	ldr	r3, [r7, #12]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b086      	sub	sp, #24
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	789b      	ldrb	r3, [r3, #2]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d002      	beq.n	800a5b6 <USBH_CtlReq+0x20>
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d00f      	beq.n	800a5d4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a5b4:	e027      	b.n	800a606 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	88fa      	ldrh	r2, [r7, #6]
 800a5c0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d2:	e018      	b.n	800a606 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 f81b 	bl	800a610 <USBH_HandleControl>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <USBH_CtlReq+0x54>
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d106      	bne.n	800a5f8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	761a      	strb	r2, [r3, #24]
      break;
 800a5f6:	e005      	b.n	800a604 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d102      	bne.n	800a604 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2201      	movs	r2, #1
 800a602:	709a      	strb	r2, [r3, #2]
      break;
 800a604:	bf00      	nop
  }
  return status;
 800a606:	7dfb      	ldrb	r3, [r7, #23]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af02      	add	r7, sp, #8
 800a616:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a618:	2301      	movs	r3, #1
 800a61a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	7e1b      	ldrb	r3, [r3, #24]
 800a624:	3b01      	subs	r3, #1
 800a626:	2b0a      	cmp	r3, #10
 800a628:	f200 8158 	bhi.w	800a8dc <USBH_HandleControl+0x2cc>
 800a62c:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <USBH_HandleControl+0x24>)
 800a62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a632:	bf00      	nop
 800a634:	0800a661 	.word	0x0800a661
 800a638:	0800a67b 	.word	0x0800a67b
 800a63c:	0800a6e5 	.word	0x0800a6e5
 800a640:	0800a70b 	.word	0x0800a70b
 800a644:	0800a743 	.word	0x0800a743
 800a648:	0800a76f 	.word	0x0800a76f
 800a64c:	0800a7c1 	.word	0x0800a7c1
 800a650:	0800a7e3 	.word	0x0800a7e3
 800a654:	0800a81f 	.word	0x0800a81f
 800a658:	0800a847 	.word	0x0800a847
 800a65c:	0800a885 	.word	0x0800a885
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f103 0110 	add.w	r1, r3, #16
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	795b      	ldrb	r3, [r3, #5]
 800a66a:	461a      	mov	r2, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f945 	bl	800a8fc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2202      	movs	r2, #2
 800a676:	761a      	strb	r2, [r3, #24]
      break;
 800a678:	e13b      	b.n	800a8f2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	795b      	ldrb	r3, [r3, #5]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f003 f84b 	bl	800d71c <USBH_LL_GetURBState>
 800a686:	4603      	mov	r3, r0
 800a688:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a68a:	7bbb      	ldrb	r3, [r7, #14]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d11e      	bne.n	800a6ce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	7c1b      	ldrb	r3, [r3, #16]
 800a694:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a698:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	8adb      	ldrh	r3, [r3, #22]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00a      	beq.n	800a6b8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a6a2:	7b7b      	ldrb	r3, [r7, #13]
 800a6a4:	2b80      	cmp	r3, #128	; 0x80
 800a6a6:	d103      	bne.n	800a6b0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2203      	movs	r2, #3
 800a6ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a6ae:	e117      	b.n	800a8e0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2205      	movs	r2, #5
 800a6b4:	761a      	strb	r2, [r3, #24]
      break;
 800a6b6:	e113      	b.n	800a8e0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800a6b8:	7b7b      	ldrb	r3, [r7, #13]
 800a6ba:	2b80      	cmp	r3, #128	; 0x80
 800a6bc:	d103      	bne.n	800a6c6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2209      	movs	r2, #9
 800a6c2:	761a      	strb	r2, [r3, #24]
      break;
 800a6c4:	e10c      	b.n	800a8e0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2207      	movs	r2, #7
 800a6ca:	761a      	strb	r2, [r3, #24]
      break;
 800a6cc:	e108      	b.n	800a8e0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	2b04      	cmp	r3, #4
 800a6d2:	d003      	beq.n	800a6dc <USBH_HandleControl+0xcc>
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	f040 8102 	bne.w	800a8e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	220b      	movs	r2, #11
 800a6e0:	761a      	strb	r2, [r3, #24]
      break;
 800a6e2:	e0fd      	b.n	800a8e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6899      	ldr	r1, [r3, #8]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	899a      	ldrh	r2, [r3, #12]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	791b      	ldrb	r3, [r3, #4]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f93c 	bl	800a97a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2204      	movs	r2, #4
 800a706:	761a      	strb	r2, [r3, #24]
      break;
 800a708:	e0f3      	b.n	800a8f2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	791b      	ldrb	r3, [r3, #4]
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f003 f803 	bl	800d71c <USBH_LL_GetURBState>
 800a716:	4603      	mov	r3, r0
 800a718:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d102      	bne.n	800a726 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2209      	movs	r2, #9
 800a724:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	2b05      	cmp	r3, #5
 800a72a:	d102      	bne.n	800a732 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a72c:	2303      	movs	r3, #3
 800a72e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a730:	e0d8      	b.n	800a8e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	2b04      	cmp	r3, #4
 800a736:	f040 80d5 	bne.w	800a8e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	220b      	movs	r2, #11
 800a73e:	761a      	strb	r2, [r3, #24]
      break;
 800a740:	e0d0      	b.n	800a8e4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6899      	ldr	r1, [r3, #8]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	899a      	ldrh	r2, [r3, #12]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	7958      	ldrb	r0, [r3, #5]
 800a74e:	2301      	movs	r3, #1
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	4603      	mov	r3, r0
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f8eb 	bl	800a930 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a760:	b29a      	uxth	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2206      	movs	r2, #6
 800a76a:	761a      	strb	r2, [r3, #24]
      break;
 800a76c:	e0c1      	b.n	800a8f2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	795b      	ldrb	r3, [r3, #5]
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f002 ffd1 	bl	800d71c <USBH_LL_GetURBState>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d103      	bne.n	800a78c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2207      	movs	r2, #7
 800a788:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a78a:	e0ad      	b.n	800a8e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800a78c:	7bbb      	ldrb	r3, [r7, #14]
 800a78e:	2b05      	cmp	r3, #5
 800a790:	d105      	bne.n	800a79e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	220c      	movs	r2, #12
 800a796:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a798:	2303      	movs	r3, #3
 800a79a:	73fb      	strb	r3, [r7, #15]
      break;
 800a79c:	e0a4      	b.n	800a8e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d103      	bne.n	800a7ac <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2205      	movs	r2, #5
 800a7a8:	761a      	strb	r2, [r3, #24]
      break;
 800a7aa:	e09d      	b.n	800a8e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	f040 809a 	bne.w	800a8e8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	220b      	movs	r2, #11
 800a7b8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a7be:	e093      	b.n	800a8e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	791b      	ldrb	r3, [r3, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f8d6 	bl	800a97a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2208      	movs	r2, #8
 800a7de:	761a      	strb	r2, [r3, #24]

      break;
 800a7e0:	e087      	b.n	800a8f2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	791b      	ldrb	r3, [r3, #4]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f002 ff97 	bl	800d71c <USBH_LL_GetURBState>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7f2:	7bbb      	ldrb	r3, [r7, #14]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d105      	bne.n	800a804 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	220d      	movs	r2, #13
 800a7fc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a7fe:	2300      	movs	r3, #0
 800a800:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a802:	e073      	b.n	800a8ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800a804:	7bbb      	ldrb	r3, [r7, #14]
 800a806:	2b04      	cmp	r3, #4
 800a808:	d103      	bne.n	800a812 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	220b      	movs	r2, #11
 800a80e:	761a      	strb	r2, [r3, #24]
      break;
 800a810:	e06c      	b.n	800a8ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	2b05      	cmp	r3, #5
 800a816:	d169      	bne.n	800a8ec <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800a818:	2303      	movs	r3, #3
 800a81a:	73fb      	strb	r3, [r7, #15]
      break;
 800a81c:	e066      	b.n	800a8ec <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	795a      	ldrb	r2, [r3, #5]
 800a822:	2301      	movs	r3, #1
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	4613      	mov	r3, r2
 800a828:	2200      	movs	r2, #0
 800a82a:	2100      	movs	r1, #0
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f87f 	bl	800a930 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a838:	b29a      	uxth	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	220a      	movs	r2, #10
 800a842:	761a      	strb	r2, [r3, #24]
      break;
 800a844:	e055      	b.n	800a8f2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	795b      	ldrb	r3, [r3, #5]
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f002 ff65 	bl	800d71c <USBH_LL_GetURBState>
 800a852:	4603      	mov	r3, r0
 800a854:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d105      	bne.n	800a868 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	220d      	movs	r2, #13
 800a864:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a866:	e043      	b.n	800a8f0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a868:	7bbb      	ldrb	r3, [r7, #14]
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d103      	bne.n	800a876 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2209      	movs	r2, #9
 800a872:	761a      	strb	r2, [r3, #24]
      break;
 800a874:	e03c      	b.n	800a8f0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800a876:	7bbb      	ldrb	r3, [r7, #14]
 800a878:	2b04      	cmp	r3, #4
 800a87a:	d139      	bne.n	800a8f0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	220b      	movs	r2, #11
 800a880:	761a      	strb	r2, [r3, #24]
      break;
 800a882:	e035      	b.n	800a8f0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	7e5b      	ldrb	r3, [r3, #25]
 800a888:	3301      	adds	r3, #1
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	765a      	strb	r2, [r3, #25]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	7e5b      	ldrb	r3, [r3, #25]
 800a894:	2b02      	cmp	r3, #2
 800a896:	d806      	bhi.n	800a8a6 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a8a4:	e025      	b.n	800a8f2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8ac:	2106      	movs	r1, #6
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	795b      	ldrb	r3, [r3, #5]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f90c 	bl	800aadc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	791b      	ldrb	r3, [r3, #4]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f906 	bl	800aadc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8da:	e00a      	b.n	800a8f2 <USBH_HandleControl+0x2e2>

    default:
      break;
 800a8dc:	bf00      	nop
 800a8de:	e008      	b.n	800a8f2 <USBH_HandleControl+0x2e2>
      break;
 800a8e0:	bf00      	nop
 800a8e2:	e006      	b.n	800a8f2 <USBH_HandleControl+0x2e2>
      break;
 800a8e4:	bf00      	nop
 800a8e6:	e004      	b.n	800a8f2 <USBH_HandleControl+0x2e2>
      break;
 800a8e8:	bf00      	nop
 800a8ea:	e002      	b.n	800a8f2 <USBH_HandleControl+0x2e2>
      break;
 800a8ec:	bf00      	nop
 800a8ee:	e000      	b.n	800a8f2 <USBH_HandleControl+0x2e2>
      break;
 800a8f0:	bf00      	nop
  }

  return status;
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b088      	sub	sp, #32
 800a900:	af04      	add	r7, sp, #16
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	4613      	mov	r3, r2
 800a908:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a90a:	79f9      	ldrb	r1, [r7, #7]
 800a90c:	2300      	movs	r3, #0
 800a90e:	9303      	str	r3, [sp, #12]
 800a910:	2308      	movs	r3, #8
 800a912:	9302      	str	r3, [sp, #8]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	9301      	str	r3, [sp, #4]
 800a918:	2300      	movs	r3, #0
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	2300      	movs	r3, #0
 800a91e:	2200      	movs	r2, #0
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f002 feca 	bl	800d6ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af04      	add	r7, sp, #16
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	4611      	mov	r1, r2
 800a93c:	461a      	mov	r2, r3
 800a93e:	460b      	mov	r3, r1
 800a940:	80fb      	strh	r3, [r7, #6]
 800a942:	4613      	mov	r3, r2
 800a944:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a950:	2300      	movs	r3, #0
 800a952:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a954:	7979      	ldrb	r1, [r7, #5]
 800a956:	7e3b      	ldrb	r3, [r7, #24]
 800a958:	9303      	str	r3, [sp, #12]
 800a95a:	88fb      	ldrh	r3, [r7, #6]
 800a95c:	9302      	str	r3, [sp, #8]
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	9301      	str	r3, [sp, #4]
 800a962:	2301      	movs	r3, #1
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	2300      	movs	r3, #0
 800a968:	2200      	movs	r2, #0
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f002 fea5 	bl	800d6ba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b088      	sub	sp, #32
 800a97e:	af04      	add	r7, sp, #16
 800a980:	60f8      	str	r0, [r7, #12]
 800a982:	60b9      	str	r1, [r7, #8]
 800a984:	4611      	mov	r1, r2
 800a986:	461a      	mov	r2, r3
 800a988:	460b      	mov	r3, r1
 800a98a:	80fb      	strh	r3, [r7, #6]
 800a98c:	4613      	mov	r3, r2
 800a98e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a990:	7979      	ldrb	r1, [r7, #5]
 800a992:	2300      	movs	r3, #0
 800a994:	9303      	str	r3, [sp, #12]
 800a996:	88fb      	ldrh	r3, [r7, #6]
 800a998:	9302      	str	r3, [sp, #8]
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	2301      	movs	r3, #1
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f002 fe87 	bl	800d6ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a9ac:	2300      	movs	r3, #0

}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b088      	sub	sp, #32
 800a9ba:	af04      	add	r7, sp, #16
 800a9bc:	60f8      	str	r0, [r7, #12]
 800a9be:	60b9      	str	r1, [r7, #8]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	80fb      	strh	r3, [r7, #6]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a9da:	7979      	ldrb	r1, [r7, #5]
 800a9dc:	7e3b      	ldrb	r3, [r7, #24]
 800a9de:	9303      	str	r3, [sp, #12]
 800a9e0:	88fb      	ldrh	r3, [r7, #6]
 800a9e2:	9302      	str	r3, [sp, #8]
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f002 fe62 	bl	800d6ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b088      	sub	sp, #32
 800aa04:	af04      	add	r7, sp, #16
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	460b      	mov	r3, r1
 800aa10:	80fb      	strh	r3, [r7, #6]
 800aa12:	4613      	mov	r3, r2
 800aa14:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa16:	7979      	ldrb	r1, [r7, #5]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	9303      	str	r3, [sp, #12]
 800aa1c:	88fb      	ldrh	r3, [r7, #6]
 800aa1e:	9302      	str	r3, [sp, #8]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	9301      	str	r3, [sp, #4]
 800aa24:	2301      	movs	r3, #1
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	2302      	movs	r3, #2
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f002 fe44 	bl	800d6ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af04      	add	r7, sp, #16
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	4608      	mov	r0, r1
 800aa46:	4611      	mov	r1, r2
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	70fb      	strb	r3, [r7, #3]
 800aa4e:	460b      	mov	r3, r1
 800aa50:	70bb      	strb	r3, [r7, #2]
 800aa52:	4613      	mov	r3, r2
 800aa54:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aa56:	7878      	ldrb	r0, [r7, #1]
 800aa58:	78ba      	ldrb	r2, [r7, #2]
 800aa5a:	78f9      	ldrb	r1, [r7, #3]
 800aa5c:	8b3b      	ldrh	r3, [r7, #24]
 800aa5e:	9302      	str	r3, [sp, #8]
 800aa60:	7d3b      	ldrb	r3, [r7, #20]
 800aa62:	9301      	str	r3, [sp, #4]
 800aa64:	7c3b      	ldrb	r3, [r7, #16]
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	4603      	mov	r3, r0
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f002 fdd7 	bl	800d61e <USBH_LL_OpenPipe>

  return USBH_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	460b      	mov	r3, r1
 800aa84:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800aa86:	78fb      	ldrb	r3, [r7, #3]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f002 fdf6 	bl	800d67c <USBH_LL_ClosePipe>

  return USBH_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b084      	sub	sp, #16
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f836 	bl	800ab18 <USBH_GetFreePipe>
 800aaac:	4603      	mov	r3, r0
 800aaae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aab0:	89fb      	ldrh	r3, [r7, #14]
 800aab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d00a      	beq.n	800aad0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800aaba:	78fa      	ldrb	r2, [r7, #3]
 800aabc:	89fb      	ldrh	r3, [r7, #14]
 800aabe:	f003 030f 	and.w	r3, r3, #15
 800aac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	33e0      	adds	r3, #224	; 0xe0
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	440b      	add	r3, r1
 800aace:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aad0:	89fb      	ldrh	r3, [r7, #14]
 800aad2:	b2db      	uxtb	r3, r3
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	460b      	mov	r3, r1
 800aae6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800aae8:	78fb      	ldrb	r3, [r7, #3]
 800aaea:	2b0a      	cmp	r3, #10
 800aaec:	d80d      	bhi.n	800ab0a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aaee:	78fb      	ldrb	r3, [r7, #3]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	33e0      	adds	r3, #224	; 0xe0
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4413      	add	r3, r2
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	78fb      	ldrb	r3, [r7, #3]
 800aafc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	33e0      	adds	r3, #224	; 0xe0
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	440b      	add	r3, r1
 800ab08:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ab24:	2300      	movs	r3, #0
 800ab26:	73fb      	strb	r3, [r7, #15]
 800ab28:	e00f      	b.n	800ab4a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	33e0      	adds	r3, #224	; 0xe0
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d102      	bne.n	800ab44 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	e007      	b.n	800ab54 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
 800ab46:	3301      	adds	r3, #1
 800ab48:	73fb      	strb	r3, [r7, #15]
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	2b0a      	cmp	r3, #10
 800ab4e:	d9ec      	bls.n	800ab2a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ab50:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	4603      	mov	r3, r0
 800ab68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	4a08      	ldr	r2, [pc, #32]	; (800ab90 <disk_status+0x30>)
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	79fa      	ldrb	r2, [r7, #7]
 800ab78:	4905      	ldr	r1, [pc, #20]	; (800ab90 <disk_status+0x30>)
 800ab7a:	440a      	add	r2, r1
 800ab7c:	7a12      	ldrb	r2, [r2, #8]
 800ab7e:	4610      	mov	r0, r2
 800ab80:	4798      	blx	r3
 800ab82:	4603      	mov	r3, r0
 800ab84:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	200093a0 	.word	0x200093a0

0800ab94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aba2:	79fb      	ldrb	r3, [r7, #7]
 800aba4:	4a0d      	ldr	r2, [pc, #52]	; (800abdc <disk_initialize+0x48>)
 800aba6:	5cd3      	ldrb	r3, [r2, r3]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d111      	bne.n	800abd0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	4a0b      	ldr	r2, [pc, #44]	; (800abdc <disk_initialize+0x48>)
 800abb0:	2101      	movs	r1, #1
 800abb2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800abb4:	79fb      	ldrb	r3, [r7, #7]
 800abb6:	4a09      	ldr	r2, [pc, #36]	; (800abdc <disk_initialize+0x48>)
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	79fa      	ldrb	r2, [r7, #7]
 800abc2:	4906      	ldr	r1, [pc, #24]	; (800abdc <disk_initialize+0x48>)
 800abc4:	440a      	add	r2, r1
 800abc6:	7a12      	ldrb	r2, [r2, #8]
 800abc8:	4610      	mov	r0, r2
 800abca:	4798      	blx	r3
 800abcc:	4603      	mov	r3, r0
 800abce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	200093a0 	.word	0x200093a0

0800abe0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800abe0:	b590      	push	{r4, r7, lr}
 800abe2:	b087      	sub	sp, #28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
 800abea:	603b      	str	r3, [r7, #0]
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
 800abf2:	4a0a      	ldr	r2, [pc, #40]	; (800ac1c <disk_read+0x3c>)
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	689c      	ldr	r4, [r3, #8]
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	4a07      	ldr	r2, [pc, #28]	; (800ac1c <disk_read+0x3c>)
 800ac00:	4413      	add	r3, r2
 800ac02:	7a18      	ldrb	r0, [r3, #8]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	47a0      	blx	r4
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	371c      	adds	r7, #28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd90      	pop	{r4, r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	200093a0 	.word	0x200093a0

0800ac20 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	607a      	str	r2, [r7, #4]
 800ac2a:	603b      	str	r3, [r7, #0]
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	4a0a      	ldr	r2, [pc, #40]	; (800ac5c <disk_write+0x3c>)
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	68dc      	ldr	r4, [r3, #12]
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
 800ac3e:	4a07      	ldr	r2, [pc, #28]	; (800ac5c <disk_write+0x3c>)
 800ac40:	4413      	add	r3, r2
 800ac42:	7a18      	ldrb	r0, [r3, #8]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	47a0      	blx	r4
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	371c      	adds	r7, #28
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd90      	pop	{r4, r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	200093a0 	.word	0x200093a0

0800ac60 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	4603      	mov	r3, r0
 800ac68:	603a      	str	r2, [r7, #0]
 800ac6a:	71fb      	strb	r3, [r7, #7]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac70:	79fb      	ldrb	r3, [r7, #7]
 800ac72:	4a09      	ldr	r2, [pc, #36]	; (800ac98 <disk_ioctl+0x38>)
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	79fa      	ldrb	r2, [r7, #7]
 800ac7e:	4906      	ldr	r1, [pc, #24]	; (800ac98 <disk_ioctl+0x38>)
 800ac80:	440a      	add	r2, r1
 800ac82:	7a10      	ldrb	r0, [r2, #8]
 800ac84:	79b9      	ldrb	r1, [r7, #6]
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	4798      	blx	r3
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	200093a0 	.word	0x200093a0

0800ac9c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3301      	adds	r3, #1
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800acac:	89fb      	ldrh	r3, [r7, #14]
 800acae:	021b      	lsls	r3, r3, #8
 800acb0:	b21a      	sxth	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	b21b      	sxth	r3, r3
 800acb8:	4313      	orrs	r3, r2
 800acba:	b21b      	sxth	r3, r3
 800acbc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800acbe:	89fb      	ldrh	r3, [r7, #14]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3303      	adds	r3, #3
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	3202      	adds	r2, #2
 800ace4:	7812      	ldrb	r2, [r2, #0]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	021b      	lsls	r3, r3, #8
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	3201      	adds	r2, #1
 800acf2:	7812      	ldrb	r2, [r2, #0]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	021b      	lsls	r3, r3, #8
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	7812      	ldrb	r2, [r2, #0]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	60fb      	str	r3, [r7, #12]
	return rv;
 800ad04:	68fb      	ldr	r3, [r7, #12]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	887a      	ldrh	r2, [r7, #2]
 800ad26:	b2d2      	uxtb	r2, r2
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	887b      	ldrh	r3, [r7, #2]
 800ad2c:	0a1b      	lsrs	r3, r3, #8
 800ad2e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	1c5a      	adds	r2, r3, #1
 800ad34:	607a      	str	r2, [r7, #4]
 800ad36:	887a      	ldrh	r2, [r7, #2]
 800ad38:	b2d2      	uxtb	r2, r2
 800ad3a:	701a      	strb	r2, [r3, #0]
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	0a1b      	lsrs	r3, r3, #8
 800ad62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	607a      	str	r2, [r7, #4]
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	b2d2      	uxtb	r2, r2
 800ad6e:	701a      	strb	r2, [r3, #0]
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	0a1b      	lsrs	r3, r3, #8
 800ad74:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	701a      	strb	r2, [r3, #0]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	0a1b      	lsrs	r3, r3, #8
 800ad86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	1c5a      	adds	r2, r3, #1
 800ad8c:	607a      	str	r2, [r7, #4]
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	b2d2      	uxtb	r2, r2
 800ad92:	701a      	strb	r2, [r3, #0]
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ada0:	b480      	push	{r7}
 800ada2:	b087      	sub	sp, #28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00d      	beq.n	800add6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	1c53      	adds	r3, r2, #1
 800adbe:	613b      	str	r3, [r7, #16]
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	1c59      	adds	r1, r3, #1
 800adc4:	6179      	str	r1, [r7, #20]
 800adc6:	7812      	ldrb	r2, [r2, #0]
 800adc8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3b01      	subs	r3, #1
 800adce:	607b      	str	r3, [r7, #4]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1f1      	bne.n	800adba <mem_cpy+0x1a>
	}
}
 800add6:	bf00      	nop
 800add8:	371c      	adds	r7, #28
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ade2:	b480      	push	{r7}
 800ade4:	b087      	sub	sp, #28
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	60b9      	str	r1, [r7, #8]
 800adec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	1c5a      	adds	r2, r3, #1
 800adf6:	617a      	str	r2, [r7, #20]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	b2d2      	uxtb	r2, r2
 800adfc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	607b      	str	r3, [r7, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1f3      	bne.n	800adf2 <mem_set+0x10>
}
 800ae0a:	bf00      	nop
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ae16:	b480      	push	{r7}
 800ae18:	b089      	sub	sp, #36	; 0x24
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	60f8      	str	r0, [r7, #12]
 800ae1e:	60b9      	str	r1, [r7, #8]
 800ae20:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	61fb      	str	r3, [r7, #28]
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	1c5a      	adds	r2, r3, #1
 800ae32:	61fa      	str	r2, [r7, #28]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	4619      	mov	r1, r3
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	61ba      	str	r2, [r7, #24]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	1acb      	subs	r3, r1, r3
 800ae42:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	607b      	str	r3, [r7, #4]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <mem_cmp+0x40>
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d0eb      	beq.n	800ae2e <mem_cmp+0x18>

	return r;
 800ae56:	697b      	ldr	r3, [r7, #20]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3724      	adds	r7, #36	; 0x24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae6e:	e002      	b.n	800ae76 <chk_chr+0x12>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3301      	adds	r3, #1
 800ae74:	607b      	str	r3, [r7, #4]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d005      	beq.n	800ae8a <chk_chr+0x26>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d1f2      	bne.n	800ae70 <chk_chr+0xc>
	return *str;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
	...

0800ae9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aea6:	2300      	movs	r3, #0
 800aea8:	60bb      	str	r3, [r7, #8]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	e029      	b.n	800af04 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aeb0:	4a27      	ldr	r2, [pc, #156]	; (800af50 <chk_lock+0xb4>)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	011b      	lsls	r3, r3, #4
 800aeb6:	4413      	add	r3, r2
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d01d      	beq.n	800aefa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aebe:	4a24      	ldr	r2, [pc, #144]	; (800af50 <chk_lock+0xb4>)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	011b      	lsls	r3, r3, #4
 800aec4:	4413      	add	r3, r2
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d116      	bne.n	800aefe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aed0:	4a1f      	ldr	r2, [pc, #124]	; (800af50 <chk_lock+0xb4>)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	011b      	lsls	r3, r3, #4
 800aed6:	4413      	add	r3, r2
 800aed8:	3304      	adds	r3, #4
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d10c      	bne.n	800aefe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aee4:	4a1a      	ldr	r2, [pc, #104]	; (800af50 <chk_lock+0xb4>)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	011b      	lsls	r3, r3, #4
 800aeea:	4413      	add	r3, r2
 800aeec:	3308      	adds	r3, #8
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d102      	bne.n	800aefe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aef8:	e007      	b.n	800af0a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aefa:	2301      	movs	r3, #1
 800aefc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	3301      	adds	r3, #1
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d9d2      	bls.n	800aeb0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d109      	bne.n	800af24 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d102      	bne.n	800af1c <chk_lock+0x80>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d101      	bne.n	800af20 <chk_lock+0x84>
 800af1c:	2300      	movs	r3, #0
 800af1e:	e010      	b.n	800af42 <chk_lock+0xa6>
 800af20:	2312      	movs	r3, #18
 800af22:	e00e      	b.n	800af42 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d108      	bne.n	800af3c <chk_lock+0xa0>
 800af2a:	4a09      	ldr	r2, [pc, #36]	; (800af50 <chk_lock+0xb4>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	4413      	add	r3, r2
 800af32:	330c      	adds	r3, #12
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af3a:	d101      	bne.n	800af40 <chk_lock+0xa4>
 800af3c:	2310      	movs	r3, #16
 800af3e:	e000      	b.n	800af42 <chk_lock+0xa6>
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	20009380 	.word	0x20009380

0800af54 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af5a:	2300      	movs	r3, #0
 800af5c:	607b      	str	r3, [r7, #4]
 800af5e:	e002      	b.n	800af66 <enq_lock+0x12>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3301      	adds	r3, #1
 800af64:	607b      	str	r3, [r7, #4]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d806      	bhi.n	800af7a <enq_lock+0x26>
 800af6c:	4a09      	ldr	r2, [pc, #36]	; (800af94 <enq_lock+0x40>)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	011b      	lsls	r3, r3, #4
 800af72:	4413      	add	r3, r2
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1f2      	bne.n	800af60 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	bf14      	ite	ne
 800af80:	2301      	movne	r3, #1
 800af82:	2300      	moveq	r3, #0
 800af84:	b2db      	uxtb	r3, r3
}
 800af86:	4618      	mov	r0, r3
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	20009380 	.word	0x20009380

0800af98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	e01f      	b.n	800afe8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800afa8:	4a41      	ldr	r2, [pc, #260]	; (800b0b0 <inc_lock+0x118>)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	011b      	lsls	r3, r3, #4
 800afae:	4413      	add	r3, r2
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d113      	bne.n	800afe2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800afba:	4a3d      	ldr	r2, [pc, #244]	; (800b0b0 <inc_lock+0x118>)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	011b      	lsls	r3, r3, #4
 800afc0:	4413      	add	r3, r2
 800afc2:	3304      	adds	r3, #4
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800afca:	429a      	cmp	r2, r3
 800afcc:	d109      	bne.n	800afe2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800afce:	4a38      	ldr	r2, [pc, #224]	; (800b0b0 <inc_lock+0x118>)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	011b      	lsls	r3, r3, #4
 800afd4:	4413      	add	r3, r2
 800afd6:	3308      	adds	r3, #8
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800afde:	429a      	cmp	r2, r3
 800afe0:	d006      	beq.n	800aff0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3301      	adds	r3, #1
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d9dc      	bls.n	800afa8 <inc_lock+0x10>
 800afee:	e000      	b.n	800aff2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800aff0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d132      	bne.n	800b05e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aff8:	2300      	movs	r3, #0
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	e002      	b.n	800b004 <inc_lock+0x6c>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3301      	adds	r3, #1
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d806      	bhi.n	800b018 <inc_lock+0x80>
 800b00a:	4a29      	ldr	r2, [pc, #164]	; (800b0b0 <inc_lock+0x118>)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	011b      	lsls	r3, r3, #4
 800b010:	4413      	add	r3, r2
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1f2      	bne.n	800affe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d101      	bne.n	800b022 <inc_lock+0x8a>
 800b01e:	2300      	movs	r3, #0
 800b020:	e040      	b.n	800b0a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	4922      	ldr	r1, [pc, #136]	; (800b0b0 <inc_lock+0x118>)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	011b      	lsls	r3, r3, #4
 800b02c:	440b      	add	r3, r1
 800b02e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	689a      	ldr	r2, [r3, #8]
 800b034:	491e      	ldr	r1, [pc, #120]	; (800b0b0 <inc_lock+0x118>)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	440b      	add	r3, r1
 800b03c:	3304      	adds	r3, #4
 800b03e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	695a      	ldr	r2, [r3, #20]
 800b044:	491a      	ldr	r1, [pc, #104]	; (800b0b0 <inc_lock+0x118>)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	011b      	lsls	r3, r3, #4
 800b04a:	440b      	add	r3, r1
 800b04c:	3308      	adds	r3, #8
 800b04e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b050:	4a17      	ldr	r2, [pc, #92]	; (800b0b0 <inc_lock+0x118>)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	011b      	lsls	r3, r3, #4
 800b056:	4413      	add	r3, r2
 800b058:	330c      	adds	r3, #12
 800b05a:	2200      	movs	r2, #0
 800b05c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d009      	beq.n	800b078 <inc_lock+0xe0>
 800b064:	4a12      	ldr	r2, [pc, #72]	; (800b0b0 <inc_lock+0x118>)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	011b      	lsls	r3, r3, #4
 800b06a:	4413      	add	r3, r2
 800b06c:	330c      	adds	r3, #12
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d001      	beq.n	800b078 <inc_lock+0xe0>
 800b074:	2300      	movs	r3, #0
 800b076:	e015      	b.n	800b0a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d108      	bne.n	800b090 <inc_lock+0xf8>
 800b07e:	4a0c      	ldr	r2, [pc, #48]	; (800b0b0 <inc_lock+0x118>)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	011b      	lsls	r3, r3, #4
 800b084:	4413      	add	r3, r2
 800b086:	330c      	adds	r3, #12
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	3301      	adds	r3, #1
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	e001      	b.n	800b094 <inc_lock+0xfc>
 800b090:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b094:	4906      	ldr	r1, [pc, #24]	; (800b0b0 <inc_lock+0x118>)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	011b      	lsls	r3, r3, #4
 800b09a:	440b      	add	r3, r1
 800b09c:	330c      	adds	r3, #12
 800b09e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3301      	adds	r3, #1
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	20009380 	.word	0x20009380

0800b0b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	607b      	str	r3, [r7, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d825      	bhi.n	800b114 <dec_lock+0x60>
		n = Files[i].ctr;
 800b0c8:	4a17      	ldr	r2, [pc, #92]	; (800b128 <dec_lock+0x74>)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	011b      	lsls	r3, r3, #4
 800b0ce:	4413      	add	r3, r2
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b0d6:	89fb      	ldrh	r3, [r7, #14]
 800b0d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0dc:	d101      	bne.n	800b0e2 <dec_lock+0x2e>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0e2:	89fb      	ldrh	r3, [r7, #14]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <dec_lock+0x3a>
 800b0e8:	89fb      	ldrh	r3, [r7, #14]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0ee:	4a0e      	ldr	r2, [pc, #56]	; (800b128 <dec_lock+0x74>)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	011b      	lsls	r3, r3, #4
 800b0f4:	4413      	add	r3, r2
 800b0f6:	330c      	adds	r3, #12
 800b0f8:	89fa      	ldrh	r2, [r7, #14]
 800b0fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0fc:	89fb      	ldrh	r3, [r7, #14]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d105      	bne.n	800b10e <dec_lock+0x5a>
 800b102:	4a09      	ldr	r2, [pc, #36]	; (800b128 <dec_lock+0x74>)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	011b      	lsls	r3, r3, #4
 800b108:	4413      	add	r3, r2
 800b10a:	2200      	movs	r2, #0
 800b10c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	737b      	strb	r3, [r7, #13]
 800b112:	e001      	b.n	800b118 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b114:	2302      	movs	r3, #2
 800b116:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b118:	7b7b      	ldrb	r3, [r7, #13]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	20009380 	.word	0x20009380

0800b12c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b134:	2300      	movs	r3, #0
 800b136:	60fb      	str	r3, [r7, #12]
 800b138:	e010      	b.n	800b15c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b13a:	4a0d      	ldr	r2, [pc, #52]	; (800b170 <clear_lock+0x44>)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	011b      	lsls	r3, r3, #4
 800b140:	4413      	add	r3, r2
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	429a      	cmp	r2, r3
 800b148:	d105      	bne.n	800b156 <clear_lock+0x2a>
 800b14a:	4a09      	ldr	r2, [pc, #36]	; (800b170 <clear_lock+0x44>)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	011b      	lsls	r3, r3, #4
 800b150:	4413      	add	r3, r2
 800b152:	2200      	movs	r2, #0
 800b154:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3301      	adds	r3, #1
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d9eb      	bls.n	800b13a <clear_lock+0xe>
	}
}
 800b162:	bf00      	nop
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	20009380 	.word	0x20009380

0800b174 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	78db      	ldrb	r3, [r3, #3]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d034      	beq.n	800b1f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	7858      	ldrb	r0, [r3, #1]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b198:	2301      	movs	r3, #1
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	f7ff fd40 	bl	800ac20 <disk_write>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d002      	beq.n	800b1ac <sync_window+0x38>
			res = FR_DISK_ERR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	73fb      	strb	r3, [r7, #15]
 800b1aa:	e022      	b.n	800b1f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	1ad2      	subs	r2, r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	699b      	ldr	r3, [r3, #24]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d217      	bcs.n	800b1f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	789b      	ldrb	r3, [r3, #2]
 800b1c6:	613b      	str	r3, [r7, #16]
 800b1c8:	e010      	b.n	800b1ec <sync_window+0x78>
					wsect += fs->fsize;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	7858      	ldrb	r0, [r3, #1]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1de:	2301      	movs	r3, #1
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	f7ff fd1d 	bl	800ac20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	613b      	str	r3, [r7, #16]
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d8eb      	bhi.n	800b1ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	429a      	cmp	r2, r3
 800b212:	d01b      	beq.n	800b24c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff ffad 	bl	800b174 <sync_window>
 800b21a:	4603      	mov	r3, r0
 800b21c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d113      	bne.n	800b24c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	7858      	ldrb	r0, [r3, #1]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b22e:	2301      	movs	r3, #1
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	f7ff fcd5 	bl	800abe0 <disk_read>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b23c:	f04f 33ff 	mov.w	r3, #4294967295
 800b240:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b242:	2301      	movs	r3, #1
 800b244:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
	...

0800b258 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7ff ff87 	bl	800b174 <sync_window>
 800b266:	4603      	mov	r3, r0
 800b268:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d158      	bne.n	800b322 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	2b03      	cmp	r3, #3
 800b276:	d148      	bne.n	800b30a <sync_fs+0xb2>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	791b      	ldrb	r3, [r3, #4]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d144      	bne.n	800b30a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3330      	adds	r3, #48	; 0x30
 800b284:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b288:	2100      	movs	r1, #0
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff fda9 	bl	800ade2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3330      	adds	r3, #48	; 0x30
 800b294:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b298:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff fd38 	bl	800ad12 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3330      	adds	r3, #48	; 0x30
 800b2a6:	4921      	ldr	r1, [pc, #132]	; (800b32c <sync_fs+0xd4>)
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7ff fd4d 	bl	800ad48 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3330      	adds	r3, #48	; 0x30
 800b2b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b2b6:	491e      	ldr	r1, [pc, #120]	; (800b330 <sync_fs+0xd8>)
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7ff fd45 	bl	800ad48 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	3330      	adds	r3, #48	; 0x30
 800b2c2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	f7ff fd3b 	bl	800ad48 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3330      	adds	r3, #48	; 0x30
 800b2d6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	f7ff fd31 	bl	800ad48 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	7858      	ldrb	r0, [r3, #1]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fe:	2301      	movs	r3, #1
 800b300:	f7ff fc8e 	bl	800ac20 <disk_write>
			fs->fsi_flag = 0;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	785b      	ldrb	r3, [r3, #1]
 800b30e:	2200      	movs	r2, #0
 800b310:	2100      	movs	r1, #0
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff fca4 	bl	800ac60 <disk_ioctl>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <sync_fs+0xca>
 800b31e:	2301      	movs	r3, #1
 800b320:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b322:	7bfb      	ldrb	r3, [r7, #15]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	41615252 	.word	0x41615252
 800b330:	61417272 	.word	0x61417272

0800b334 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	3b02      	subs	r3, #2
 800b342:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	695b      	ldr	r3, [r3, #20]
 800b348:	3b02      	subs	r3, #2
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d301      	bcc.n	800b354 <clust2sect+0x20>
 800b350:	2300      	movs	r3, #0
 800b352:	e008      	b.n	800b366 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	895b      	ldrh	r3, [r3, #10]
 800b358:	461a      	mov	r2, r3
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	fb03 f202 	mul.w	r2, r3, r2
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b364:	4413      	add	r3, r2
}
 800b366:	4618      	mov	r0, r3
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b086      	sub	sp, #24
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d904      	bls.n	800b392 <get_fat+0x20>
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d302      	bcc.n	800b398 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b392:	2301      	movs	r3, #1
 800b394:	617b      	str	r3, [r7, #20]
 800b396:	e08c      	b.n	800b4b2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b398:	f04f 33ff 	mov.w	r3, #4294967295
 800b39c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d045      	beq.n	800b432 <get_fat+0xc0>
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d05d      	beq.n	800b466 <get_fat+0xf4>
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d177      	bne.n	800b49e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	60fb      	str	r3, [r7, #12]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	085b      	lsrs	r3, r3, #1
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	6a1a      	ldr	r2, [r3, #32]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	0a5b      	lsrs	r3, r3, #9
 800b3c4:	4413      	add	r3, r2
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6938      	ldr	r0, [r7, #16]
 800b3ca:	f7ff ff17 	bl	800b1fc <move_window>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d167      	bne.n	800b4a4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	60fa      	str	r2, [r7, #12]
 800b3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3e6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	6a1a      	ldr	r2, [r3, #32]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	0a5b      	lsrs	r3, r3, #9
 800b3f0:	4413      	add	r3, r2
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	6938      	ldr	r0, [r7, #16]
 800b3f6:	f7ff ff01 	bl	800b1fc <move_window>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d153      	bne.n	800b4a8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	4413      	add	r3, r2
 800b40a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b40e:	021b      	lsls	r3, r3, #8
 800b410:	461a      	mov	r2, r3
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	4313      	orrs	r3, r2
 800b416:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d002      	beq.n	800b428 <get_fat+0xb6>
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	091b      	lsrs	r3, r3, #4
 800b426:	e002      	b.n	800b42e <get_fat+0xbc>
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b42e:	617b      	str	r3, [r7, #20]
			break;
 800b430:	e03f      	b.n	800b4b2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	6a1a      	ldr	r2, [r3, #32]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	0a1b      	lsrs	r3, r3, #8
 800b43a:	4413      	add	r3, r2
 800b43c:	4619      	mov	r1, r3
 800b43e:	6938      	ldr	r0, [r7, #16]
 800b440:	f7ff fedc 	bl	800b1fc <move_window>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d130      	bne.n	800b4ac <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b458:	4413      	add	r3, r2
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff fc1e 	bl	800ac9c <ld_word>
 800b460:	4603      	mov	r3, r0
 800b462:	617b      	str	r3, [r7, #20]
			break;
 800b464:	e025      	b.n	800b4b2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	6a1a      	ldr	r2, [r3, #32]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	09db      	lsrs	r3, r3, #7
 800b46e:	4413      	add	r3, r2
 800b470:	4619      	mov	r1, r3
 800b472:	6938      	ldr	r0, [r7, #16]
 800b474:	f7ff fec2 	bl	800b1fc <move_window>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d118      	bne.n	800b4b0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b48c:	4413      	add	r3, r2
 800b48e:	4618      	mov	r0, r3
 800b490:	f7ff fc1c 	bl	800accc <ld_dword>
 800b494:	4603      	mov	r3, r0
 800b496:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b49a:	617b      	str	r3, [r7, #20]
			break;
 800b49c:	e009      	b.n	800b4b2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b49e:	2301      	movs	r3, #1
 800b4a0:	617b      	str	r3, [r7, #20]
 800b4a2:	e006      	b.n	800b4b2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4a4:	bf00      	nop
 800b4a6:	e004      	b.n	800b4b2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4a8:	bf00      	nop
 800b4aa:	e002      	b.n	800b4b2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4ac:	bf00      	nop
 800b4ae:	e000      	b.n	800b4b2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4b0:	bf00      	nop
		}
	}

	return val;
 800b4b2:	697b      	ldr	r3, [r7, #20]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b4bc:	b590      	push	{r4, r7, lr}
 800b4be:	b089      	sub	sp, #36	; 0x24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	f240 80d6 	bls.w	800b680 <put_fat+0x1c4>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	f080 80d0 	bcs.w	800b680 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d073      	beq.n	800b5d0 <put_fat+0x114>
 800b4e8:	2b03      	cmp	r3, #3
 800b4ea:	f000 8091 	beq.w	800b610 <put_fat+0x154>
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	f040 80c6 	bne.w	800b680 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	61bb      	str	r3, [r7, #24]
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	085b      	lsrs	r3, r3, #1
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	4413      	add	r3, r2
 800b500:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6a1a      	ldr	r2, [r3, #32]
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	0a5b      	lsrs	r3, r3, #9
 800b50a:	4413      	add	r3, r2
 800b50c:	4619      	mov	r1, r3
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f7ff fe74 	bl	800b1fc <move_window>
 800b514:	4603      	mov	r3, r0
 800b516:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b518:	7ffb      	ldrb	r3, [r7, #31]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f040 80a9 	bne.w	800b672 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	1c59      	adds	r1, r3, #1
 800b52a:	61b9      	str	r1, [r7, #24]
 800b52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b530:	4413      	add	r3, r2
 800b532:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f003 0301 	and.w	r3, r3, #1
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00d      	beq.n	800b55a <put_fat+0x9e>
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	b25b      	sxtb	r3, r3
 800b544:	f003 030f 	and.w	r3, r3, #15
 800b548:	b25a      	sxtb	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	b25b      	sxtb	r3, r3
 800b552:	4313      	orrs	r3, r2
 800b554:	b25b      	sxtb	r3, r3
 800b556:	b2db      	uxtb	r3, r3
 800b558:	e001      	b.n	800b55e <put_fat+0xa2>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2201      	movs	r2, #1
 800b566:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6a1a      	ldr	r2, [r3, #32]
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	0a5b      	lsrs	r3, r3, #9
 800b570:	4413      	add	r3, r2
 800b572:	4619      	mov	r1, r3
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f7ff fe41 	bl	800b1fc <move_window>
 800b57a:	4603      	mov	r3, r0
 800b57c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b57e:	7ffb      	ldrb	r3, [r7, #31]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d178      	bne.n	800b676 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b590:	4413      	add	r3, r2
 800b592:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	f003 0301 	and.w	r3, r3, #1
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <put_fat+0xea>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	091b      	lsrs	r3, r3, #4
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	e00e      	b.n	800b5c4 <put_fat+0x108>
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	b25b      	sxtb	r3, r3
 800b5ac:	f023 030f 	bic.w	r3, r3, #15
 800b5b0:	b25a      	sxtb	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	0a1b      	lsrs	r3, r3, #8
 800b5b6:	b25b      	sxtb	r3, r3
 800b5b8:	f003 030f 	and.w	r3, r3, #15
 800b5bc:	b25b      	sxtb	r3, r3
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	b25b      	sxtb	r3, r3
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	697a      	ldr	r2, [r7, #20]
 800b5c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	70da      	strb	r2, [r3, #3]
			break;
 800b5ce:	e057      	b.n	800b680 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6a1a      	ldr	r2, [r3, #32]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	0a1b      	lsrs	r3, r3, #8
 800b5d8:	4413      	add	r3, r2
 800b5da:	4619      	mov	r1, r3
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f7ff fe0d 	bl	800b1fc <move_window>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5e6:	7ffb      	ldrb	r3, [r7, #31]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d146      	bne.n	800b67a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b5fa:	4413      	add	r3, r2
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	b292      	uxth	r2, r2
 800b600:	4611      	mov	r1, r2
 800b602:	4618      	mov	r0, r3
 800b604:	f7ff fb85 	bl	800ad12 <st_word>
			fs->wflag = 1;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2201      	movs	r2, #1
 800b60c:	70da      	strb	r2, [r3, #3]
			break;
 800b60e:	e037      	b.n	800b680 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6a1a      	ldr	r2, [r3, #32]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	09db      	lsrs	r3, r3, #7
 800b618:	4413      	add	r3, r2
 800b61a:	4619      	mov	r1, r3
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f7ff fded 	bl	800b1fc <move_window>
 800b622:	4603      	mov	r3, r0
 800b624:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b626:	7ffb      	ldrb	r3, [r7, #31]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d128      	bne.n	800b67e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b640:	4413      	add	r3, r2
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff fb42 	bl	800accc <ld_dword>
 800b648:	4603      	mov	r3, r0
 800b64a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b64e:	4323      	orrs	r3, r4
 800b650:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b660:	4413      	add	r3, r2
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	4618      	mov	r0, r3
 800b666:	f7ff fb6f 	bl	800ad48 <st_dword>
			fs->wflag = 1;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2201      	movs	r2, #1
 800b66e:	70da      	strb	r2, [r3, #3]
			break;
 800b670:	e006      	b.n	800b680 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b672:	bf00      	nop
 800b674:	e004      	b.n	800b680 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b676:	bf00      	nop
 800b678:	e002      	b.n	800b680 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b67a:	bf00      	nop
 800b67c:	e000      	b.n	800b680 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b67e:	bf00      	nop
		}
	}
	return res;
 800b680:	7ffb      	ldrb	r3, [r7, #31]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3724      	adds	r7, #36	; 0x24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd90      	pop	{r4, r7, pc}

0800b68a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b088      	sub	sp, #32
 800b68e:	af00      	add	r7, sp, #0
 800b690:	60f8      	str	r0, [r7, #12]
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d904      	bls.n	800b6b0 <remove_chain+0x26>
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d301      	bcc.n	800b6b4 <remove_chain+0x2a>
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	e04b      	b.n	800b74c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00c      	beq.n	800b6d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b6be:	6879      	ldr	r1, [r7, #4]
 800b6c0:	69b8      	ldr	r0, [r7, #24]
 800b6c2:	f7ff fefb 	bl	800b4bc <put_fat>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b6ca:	7ffb      	ldrb	r3, [r7, #31]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <remove_chain+0x4a>
 800b6d0:	7ffb      	ldrb	r3, [r7, #31]
 800b6d2:	e03b      	b.n	800b74c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b6d4:	68b9      	ldr	r1, [r7, #8]
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f7ff fe4b 	bl	800b372 <get_fat>
 800b6dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d031      	beq.n	800b748 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d101      	bne.n	800b6ee <remove_chain+0x64>
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	e02e      	b.n	800b74c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f4:	d101      	bne.n	800b6fa <remove_chain+0x70>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e028      	b.n	800b74c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	68b9      	ldr	r1, [r7, #8]
 800b6fe:	69b8      	ldr	r0, [r7, #24]
 800b700:	f7ff fedc 	bl	800b4bc <put_fat>
 800b704:	4603      	mov	r3, r0
 800b706:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b708:	7ffb      	ldrb	r3, [r7, #31]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <remove_chain+0x88>
 800b70e:	7ffb      	ldrb	r3, [r7, #31]
 800b710:	e01c      	b.n	800b74c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	691a      	ldr	r2, [r3, #16]
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	3b02      	subs	r3, #2
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d20b      	bcs.n	800b738 <remove_chain+0xae>
			fs->free_clst++;
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	791b      	ldrb	r3, [r3, #4]
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	b2da      	uxtb	r2, r3
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	429a      	cmp	r2, r3
 800b744:	d3c6      	bcc.n	800b6d4 <remove_chain+0x4a>
 800b746:	e000      	b.n	800b74a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b748:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3720      	adds	r7, #32
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10d      	bne.n	800b786 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d004      	beq.n	800b780 <create_chain+0x2c>
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	695b      	ldr	r3, [r3, #20]
 800b77a:	69ba      	ldr	r2, [r7, #24]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d31b      	bcc.n	800b7b8 <create_chain+0x64>
 800b780:	2301      	movs	r3, #1
 800b782:	61bb      	str	r3, [r7, #24]
 800b784:	e018      	b.n	800b7b8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b786:	6839      	ldr	r1, [r7, #0]
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f7ff fdf2 	bl	800b372 <get_fat>
 800b78e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d801      	bhi.n	800b79a <create_chain+0x46>
 800b796:	2301      	movs	r3, #1
 800b798:	e070      	b.n	800b87c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a0:	d101      	bne.n	800b7a6 <create_chain+0x52>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	e06a      	b.n	800b87c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d201      	bcs.n	800b7b4 <create_chain+0x60>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	e063      	b.n	800b87c <create_chain+0x128>
		scl = clst;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	695b      	ldr	r3, [r3, #20]
 800b7c6:	69fa      	ldr	r2, [r7, #28]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d307      	bcc.n	800b7dc <create_chain+0x88>
				ncl = 2;
 800b7cc:	2302      	movs	r3, #2
 800b7ce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b7d0:	69fa      	ldr	r2, [r7, #28]
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d901      	bls.n	800b7dc <create_chain+0x88>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	e04f      	b.n	800b87c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b7dc:	69f9      	ldr	r1, [r7, #28]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7ff fdc7 	bl	800b372 <get_fat>
 800b7e4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00e      	beq.n	800b80a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d003      	beq.n	800b7fa <create_chain+0xa6>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f8:	d101      	bne.n	800b7fe <create_chain+0xaa>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	e03e      	b.n	800b87c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b7fe:	69fa      	ldr	r2, [r7, #28]
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	429a      	cmp	r2, r3
 800b804:	d1da      	bne.n	800b7bc <create_chain+0x68>
 800b806:	2300      	movs	r3, #0
 800b808:	e038      	b.n	800b87c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b80a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b80c:	f04f 32ff 	mov.w	r2, #4294967295
 800b810:	69f9      	ldr	r1, [r7, #28]
 800b812:	6938      	ldr	r0, [r7, #16]
 800b814:	f7ff fe52 	bl	800b4bc <put_fat>
 800b818:	4603      	mov	r3, r0
 800b81a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b81c:	7dfb      	ldrb	r3, [r7, #23]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d109      	bne.n	800b836 <create_chain+0xe2>
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d006      	beq.n	800b836 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b828:	69fa      	ldr	r2, [r7, #28]
 800b82a:	6839      	ldr	r1, [r7, #0]
 800b82c:	6938      	ldr	r0, [r7, #16]
 800b82e:	f7ff fe45 	bl	800b4bc <put_fat>
 800b832:	4603      	mov	r3, r0
 800b834:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b836:	7dfb      	ldrb	r3, [r7, #23]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d116      	bne.n	800b86a <create_chain+0x116>
		fs->last_clst = ncl;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	69fa      	ldr	r2, [r7, #28]
 800b840:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	691a      	ldr	r2, [r3, #16]
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	3b02      	subs	r3, #2
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d804      	bhi.n	800b85a <create_chain+0x106>
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	1e5a      	subs	r2, r3, #1
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	791b      	ldrb	r3, [r3, #4]
 800b85e:	f043 0301 	orr.w	r3, r3, #1
 800b862:	b2da      	uxtb	r2, r3
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	711a      	strb	r2, [r3, #4]
 800b868:	e007      	b.n	800b87a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d102      	bne.n	800b876 <create_chain+0x122>
 800b870:	f04f 33ff 	mov.w	r3, #4294967295
 800b874:	e000      	b.n	800b878 <create_chain+0x124>
 800b876:	2301      	movs	r3, #1
 800b878:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b87a:	69fb      	ldr	r3, [r7, #28]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3720      	adds	r7, #32
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b884:	b480      	push	{r7}
 800b886:	b087      	sub	sp, #28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b898:	3304      	adds	r3, #4
 800b89a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	0a5b      	lsrs	r3, r3, #9
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	8952      	ldrh	r2, [r2, #10]
 800b8a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	1d1a      	adds	r2, r3, #4
 800b8ae:	613a      	str	r2, [r7, #16]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <clmt_clust+0x3a>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	e010      	b.n	800b8e0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d307      	bcc.n	800b8d6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	617b      	str	r3, [r7, #20]
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8d4:	e7e9      	b.n	800b8aa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b8d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	4413      	add	r3, r2
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	371c      	adds	r7, #28
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b902:	d204      	bcs.n	800b90e <dir_sdi+0x22>
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	f003 031f 	and.w	r3, r3, #31
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b90e:	2302      	movs	r3, #2
 800b910:	e063      	b.n	800b9da <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d106      	bne.n	800b932 <dir_sdi+0x46>
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d902      	bls.n	800b932 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b930:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10c      	bne.n	800b952 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	095b      	lsrs	r3, r3, #5
 800b93c:	693a      	ldr	r2, [r7, #16]
 800b93e:	8912      	ldrh	r2, [r2, #8]
 800b940:	4293      	cmp	r3, r2
 800b942:	d301      	bcc.n	800b948 <dir_sdi+0x5c>
 800b944:	2302      	movs	r3, #2
 800b946:	e048      	b.n	800b9da <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	61da      	str	r2, [r3, #28]
 800b950:	e029      	b.n	800b9a6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	895b      	ldrh	r3, [r3, #10]
 800b956:	025b      	lsls	r3, r3, #9
 800b958:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b95a:	e019      	b.n	800b990 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6979      	ldr	r1, [r7, #20]
 800b960:	4618      	mov	r0, r3
 800b962:	f7ff fd06 	bl	800b372 <get_fat>
 800b966:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96e:	d101      	bne.n	800b974 <dir_sdi+0x88>
 800b970:	2301      	movs	r3, #1
 800b972:	e032      	b.n	800b9da <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d904      	bls.n	800b984 <dir_sdi+0x98>
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	429a      	cmp	r2, r3
 800b982:	d301      	bcc.n	800b988 <dir_sdi+0x9c>
 800b984:	2302      	movs	r3, #2
 800b986:	e028      	b.n	800b9da <dir_sdi+0xee>
			ofs -= csz;
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	429a      	cmp	r2, r3
 800b996:	d2e1      	bcs.n	800b95c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b998:	6979      	ldr	r1, [r7, #20]
 800b99a:	6938      	ldr	r0, [r7, #16]
 800b99c:	f7ff fcca 	bl	800b334 <clust2sect>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	69db      	ldr	r3, [r3, #28]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d101      	bne.n	800b9b8 <dir_sdi+0xcc>
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	e010      	b.n	800b9da <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	69da      	ldr	r2, [r3, #28]
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	0a5b      	lsrs	r3, r3, #9
 800b9c0:	441a      	add	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9d2:	441a      	add	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b086      	sub	sp, #24
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	3320      	adds	r3, #32
 800b9f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	69db      	ldr	r3, [r3, #28]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <dir_next+0x28>
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba08:	d301      	bcc.n	800ba0e <dir_next+0x2c>
 800ba0a:	2304      	movs	r3, #4
 800ba0c:	e0aa      	b.n	800bb64 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f040 8098 	bne.w	800bb4a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	69db      	ldr	r3, [r3, #28]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	699b      	ldr	r3, [r3, #24]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10b      	bne.n	800ba44 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	095b      	lsrs	r3, r3, #5
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	8912      	ldrh	r2, [r2, #8]
 800ba34:	4293      	cmp	r3, r2
 800ba36:	f0c0 8088 	bcc.w	800bb4a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	61da      	str	r2, [r3, #28]
 800ba40:	2304      	movs	r3, #4
 800ba42:	e08f      	b.n	800bb64 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	0a5b      	lsrs	r3, r3, #9
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	8952      	ldrh	r2, [r2, #10]
 800ba4c:	3a01      	subs	r2, #1
 800ba4e:	4013      	ands	r3, r2
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d17a      	bne.n	800bb4a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f7ff fc88 	bl	800b372 <get_fat>
 800ba62:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d801      	bhi.n	800ba6e <dir_next+0x8c>
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	e07a      	b.n	800bb64 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba74:	d101      	bne.n	800ba7a <dir_next+0x98>
 800ba76:	2301      	movs	r3, #1
 800ba78:	e074      	b.n	800bb64 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	695b      	ldr	r3, [r3, #20]
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d358      	bcc.n	800bb36 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d104      	bne.n	800ba94 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	61da      	str	r2, [r3, #28]
 800ba90:	2304      	movs	r3, #4
 800ba92:	e067      	b.n	800bb64 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	699b      	ldr	r3, [r3, #24]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	f7ff fe59 	bl	800b754 <create_chain>
 800baa2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d101      	bne.n	800baae <dir_next+0xcc>
 800baaa:	2307      	movs	r3, #7
 800baac:	e05a      	b.n	800bb64 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d101      	bne.n	800bab8 <dir_next+0xd6>
 800bab4:	2302      	movs	r3, #2
 800bab6:	e055      	b.n	800bb64 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800babe:	d101      	bne.n	800bac4 <dir_next+0xe2>
 800bac0:	2301      	movs	r3, #1
 800bac2:	e04f      	b.n	800bb64 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f7ff fb55 	bl	800b174 <sync_window>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d001      	beq.n	800bad4 <dir_next+0xf2>
 800bad0:	2301      	movs	r3, #1
 800bad2:	e047      	b.n	800bb64 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3330      	adds	r3, #48	; 0x30
 800bad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800badc:	2100      	movs	r1, #0
 800bade:	4618      	mov	r0, r3
 800bae0:	f7ff f97f 	bl	800ade2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bae4:	2300      	movs	r3, #0
 800bae6:	613b      	str	r3, [r7, #16]
 800bae8:	6979      	ldr	r1, [r7, #20]
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff fc22 	bl	800b334 <clust2sect>
 800baf0:	4602      	mov	r2, r0
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	62da      	str	r2, [r3, #44]	; 0x2c
 800baf6:	e012      	b.n	800bb1e <dir_next+0x13c>
						fs->wflag = 1;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2201      	movs	r2, #1
 800bafc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f7ff fb38 	bl	800b174 <sync_window>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <dir_next+0x12c>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e02a      	b.n	800bb64 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	3301      	adds	r3, #1
 800bb12:	613b      	str	r3, [r7, #16]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb18:	1c5a      	adds	r2, r3, #1
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	62da      	str	r2, [r3, #44]	; 0x2c
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	895b      	ldrh	r3, [r3, #10]
 800bb22:	461a      	mov	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d3e6      	bcc.n	800baf8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	1ad2      	subs	r2, r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bb3c:	6979      	ldr	r1, [r7, #20]
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f7ff fbf8 	bl	800b334 <clust2sect>
 800bb44:	4602      	mov	r2, r0
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb5c:	441a      	add	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff feb4 	bl	800b8ec <dir_sdi>
 800bb84:	4603      	mov	r3, r0
 800bb86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb88:	7dfb      	ldrb	r3, [r7, #23]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d12b      	bne.n	800bbe6 <dir_alloc+0x7a>
		n = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	69db      	ldr	r3, [r3, #28]
 800bb96:	4619      	mov	r1, r3
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7ff fb2f 	bl	800b1fc <move_window>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d11d      	bne.n	800bbe4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2be5      	cmp	r3, #229	; 0xe5
 800bbb0:	d004      	beq.n	800bbbc <dir_alloc+0x50>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d107      	bne.n	800bbcc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	613b      	str	r3, [r7, #16]
 800bbc2:	693a      	ldr	r2, [r7, #16]
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d102      	bne.n	800bbd0 <dir_alloc+0x64>
 800bbca:	e00c      	b.n	800bbe6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bbcc:	2300      	movs	r3, #0
 800bbce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff ff05 	bl	800b9e2 <dir_next>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bbdc:	7dfb      	ldrb	r3, [r7, #23]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d0d7      	beq.n	800bb92 <dir_alloc+0x26>
 800bbe2:	e000      	b.n	800bbe6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bbe4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bbe6:	7dfb      	ldrb	r3, [r7, #23]
 800bbe8:	2b04      	cmp	r3, #4
 800bbea:	d101      	bne.n	800bbf0 <dir_alloc+0x84>
 800bbec:	2307      	movs	r3, #7
 800bbee:	75fb      	strb	r3, [r7, #23]
	return res;
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3718      	adds	r7, #24
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	331a      	adds	r3, #26
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff f847 	bl	800ac9c <ld_word>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	2b03      	cmp	r3, #3
 800bc18:	d109      	bne.n	800bc2e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	3314      	adds	r3, #20
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff f83c 	bl	800ac9c <ld_word>
 800bc24:	4603      	mov	r3, r0
 800bc26:	041b      	lsls	r3, r3, #16
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	331a      	adds	r3, #26
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	b292      	uxth	r2, r2
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7ff f85f 	bl	800ad12 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d109      	bne.n	800bc70 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f103 0214 	add.w	r2, r3, #20
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	0c1b      	lsrs	r3, r3, #16
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	4619      	mov	r1, r3
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	f7ff f851 	bl	800ad12 <st_word>
	}
}
 800bc70:	bf00      	nop
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc86:	2100      	movs	r1, #0
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7ff fe2f 	bl	800b8ec <dir_sdi>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc92:	7dfb      	ldrb	r3, [r7, #23]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <dir_find+0x24>
 800bc98:	7dfb      	ldrb	r3, [r7, #23]
 800bc9a:	e03e      	b.n	800bd1a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	69db      	ldr	r3, [r3, #28]
 800bca0:	4619      	mov	r1, r3
 800bca2:	6938      	ldr	r0, [r7, #16]
 800bca4:	f7ff faaa 	bl	800b1fc <move_window>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bcac:	7dfb      	ldrb	r3, [r7, #23]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d12f      	bne.n	800bd12 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bcba:	7bfb      	ldrb	r3, [r7, #15]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d102      	bne.n	800bcc6 <dir_find+0x4e>
 800bcc0:	2304      	movs	r3, #4
 800bcc2:	75fb      	strb	r3, [r7, #23]
 800bcc4:	e028      	b.n	800bd18 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	330b      	adds	r3, #11
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a1b      	ldr	r3, [r3, #32]
 800bcdc:	330b      	adds	r3, #11
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	f003 0308 	and.w	r3, r3, #8
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <dir_find+0x86>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a18      	ldr	r0, [r3, #32]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	3324      	adds	r3, #36	; 0x24
 800bcf0:	220b      	movs	r2, #11
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	f7ff f88f 	bl	800ae16 <mem_cmp>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00b      	beq.n	800bd16 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bcfe:	2100      	movs	r1, #0
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7ff fe6e 	bl	800b9e2 <dir_next>
 800bd06:	4603      	mov	r3, r0
 800bd08:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0c5      	beq.n	800bc9c <dir_find+0x24>
 800bd10:	e002      	b.n	800bd18 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bd12:	bf00      	nop
 800bd14:	e000      	b.n	800bd18 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bd16:	bf00      	nop

	return res;
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b084      	sub	sp, #16
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bd30:	2101      	movs	r1, #1
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7ff ff1a 	bl	800bb6c <dir_alloc>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d11c      	bne.n	800bd7c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	69db      	ldr	r3, [r3, #28]
 800bd46:	4619      	mov	r1, r3
 800bd48:	68b8      	ldr	r0, [r7, #8]
 800bd4a:	f7ff fa57 	bl	800b1fc <move_window>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd52:	7bfb      	ldrb	r3, [r7, #15]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d111      	bne.n	800bd7c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	2220      	movs	r2, #32
 800bd5e:	2100      	movs	r1, #0
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff f83e 	bl	800ade2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a18      	ldr	r0, [r3, #32]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3324      	adds	r3, #36	; 0x24
 800bd6e:	220b      	movs	r2, #11
 800bd70:	4619      	mov	r1, r3
 800bd72:	f7ff f815 	bl	800ada0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bd7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
	...

0800bd88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b088      	sub	sp, #32
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	60fb      	str	r3, [r7, #12]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	3324      	adds	r3, #36	; 0x24
 800bd9c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bd9e:	220b      	movs	r2, #11
 800bda0:	2120      	movs	r1, #32
 800bda2:	68b8      	ldr	r0, [r7, #8]
 800bda4:	f7ff f81d 	bl	800ade2 <mem_set>
	si = i = 0; ni = 8;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	613b      	str	r3, [r7, #16]
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	617b      	str	r3, [r7, #20]
 800bdb0:	2308      	movs	r3, #8
 800bdb2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	1c5a      	adds	r2, r3, #1
 800bdb8:	617a      	str	r2, [r7, #20]
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bdc2:	7ffb      	ldrb	r3, [r7, #31]
 800bdc4:	2b20      	cmp	r3, #32
 800bdc6:	d94e      	bls.n	800be66 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bdc8:	7ffb      	ldrb	r3, [r7, #31]
 800bdca:	2b2f      	cmp	r3, #47	; 0x2f
 800bdcc:	d006      	beq.n	800bddc <create_name+0x54>
 800bdce:	7ffb      	ldrb	r3, [r7, #31]
 800bdd0:	2b5c      	cmp	r3, #92	; 0x5c
 800bdd2:	d110      	bne.n	800bdf6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bdd4:	e002      	b.n	800bddc <create_name+0x54>
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	617b      	str	r3, [r7, #20]
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	4413      	add	r3, r2
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	2b2f      	cmp	r3, #47	; 0x2f
 800bde6:	d0f6      	beq.n	800bdd6 <create_name+0x4e>
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	4413      	add	r3, r2
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	2b5c      	cmp	r3, #92	; 0x5c
 800bdf2:	d0f0      	beq.n	800bdd6 <create_name+0x4e>
			break;
 800bdf4:	e038      	b.n	800be68 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bdf6:	7ffb      	ldrb	r3, [r7, #31]
 800bdf8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdfa:	d003      	beq.n	800be04 <create_name+0x7c>
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	429a      	cmp	r2, r3
 800be02:	d30c      	bcc.n	800be1e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	2b0b      	cmp	r3, #11
 800be08:	d002      	beq.n	800be10 <create_name+0x88>
 800be0a:	7ffb      	ldrb	r3, [r7, #31]
 800be0c:	2b2e      	cmp	r3, #46	; 0x2e
 800be0e:	d001      	beq.n	800be14 <create_name+0x8c>
 800be10:	2306      	movs	r3, #6
 800be12:	e044      	b.n	800be9e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800be14:	2308      	movs	r3, #8
 800be16:	613b      	str	r3, [r7, #16]
 800be18:	230b      	movs	r3, #11
 800be1a:	61bb      	str	r3, [r7, #24]
			continue;
 800be1c:	e022      	b.n	800be64 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800be1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be22:	2b00      	cmp	r3, #0
 800be24:	da04      	bge.n	800be30 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800be26:	7ffb      	ldrb	r3, [r7, #31]
 800be28:	3b80      	subs	r3, #128	; 0x80
 800be2a:	4a1f      	ldr	r2, [pc, #124]	; (800bea8 <create_name+0x120>)
 800be2c:	5cd3      	ldrb	r3, [r2, r3]
 800be2e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800be30:	7ffb      	ldrb	r3, [r7, #31]
 800be32:	4619      	mov	r1, r3
 800be34:	481d      	ldr	r0, [pc, #116]	; (800beac <create_name+0x124>)
 800be36:	f7ff f815 	bl	800ae64 <chk_chr>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d001      	beq.n	800be44 <create_name+0xbc>
 800be40:	2306      	movs	r3, #6
 800be42:	e02c      	b.n	800be9e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800be44:	7ffb      	ldrb	r3, [r7, #31]
 800be46:	2b60      	cmp	r3, #96	; 0x60
 800be48:	d905      	bls.n	800be56 <create_name+0xce>
 800be4a:	7ffb      	ldrb	r3, [r7, #31]
 800be4c:	2b7a      	cmp	r3, #122	; 0x7a
 800be4e:	d802      	bhi.n	800be56 <create_name+0xce>
 800be50:	7ffb      	ldrb	r3, [r7, #31]
 800be52:	3b20      	subs	r3, #32
 800be54:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	1c5a      	adds	r2, r3, #1
 800be5a:	613a      	str	r2, [r7, #16]
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	4413      	add	r3, r2
 800be60:	7ffa      	ldrb	r2, [r7, #31]
 800be62:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800be64:	e7a6      	b.n	800bdb4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be66:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	441a      	add	r2, r3
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <create_name+0xf4>
 800be78:	2306      	movs	r3, #6
 800be7a:	e010      	b.n	800be9e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2be5      	cmp	r3, #229	; 0xe5
 800be82:	d102      	bne.n	800be8a <create_name+0x102>
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2205      	movs	r2, #5
 800be88:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be8a:	7ffb      	ldrb	r3, [r7, #31]
 800be8c:	2b20      	cmp	r3, #32
 800be8e:	d801      	bhi.n	800be94 <create_name+0x10c>
 800be90:	2204      	movs	r2, #4
 800be92:	e000      	b.n	800be96 <create_name+0x10e>
 800be94:	2200      	movs	r2, #0
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	330b      	adds	r3, #11
 800be9a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800be9c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3720      	adds	r7, #32
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	0800dd44 	.word	0x0800dd44
 800beac:	0800dad4 	.word	0x0800dad4

0800beb0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bec4:	e002      	b.n	800becc <follow_path+0x1c>
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	3301      	adds	r3, #1
 800beca:	603b      	str	r3, [r7, #0]
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	2b2f      	cmp	r3, #47	; 0x2f
 800bed2:	d0f8      	beq.n	800bec6 <follow_path+0x16>
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	2b5c      	cmp	r3, #92	; 0x5c
 800beda:	d0f4      	beq.n	800bec6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	2200      	movs	r2, #0
 800bee0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	2b1f      	cmp	r3, #31
 800bee8:	d80a      	bhi.n	800bf00 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2280      	movs	r2, #128	; 0x80
 800beee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bef2:	2100      	movs	r1, #0
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff fcf9 	bl	800b8ec <dir_sdi>
 800befa:	4603      	mov	r3, r0
 800befc:	75fb      	strb	r3, [r7, #23]
 800befe:	e043      	b.n	800bf88 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf00:	463b      	mov	r3, r7
 800bf02:	4619      	mov	r1, r3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7ff ff3f 	bl	800bd88 <create_name>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d134      	bne.n	800bf7e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff feaf 	bl	800bc78 <dir_find>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf24:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00a      	beq.n	800bf42 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bf2c:	7dfb      	ldrb	r3, [r7, #23]
 800bf2e:	2b04      	cmp	r3, #4
 800bf30:	d127      	bne.n	800bf82 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bf32:	7afb      	ldrb	r3, [r7, #11]
 800bf34:	f003 0304 	and.w	r3, r3, #4
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d122      	bne.n	800bf82 <follow_path+0xd2>
 800bf3c:	2305      	movs	r3, #5
 800bf3e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bf40:	e01f      	b.n	800bf82 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf42:	7afb      	ldrb	r3, [r7, #11]
 800bf44:	f003 0304 	and.w	r3, r3, #4
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d11c      	bne.n	800bf86 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	799b      	ldrb	r3, [r3, #6]
 800bf50:	f003 0310 	and.w	r3, r3, #16
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d102      	bne.n	800bf5e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bf58:	2305      	movs	r3, #5
 800bf5a:	75fb      	strb	r3, [r7, #23]
 800bf5c:	e014      	b.n	800bf88 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	695b      	ldr	r3, [r3, #20]
 800bf68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf6c:	4413      	add	r3, r2
 800bf6e:	4619      	mov	r1, r3
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7ff fe42 	bl	800bbfa <ld_clust>
 800bf76:	4602      	mov	r2, r0
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf7c:	e7c0      	b.n	800bf00 <follow_path+0x50>
			if (res != FR_OK) break;
 800bf7e:	bf00      	nop
 800bf80:	e002      	b.n	800bf88 <follow_path+0xd8>
				break;
 800bf82:	bf00      	nop
 800bf84:	e000      	b.n	800bf88 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf86:	bf00      	nop
			}
		}
	}

	return res;
 800bf88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3718      	adds	r7, #24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b087      	sub	sp, #28
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bf9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf9e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d031      	beq.n	800c00c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	617b      	str	r3, [r7, #20]
 800bfae:	e002      	b.n	800bfb6 <get_ldnumber+0x24>
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	617b      	str	r3, [r7, #20]
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b20      	cmp	r3, #32
 800bfbc:	d903      	bls.n	800bfc6 <get_ldnumber+0x34>
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	2b3a      	cmp	r3, #58	; 0x3a
 800bfc4:	d1f4      	bne.n	800bfb0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	2b3a      	cmp	r3, #58	; 0x3a
 800bfcc:	d11c      	bne.n	800c008 <get_ldnumber+0x76>
			tp = *path;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	60fa      	str	r2, [r7, #12]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	3b30      	subs	r3, #48	; 0x30
 800bfde:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2b09      	cmp	r3, #9
 800bfe4:	d80e      	bhi.n	800c004 <get_ldnumber+0x72>
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d10a      	bne.n	800c004 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d107      	bne.n	800c004 <get_ldnumber+0x72>
					vol = (int)i;
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	3301      	adds	r3, #1
 800bffc:	617b      	str	r3, [r7, #20]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	697a      	ldr	r2, [r7, #20]
 800c002:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	e002      	b.n	800c00e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c008:	2300      	movs	r3, #0
 800c00a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c00c:	693b      	ldr	r3, [r7, #16]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	371c      	adds	r7, #28
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
	...

0800c01c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	70da      	strb	r2, [r3, #3]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f04f 32ff 	mov.w	r2, #4294967295
 800c032:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff f8e0 	bl	800b1fc <move_window>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <check_fs+0x2a>
 800c042:	2304      	movs	r3, #4
 800c044:	e038      	b.n	800c0b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	3330      	adds	r3, #48	; 0x30
 800c04a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fe fe24 	bl	800ac9c <ld_word>
 800c054:	4603      	mov	r3, r0
 800c056:	461a      	mov	r2, r3
 800c058:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d001      	beq.n	800c064 <check_fs+0x48>
 800c060:	2303      	movs	r3, #3
 800c062:	e029      	b.n	800c0b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c06a:	2be9      	cmp	r3, #233	; 0xe9
 800c06c:	d009      	beq.n	800c082 <check_fs+0x66>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c074:	2beb      	cmp	r3, #235	; 0xeb
 800c076:	d11e      	bne.n	800c0b6 <check_fs+0x9a>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c07e:	2b90      	cmp	r3, #144	; 0x90
 800c080:	d119      	bne.n	800c0b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	3330      	adds	r3, #48	; 0x30
 800c086:	3336      	adds	r3, #54	; 0x36
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fe fe1f 	bl	800accc <ld_dword>
 800c08e:	4603      	mov	r3, r0
 800c090:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c094:	4a0a      	ldr	r2, [pc, #40]	; (800c0c0 <check_fs+0xa4>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d101      	bne.n	800c09e <check_fs+0x82>
 800c09a:	2300      	movs	r3, #0
 800c09c:	e00c      	b.n	800c0b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	3330      	adds	r3, #48	; 0x30
 800c0a2:	3352      	adds	r3, #82	; 0x52
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fe fe11 	bl	800accc <ld_dword>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	4b05      	ldr	r3, [pc, #20]	; (800c0c4 <check_fs+0xa8>)
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d101      	bne.n	800c0b6 <check_fs+0x9a>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e000      	b.n	800c0b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c0b6:	2302      	movs	r3, #2
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	00544146 	.word	0x00544146
 800c0c4:	33544146 	.word	0x33544146

0800c0c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b096      	sub	sp, #88	; 0x58
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f7ff ff58 	bl	800bf92 <get_ldnumber>
 800c0e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	da01      	bge.n	800c0ee <find_volume+0x26>
 800c0ea:	230b      	movs	r3, #11
 800c0ec:	e22e      	b.n	800c54c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c0ee:	4aa8      	ldr	r2, [pc, #672]	; (800c390 <find_volume+0x2c8>)
 800c0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <find_volume+0x3a>
 800c0fe:	230c      	movs	r3, #12
 800c100:	e224      	b.n	800c54c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c106:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c108:	79fb      	ldrb	r3, [r7, #7]
 800c10a:	f023 0301 	bic.w	r3, r3, #1
 800c10e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d01a      	beq.n	800c14e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	785b      	ldrb	r3, [r3, #1]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe fd1f 	bl	800ab60 <disk_status>
 800c122:	4603      	mov	r3, r0
 800c124:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c128:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10c      	bne.n	800c14e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c134:	79fb      	ldrb	r3, [r7, #7]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d007      	beq.n	800c14a <find_volume+0x82>
 800c13a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c13e:	f003 0304 	and.w	r3, r3, #4
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c146:	230a      	movs	r3, #10
 800c148:	e200      	b.n	800c54c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800c14a:	2300      	movs	r3, #0
 800c14c:	e1fe      	b.n	800c54c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c150:	2200      	movs	r2, #0
 800c152:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c156:	b2da      	uxtb	r2, r3
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	785b      	ldrb	r3, [r3, #1]
 800c160:	4618      	mov	r0, r3
 800c162:	f7fe fd17 	bl	800ab94 <disk_initialize>
 800c166:	4603      	mov	r3, r0
 800c168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c16c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c178:	2303      	movs	r3, #3
 800c17a:	e1e7      	b.n	800c54c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d007      	beq.n	800c192 <find_volume+0xca>
 800c182:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c186:	f003 0304 	and.w	r3, r3, #4
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c18e:	230a      	movs	r3, #10
 800c190:	e1dc      	b.n	800c54c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c19a:	f7ff ff3f 	bl	800c01c <check_fs>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c1a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d14b      	bne.n	800c244 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	643b      	str	r3, [r7, #64]	; 0x40
 800c1b0:	e01f      	b.n	800c1f2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ba:	011b      	lsls	r3, r3, #4
 800c1bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c1c0:	4413      	add	r3, r2
 800c1c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d006      	beq.n	800c1dc <find_volume+0x114>
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe fd7a 	bl	800accc <ld_dword>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	e000      	b.n	800c1de <find_volume+0x116>
 800c1dc:	2200      	movs	r2, #0
 800c1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c1e6:	440b      	add	r3, r1
 800c1e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	643b      	str	r3, [r7, #64]	; 0x40
 800c1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f4:	2b03      	cmp	r3, #3
 800c1f6:	d9dc      	bls.n	800c1b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <find_volume+0x140>
 800c202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c204:	3b01      	subs	r3, #1
 800c206:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c210:	4413      	add	r3, r2
 800c212:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c216:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d005      	beq.n	800c22a <find_volume+0x162>
 800c21e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c222:	f7ff fefb 	bl	800c01c <check_fs>
 800c226:	4603      	mov	r3, r0
 800c228:	e000      	b.n	800c22c <find_volume+0x164>
 800c22a:	2303      	movs	r3, #3
 800c22c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c234:	2b01      	cmp	r3, #1
 800c236:	d905      	bls.n	800c244 <find_volume+0x17c>
 800c238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c23a:	3301      	adds	r3, #1
 800c23c:	643b      	str	r3, [r7, #64]	; 0x40
 800c23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c240:	2b03      	cmp	r3, #3
 800c242:	d9e1      	bls.n	800c208 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c248:	2b04      	cmp	r3, #4
 800c24a:	d101      	bne.n	800c250 <find_volume+0x188>
 800c24c:	2301      	movs	r3, #1
 800c24e:	e17d      	b.n	800c54c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c254:	2b01      	cmp	r3, #1
 800c256:	d901      	bls.n	800c25c <find_volume+0x194>
 800c258:	230d      	movs	r3, #13
 800c25a:	e177      	b.n	800c54c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	3330      	adds	r3, #48	; 0x30
 800c260:	330b      	adds	r3, #11
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe fd1a 	bl	800ac9c <ld_word>
 800c268:	4603      	mov	r3, r0
 800c26a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c26e:	d001      	beq.n	800c274 <find_volume+0x1ac>
 800c270:	230d      	movs	r3, #13
 800c272:	e16b      	b.n	800c54c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	3330      	adds	r3, #48	; 0x30
 800c278:	3316      	adds	r3, #22
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fd0e 	bl	800ac9c <ld_word>
 800c280:	4603      	mov	r3, r0
 800c282:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <find_volume+0x1d0>
 800c28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28c:	3330      	adds	r3, #48	; 0x30
 800c28e:	3324      	adds	r3, #36	; 0x24
 800c290:	4618      	mov	r0, r3
 800c292:	f7fe fd1b 	bl	800accc <ld_dword>
 800c296:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c29c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	789b      	ldrb	r3, [r3, #2]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d005      	beq.n	800c2bc <find_volume+0x1f4>
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	789b      	ldrb	r3, [r3, #2]
 800c2b4:	2b02      	cmp	r3, #2
 800c2b6:	d001      	beq.n	800c2bc <find_volume+0x1f4>
 800c2b8:	230d      	movs	r3, #13
 800c2ba:	e147      	b.n	800c54c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2be:	789b      	ldrb	r3, [r3, #2]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c4:	fb02 f303 	mul.w	r3, r2, r3
 800c2c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d8:	895b      	ldrh	r3, [r3, #10]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d008      	beq.n	800c2f0 <find_volume+0x228>
 800c2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e0:	895b      	ldrh	r3, [r3, #10]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	895b      	ldrh	r3, [r3, #10]
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	4013      	ands	r3, r2
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <find_volume+0x22c>
 800c2f0:	230d      	movs	r3, #13
 800c2f2:	e12b      	b.n	800c54c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f6:	3330      	adds	r3, #48	; 0x30
 800c2f8:	3311      	adds	r3, #17
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fe fcce 	bl	800ac9c <ld_word>
 800c300:	4603      	mov	r3, r0
 800c302:	461a      	mov	r2, r3
 800c304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c306:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30a:	891b      	ldrh	r3, [r3, #8]
 800c30c:	f003 030f 	and.w	r3, r3, #15
 800c310:	b29b      	uxth	r3, r3
 800c312:	2b00      	cmp	r3, #0
 800c314:	d001      	beq.n	800c31a <find_volume+0x252>
 800c316:	230d      	movs	r3, #13
 800c318:	e118      	b.n	800c54c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31c:	3330      	adds	r3, #48	; 0x30
 800c31e:	3313      	adds	r3, #19
 800c320:	4618      	mov	r0, r3
 800c322:	f7fe fcbb 	bl	800ac9c <ld_word>
 800c326:	4603      	mov	r3, r0
 800c328:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c32a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d106      	bne.n	800c33e <find_volume+0x276>
 800c330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c332:	3330      	adds	r3, #48	; 0x30
 800c334:	3320      	adds	r3, #32
 800c336:	4618      	mov	r0, r3
 800c338:	f7fe fcc8 	bl	800accc <ld_dword>
 800c33c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c340:	3330      	adds	r3, #48	; 0x30
 800c342:	330e      	adds	r3, #14
 800c344:	4618      	mov	r0, r3
 800c346:	f7fe fca9 	bl	800ac9c <ld_word>
 800c34a:	4603      	mov	r3, r0
 800c34c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c34e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <find_volume+0x290>
 800c354:	230d      	movs	r3, #13
 800c356:	e0f9      	b.n	800c54c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c358:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c35a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c35c:	4413      	add	r3, r2
 800c35e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c360:	8912      	ldrh	r2, [r2, #8]
 800c362:	0912      	lsrs	r2, r2, #4
 800c364:	b292      	uxth	r2, r2
 800c366:	4413      	add	r3, r2
 800c368:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c36a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	429a      	cmp	r2, r3
 800c370:	d201      	bcs.n	800c376 <find_volume+0x2ae>
 800c372:	230d      	movs	r3, #13
 800c374:	e0ea      	b.n	800c54c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c37e:	8952      	ldrh	r2, [r2, #10]
 800c380:	fbb3 f3f2 	udiv	r3, r3, r2
 800c384:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d103      	bne.n	800c394 <find_volume+0x2cc>
 800c38c:	230d      	movs	r3, #13
 800c38e:	e0dd      	b.n	800c54c <find_volume+0x484>
 800c390:	20009378 	.word	0x20009378
		fmt = FS_FAT32;
 800c394:	2303      	movs	r3, #3
 800c396:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d802      	bhi.n	800c3aa <find_volume+0x2e2>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d802      	bhi.n	800c3ba <find_volume+0x2f2>
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3bc:	1c9a      	adds	r2, r3, #2
 800c3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3c6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c3c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3cc:	441a      	add	r2, r3
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c3d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	441a      	add	r2, r3
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c3dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3e0:	2b03      	cmp	r3, #3
 800c3e2:	d11e      	bne.n	800c422 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e6:	3330      	adds	r3, #48	; 0x30
 800c3e8:	332a      	adds	r3, #42	; 0x2a
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fe fc56 	bl	800ac9c <ld_word>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d001      	beq.n	800c3fa <find_volume+0x332>
 800c3f6:	230d      	movs	r3, #13
 800c3f8:	e0a8      	b.n	800c54c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fc:	891b      	ldrh	r3, [r3, #8]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d001      	beq.n	800c406 <find_volume+0x33e>
 800c402:	230d      	movs	r3, #13
 800c404:	e0a2      	b.n	800c54c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c408:	3330      	adds	r3, #48	; 0x30
 800c40a:	332c      	adds	r3, #44	; 0x2c
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fe fc5d 	bl	800accc <ld_dword>
 800c412:	4602      	mov	r2, r0
 800c414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c416:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	647b      	str	r3, [r7, #68]	; 0x44
 800c420:	e01f      	b.n	800c462 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c424:	891b      	ldrh	r3, [r3, #8]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <find_volume+0x366>
 800c42a:	230d      	movs	r3, #13
 800c42c:	e08e      	b.n	800c54c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c430:	6a1a      	ldr	r2, [r3, #32]
 800c432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c434:	441a      	add	r2, r3
 800c436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c438:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c43a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d103      	bne.n	800c44a <find_volume+0x382>
 800c442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	e00a      	b.n	800c460 <find_volume+0x398>
 800c44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44c:	695a      	ldr	r2, [r3, #20]
 800c44e:	4613      	mov	r3, r2
 800c450:	005b      	lsls	r3, r3, #1
 800c452:	4413      	add	r3, r2
 800c454:	085a      	lsrs	r2, r3, #1
 800c456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c458:	695b      	ldr	r3, [r3, #20]
 800c45a:	f003 0301 	and.w	r3, r3, #1
 800c45e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c460:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	699a      	ldr	r2, [r3, #24]
 800c466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c468:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c46c:	0a5b      	lsrs	r3, r3, #9
 800c46e:	429a      	cmp	r2, r3
 800c470:	d201      	bcs.n	800c476 <find_volume+0x3ae>
 800c472:	230d      	movs	r3, #13
 800c474:	e06a      	b.n	800c54c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c478:	f04f 32ff 	mov.w	r2, #4294967295
 800c47c:	611a      	str	r2, [r3, #16]
 800c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c480:	691a      	ldr	r2, [r3, #16]
 800c482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c484:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c488:	2280      	movs	r2, #128	; 0x80
 800c48a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c48c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c490:	2b03      	cmp	r3, #3
 800c492:	d149      	bne.n	800c528 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	3330      	adds	r3, #48	; 0x30
 800c498:	3330      	adds	r3, #48	; 0x30
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fbfe 	bl	800ac9c <ld_word>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d140      	bne.n	800c528 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c4a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4ae:	f7fe fea5 	bl	800b1fc <move_window>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d137      	bne.n	800c528 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c0:	3330      	adds	r3, #48	; 0x30
 800c4c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fe fbe8 	bl	800ac9c <ld_word>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d127      	bne.n	800c528 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4da:	3330      	adds	r3, #48	; 0x30
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe fbf5 	bl	800accc <ld_dword>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	4b1b      	ldr	r3, [pc, #108]	; (800c554 <find_volume+0x48c>)
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d11e      	bne.n	800c528 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	3330      	adds	r3, #48	; 0x30
 800c4ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fe fbea 	bl	800accc <ld_dword>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	4b17      	ldr	r3, [pc, #92]	; (800c558 <find_volume+0x490>)
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d113      	bne.n	800c528 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	3330      	adds	r3, #48	; 0x30
 800c504:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fe fbdf 	bl	800accc <ld_dword>
 800c50e:	4602      	mov	r2, r0
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c516:	3330      	adds	r3, #48	; 0x30
 800c518:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fe fbd5 	bl	800accc <ld_dword>
 800c522:	4602      	mov	r2, r0
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c52e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c530:	4b0a      	ldr	r3, [pc, #40]	; (800c55c <find_volume+0x494>)
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	3301      	adds	r3, #1
 800c536:	b29a      	uxth	r2, r3
 800c538:	4b08      	ldr	r3, [pc, #32]	; (800c55c <find_volume+0x494>)
 800c53a:	801a      	strh	r2, [r3, #0]
 800c53c:	4b07      	ldr	r3, [pc, #28]	; (800c55c <find_volume+0x494>)
 800c53e:	881a      	ldrh	r2, [r3, #0]
 800c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c542:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c544:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c546:	f7fe fdf1 	bl	800b12c <clear_lock>
#endif
	return FR_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3758      	adds	r7, #88	; 0x58
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	41615252 	.word	0x41615252
 800c558:	61417272 	.word	0x61417272
 800c55c:	2000937c 	.word	0x2000937c

0800c560 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c56a:	2309      	movs	r3, #9
 800c56c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d01c      	beq.n	800c5ae <validate+0x4e>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d018      	beq.n	800c5ae <validate+0x4e>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d013      	beq.n	800c5ae <validate+0x4e>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	889a      	ldrh	r2, [r3, #4]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	88db      	ldrh	r3, [r3, #6]
 800c590:	429a      	cmp	r2, r3
 800c592:	d10c      	bne.n	800c5ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	785b      	ldrb	r3, [r3, #1]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fe fae0 	bl	800ab60 <disk_status>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	f003 0301 	and.w	r3, r3, #1
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <validate+0x4e>
			res = FR_OK;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c5ae:	7bfb      	ldrb	r3, [r7, #15]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d102      	bne.n	800c5ba <validate+0x5a>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	e000      	b.n	800c5bc <validate+0x5c>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	6013      	str	r3, [r2, #0]
	return res;
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
	...

0800c5cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b088      	sub	sp, #32
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c5de:	f107 0310 	add.w	r3, r7, #16
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7ff fcd5 	bl	800bf92 <get_ldnumber>
 800c5e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	da01      	bge.n	800c5f4 <f_mount+0x28>
 800c5f0:	230b      	movs	r3, #11
 800c5f2:	e02b      	b.n	800c64c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c5f4:	4a17      	ldr	r2, [pc, #92]	; (800c654 <f_mount+0x88>)
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d005      	beq.n	800c610 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c604:	69b8      	ldr	r0, [r7, #24]
 800c606:	f7fe fd91 	bl	800b12c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	2200      	movs	r2, #0
 800c60e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d002      	beq.n	800c61c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	490d      	ldr	r1, [pc, #52]	; (800c654 <f_mount+0x88>)
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <f_mount+0x66>
 800c62c:	79fb      	ldrb	r3, [r7, #7]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d001      	beq.n	800c636 <f_mount+0x6a>
 800c632:	2300      	movs	r3, #0
 800c634:	e00a      	b.n	800c64c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c636:	f107 010c 	add.w	r1, r7, #12
 800c63a:	f107 0308 	add.w	r3, r7, #8
 800c63e:	2200      	movs	r2, #0
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff fd41 	bl	800c0c8 <find_volume>
 800c646:	4603      	mov	r3, r0
 800c648:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	20009378 	.word	0x20009378

0800c658 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b098      	sub	sp, #96	; 0x60
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	4613      	mov	r3, r2
 800c664:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <f_open+0x18>
 800c66c:	2309      	movs	r3, #9
 800c66e:	e1ad      	b.n	800c9cc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c670:	79fb      	ldrb	r3, [r7, #7]
 800c672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c676:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c678:	79fa      	ldrb	r2, [r7, #7]
 800c67a:	f107 0110 	add.w	r1, r7, #16
 800c67e:	f107 0308 	add.w	r3, r7, #8
 800c682:	4618      	mov	r0, r3
 800c684:	f7ff fd20 	bl	800c0c8 <find_volume>
 800c688:	4603      	mov	r3, r0
 800c68a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c68e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c692:	2b00      	cmp	r3, #0
 800c694:	f040 8191 	bne.w	800c9ba <f_open+0x362>
		dj.obj.fs = fs;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	f107 0314 	add.w	r3, r7, #20
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff fc03 	bl	800beb0 <follow_path>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c6b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d11a      	bne.n	800c6ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c6b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c6bc:	b25b      	sxtb	r3, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	da03      	bge.n	800c6ca <f_open+0x72>
				res = FR_INVALID_NAME;
 800c6c2:	2306      	movs	r3, #6
 800c6c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c6c8:	e011      	b.n	800c6ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c6ca:	79fb      	ldrb	r3, [r7, #7]
 800c6cc:	f023 0301 	bic.w	r3, r3, #1
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	bf14      	ite	ne
 800c6d4:	2301      	movne	r3, #1
 800c6d6:	2300      	moveq	r3, #0
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	461a      	mov	r2, r3
 800c6dc:	f107 0314 	add.w	r3, r7, #20
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fe fbda 	bl	800ae9c <chk_lock>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c6ee:	79fb      	ldrb	r3, [r7, #7]
 800c6f0:	f003 031c 	and.w	r3, r3, #28
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d07f      	beq.n	800c7f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c6f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d017      	beq.n	800c730 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c704:	2b04      	cmp	r3, #4
 800c706:	d10e      	bne.n	800c726 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c708:	f7fe fc24 	bl	800af54 <enq_lock>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d006      	beq.n	800c720 <f_open+0xc8>
 800c712:	f107 0314 	add.w	r3, r7, #20
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff fb03 	bl	800bd22 <dir_register>
 800c71c:	4603      	mov	r3, r0
 800c71e:	e000      	b.n	800c722 <f_open+0xca>
 800c720:	2312      	movs	r3, #18
 800c722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c726:	79fb      	ldrb	r3, [r7, #7]
 800c728:	f043 0308 	orr.w	r3, r3, #8
 800c72c:	71fb      	strb	r3, [r7, #7]
 800c72e:	e010      	b.n	800c752 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c730:	7ebb      	ldrb	r3, [r7, #26]
 800c732:	f003 0311 	and.w	r3, r3, #17
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <f_open+0xea>
					res = FR_DENIED;
 800c73a:	2307      	movs	r3, #7
 800c73c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c740:	e007      	b.n	800c752 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c742:	79fb      	ldrb	r3, [r7, #7]
 800c744:	f003 0304 	and.w	r3, r3, #4
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d002      	beq.n	800c752 <f_open+0xfa>
 800c74c:	2308      	movs	r3, #8
 800c74e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c756:	2b00      	cmp	r3, #0
 800c758:	d168      	bne.n	800c82c <f_open+0x1d4>
 800c75a:	79fb      	ldrb	r3, [r7, #7]
 800c75c:	f003 0308 	and.w	r3, r3, #8
 800c760:	2b00      	cmp	r3, #0
 800c762:	d063      	beq.n	800c82c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c764:	f7fb f960 	bl	8007a28 <get_fattime>
 800c768:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76c:	330e      	adds	r3, #14
 800c76e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c770:	4618      	mov	r0, r3
 800c772:	f7fe fae9 	bl	800ad48 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c778:	3316      	adds	r3, #22
 800c77a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7fe fae3 	bl	800ad48 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c784:	330b      	adds	r3, #11
 800c786:	2220      	movs	r2, #32
 800c788:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c78e:	4611      	mov	r1, r2
 800c790:	4618      	mov	r0, r3
 800c792:	f7ff fa32 	bl	800bbfa <ld_clust>
 800c796:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c79c:	2200      	movs	r2, #0
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7ff fa4a 	bl	800bc38 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a6:	331c      	adds	r3, #28
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe facc 	bl	800ad48 <st_dword>
					fs->wflag = 1;
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c7b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d037      	beq.n	800c82c <f_open+0x1d4>
						dw = fs->winsect;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c7c2:	f107 0314 	add.w	r3, r7, #20
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fe ff5d 	bl	800b68a <remove_chain>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c7d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d126      	bne.n	800c82c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fe fd0a 	bl	800b1fc <move_window>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7f2:	3a01      	subs	r2, #1
 800c7f4:	60da      	str	r2, [r3, #12]
 800c7f6:	e019      	b.n	800c82c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c7f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d115      	bne.n	800c82c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c800:	7ebb      	ldrb	r3, [r7, #26]
 800c802:	f003 0310 	and.w	r3, r3, #16
 800c806:	2b00      	cmp	r3, #0
 800c808:	d003      	beq.n	800c812 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c80a:	2304      	movs	r3, #4
 800c80c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c810:	e00c      	b.n	800c82c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c812:	79fb      	ldrb	r3, [r7, #7]
 800c814:	f003 0302 	and.w	r3, r3, #2
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d007      	beq.n	800c82c <f_open+0x1d4>
 800c81c:	7ebb      	ldrb	r3, [r7, #26]
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	2b00      	cmp	r3, #0
 800c824:	d002      	beq.n	800c82c <f_open+0x1d4>
						res = FR_DENIED;
 800c826:	2307      	movs	r3, #7
 800c828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c82c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c830:	2b00      	cmp	r3, #0
 800c832:	d128      	bne.n	800c886 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c834:	79fb      	ldrb	r3, [r7, #7]
 800c836:	f003 0308 	and.w	r3, r3, #8
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d003      	beq.n	800c846 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c83e:	79fb      	ldrb	r3, [r7, #7]
 800c840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c844:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c84e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c854:	79fb      	ldrb	r3, [r7, #7]
 800c856:	f023 0301 	bic.w	r3, r3, #1
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	bf14      	ite	ne
 800c85e:	2301      	movne	r3, #1
 800c860:	2300      	moveq	r3, #0
 800c862:	b2db      	uxtb	r3, r3
 800c864:	461a      	mov	r2, r3
 800c866:	f107 0314 	add.w	r3, r7, #20
 800c86a:	4611      	mov	r1, r2
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fe fb93 	bl	800af98 <inc_lock>
 800c872:	4602      	mov	r2, r0
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d102      	bne.n	800c886 <f_open+0x22e>
 800c880:	2302      	movs	r3, #2
 800c882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f040 8095 	bne.w	800c9ba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c894:	4611      	mov	r1, r2
 800c896:	4618      	mov	r0, r3
 800c898:	f7ff f9af 	bl	800bbfa <ld_clust>
 800c89c:	4602      	mov	r2, r0
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a4:	331c      	adds	r3, #28
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe fa10 	bl	800accc <ld_dword>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c8b8:	693a      	ldr	r2, [r7, #16]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	88da      	ldrh	r2, [r3, #6]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	79fa      	ldrb	r2, [r7, #7]
 800c8ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	3330      	adds	r3, #48	; 0x30
 800c8e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fe fa7a 	bl	800ade2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c8ee:	79fb      	ldrb	r3, [r7, #7]
 800c8f0:	f003 0320 	and.w	r3, r3, #32
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d060      	beq.n	800c9ba <f_open+0x362>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d05c      	beq.n	800c9ba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	68da      	ldr	r2, [r3, #12]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	895b      	ldrh	r3, [r3, #10]
 800c90c:	025b      	lsls	r3, r3, #9
 800c90e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	657b      	str	r3, [r7, #84]	; 0x54
 800c91c:	e016      	b.n	800c94c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe fd25 	bl	800b372 <get_fat>
 800c928:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c92a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d802      	bhi.n	800c936 <f_open+0x2de>
 800c930:	2302      	movs	r3, #2
 800c932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c93c:	d102      	bne.n	800c944 <f_open+0x2ec>
 800c93e:	2301      	movs	r3, #1
 800c940:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c948:	1ad3      	subs	r3, r2, r3
 800c94a:	657b      	str	r3, [r7, #84]	; 0x54
 800c94c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c950:	2b00      	cmp	r3, #0
 800c952:	d103      	bne.n	800c95c <f_open+0x304>
 800c954:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c958:	429a      	cmp	r2, r3
 800c95a:	d8e0      	bhi.n	800c91e <f_open+0x2c6>
				}
				fp->clust = clst;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c960:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c966:	2b00      	cmp	r3, #0
 800c968:	d127      	bne.n	800c9ba <f_open+0x362>
 800c96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c970:	2b00      	cmp	r3, #0
 800c972:	d022      	beq.n	800c9ba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fe fcdb 	bl	800b334 <clust2sect>
 800c97e:	6478      	str	r0, [r7, #68]	; 0x44
 800c980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c982:	2b00      	cmp	r3, #0
 800c984:	d103      	bne.n	800c98e <f_open+0x336>
						res = FR_INT_ERR;
 800c986:	2302      	movs	r3, #2
 800c988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c98c:	e015      	b.n	800c9ba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c98e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c990:	0a5a      	lsrs	r2, r3, #9
 800c992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c994:	441a      	add	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	7858      	ldrb	r0, [r3, #1]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6a1a      	ldr	r2, [r3, #32]
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	f7fe f919 	bl	800abe0 <disk_read>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d002      	beq.n	800c9ba <f_open+0x362>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c9ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <f_open+0x370>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c9c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3760      	adds	r7, #96	; 0x60
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b08e      	sub	sp, #56	; 0x38
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
 800c9e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f107 0214 	add.w	r2, r7, #20
 800c9f2:	4611      	mov	r1, r2
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7ff fdb3 	bl	800c560 <validate>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ca00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d107      	bne.n	800ca18 <f_read+0x44>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	7d5b      	ldrb	r3, [r3, #21]
 800ca0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ca10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <f_read+0x4a>
 800ca18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca1c:	e115      	b.n	800cc4a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	7d1b      	ldrb	r3, [r3, #20]
 800ca22:	f003 0301 	and.w	r3, r3, #1
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d101      	bne.n	800ca2e <f_read+0x5a>
 800ca2a:	2307      	movs	r3, #7
 800ca2c:	e10d      	b.n	800cc4a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	68da      	ldr	r2, [r3, #12]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	f240 80fe 	bls.w	800cc40 <f_read+0x26c>
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ca48:	e0fa      	b.n	800cc40 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f040 80c6 	bne.w	800cbe4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	699b      	ldr	r3, [r3, #24]
 800ca5c:	0a5b      	lsrs	r3, r3, #9
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	8952      	ldrh	r2, [r2, #10]
 800ca62:	3a01      	subs	r2, #1
 800ca64:	4013      	ands	r3, r2
 800ca66:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d12f      	bne.n	800cace <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	699b      	ldr	r3, [r3, #24]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d103      	bne.n	800ca7e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	633b      	str	r3, [r7, #48]	; 0x30
 800ca7c:	e013      	b.n	800caa6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d007      	beq.n	800ca96 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	699b      	ldr	r3, [r3, #24]
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f7fe fef9 	bl	800b884 <clmt_clust>
 800ca92:	6338      	str	r0, [r7, #48]	; 0x30
 800ca94:	e007      	b.n	800caa6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	69db      	ldr	r3, [r3, #28]
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	4610      	mov	r0, r2
 800caa0:	f7fe fc67 	bl	800b372 <get_fat>
 800caa4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800caa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d804      	bhi.n	800cab6 <f_read+0xe2>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2202      	movs	r2, #2
 800cab0:	755a      	strb	r2, [r3, #21]
 800cab2:	2302      	movs	r3, #2
 800cab4:	e0c9      	b.n	800cc4a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cabc:	d104      	bne.n	800cac8 <f_read+0xf4>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2201      	movs	r2, #1
 800cac2:	755a      	strb	r2, [r3, #21]
 800cac4:	2301      	movs	r3, #1
 800cac6:	e0c0      	b.n	800cc4a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cacc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	69db      	ldr	r3, [r3, #28]
 800cad4:	4619      	mov	r1, r3
 800cad6:	4610      	mov	r0, r2
 800cad8:	f7fe fc2c 	bl	800b334 <clust2sect>
 800cadc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d104      	bne.n	800caee <f_read+0x11a>
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2202      	movs	r2, #2
 800cae8:	755a      	strb	r2, [r3, #21]
 800caea:	2302      	movs	r3, #2
 800caec:	e0ad      	b.n	800cc4a <f_read+0x276>
			sect += csect;
 800caee:	69ba      	ldr	r2, [r7, #24]
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	4413      	add	r3, r2
 800caf4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	0a5b      	lsrs	r3, r3, #9
 800cafa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d039      	beq.n	800cb76 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cb02:	69fa      	ldr	r2, [r7, #28]
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	4413      	add	r3, r2
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	8952      	ldrh	r2, [r2, #10]
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d905      	bls.n	800cb1c <f_read+0x148>
					cc = fs->csize - csect;
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	895b      	ldrh	r3, [r3, #10]
 800cb14:	461a      	mov	r2, r3
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	7858      	ldrb	r0, [r3, #1]
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb26:	f7fe f85b 	bl	800abe0 <disk_read>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d004      	beq.n	800cb3a <f_read+0x166>
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2201      	movs	r2, #1
 800cb34:	755a      	strb	r2, [r3, #21]
 800cb36:	2301      	movs	r3, #1
 800cb38:	e087      	b.n	800cc4a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	7d1b      	ldrb	r3, [r3, #20]
 800cb3e:	b25b      	sxtb	r3, r3
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	da14      	bge.n	800cb6e <f_read+0x19a>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6a1a      	ldr	r2, [r3, #32]
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d90d      	bls.n	800cb6e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6a1a      	ldr	r2, [r3, #32]
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	1ad3      	subs	r3, r2, r3
 800cb5a:	025b      	lsls	r3, r3, #9
 800cb5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb5e:	18d0      	adds	r0, r2, r3
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3330      	adds	r3, #48	; 0x30
 800cb64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb68:	4619      	mov	r1, r3
 800cb6a:	f7fe f919 	bl	800ada0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	025b      	lsls	r3, r3, #9
 800cb72:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800cb74:	e050      	b.n	800cc18 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	69ba      	ldr	r2, [r7, #24]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d02e      	beq.n	800cbde <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	7d1b      	ldrb	r3, [r3, #20]
 800cb84:	b25b      	sxtb	r3, r3
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	da18      	bge.n	800cbbc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	7858      	ldrb	r0, [r3, #1]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6a1a      	ldr	r2, [r3, #32]
 800cb98:	2301      	movs	r3, #1
 800cb9a:	f7fe f841 	bl	800ac20 <disk_write>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d004      	beq.n	800cbae <f_read+0x1da>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2201      	movs	r2, #1
 800cba8:	755a      	strb	r2, [r3, #21]
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e04d      	b.n	800cc4a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	7d1b      	ldrb	r3, [r3, #20]
 800cbb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbb6:	b2da      	uxtb	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	7858      	ldrb	r0, [r3, #1]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	69ba      	ldr	r2, [r7, #24]
 800cbca:	f7fe f809 	bl	800abe0 <disk_read>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d004      	beq.n	800cbde <f_read+0x20a>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	755a      	strb	r2, [r3, #21]
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e035      	b.n	800cc4a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	69ba      	ldr	r2, [r7, #24]
 800cbe2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cbf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d901      	bls.n	800cbfe <f_read+0x22a>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	699b      	ldr	r3, [r3, #24]
 800cc08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc0c:	4413      	add	r3, r2
 800cc0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc10:	4619      	mov	r1, r3
 800cc12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc14:	f7fe f8c4 	bl	800ada0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1c:	4413      	add	r3, r2
 800cc1e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	699a      	ldr	r2, [r3, #24]
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	441a      	add	r2, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	619a      	str	r2, [r3, #24]
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc32:	441a      	add	r2, r3
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	f47f af01 	bne.w	800ca4a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3738      	adds	r7, #56	; 0x38
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b086      	sub	sp, #24
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f107 0208 	add.w	r2, r7, #8
 800cc60:	4611      	mov	r1, r2
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff fc7c 	bl	800c560 <validate>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d168      	bne.n	800cd44 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	7d1b      	ldrb	r3, [r3, #20]
 800cc76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d062      	beq.n	800cd44 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	7d1b      	ldrb	r3, [r3, #20]
 800cc82:	b25b      	sxtb	r3, r3
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	da15      	bge.n	800ccb4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	7858      	ldrb	r0, [r3, #1]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6a1a      	ldr	r2, [r3, #32]
 800cc96:	2301      	movs	r3, #1
 800cc98:	f7fd ffc2 	bl	800ac20 <disk_write>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d001      	beq.n	800cca6 <f_sync+0x54>
 800cca2:	2301      	movs	r3, #1
 800cca4:	e04f      	b.n	800cd46 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	7d1b      	ldrb	r3, [r3, #20]
 800ccaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ccb4:	f7fa feb8 	bl	8007a28 <get_fattime>
 800ccb8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	f7fe fa9a 	bl	800b1fc <move_window>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cccc:	7dfb      	ldrb	r3, [r7, #23]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d138      	bne.n	800cd44 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	330b      	adds	r3, #11
 800ccdc:	781a      	ldrb	r2, [r3, #0]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	330b      	adds	r3, #11
 800cce2:	f042 0220 	orr.w	r2, r2, #32
 800cce6:	b2d2      	uxtb	r2, r2
 800cce8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	68f9      	ldr	r1, [r7, #12]
 800ccf6:	f7fe ff9f 	bl	800bc38 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f103 021c 	add.w	r2, r3, #28
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	4619      	mov	r1, r3
 800cd06:	4610      	mov	r0, r2
 800cd08:	f7fe f81e 	bl	800ad48 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	3316      	adds	r3, #22
 800cd10:	6939      	ldr	r1, [r7, #16]
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fe f818 	bl	800ad48 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	3312      	adds	r3, #18
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fd fff7 	bl	800ad12 <st_word>
					fs->wflag = 1;
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	2201      	movs	r2, #1
 800cd28:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe fa93 	bl	800b258 <sync_fs>
 800cd32:	4603      	mov	r3, r0
 800cd34:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	7d1b      	ldrb	r3, [r3, #20]
 800cd3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b084      	sub	sp, #16
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f7ff ff7b 	bl	800cc52 <f_sync>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cd60:	7bfb      	ldrb	r3, [r7, #15]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d118      	bne.n	800cd98 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f107 0208 	add.w	r2, r7, #8
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7ff fbf6 	bl	800c560 <validate>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cd78:	7bfb      	ldrb	r3, [r7, #15]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10c      	bne.n	800cd98 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe f996 	bl	800b0b4 <dec_lock>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d102      	bne.n	800cd98 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b090      	sub	sp, #64	; 0x40
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f107 0208 	add.w	r2, r7, #8
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7ff fbd3 	bl	800c560 <validate>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cdc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d103      	bne.n	800cdd0 <f_lseek+0x2e>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	7d5b      	ldrb	r3, [r3, #21]
 800cdcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cdd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <f_lseek+0x3c>
 800cdd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cddc:	e1e6      	b.n	800d1ac <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f000 80d1 	beq.w	800cf8a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdee:	d15a      	bne.n	800cea6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	1d1a      	adds	r2, r3, #4
 800cdfa:	627a      	str	r2, [r7, #36]	; 0x24
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	617b      	str	r3, [r7, #20]
 800ce00:	2302      	movs	r3, #2
 800ce02:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d03a      	beq.n	800ce86 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	613b      	str	r3, [r7, #16]
 800ce14:	2300      	movs	r3, #0
 800ce16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1a:	3302      	adds	r3, #2
 800ce1c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	3301      	adds	r3, #1
 800ce26:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fe faa0 	bl	800b372 <get_fat>
 800ce32:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ce34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d804      	bhi.n	800ce44 <f_lseek+0xa2>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2202      	movs	r2, #2
 800ce3e:	755a      	strb	r2, [r3, #21]
 800ce40:	2302      	movs	r3, #2
 800ce42:	e1b3      	b.n	800d1ac <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4a:	d104      	bne.n	800ce56 <f_lseek+0xb4>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	755a      	strb	r2, [r3, #21]
 800ce52:	2301      	movs	r3, #1
 800ce54:	e1aa      	b.n	800d1ac <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d0de      	beq.n	800ce1e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ce60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d809      	bhi.n	800ce7c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	1d1a      	adds	r2, r3, #4
 800ce6c:	627a      	str	r2, [r7, #36]	; 0x24
 800ce6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce70:	601a      	str	r2, [r3, #0]
 800ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce74:	1d1a      	adds	r2, r3, #4
 800ce76:	627a      	str	r2, [r7, #36]	; 0x24
 800ce78:	693a      	ldr	r2, [r7, #16]
 800ce7a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d3c4      	bcc.n	800ce10 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce8c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ce8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d803      	bhi.n	800ce9e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ce96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce98:	2200      	movs	r2, #0
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	e184      	b.n	800d1a8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ce9e:	2311      	movs	r3, #17
 800cea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cea4:	e180      	b.n	800d1a8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d902      	bls.n	800ceb6 <f_lseek+0x114>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f000 8172 	beq.w	800d1a8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	3b01      	subs	r3, #1
 800cec8:	4619      	mov	r1, r3
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7fe fcda 	bl	800b884 <clmt_clust>
 800ced0:	4602      	mov	r2, r0
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	69db      	ldr	r3, [r3, #28]
 800cedc:	4619      	mov	r1, r3
 800cede:	4610      	mov	r0, r2
 800cee0:	f7fe fa28 	bl	800b334 <clust2sect>
 800cee4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d104      	bne.n	800cef6 <f_lseek+0x154>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2202      	movs	r2, #2
 800cef0:	755a      	strb	r2, [r3, #21]
 800cef2:	2302      	movs	r3, #2
 800cef4:	e15a      	b.n	800d1ac <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	0a5b      	lsrs	r3, r3, #9
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	8952      	ldrh	r2, [r2, #10]
 800cf00:	3a01      	subs	r2, #1
 800cf02:	4013      	ands	r3, r2
 800cf04:	69ba      	ldr	r2, [r7, #24]
 800cf06:	4413      	add	r3, r2
 800cf08:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f000 8148 	beq.w	800d1a8 <f_lseek+0x406>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a1b      	ldr	r3, [r3, #32]
 800cf1c:	69ba      	ldr	r2, [r7, #24]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	f000 8142 	beq.w	800d1a8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	7d1b      	ldrb	r3, [r3, #20]
 800cf28:	b25b      	sxtb	r3, r3
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	da18      	bge.n	800cf60 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	7858      	ldrb	r0, [r3, #1]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6a1a      	ldr	r2, [r3, #32]
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	f7fd fe6f 	bl	800ac20 <disk_write>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d004      	beq.n	800cf52 <f_lseek+0x1b0>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	755a      	strb	r2, [r3, #21]
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e12c      	b.n	800d1ac <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	7d1b      	ldrb	r3, [r3, #20]
 800cf56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	7858      	ldrb	r0, [r3, #1]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	69ba      	ldr	r2, [r7, #24]
 800cf6e:	f7fd fe37 	bl	800abe0 <disk_read>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d004      	beq.n	800cf82 <f_lseek+0x1e0>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	755a      	strb	r2, [r3, #21]
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e114      	b.n	800d1ac <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	69ba      	ldr	r2, [r7, #24]
 800cf86:	621a      	str	r2, [r3, #32]
 800cf88:	e10e      	b.n	800d1a8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d908      	bls.n	800cfa6 <f_lseek+0x204>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	7d1b      	ldrb	r3, [r3, #20]
 800cf98:	f003 0302 	and.w	r3, r3, #2
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d102      	bne.n	800cfa6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	699b      	ldr	r3, [r3, #24]
 800cfaa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cfac:	2300      	movs	r3, #0
 800cfae:	637b      	str	r3, [r7, #52]	; 0x34
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfb4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 80a7 	beq.w	800d10c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	895b      	ldrh	r3, [r3, #10]
 800cfc2:	025b      	lsls	r3, r3, #9
 800cfc4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d01b      	beq.n	800d004 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	1e5a      	subs	r2, r3, #1
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	1e59      	subs	r1, r3, #1
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d30f      	bcc.n	800d004 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cfe4:	6a3b      	ldr	r3, [r7, #32]
 800cfe6:	1e5a      	subs	r2, r3, #1
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	425b      	negs	r3, r3
 800cfec:	401a      	ands	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	699b      	ldr	r3, [r3, #24]
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	69db      	ldr	r3, [r3, #28]
 800d000:	63bb      	str	r3, [r7, #56]	; 0x38
 800d002:	e022      	b.n	800d04a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d119      	bne.n	800d044 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2100      	movs	r1, #0
 800d014:	4618      	mov	r0, r3
 800d016:	f7fe fb9d 	bl	800b754 <create_chain>
 800d01a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d104      	bne.n	800d02c <f_lseek+0x28a>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2202      	movs	r2, #2
 800d026:	755a      	strb	r2, [r3, #21]
 800d028:	2302      	movs	r3, #2
 800d02a:	e0bf      	b.n	800d1ac <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d032:	d104      	bne.n	800d03e <f_lseek+0x29c>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	755a      	strb	r2, [r3, #21]
 800d03a:	2301      	movs	r3, #1
 800d03c:	e0b6      	b.n	800d1ac <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d042:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d048:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d05d      	beq.n	800d10c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d050:	e03a      	b.n	800d0c8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d052:	683a      	ldr	r2, [r7, #0]
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	1ad3      	subs	r3, r2, r3
 800d058:	603b      	str	r3, [r7, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	699a      	ldr	r2, [r3, #24]
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	441a      	add	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	7d1b      	ldrb	r3, [r3, #20]
 800d06a:	f003 0302 	and.w	r3, r3, #2
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00b      	beq.n	800d08a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d076:	4618      	mov	r0, r3
 800d078:	f7fe fb6c 	bl	800b754 <create_chain>
 800d07c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d080:	2b00      	cmp	r3, #0
 800d082:	d108      	bne.n	800d096 <f_lseek+0x2f4>
							ofs = 0; break;
 800d084:	2300      	movs	r3, #0
 800d086:	603b      	str	r3, [r7, #0]
 800d088:	e022      	b.n	800d0d0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fe f96f 	bl	800b372 <get_fat>
 800d094:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09c:	d104      	bne.n	800d0a8 <f_lseek+0x306>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	755a      	strb	r2, [r3, #21]
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e081      	b.n	800d1ac <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d904      	bls.n	800d0b8 <f_lseek+0x316>
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	695b      	ldr	r3, [r3, #20]
 800d0b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d304      	bcc.n	800d0c2 <f_lseek+0x320>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	755a      	strb	r2, [r3, #21]
 800d0be:	2302      	movs	r3, #2
 800d0c0:	e074      	b.n	800d1ac <f_lseek+0x40a>
					fp->clust = clst;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0c6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d8c0      	bhi.n	800d052 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	699a      	ldr	r2, [r3, #24]
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	441a      	add	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d012      	beq.n	800d10c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fe f922 	bl	800b334 <clust2sect>
 800d0f0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d104      	bne.n	800d102 <f_lseek+0x360>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	755a      	strb	r2, [r3, #21]
 800d0fe:	2302      	movs	r3, #2
 800d100:	e054      	b.n	800d1ac <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	0a5b      	lsrs	r3, r3, #9
 800d106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d108:	4413      	add	r3, r2
 800d10a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	699a      	ldr	r2, [r3, #24]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	429a      	cmp	r2, r3
 800d116:	d90a      	bls.n	800d12e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	699a      	ldr	r2, [r3, #24]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	7d1b      	ldrb	r3, [r3, #20]
 800d124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d136:	2b00      	cmp	r3, #0
 800d138:	d036      	beq.n	800d1a8 <f_lseek+0x406>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a1b      	ldr	r3, [r3, #32]
 800d13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d140:	429a      	cmp	r2, r3
 800d142:	d031      	beq.n	800d1a8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	7d1b      	ldrb	r3, [r3, #20]
 800d148:	b25b      	sxtb	r3, r3
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	da18      	bge.n	800d180 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	7858      	ldrb	r0, [r3, #1]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6a1a      	ldr	r2, [r3, #32]
 800d15c:	2301      	movs	r3, #1
 800d15e:	f7fd fd5f 	bl	800ac20 <disk_write>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d004      	beq.n	800d172 <f_lseek+0x3d0>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	755a      	strb	r2, [r3, #21]
 800d16e:	2301      	movs	r3, #1
 800d170:	e01c      	b.n	800d1ac <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	7d1b      	ldrb	r3, [r3, #20]
 800d176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	7858      	ldrb	r0, [r3, #1]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d18a:	2301      	movs	r3, #1
 800d18c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d18e:	f7fd fd27 	bl	800abe0 <disk_read>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d004      	beq.n	800d1a2 <f_lseek+0x400>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	755a      	strb	r2, [r3, #21]
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e004      	b.n	800d1ac <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1a6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d1a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3740      	adds	r7, #64	; 0x40
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b087      	sub	sp, #28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d1ca:	4b1f      	ldr	r3, [pc, #124]	; (800d248 <FATFS_LinkDriverEx+0x94>)
 800d1cc:	7a5b      	ldrb	r3, [r3, #9]
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d131      	bne.n	800d238 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d1d4:	4b1c      	ldr	r3, [pc, #112]	; (800d248 <FATFS_LinkDriverEx+0x94>)
 800d1d6:	7a5b      	ldrb	r3, [r3, #9]
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	461a      	mov	r2, r3
 800d1dc:	4b1a      	ldr	r3, [pc, #104]	; (800d248 <FATFS_LinkDriverEx+0x94>)
 800d1de:	2100      	movs	r1, #0
 800d1e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d1e2:	4b19      	ldr	r3, [pc, #100]	; (800d248 <FATFS_LinkDriverEx+0x94>)
 800d1e4:	7a5b      	ldrb	r3, [r3, #9]
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	4a17      	ldr	r2, [pc, #92]	; (800d248 <FATFS_LinkDriverEx+0x94>)
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4413      	add	r3, r2
 800d1ee:	68fa      	ldr	r2, [r7, #12]
 800d1f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d1f2:	4b15      	ldr	r3, [pc, #84]	; (800d248 <FATFS_LinkDriverEx+0x94>)
 800d1f4:	7a5b      	ldrb	r3, [r3, #9]
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	4b13      	ldr	r3, [pc, #76]	; (800d248 <FATFS_LinkDriverEx+0x94>)
 800d1fc:	4413      	add	r3, r2
 800d1fe:	79fa      	ldrb	r2, [r7, #7]
 800d200:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d202:	4b11      	ldr	r3, [pc, #68]	; (800d248 <FATFS_LinkDriverEx+0x94>)
 800d204:	7a5b      	ldrb	r3, [r3, #9]
 800d206:	b2db      	uxtb	r3, r3
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	b2d1      	uxtb	r1, r2
 800d20c:	4a0e      	ldr	r2, [pc, #56]	; (800d248 <FATFS_LinkDriverEx+0x94>)
 800d20e:	7251      	strb	r1, [r2, #9]
 800d210:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d212:	7dbb      	ldrb	r3, [r7, #22]
 800d214:	3330      	adds	r3, #48	; 0x30
 800d216:	b2da      	uxtb	r2, r3
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	3301      	adds	r3, #1
 800d220:	223a      	movs	r2, #58	; 0x3a
 800d222:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	3302      	adds	r3, #2
 800d228:	222f      	movs	r2, #47	; 0x2f
 800d22a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	3303      	adds	r3, #3
 800d230:	2200      	movs	r2, #0
 800d232:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d234:	2300      	movs	r3, #0
 800d236:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d238:	7dfb      	ldrb	r3, [r7, #23]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	371c      	adds	r7, #28
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	200093a0 	.word	0x200093a0

0800d24c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d256:	2200      	movs	r2, #0
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f7ff ffaa 	bl	800d1b4 <FATFS_LinkDriverEx>
 800d260:	4603      	mov	r3, r0
}
 800d262:	4618      	mov	r0, r3
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
	...

0800d26c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d270:	2201      	movs	r2, #1
 800d272:	490e      	ldr	r1, [pc, #56]	; (800d2ac <MX_USB_HOST_Init+0x40>)
 800d274:	480e      	ldr	r0, [pc, #56]	; (800d2b0 <MX_USB_HOST_Init+0x44>)
 800d276:	f7fc f919 	bl	80094ac <USBH_Init>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d001      	beq.n	800d284 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d280:	f7f4 f87e 	bl	8001380 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d284:	490b      	ldr	r1, [pc, #44]	; (800d2b4 <MX_USB_HOST_Init+0x48>)
 800d286:	480a      	ldr	r0, [pc, #40]	; (800d2b0 <MX_USB_HOST_Init+0x44>)
 800d288:	f7fc f99e 	bl	80095c8 <USBH_RegisterClass>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d001      	beq.n	800d296 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d292:	f7f4 f875 	bl	8001380 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d296:	4806      	ldr	r0, [pc, #24]	; (800d2b0 <MX_USB_HOST_Init+0x44>)
 800d298:	f7fc fa22 	bl	80096e0 <USBH_Start>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d2a2:	f7f4 f86d 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d2a6:	bf00      	nop
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	0800d2cd 	.word	0x0800d2cd
 800d2b0:	20009920 	.word	0x20009920
 800d2b4:	2000000c 	.word	0x2000000c

0800d2b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d2bc:	4802      	ldr	r0, [pc, #8]	; (800d2c8 <MX_USB_HOST_Process+0x10>)
 800d2be:	f7fc fa1f 	bl	8009700 <USBH_Process>
}
 800d2c2:	bf00      	nop
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	20009920 	.word	0x20009920

0800d2cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d2d8:	78fb      	ldrb	r3, [r7, #3]
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	2b04      	cmp	r3, #4
 800d2de:	d819      	bhi.n	800d314 <USBH_UserProcess+0x48>
 800d2e0:	a201      	add	r2, pc, #4	; (adr r2, 800d2e8 <USBH_UserProcess+0x1c>)
 800d2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e6:	bf00      	nop
 800d2e8:	0800d315 	.word	0x0800d315
 800d2ec:	0800d305 	.word	0x0800d305
 800d2f0:	0800d315 	.word	0x0800d315
 800d2f4:	0800d30d 	.word	0x0800d30d
 800d2f8:	0800d2fd 	.word	0x0800d2fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d2fc:	4b09      	ldr	r3, [pc, #36]	; (800d324 <USBH_UserProcess+0x58>)
 800d2fe:	2203      	movs	r2, #3
 800d300:	701a      	strb	r2, [r3, #0]
  break;
 800d302:	e008      	b.n	800d316 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d304:	4b07      	ldr	r3, [pc, #28]	; (800d324 <USBH_UserProcess+0x58>)
 800d306:	2202      	movs	r2, #2
 800d308:	701a      	strb	r2, [r3, #0]
  break;
 800d30a:	e004      	b.n	800d316 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d30c:	4b05      	ldr	r3, [pc, #20]	; (800d324 <USBH_UserProcess+0x58>)
 800d30e:	2201      	movs	r2, #1
 800d310:	701a      	strb	r2, [r3, #0]
  break;
 800d312:	e000      	b.n	800d316 <USBH_UserProcess+0x4a>

  default:
  break;
 800d314:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d316:	bf00      	nop
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	200093ac 	.word	0x200093ac

0800d328 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b08a      	sub	sp, #40	; 0x28
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d330:	f107 0314 	add.w	r3, r7, #20
 800d334:	2200      	movs	r2, #0
 800d336:	601a      	str	r2, [r3, #0]
 800d338:	605a      	str	r2, [r3, #4]
 800d33a:	609a      	str	r2, [r3, #8]
 800d33c:	60da      	str	r2, [r3, #12]
 800d33e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d348:	d147      	bne.n	800d3da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d34a:	2300      	movs	r3, #0
 800d34c:	613b      	str	r3, [r7, #16]
 800d34e:	4b25      	ldr	r3, [pc, #148]	; (800d3e4 <HAL_HCD_MspInit+0xbc>)
 800d350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d352:	4a24      	ldr	r2, [pc, #144]	; (800d3e4 <HAL_HCD_MspInit+0xbc>)
 800d354:	f043 0301 	orr.w	r3, r3, #1
 800d358:	6313      	str	r3, [r2, #48]	; 0x30
 800d35a:	4b22      	ldr	r3, [pc, #136]	; (800d3e4 <HAL_HCD_MspInit+0xbc>)
 800d35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d35e:	f003 0301 	and.w	r3, r3, #1
 800d362:	613b      	str	r3, [r7, #16]
 800d364:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d36a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d36c:	2300      	movs	r3, #0
 800d36e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d370:	2300      	movs	r3, #0
 800d372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d374:	f107 0314 	add.w	r3, r7, #20
 800d378:	4619      	mov	r1, r3
 800d37a:	481b      	ldr	r0, [pc, #108]	; (800d3e8 <HAL_HCD_MspInit+0xc0>)
 800d37c:	f7f4 ff5a 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d380:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d386:	2302      	movs	r3, #2
 800d388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d38a:	2300      	movs	r3, #0
 800d38c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d38e:	2303      	movs	r3, #3
 800d390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d392:	230a      	movs	r3, #10
 800d394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d396:	f107 0314 	add.w	r3, r7, #20
 800d39a:	4619      	mov	r1, r3
 800d39c:	4812      	ldr	r0, [pc, #72]	; (800d3e8 <HAL_HCD_MspInit+0xc0>)
 800d39e:	f7f4 ff49 	bl	8002234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d3a2:	4b10      	ldr	r3, [pc, #64]	; (800d3e4 <HAL_HCD_MspInit+0xbc>)
 800d3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a6:	4a0f      	ldr	r2, [pc, #60]	; (800d3e4 <HAL_HCD_MspInit+0xbc>)
 800d3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ac:	6353      	str	r3, [r2, #52]	; 0x34
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	60fb      	str	r3, [r7, #12]
 800d3b2:	4b0c      	ldr	r3, [pc, #48]	; (800d3e4 <HAL_HCD_MspInit+0xbc>)
 800d3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3b6:	4a0b      	ldr	r2, [pc, #44]	; (800d3e4 <HAL_HCD_MspInit+0xbc>)
 800d3b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d3bc:	6453      	str	r3, [r2, #68]	; 0x44
 800d3be:	4b09      	ldr	r3, [pc, #36]	; (800d3e4 <HAL_HCD_MspInit+0xbc>)
 800d3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3c6:	60fb      	str	r3, [r7, #12]
 800d3c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	2043      	movs	r0, #67	; 0x43
 800d3d0:	f7f4 fb1b 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d3d4:	2043      	movs	r0, #67	; 0x43
 800d3d6:	f7f4 fb34 	bl	8001a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d3da:	bf00      	nop
 800d3dc:	3728      	adds	r7, #40	; 0x28
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	40023800 	.word	0x40023800
 800d3e8:	40020000 	.word	0x40020000

0800d3ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fc fd53 	bl	8009ea6 <USBH_LL_IncTimer>
}
 800d400:	bf00      	nop
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d416:	4618      	mov	r0, r3
 800d418:	f7fc fd8b 	bl	8009f32 <USBH_LL_Connect>
}
 800d41c:	bf00      	nop
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d432:	4618      	mov	r0, r3
 800d434:	f7fc fd94 	bl	8009f60 <USBH_LL_Disconnect>
}
 800d438:	bf00      	nop
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	460b      	mov	r3, r1
 800d44a:	70fb      	strb	r3, [r7, #3]
 800d44c:	4613      	mov	r3, r2
 800d44e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fc fd45 	bl	8009efa <USBH_LL_PortEnabled>
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d486:	4618      	mov	r0, r3
 800d488:	f7fc fd45 	bl	8009f16 <USBH_LL_PortDisabled>
}
 800d48c:	bf00      	nop
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d12a      	bne.n	800d4fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d4a6:	4a18      	ldr	r2, [pc, #96]	; (800d508 <USBH_LL_Init+0x74>)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4a15      	ldr	r2, [pc, #84]	; (800d508 <USBH_LL_Init+0x74>)
 800d4b2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d4b6:	4b14      	ldr	r3, [pc, #80]	; (800d508 <USBH_LL_Init+0x74>)
 800d4b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d4bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d4be:	4b12      	ldr	r3, [pc, #72]	; (800d508 <USBH_LL_Init+0x74>)
 800d4c0:	2208      	movs	r2, #8
 800d4c2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d4c4:	4b10      	ldr	r3, [pc, #64]	; (800d508 <USBH_LL_Init+0x74>)
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d4ca:	4b0f      	ldr	r3, [pc, #60]	; (800d508 <USBH_LL_Init+0x74>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d4d0:	4b0d      	ldr	r3, [pc, #52]	; (800d508 <USBH_LL_Init+0x74>)
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d4d6:	4b0c      	ldr	r3, [pc, #48]	; (800d508 <USBH_LL_Init+0x74>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d4dc:	480a      	ldr	r0, [pc, #40]	; (800d508 <USBH_LL_Init+0x74>)
 800d4de:	f7f5 f874 	bl	80025ca <HAL_HCD_Init>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d4e8:	f7f3 ff4a 	bl	8001380 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d4ec:	4806      	ldr	r0, [pc, #24]	; (800d508 <USBH_LL_Init+0x74>)
 800d4ee:	f7f5 fc77 	bl	8002de0 <HAL_HCD_GetCurrentFrame>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f7fc fcc6 	bl	8009e88 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20009cf8 	.word	0x20009cf8

0800d50c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d518:	2300      	movs	r3, #0
 800d51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d522:	4618      	mov	r0, r3
 800d524:	f7f5 fbe4 	bl	8002cf0 <HAL_HCD_Start>
 800d528:	4603      	mov	r3, r0
 800d52a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d52c:	7bfb      	ldrb	r3, [r7, #15]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 f986 	bl	800d840 <USBH_Get_USB_Status>
 800d534:	4603      	mov	r3, r0
 800d536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d538:	7bbb      	ldrb	r3, [r7, #14]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b084      	sub	sp, #16
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d54a:	2300      	movs	r3, #0
 800d54c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d54e:	2300      	movs	r3, #0
 800d550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d558:	4618      	mov	r0, r3
 800d55a:	f7f5 fbec 	bl	8002d36 <HAL_HCD_Stop>
 800d55e:	4603      	mov	r3, r0
 800d560:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d562:	7bfb      	ldrb	r3, [r7, #15]
 800d564:	4618      	mov	r0, r3
 800d566:	f000 f96b 	bl	800d840 <USBH_Get_USB_Status>
 800d56a:	4603      	mov	r3, r0
 800d56c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d56e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d570:	4618      	mov	r0, r3
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d580:	2301      	movs	r3, #1
 800d582:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7f5 fc36 	bl	8002dfc <HAL_HCD_GetCurrentSpeed>
 800d590:	4603      	mov	r3, r0
 800d592:	2b01      	cmp	r3, #1
 800d594:	d007      	beq.n	800d5a6 <USBH_LL_GetSpeed+0x2e>
 800d596:	2b01      	cmp	r3, #1
 800d598:	d302      	bcc.n	800d5a0 <USBH_LL_GetSpeed+0x28>
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d006      	beq.n	800d5ac <USBH_LL_GetSpeed+0x34>
 800d59e:	e008      	b.n	800d5b2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5a4:	e008      	b.n	800d5b8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5aa:	e005      	b.n	800d5b8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d5ac:	2302      	movs	r3, #2
 800d5ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d5b0:	e002      	b.n	800d5b8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5b6:	bf00      	nop
  }
  return  speed;
 800d5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b084      	sub	sp, #16
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7f5 fbc9 	bl	8002d70 <HAL_HCD_ResetPort>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d5e2:	7bfb      	ldrb	r3, [r7, #15]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f000 f92b 	bl	800d840 <USBH_Get_USB_Status>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	460b      	mov	r3, r1
 800d602:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d60a:	78fa      	ldrb	r2, [r7, #3]
 800d60c:	4611      	mov	r1, r2
 800d60e:	4618      	mov	r0, r3
 800d610:	f7f5 fbd1 	bl	8002db6 <HAL_HCD_HC_GetXferCount>
 800d614:	4603      	mov	r3, r0
}
 800d616:	4618      	mov	r0, r3
 800d618:	3708      	adds	r7, #8
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d61e:	b590      	push	{r4, r7, lr}
 800d620:	b089      	sub	sp, #36	; 0x24
 800d622:	af04      	add	r7, sp, #16
 800d624:	6078      	str	r0, [r7, #4]
 800d626:	4608      	mov	r0, r1
 800d628:	4611      	mov	r1, r2
 800d62a:	461a      	mov	r2, r3
 800d62c:	4603      	mov	r3, r0
 800d62e:	70fb      	strb	r3, [r7, #3]
 800d630:	460b      	mov	r3, r1
 800d632:	70bb      	strb	r3, [r7, #2]
 800d634:	4613      	mov	r3, r2
 800d636:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d638:	2300      	movs	r3, #0
 800d63a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d646:	787c      	ldrb	r4, [r7, #1]
 800d648:	78ba      	ldrb	r2, [r7, #2]
 800d64a:	78f9      	ldrb	r1, [r7, #3]
 800d64c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d64e:	9302      	str	r3, [sp, #8]
 800d650:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d654:	9301      	str	r3, [sp, #4]
 800d656:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	4623      	mov	r3, r4
 800d65e:	f7f5 f816 	bl	800268e <HAL_HCD_HC_Init>
 800d662:	4603      	mov	r3, r0
 800d664:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d666:	7bfb      	ldrb	r3, [r7, #15]
 800d668:	4618      	mov	r0, r3
 800d66a:	f000 f8e9 	bl	800d840 <USBH_Get_USB_Status>
 800d66e:	4603      	mov	r3, r0
 800d670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d672:	7bbb      	ldrb	r3, [r7, #14]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3714      	adds	r7, #20
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd90      	pop	{r4, r7, pc}

0800d67c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	460b      	mov	r3, r1
 800d686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d688:	2300      	movs	r3, #0
 800d68a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d68c:	2300      	movs	r3, #0
 800d68e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d696:	78fa      	ldrb	r2, [r7, #3]
 800d698:	4611      	mov	r1, r2
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7f5 f88f 	bl	80027be <HAL_HCD_HC_Halt>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d6a4:	7bfb      	ldrb	r3, [r7, #15]
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 f8ca 	bl	800d840 <USBH_Get_USB_Status>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d6ba:	b590      	push	{r4, r7, lr}
 800d6bc:	b089      	sub	sp, #36	; 0x24
 800d6be:	af04      	add	r7, sp, #16
 800d6c0:	6078      	str	r0, [r7, #4]
 800d6c2:	4608      	mov	r0, r1
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	70fb      	strb	r3, [r7, #3]
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	70bb      	strb	r3, [r7, #2]
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d6e2:	787c      	ldrb	r4, [r7, #1]
 800d6e4:	78ba      	ldrb	r2, [r7, #2]
 800d6e6:	78f9      	ldrb	r1, [r7, #3]
 800d6e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d6ec:	9303      	str	r3, [sp, #12]
 800d6ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d6f0:	9302      	str	r3, [sp, #8]
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	4623      	mov	r3, r4
 800d6fe:	f7f5 f881 	bl	8002804 <HAL_HCD_HC_SubmitRequest>
 800d702:	4603      	mov	r3, r0
 800d704:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	4618      	mov	r0, r3
 800d70a:	f000 f899 	bl	800d840 <USBH_Get_USB_Status>
 800d70e:	4603      	mov	r3, r0
 800d710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d712:	7bbb      	ldrb	r3, [r7, #14]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3714      	adds	r7, #20
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd90      	pop	{r4, r7, pc}

0800d71c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	460b      	mov	r3, r1
 800d726:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d72e:	78fa      	ldrb	r2, [r7, #3]
 800d730:	4611      	mov	r1, r2
 800d732:	4618      	mov	r0, r3
 800d734:	f7f5 fb2a 	bl	8002d8c <HAL_HCD_HC_GetURBState>
 800d738:	4603      	mov	r3, r0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b082      	sub	sp, #8
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	460b      	mov	r3, r1
 800d74c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800d74e:	20c8      	movs	r0, #200	; 0xc8
 800d750:	f7f4 f85e 	bl	8001810 <HAL_Delay>
  return USBH_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3708      	adds	r7, #8
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d75e:	b480      	push	{r7}
 800d760:	b085      	sub	sp, #20
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	460b      	mov	r3, r1
 800d768:	70fb      	strb	r3, [r7, #3]
 800d76a:	4613      	mov	r3, r2
 800d76c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d774:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d776:	78fa      	ldrb	r2, [r7, #3]
 800d778:	68f9      	ldr	r1, [r7, #12]
 800d77a:	4613      	mov	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4413      	add	r3, r2
 800d780:	00db      	lsls	r3, r3, #3
 800d782:	440b      	add	r3, r1
 800d784:	333b      	adds	r3, #59	; 0x3b
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00a      	beq.n	800d7a2 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d78c:	78fa      	ldrb	r2, [r7, #3]
 800d78e:	68f9      	ldr	r1, [r7, #12]
 800d790:	4613      	mov	r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	4413      	add	r3, r2
 800d796:	00db      	lsls	r3, r3, #3
 800d798:	440b      	add	r3, r1
 800d79a:	3350      	adds	r3, #80	; 0x50
 800d79c:	78ba      	ldrb	r2, [r7, #2]
 800d79e:	701a      	strb	r2, [r3, #0]
 800d7a0:	e009      	b.n	800d7b6 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d7a2:	78fa      	ldrb	r2, [r7, #3]
 800d7a4:	68f9      	ldr	r1, [r7, #12]
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	4413      	add	r3, r2
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	440b      	add	r3, r1
 800d7b0:	3351      	adds	r3, #81	; 0x51
 800d7b2:	78ba      	ldrb	r2, [r7, #2]
 800d7b4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3714      	adds	r7, #20
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7da:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d7dc:	78fa      	ldrb	r2, [r7, #3]
 800d7de:	68b9      	ldr	r1, [r7, #8]
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	440b      	add	r3, r1
 800d7ea:	333b      	adds	r3, #59	; 0x3b
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00a      	beq.n	800d808 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d7f2:	78fa      	ldrb	r2, [r7, #3]
 800d7f4:	68b9      	ldr	r1, [r7, #8]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	4413      	add	r3, r2
 800d7fc:	00db      	lsls	r3, r3, #3
 800d7fe:	440b      	add	r3, r1
 800d800:	3350      	adds	r3, #80	; 0x50
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	73fb      	strb	r3, [r7, #15]
 800d806:	e009      	b.n	800d81c <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d808:	78fa      	ldrb	r2, [r7, #3]
 800d80a:	68b9      	ldr	r1, [r7, #8]
 800d80c:	4613      	mov	r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	4413      	add	r3, r2
 800d812:	00db      	lsls	r3, r3, #3
 800d814:	440b      	add	r3, r1
 800d816:	3351      	adds	r3, #81	; 0x51
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b082      	sub	sp, #8
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7f3 ffec 	bl	8001810 <HAL_Delay>
}
 800d838:	bf00      	nop
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	4603      	mov	r3, r0
 800d848:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d84e:	79fb      	ldrb	r3, [r7, #7]
 800d850:	2b03      	cmp	r3, #3
 800d852:	d817      	bhi.n	800d884 <USBH_Get_USB_Status+0x44>
 800d854:	a201      	add	r2, pc, #4	; (adr r2, 800d85c <USBH_Get_USB_Status+0x1c>)
 800d856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85a:	bf00      	nop
 800d85c:	0800d86d 	.word	0x0800d86d
 800d860:	0800d873 	.word	0x0800d873
 800d864:	0800d879 	.word	0x0800d879
 800d868:	0800d87f 	.word	0x0800d87f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d86c:	2300      	movs	r3, #0
 800d86e:	73fb      	strb	r3, [r7, #15]
    break;
 800d870:	e00b      	b.n	800d88a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d872:	2302      	movs	r3, #2
 800d874:	73fb      	strb	r3, [r7, #15]
    break;
 800d876:	e008      	b.n	800d88a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d878:	2301      	movs	r3, #1
 800d87a:	73fb      	strb	r3, [r7, #15]
    break;
 800d87c:	e005      	b.n	800d88a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d87e:	2302      	movs	r3, #2
 800d880:	73fb      	strb	r3, [r7, #15]
    break;
 800d882:	e002      	b.n	800d88a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d884:	2302      	movs	r3, #2
 800d886:	73fb      	strb	r3, [r7, #15]
    break;
 800d888:	bf00      	nop
  }
  return usb_status;
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3714      	adds	r7, #20
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <__errno>:
 800d898:	4b01      	ldr	r3, [pc, #4]	; (800d8a0 <__errno+0x8>)
 800d89a:	6818      	ldr	r0, [r3, #0]
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	2000002c 	.word	0x2000002c

0800d8a4 <__libc_init_array>:
 800d8a4:	b570      	push	{r4, r5, r6, lr}
 800d8a6:	4e0d      	ldr	r6, [pc, #52]	; (800d8dc <__libc_init_array+0x38>)
 800d8a8:	4c0d      	ldr	r4, [pc, #52]	; (800d8e0 <__libc_init_array+0x3c>)
 800d8aa:	1ba4      	subs	r4, r4, r6
 800d8ac:	10a4      	asrs	r4, r4, #2
 800d8ae:	2500      	movs	r5, #0
 800d8b0:	42a5      	cmp	r5, r4
 800d8b2:	d109      	bne.n	800d8c8 <__libc_init_array+0x24>
 800d8b4:	4e0b      	ldr	r6, [pc, #44]	; (800d8e4 <__libc_init_array+0x40>)
 800d8b6:	4c0c      	ldr	r4, [pc, #48]	; (800d8e8 <__libc_init_array+0x44>)
 800d8b8:	f000 f8f6 	bl	800daa8 <_init>
 800d8bc:	1ba4      	subs	r4, r4, r6
 800d8be:	10a4      	asrs	r4, r4, #2
 800d8c0:	2500      	movs	r5, #0
 800d8c2:	42a5      	cmp	r5, r4
 800d8c4:	d105      	bne.n	800d8d2 <__libc_init_array+0x2e>
 800d8c6:	bd70      	pop	{r4, r5, r6, pc}
 800d8c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8cc:	4798      	blx	r3
 800d8ce:	3501      	adds	r5, #1
 800d8d0:	e7ee      	b.n	800d8b0 <__libc_init_array+0xc>
 800d8d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8d6:	4798      	blx	r3
 800d8d8:	3501      	adds	r5, #1
 800d8da:	e7f2      	b.n	800d8c2 <__libc_init_array+0x1e>
 800d8dc:	0800ddcc 	.word	0x0800ddcc
 800d8e0:	0800ddcc 	.word	0x0800ddcc
 800d8e4:	0800ddcc 	.word	0x0800ddcc
 800d8e8:	0800ddd0 	.word	0x0800ddd0

0800d8ec <malloc>:
 800d8ec:	4b02      	ldr	r3, [pc, #8]	; (800d8f8 <malloc+0xc>)
 800d8ee:	4601      	mov	r1, r0
 800d8f0:	6818      	ldr	r0, [r3, #0]
 800d8f2:	f000 b86d 	b.w	800d9d0 <_malloc_r>
 800d8f6:	bf00      	nop
 800d8f8:	2000002c 	.word	0x2000002c

0800d8fc <free>:
 800d8fc:	4b02      	ldr	r3, [pc, #8]	; (800d908 <free+0xc>)
 800d8fe:	4601      	mov	r1, r0
 800d900:	6818      	ldr	r0, [r3, #0]
 800d902:	f000 b817 	b.w	800d934 <_free_r>
 800d906:	bf00      	nop
 800d908:	2000002c 	.word	0x2000002c

0800d90c <memcpy>:
 800d90c:	b510      	push	{r4, lr}
 800d90e:	1e43      	subs	r3, r0, #1
 800d910:	440a      	add	r2, r1
 800d912:	4291      	cmp	r1, r2
 800d914:	d100      	bne.n	800d918 <memcpy+0xc>
 800d916:	bd10      	pop	{r4, pc}
 800d918:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d91c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d920:	e7f7      	b.n	800d912 <memcpy+0x6>

0800d922 <memset>:
 800d922:	4402      	add	r2, r0
 800d924:	4603      	mov	r3, r0
 800d926:	4293      	cmp	r3, r2
 800d928:	d100      	bne.n	800d92c <memset+0xa>
 800d92a:	4770      	bx	lr
 800d92c:	f803 1b01 	strb.w	r1, [r3], #1
 800d930:	e7f9      	b.n	800d926 <memset+0x4>
	...

0800d934 <_free_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4605      	mov	r5, r0
 800d938:	2900      	cmp	r1, #0
 800d93a:	d045      	beq.n	800d9c8 <_free_r+0x94>
 800d93c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d940:	1f0c      	subs	r4, r1, #4
 800d942:	2b00      	cmp	r3, #0
 800d944:	bfb8      	it	lt
 800d946:	18e4      	addlt	r4, r4, r3
 800d948:	f000 f8ac 	bl	800daa4 <__malloc_lock>
 800d94c:	4a1f      	ldr	r2, [pc, #124]	; (800d9cc <_free_r+0x98>)
 800d94e:	6813      	ldr	r3, [r2, #0]
 800d950:	4610      	mov	r0, r2
 800d952:	b933      	cbnz	r3, 800d962 <_free_r+0x2e>
 800d954:	6063      	str	r3, [r4, #4]
 800d956:	6014      	str	r4, [r2, #0]
 800d958:	4628      	mov	r0, r5
 800d95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d95e:	f000 b8a2 	b.w	800daa6 <__malloc_unlock>
 800d962:	42a3      	cmp	r3, r4
 800d964:	d90c      	bls.n	800d980 <_free_r+0x4c>
 800d966:	6821      	ldr	r1, [r4, #0]
 800d968:	1862      	adds	r2, r4, r1
 800d96a:	4293      	cmp	r3, r2
 800d96c:	bf04      	itt	eq
 800d96e:	681a      	ldreq	r2, [r3, #0]
 800d970:	685b      	ldreq	r3, [r3, #4]
 800d972:	6063      	str	r3, [r4, #4]
 800d974:	bf04      	itt	eq
 800d976:	1852      	addeq	r2, r2, r1
 800d978:	6022      	streq	r2, [r4, #0]
 800d97a:	6004      	str	r4, [r0, #0]
 800d97c:	e7ec      	b.n	800d958 <_free_r+0x24>
 800d97e:	4613      	mov	r3, r2
 800d980:	685a      	ldr	r2, [r3, #4]
 800d982:	b10a      	cbz	r2, 800d988 <_free_r+0x54>
 800d984:	42a2      	cmp	r2, r4
 800d986:	d9fa      	bls.n	800d97e <_free_r+0x4a>
 800d988:	6819      	ldr	r1, [r3, #0]
 800d98a:	1858      	adds	r0, r3, r1
 800d98c:	42a0      	cmp	r0, r4
 800d98e:	d10b      	bne.n	800d9a8 <_free_r+0x74>
 800d990:	6820      	ldr	r0, [r4, #0]
 800d992:	4401      	add	r1, r0
 800d994:	1858      	adds	r0, r3, r1
 800d996:	4282      	cmp	r2, r0
 800d998:	6019      	str	r1, [r3, #0]
 800d99a:	d1dd      	bne.n	800d958 <_free_r+0x24>
 800d99c:	6810      	ldr	r0, [r2, #0]
 800d99e:	6852      	ldr	r2, [r2, #4]
 800d9a0:	605a      	str	r2, [r3, #4]
 800d9a2:	4401      	add	r1, r0
 800d9a4:	6019      	str	r1, [r3, #0]
 800d9a6:	e7d7      	b.n	800d958 <_free_r+0x24>
 800d9a8:	d902      	bls.n	800d9b0 <_free_r+0x7c>
 800d9aa:	230c      	movs	r3, #12
 800d9ac:	602b      	str	r3, [r5, #0]
 800d9ae:	e7d3      	b.n	800d958 <_free_r+0x24>
 800d9b0:	6820      	ldr	r0, [r4, #0]
 800d9b2:	1821      	adds	r1, r4, r0
 800d9b4:	428a      	cmp	r2, r1
 800d9b6:	bf04      	itt	eq
 800d9b8:	6811      	ldreq	r1, [r2, #0]
 800d9ba:	6852      	ldreq	r2, [r2, #4]
 800d9bc:	6062      	str	r2, [r4, #4]
 800d9be:	bf04      	itt	eq
 800d9c0:	1809      	addeq	r1, r1, r0
 800d9c2:	6021      	streq	r1, [r4, #0]
 800d9c4:	605c      	str	r4, [r3, #4]
 800d9c6:	e7c7      	b.n	800d958 <_free_r+0x24>
 800d9c8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ca:	bf00      	nop
 800d9cc:	200093b0 	.word	0x200093b0

0800d9d0 <_malloc_r>:
 800d9d0:	b570      	push	{r4, r5, r6, lr}
 800d9d2:	1ccd      	adds	r5, r1, #3
 800d9d4:	f025 0503 	bic.w	r5, r5, #3
 800d9d8:	3508      	adds	r5, #8
 800d9da:	2d0c      	cmp	r5, #12
 800d9dc:	bf38      	it	cc
 800d9de:	250c      	movcc	r5, #12
 800d9e0:	2d00      	cmp	r5, #0
 800d9e2:	4606      	mov	r6, r0
 800d9e4:	db01      	blt.n	800d9ea <_malloc_r+0x1a>
 800d9e6:	42a9      	cmp	r1, r5
 800d9e8:	d903      	bls.n	800d9f2 <_malloc_r+0x22>
 800d9ea:	230c      	movs	r3, #12
 800d9ec:	6033      	str	r3, [r6, #0]
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	bd70      	pop	{r4, r5, r6, pc}
 800d9f2:	f000 f857 	bl	800daa4 <__malloc_lock>
 800d9f6:	4a21      	ldr	r2, [pc, #132]	; (800da7c <_malloc_r+0xac>)
 800d9f8:	6814      	ldr	r4, [r2, #0]
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	b991      	cbnz	r1, 800da24 <_malloc_r+0x54>
 800d9fe:	4c20      	ldr	r4, [pc, #128]	; (800da80 <_malloc_r+0xb0>)
 800da00:	6823      	ldr	r3, [r4, #0]
 800da02:	b91b      	cbnz	r3, 800da0c <_malloc_r+0x3c>
 800da04:	4630      	mov	r0, r6
 800da06:	f000 f83d 	bl	800da84 <_sbrk_r>
 800da0a:	6020      	str	r0, [r4, #0]
 800da0c:	4629      	mov	r1, r5
 800da0e:	4630      	mov	r0, r6
 800da10:	f000 f838 	bl	800da84 <_sbrk_r>
 800da14:	1c43      	adds	r3, r0, #1
 800da16:	d124      	bne.n	800da62 <_malloc_r+0x92>
 800da18:	230c      	movs	r3, #12
 800da1a:	6033      	str	r3, [r6, #0]
 800da1c:	4630      	mov	r0, r6
 800da1e:	f000 f842 	bl	800daa6 <__malloc_unlock>
 800da22:	e7e4      	b.n	800d9ee <_malloc_r+0x1e>
 800da24:	680b      	ldr	r3, [r1, #0]
 800da26:	1b5b      	subs	r3, r3, r5
 800da28:	d418      	bmi.n	800da5c <_malloc_r+0x8c>
 800da2a:	2b0b      	cmp	r3, #11
 800da2c:	d90f      	bls.n	800da4e <_malloc_r+0x7e>
 800da2e:	600b      	str	r3, [r1, #0]
 800da30:	50cd      	str	r5, [r1, r3]
 800da32:	18cc      	adds	r4, r1, r3
 800da34:	4630      	mov	r0, r6
 800da36:	f000 f836 	bl	800daa6 <__malloc_unlock>
 800da3a:	f104 000b 	add.w	r0, r4, #11
 800da3e:	1d23      	adds	r3, r4, #4
 800da40:	f020 0007 	bic.w	r0, r0, #7
 800da44:	1ac3      	subs	r3, r0, r3
 800da46:	d0d3      	beq.n	800d9f0 <_malloc_r+0x20>
 800da48:	425a      	negs	r2, r3
 800da4a:	50e2      	str	r2, [r4, r3]
 800da4c:	e7d0      	b.n	800d9f0 <_malloc_r+0x20>
 800da4e:	428c      	cmp	r4, r1
 800da50:	684b      	ldr	r3, [r1, #4]
 800da52:	bf16      	itet	ne
 800da54:	6063      	strne	r3, [r4, #4]
 800da56:	6013      	streq	r3, [r2, #0]
 800da58:	460c      	movne	r4, r1
 800da5a:	e7eb      	b.n	800da34 <_malloc_r+0x64>
 800da5c:	460c      	mov	r4, r1
 800da5e:	6849      	ldr	r1, [r1, #4]
 800da60:	e7cc      	b.n	800d9fc <_malloc_r+0x2c>
 800da62:	1cc4      	adds	r4, r0, #3
 800da64:	f024 0403 	bic.w	r4, r4, #3
 800da68:	42a0      	cmp	r0, r4
 800da6a:	d005      	beq.n	800da78 <_malloc_r+0xa8>
 800da6c:	1a21      	subs	r1, r4, r0
 800da6e:	4630      	mov	r0, r6
 800da70:	f000 f808 	bl	800da84 <_sbrk_r>
 800da74:	3001      	adds	r0, #1
 800da76:	d0cf      	beq.n	800da18 <_malloc_r+0x48>
 800da78:	6025      	str	r5, [r4, #0]
 800da7a:	e7db      	b.n	800da34 <_malloc_r+0x64>
 800da7c:	200093b0 	.word	0x200093b0
 800da80:	200093b4 	.word	0x200093b4

0800da84 <_sbrk_r>:
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	4c06      	ldr	r4, [pc, #24]	; (800daa0 <_sbrk_r+0x1c>)
 800da88:	2300      	movs	r3, #0
 800da8a:	4605      	mov	r5, r0
 800da8c:	4608      	mov	r0, r1
 800da8e:	6023      	str	r3, [r4, #0]
 800da90:	f7f3 fdd6 	bl	8001640 <_sbrk>
 800da94:	1c43      	adds	r3, r0, #1
 800da96:	d102      	bne.n	800da9e <_sbrk_r+0x1a>
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	b103      	cbz	r3, 800da9e <_sbrk_r+0x1a>
 800da9c:	602b      	str	r3, [r5, #0]
 800da9e:	bd38      	pop	{r3, r4, r5, pc}
 800daa0:	20009fbc 	.word	0x20009fbc

0800daa4 <__malloc_lock>:
 800daa4:	4770      	bx	lr

0800daa6 <__malloc_unlock>:
 800daa6:	4770      	bx	lr

0800daa8 <_init>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	bf00      	nop
 800daac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daae:	bc08      	pop	{r3}
 800dab0:	469e      	mov	lr, r3
 800dab2:	4770      	bx	lr

0800dab4 <_fini>:
 800dab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab6:	bf00      	nop
 800dab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daba:	bc08      	pop	{r3}
 800dabc:	469e      	mov	lr, r3
 800dabe:	4770      	bx	lr
