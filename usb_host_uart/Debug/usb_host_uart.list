
usb_host_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800d240  0800d240  0001d240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d374  0800d374  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d374  0800d374  0001d374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d37c  0800d37c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d37c  0800d37c  0001d37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d380  0800d380  0001d380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000564c  20000094  0800d418  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  200056e0  0800d418  000256e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033eb0  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005fe7  00000000  00000000  00053f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020a8  00000000  00000000  00059f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e48  00000000  00000000  0005c008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009a09  00000000  00000000  0005de50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000207d1  00000000  00000000  00067859  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df7ac  00000000  00000000  0008802a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001677d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a5c  00000000  00000000  00167854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d228 	.word	0x0800d228

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800d228 	.word	0x0800d228

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd70 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f854 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f992 	bl	8000804 <MX_GPIO_Init>
  MX_I2S3_Init();
 80004e0:	f000 f900 	bl	80006e4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f92e 	bl	8000744 <MX_SPI1_Init>
  MX_I2C1_Init();
 80004e8:	f000 f8ce 	bl	8000688 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f960 	bl	80007b0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80004f0:	f005 ff92 	bl	8006418 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f009 faf2 	bl	8009adc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of memoryToFilter */
  memoryToFilterHandle = osMessageQueueNew (32, sizeof(uint8_t), &memoryToFilter_attributes);
 80004f8:	4a15      	ldr	r2, [pc, #84]	; (8000550 <main+0x80>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	2020      	movs	r0, #32
 80004fe:	f009 fc2b 	bl	8009d58 <osMessageQueueNew>
 8000502:	4602      	mov	r2, r0
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <main+0x84>)
 8000506:	601a      	str	r2, [r3, #0]

  /* creation of filterToUART */
  filterToUARTHandle = osMessageQueueNew (32, sizeof(uint8_t), &filterToUART_attributes);
 8000508:	4a13      	ldr	r2, [pc, #76]	; (8000558 <main+0x88>)
 800050a:	2101      	movs	r1, #1
 800050c:	2020      	movs	r0, #32
 800050e:	f009 fc23 	bl	8009d58 <osMessageQueueNew>
 8000512:	4602      	mov	r2, r0
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <main+0x8c>)
 8000516:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readFromMemory */
  readFromMemoryHandle = osThreadNew(StartReadFromMemory, NULL, &readFromMemory_attributes);
 8000518:	4a11      	ldr	r2, [pc, #68]	; (8000560 <main+0x90>)
 800051a:	2100      	movs	r1, #0
 800051c:	4811      	ldr	r0, [pc, #68]	; (8000564 <main+0x94>)
 800051e:	f009 fb47 	bl	8009bb0 <osThreadNew>
 8000522:	4602      	mov	r2, r0
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <main+0x98>)
 8000526:	601a      	str	r2, [r3, #0]

  /* creation of filter */
  filterHandle = osThreadNew(StartFilter, NULL, &filter_attributes);
 8000528:	4a10      	ldr	r2, [pc, #64]	; (800056c <main+0x9c>)
 800052a:	2100      	movs	r1, #0
 800052c:	4810      	ldr	r0, [pc, #64]	; (8000570 <main+0xa0>)
 800052e:	f009 fb3f 	bl	8009bb0 <osThreadNew>
 8000532:	4602      	mov	r2, r0
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <main+0xa4>)
 8000536:	601a      	str	r2, [r3, #0]

  /* creation of sendUART */
  sendUARTHandle = osThreadNew(StartSendUART, NULL, &sendUART_attributes);
 8000538:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <main+0xa8>)
 800053a:	2100      	movs	r1, #0
 800053c:	480f      	ldr	r0, [pc, #60]	; (800057c <main+0xac>)
 800053e:	f009 fb37 	bl	8009bb0 <osThreadNew>
 8000542:	4602      	mov	r2, r0
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <main+0xb0>)
 8000546:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000548:	f009 fafc 	bl	8009b44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x7c>
 800054e:	bf00      	nop
 8000550:	0800d318 	.word	0x0800d318
 8000554:	200049d8 	.word	0x200049d8
 8000558:	0800d330 	.word	0x0800d330
 800055c:	200049e0 	.word	0x200049e0
 8000560:	0800d2ac 	.word	0x0800d2ac
 8000564:	08000a01 	.word	0x08000a01
 8000568:	200049dc 	.word	0x200049dc
 800056c:	0800d2d0 	.word	0x0800d2d0
 8000570:	08000a31 	.word	0x08000a31
 8000574:	20004a3c 	.word	0x20004a3c
 8000578:	0800d2f4 	.word	0x0800d2f4
 800057c:	08000a69 	.word	0x08000a69
 8000580:	20004a38 	.word	0x20004a38

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b098      	sub	sp, #96	; 0x60
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f00c fd85 	bl	800d0a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b31      	ldr	r3, [pc, #196]	; (8000680 <SystemClock_Config+0xfc>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	4a30      	ldr	r2, [pc, #192]	; (8000680 <SystemClock_Config+0xfc>)
 80005c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c4:	6413      	str	r3, [r2, #64]	; 0x40
 80005c6:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <SystemClock_Config+0xfc>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <SystemClock_Config+0x100>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <SystemClock_Config+0x100>)
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0x100>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000602:	2308      	movs	r3, #8
 8000604:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000606:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fa8f 	bl	8003b3c <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000624:	f000 fa5e 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	2105      	movs	r1, #5
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fce8 	bl	800401c <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000652:	f000 fa47 	bl	8000ae4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000656:	2301      	movs	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800065a:	23c0      	movs	r3, #192	; 0xc0
 800065c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fefc 	bl	8004464 <HAL_RCCEx_PeriphCLKConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000672:	f000 fa37 	bl	8000ae4 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3760      	adds	r7, #96	; 0x60
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f002 fc61 	bl	8002f8c <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 fa08 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200049e4 	.word	0x200049e4
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_I2S3_Init+0x54>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <MX_I2S3_Init+0x58>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2S3_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_I2S3_Init+0x54>)
 800070c:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <MX_I2S3_Init+0x5c>)
 800070e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_I2S3_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2S3_Init+0x54>)
 8000724:	f002 fd6a 	bl	80031fc <HAL_I2S_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800072e:	f000 f9d9 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20004ad8 	.word	0x20004ad8
 800073c:	40003c00 	.word	0x40003c00
 8000740:	00017700 	.word	0x00017700

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f003 ffa3 	bl	80046e0 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f9a0 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20004a40 	.word	0x20004a40
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f004 fa1c 	bl	8004c24 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f977 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20004a98 	.word	0x20004a98
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b71      	ldr	r3, [pc, #452]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a70      	ldr	r2, [pc, #448]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000824:	f043 0310 	orr.w	r3, r3, #16
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b6e      	ldr	r3, [pc, #440]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b6a      	ldr	r3, [pc, #424]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a69      	ldr	r2, [pc, #420]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b67      	ldr	r3, [pc, #412]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b63      	ldr	r3, [pc, #396]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a62      	ldr	r2, [pc, #392]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b60      	ldr	r3, [pc, #384]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b5c      	ldr	r3, [pc, #368]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a5b      	ldr	r2, [pc, #364]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b59      	ldr	r3, [pc, #356]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b55      	ldr	r3, [pc, #340]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a54      	ldr	r2, [pc, #336]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b52      	ldr	r3, [pc, #328]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b4e      	ldr	r3, [pc, #312]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a4d      	ldr	r2, [pc, #308]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <MX_GPIO_Init+0x1e0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2108      	movs	r1, #8
 80008c6:	4848      	ldr	r0, [pc, #288]	; (80009e8 <MX_GPIO_Init+0x1e4>)
 80008c8:	f000 fe56 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	4846      	ldr	r0, [pc, #280]	; (80009ec <MX_GPIO_Init+0x1e8>)
 80008d2:	f000 fe51 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008dc:	4844      	ldr	r0, [pc, #272]	; (80009f0 <MX_GPIO_Init+0x1ec>)
 80008de:	f000 fe4b 	bl	8001578 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e2:	2308      	movs	r3, #8
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	483b      	ldr	r0, [pc, #236]	; (80009e8 <MX_GPIO_Init+0x1e4>)
 80008fa:	f000 fca3 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4835      	ldr	r0, [pc, #212]	; (80009ec <MX_GPIO_Init+0x1e8>)
 8000916:	f000 fc95 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091a:	2308      	movs	r3, #8
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092a:	2305      	movs	r3, #5
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	482d      	ldr	r0, [pc, #180]	; (80009ec <MX_GPIO_Init+0x1e8>)
 8000936:	f000 fc85 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	2301      	movs	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <MX_GPIO_Init+0x1f0>)
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	482a      	ldr	r0, [pc, #168]	; (80009f8 <MX_GPIO_Init+0x1f4>)
 800094e:	f000 fc79 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000952:	2304      	movs	r3, #4
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4825      	ldr	r0, [pc, #148]	; (80009fc <MX_GPIO_Init+0x1f8>)
 8000966:	f000 fc6d 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097c:	2305      	movs	r3, #5
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	481d      	ldr	r0, [pc, #116]	; (80009fc <MX_GPIO_Init+0x1f8>)
 8000988:	f000 fc5c 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000990:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_GPIO_Init+0x1ec>)
 80009a6:	f000 fc4d 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009aa:	2320      	movs	r3, #32
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_GPIO_Init+0x1ec>)
 80009be:	f000 fc41 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_GPIO_Init+0x1f0>)
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0x1e4>)
 80009d6:	f000 fc35 	bl	8001244 <HAL_GPIO_Init>

}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	; 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	10120000 	.word	0x10120000
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400

08000a00 <StartReadFromMemory>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadFromMemory */
void StartReadFromMemory(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000a08:	f00b ffd0 	bl	800c9ac <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  uint8_t sendToFilter = 0x01;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {

	  osMessageQueuePut(memoryToFilterHandle, &sendToFilter, 0, 200);
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <StartReadFromMemory+0x2c>)
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	f107 010f 	add.w	r1, r7, #15
 8000a18:	23c8      	movs	r3, #200	; 0xc8
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f009 fa22 	bl	8009e64 <osMessageQueuePut>
	  osDelay(1000);
 8000a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a24:	f009 f96a 	bl	8009cfc <osDelay>
	  osMessageQueuePut(memoryToFilterHandle, &sendToFilter, 0, 200);
 8000a28:	e7f2      	b.n	8000a10 <StartReadFromMemory+0x10>
 8000a2a:	bf00      	nop
 8000a2c:	200049d8 	.word	0x200049d8

08000a30 <StartFilter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFilter */
void StartFilter(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint8_t bufferGetFromMemory[1];
	uint8_t sendToSendUART;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(memoryToFilterHandle, &bufferGetFromMemory, NULL, 1000);
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <StartFilter+0x30>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	f107 010c 	add.w	r1, r7, #12
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	2200      	movs	r2, #0
 8000a46:	f009 fa81 	bl	8009f4c <osMessageQueueGet>
	  // printf("Received Filter: %d\n", (int)bufferGetFromMemory[0]);

	  //Filtering
	  sendToSendUART = bufferGetFromMemory[0];
 8000a4a:	7b3b      	ldrb	r3, [r7, #12]
 8000a4c:	72fb      	strb	r3, [r7, #11]

	  osMessageQueuePut(filterToUARTHandle, &sendToSendUART, 0, 200);
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <StartFilter+0x34>)
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	f107 010b 	add.w	r1, r7, #11
 8000a56:	23c8      	movs	r3, #200	; 0xc8
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f009 fa03 	bl	8009e64 <osMessageQueuePut>
	  osMessageQueueGet(memoryToFilterHandle, &bufferGetFromMemory, NULL, 1000);
 8000a5e:	e7eb      	b.n	8000a38 <StartFilter+0x8>
 8000a60:	200049d8 	.word	0x200049d8
 8000a64:	200049e0 	.word	0x200049e0

08000a68 <StartSendUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUART */
void StartSendUART(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	uint8_t bufferGetFromFilter[1];

  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(filterToUARTHandle, &bufferGetFromFilter, NULL, 1000);
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <StartSendUART+0x4c>)
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	f107 010c 	add.w	r1, r7, #12
 8000a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f009 fa65 	bl	8009f4c <osMessageQueueGet>

	  //checking without UART
	  if(bufferGetFromFilter[0] == 0x01) {
 8000a82:	7b3b      	ldrb	r3, [r7, #12]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d106      	bne.n	8000a96 <StartSendUART+0x2e>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <StartSendUART+0x50>)
 8000a90:	f000 fd72 	bl	8001578 <HAL_GPIO_WritePin>
 8000a94:	e005      	b.n	8000aa2 <StartSendUART+0x3a>
	  } else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000a96:	2201      	movs	r2, #1
 8000a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <StartSendUART+0x50>)
 8000a9e:	f000 fd6b 	bl	8001578 <HAL_GPIO_WritePin>
	  }

	  HAL_UART_Transmit(&huart2, bufferGetFromFilter, 2, 1000);
 8000aa2:	f107 010c 	add.w	r1, r7, #12
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	2202      	movs	r2, #2
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <StartSendUART+0x54>)
 8000aae:	f004 f906 	bl	8004cbe <HAL_UART_Transmit>
	  osMessageQueueGet(filterToUARTHandle, &bufferGetFromFilter, NULL, 1000);
 8000ab2:	e7dd      	b.n	8000a70 <StartSendUART+0x8>
 8000ab4:	200049e0 	.word	0x200049e0
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	20004a98 	.word	0x20004a98

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f000 fa93 	bl	8000ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40001000 	.word	0x40001000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aea:	e7fe      	b.n	8000aea <Error_Handler+0x6>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_MspInit+0x54>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <HAL_MspInit+0x54>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x54>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_MspInit+0x54>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_MspInit+0x54>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_MspInit+0x54>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	f06f 0001 	mvn.w	r0, #1
 8000b32:	f000 fb5d 	bl	80011f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_I2C_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12c      	bne.n	8000bc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_I2C_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <HAL_I2C_MspInit+0x88>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_I2C_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b88:	2312      	movs	r3, #18
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b94:	2304      	movs	r3, #4
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <HAL_I2C_MspInit+0x8c>)
 8000ba0:	f000 fb50 	bl	8001244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_I2C_MspInit+0x88>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_I2C_MspInit+0x88>)
 8000bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_I2C_MspInit+0x88>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	; 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020400 	.word	0x40020400

08000bd4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <HAL_I2S_MspInit+0xc0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d14a      	bne.n	8000c8c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <HAL_I2S_MspInit+0xc4>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a26      	ldr	r2, [pc, #152]	; (8000c98 <HAL_I2S_MspInit+0xc4>)
 8000c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <HAL_I2S_MspInit+0xc4>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <HAL_I2S_MspInit+0xc4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <HAL_I2S_MspInit+0xc4>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <HAL_I2S_MspInit+0xc4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_I2S_MspInit+0xc4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_I2S_MspInit+0xc4>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_I2S_MspInit+0xc4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <HAL_I2S_MspInit+0xc8>)
 8000c66:	f000 faed 	bl	8001244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c6a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c7c:	2306      	movs	r3, #6
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <HAL_I2S_MspInit+0xcc>)
 8000c88:	f000 fadc 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40003c00 	.word	0x40003c00
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020800 	.word	0x40020800

08000ca4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_SPI_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12b      	bne.n	8000d1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_SPI_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cfe:	23e0      	movs	r3, #224	; 0xe0
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_SPI_MspInit+0x8c>)
 8000d1a:	f000 fa93 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40013000 	.word	0x40013000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_UART_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d8e:	230c      	movs	r3, #12
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UART_MspInit+0x8c>)
 8000daa:	f000 fa4b 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40004400 	.word	0x40004400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	2036      	movs	r0, #54	; 0x36
 8000dda:	f000 fa09 	bl	80011f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dde:	2036      	movs	r0, #54	; 0x36
 8000de0:	f000 fa22 	bl	8001228 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_InitTick+0xa4>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <HAL_InitTick+0xa4>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_InitTick+0xa4>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e00:	f107 0210 	add.w	r2, r7, #16
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 faf8 	bl	8004400 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e10:	f003 face 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 8000e14:	4603      	mov	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_InitTick+0xa8>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	0c9b      	lsrs	r3, r3, #18
 8000e24:	3b01      	subs	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_InitTick+0xac>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <HAL_InitTick+0xb0>)
 8000e2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_InitTick+0xac>)
 8000e30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e36:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <HAL_InitTick+0xac>)
 8000e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_InitTick+0xac>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_InitTick+0xac>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HAL_InitTick+0xac>)
 8000e4a:	f003 fcad 	bl	80047a8 <HAL_TIM_Base_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d104      	bne.n	8000e5e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e54:	4806      	ldr	r0, [pc, #24]	; (8000e70 <HAL_InitTick+0xac>)
 8000e56:	f003 fcdc 	bl	8004812 <HAL_TIM_Base_Start_IT>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3730      	adds	r7, #48	; 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	431bde83 	.word	0x431bde83
 8000e70:	20004b20 	.word	0x20004b20
 8000e74:	40001000 	.word	0x40001000

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <TIM6_DAC_IRQHandler+0x10>)
 8000eaa:	f003 fcd6 	bl	800485a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20004b20 	.word	0x20004b20

08000eb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <OTG_FS_IRQHandler+0x10>)
 8000ebe:	f000 fe03 	bl	8001ac8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20005418 	.word	0x20005418

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f00c f88c 	bl	800d018 <__errno>
 8000f00:	4602      	mov	r2, r0
 8000f02:	230c      	movs	r3, #12
 8000f04:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20020000 	.word	0x20020000
 8000f2c:	00002000 	.word	0x00002000
 8000f30:	200000b0 	.word	0x200000b0
 8000f34:	200056e0 	.word	0x200056e0

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <SystemInit+0x28>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <SystemInit+0x28>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SystemInit+0x28>)
 8000f4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f52:	609a      	str	r2, [r3, #8]
#endif
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f6a:	e003      	b.n	8000f74 <LoopCopyDataInit>

08000f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f72:	3104      	adds	r1, #4

08000f74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f7c:	d3f6      	bcc.n	8000f6c <CopyDataInit>
  ldr  r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f80:	e002      	b.n	8000f88 <LoopFillZerobss>

08000f82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f84:	f842 3b04 	str.w	r3, [r2], #4

08000f88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f8c:	d3f9      	bcc.n	8000f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ffd3 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f00c f847 	bl	800d024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fa9b 	bl	80004d0 <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fa0:	0800d384 	.word	0x0800d384
  ldr  r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fa8:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8000fac:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8000fb0:	200056e0 	.word	0x200056e0

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f8fa 	bl	80011da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff feec 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fd7e 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	20004b60 	.word	0x20004b60

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20004b60 	.word	0x20004b60

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_Delay+0x40>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000008 	.word	0x20000008

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff4c 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001202:	f7ff ff61 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001206:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	6978      	ldr	r0, [r7, #20]
 800120e:	f7ff ffb1 	bl	8001174 <NVIC_EncodePriority>
 8001212:	4602      	mov	r2, r0
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff80 	bl	8001120 <__NVIC_SetPriority>
}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff54 	bl	80010e4 <__NVIC_EnableIRQ>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	e16b      	b.n	8001538 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	429a      	cmp	r2, r3
 800127a:	f040 815a 	bne.w	8001532 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d00b      	beq.n	800129e <HAL_GPIO_Init+0x5a>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001292:	2b11      	cmp	r3, #17
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b12      	cmp	r3, #18
 800129c:	d130      	bne.n	8001300 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0201 	and.w	r2, r3, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0xfc>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b12      	cmp	r3, #18
 800133e:	d123      	bne.n	8001388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	08da      	lsrs	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3208      	adds	r2, #8
 8001348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	220f      	movs	r2, #15
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3208      	adds	r2, #8
 8001382:	69b9      	ldr	r1, [r7, #24]
 8001384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0203 	and.w	r2, r3, #3
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80b4 	beq.w	8001532 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b5f      	ldr	r3, [pc, #380]	; (800154c <HAL_GPIO_Init+0x308>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a5e      	ldr	r2, [pc, #376]	; (800154c <HAL_GPIO_Init+0x308>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_GPIO_Init+0x308>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e6:	4a5a      	ldr	r2, [pc, #360]	; (8001550 <HAL_GPIO_Init+0x30c>)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a51      	ldr	r2, [pc, #324]	; (8001554 <HAL_GPIO_Init+0x310>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d02b      	beq.n	800146a <HAL_GPIO_Init+0x226>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a50      	ldr	r2, [pc, #320]	; (8001558 <HAL_GPIO_Init+0x314>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d025      	beq.n	8001466 <HAL_GPIO_Init+0x222>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4f      	ldr	r2, [pc, #316]	; (800155c <HAL_GPIO_Init+0x318>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01f      	beq.n	8001462 <HAL_GPIO_Init+0x21e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4e      	ldr	r2, [pc, #312]	; (8001560 <HAL_GPIO_Init+0x31c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0x21a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4d      	ldr	r2, [pc, #308]	; (8001564 <HAL_GPIO_Init+0x320>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0x216>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_GPIO_Init+0x324>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00d      	beq.n	8001456 <HAL_GPIO_Init+0x212>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4b      	ldr	r2, [pc, #300]	; (800156c <HAL_GPIO_Init+0x328>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x20e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4a      	ldr	r2, [pc, #296]	; (8001570 <HAL_GPIO_Init+0x32c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d101      	bne.n	800144e <HAL_GPIO_Init+0x20a>
 800144a:	2307      	movs	r3, #7
 800144c:	e00e      	b.n	800146c <HAL_GPIO_Init+0x228>
 800144e:	2308      	movs	r3, #8
 8001450:	e00c      	b.n	800146c <HAL_GPIO_Init+0x228>
 8001452:	2306      	movs	r3, #6
 8001454:	e00a      	b.n	800146c <HAL_GPIO_Init+0x228>
 8001456:	2305      	movs	r3, #5
 8001458:	e008      	b.n	800146c <HAL_GPIO_Init+0x228>
 800145a:	2304      	movs	r3, #4
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x228>
 800145e:	2303      	movs	r3, #3
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x228>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x228>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x228>
 800146a:	2300      	movs	r3, #0
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	f002 0203 	and.w	r2, r2, #3
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4093      	lsls	r3, r2
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800147c:	4934      	ldr	r1, [pc, #208]	; (8001550 <HAL_GPIO_Init+0x30c>)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148a:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <HAL_GPIO_Init+0x330>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ae:	4a31      	ldr	r2, [pc, #196]	; (8001574 <HAL_GPIO_Init+0x330>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_GPIO_Init+0x330>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d8:	4a26      	ldr	r2, [pc, #152]	; (8001574 <HAL_GPIO_Init+0x330>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <HAL_GPIO_Init+0x330>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <HAL_GPIO_Init+0x330>)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_GPIO_Init+0x330>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <HAL_GPIO_Init+0x330>)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3301      	adds	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	2b0f      	cmp	r3, #15
 800153c:	f67f ae90 	bls.w	8001260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001540:	bf00      	nop
 8001542:	3724      	adds	r7, #36	; 0x24
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	40023800 	.word	0x40023800
 8001550:	40013800 	.word	0x40013800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	40020800 	.word	0x40020800
 8001560:	40020c00 	.word	0x40020c00
 8001564:	40021000 	.word	0x40021000
 8001568:	40021400 	.word	0x40021400
 800156c:	40021800 	.word	0x40021800
 8001570:	40021c00 	.word	0x40021c00
 8001574:	40013c00 	.word	0x40013c00

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ac:	b08f      	sub	sp, #60	; 0x3c
 80015ae:	af0a      	add	r7, sp, #40	; 0x28
 80015b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e054      	b.n	8001666 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f00b fa3c 	bl	800ca54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 f830 	bl	8005660 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	687e      	ldr	r6, [r7, #4]
 8001608:	466d      	mov	r5, sp
 800160a:	f106 0410 	add.w	r4, r6, #16
 800160e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800161a:	e885 0003 	stmia.w	r5, {r0, r1}
 800161e:	1d33      	adds	r3, r6, #4
 8001620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001622:	6838      	ldr	r0, [r7, #0]
 8001624:	f003 ffaa 	bl	800557c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	4618      	mov	r0, r3
 8001630:	f004 f827 	bl	8005682 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	687e      	ldr	r6, [r7, #4]
 800163c:	466d      	mov	r5, sp
 800163e:	f106 0410 	add.w	r4, r6, #16
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800164e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001652:	1d33      	adds	r3, r6, #4
 8001654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001656:	6838      	ldr	r0, [r7, #0]
 8001658:	f004 f93a 	bl	80058d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800166e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800166e:	b590      	push	{r4, r7, lr}
 8001670:	b089      	sub	sp, #36	; 0x24
 8001672:	af04      	add	r7, sp, #16
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	4608      	mov	r0, r1
 8001678:	4611      	mov	r1, r2
 800167a:	461a      	mov	r2, r3
 800167c:	4603      	mov	r3, r0
 800167e:	70fb      	strb	r3, [r7, #3]
 8001680:	460b      	mov	r3, r1
 8001682:	70bb      	strb	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_HCD_HC_Init+0x28>
 8001692:	2302      	movs	r3, #2
 8001694:	e07f      	b.n	8001796 <HAL_HCD_HC_Init+0x128>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	333d      	adds	r3, #61	; 0x3d
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	3338      	adds	r3, #56	; 0x38
 80016c2:	787a      	ldrb	r2, [r7, #1]
 80016c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3340      	adds	r3, #64	; 0x40
 80016d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016d8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016da:	78fa      	ldrb	r2, [r7, #3]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	3339      	adds	r3, #57	; 0x39
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	333f      	adds	r3, #63	; 0x3f
 80016fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001702:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	78bb      	ldrb	r3, [r7, #2]
 8001708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800170c:	b2d8      	uxtb	r0, r3
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	333a      	adds	r3, #58	; 0x3a
 800171c:	4602      	mov	r2, r0
 800171e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001720:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da0a      	bge.n	800173e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	333b      	adds	r3, #59	; 0x3b
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e009      	b.n	8001752 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	333b      	adds	r3, #59	; 0x3b
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	333c      	adds	r3, #60	; 0x3c
 8001762:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001766:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	787c      	ldrb	r4, [r7, #1]
 800176e:	78ba      	ldrb	r2, [r7, #2]
 8001770:	78f9      	ldrb	r1, [r7, #3]
 8001772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4623      	mov	r3, r4
 8001784:	f004 fa26 	bl	8005bd4 <USB_HC_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bd90      	pop	{r4, r7, pc}

0800179e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_HCD_HC_Halt+0x1e>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e00f      	b.n	80017dc <HAL_HCD_HC_Halt+0x3e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 fc62 	bl	8006096 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017da:	7bfb      	ldrb	r3, [r7, #15]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	4608      	mov	r0, r1
 80017ee:	4611      	mov	r1, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	70fb      	strb	r3, [r7, #3]
 80017f6:	460b      	mov	r3, r1
 80017f8:	70bb      	strb	r3, [r7, #2]
 80017fa:	4613      	mov	r3, r2
 80017fc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	333b      	adds	r3, #59	; 0x3b
 800180e:	78ba      	ldrb	r2, [r7, #2]
 8001810:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	333f      	adds	r3, #63	; 0x3f
 8001822:	787a      	ldrb	r2, [r7, #1]
 8001824:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001826:	7c3b      	ldrb	r3, [r7, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d114      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3342      	adds	r3, #66	; 0x42
 800183c:	2203      	movs	r2, #3
 800183e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	333d      	adds	r3, #61	; 0x3d
 8001850:	7f3a      	ldrb	r2, [r7, #28]
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	e009      	b.n	800186a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3342      	adds	r3, #66	; 0x42
 8001866:	2202      	movs	r2, #2
 8001868:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800186a:	787b      	ldrb	r3, [r7, #1]
 800186c:	2b03      	cmp	r3, #3
 800186e:	f200 80d6 	bhi.w	8001a1e <HAL_HCD_HC_SubmitRequest+0x23a>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	08001889 	.word	0x08001889
 800187c:	08001a09 	.word	0x08001a09
 8001880:	080018f5 	.word	0x080018f5
 8001884:	0800197f 	.word	0x0800197f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001888:	7c3b      	ldrb	r3, [r7, #16]
 800188a:	2b01      	cmp	r3, #1
 800188c:	f040 80c9 	bne.w	8001a22 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001890:	78bb      	ldrb	r3, [r7, #2]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 80c5 	bne.w	8001a22 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001898:	8b3b      	ldrh	r3, [r7, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	3351      	adds	r3, #81	; 0x51
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3351      	adds	r3, #81	; 0x51
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10a      	bne.n	80018de <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	3342      	adds	r3, #66	; 0x42
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018dc:	e0a1      	b.n	8001a22 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	3342      	adds	r3, #66	; 0x42
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
      break;
 80018f2:	e096      	b.n	8001a22 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018f4:	78bb      	ldrb	r3, [r7, #2]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d120      	bne.n	800193c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3351      	adds	r3, #81	; 0x51
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10a      	bne.n	8001926 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3342      	adds	r3, #66	; 0x42
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001924:	e07e      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	3342      	adds	r3, #66	; 0x42
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
      break;
 800193a:	e073      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	3350      	adds	r3, #80	; 0x50
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10a      	bne.n	8001968 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	3342      	adds	r3, #66	; 0x42
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
      break;
 8001966:	e05d      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	3342      	adds	r3, #66	; 0x42
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
      break;
 800197c:	e052      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800197e:	78bb      	ldrb	r3, [r7, #2]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d120      	bne.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	3351      	adds	r3, #81	; 0x51
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10a      	bne.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	3342      	adds	r3, #66	; 0x42
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019ae:	e039      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3342      	adds	r3, #66	; 0x42
 80019c0:	2202      	movs	r2, #2
 80019c2:	701a      	strb	r2, [r3, #0]
      break;
 80019c4:	e02e      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	3350      	adds	r3, #80	; 0x50
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10a      	bne.n	80019f2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3342      	adds	r3, #66	; 0x42
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
      break;
 80019f0:	e018      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	3342      	adds	r3, #66	; 0x42
 8001a02:	2202      	movs	r2, #2
 8001a04:	701a      	strb	r2, [r3, #0]
      break;
 8001a06:	e00d      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	3342      	adds	r3, #66	; 0x42
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
      break;
 8001a1c:	e002      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001a1e:	bf00      	nop
 8001a20:	e000      	b.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001a22:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	3344      	adds	r3, #68	; 0x44
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	8b39      	ldrh	r1, [r7, #24]
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4403      	add	r3, r0
 8001a48:	3348      	adds	r3, #72	; 0x48
 8001a4a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a4c:	78fa      	ldrb	r2, [r7, #3]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	335c      	adds	r3, #92	; 0x5c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	334c      	adds	r3, #76	; 0x4c
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	3339      	adds	r3, #57	; 0x39
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	335d      	adds	r3, #93	; 0x5d
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	3338      	adds	r3, #56	; 0x38
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	18d1      	adds	r1, r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f004 f996 	bl	8005de8 <USB_HC_StartXfer>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop

08001ac8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 feb3 	bl	800584a <USB_GetMode>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	f040 80ef 	bne.w	8001cca <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 fe97 	bl	8005824 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80e5 	beq.w	8001cc8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 fe8e 	bl	8005824 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b12:	d104      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fe7e 	bl	8005824 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b32:	d104      	bne.n	8001b3e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fe6e 	bl	8005824 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b52:	d104      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fe5e 	bl	8005824 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d103      	bne.n	8001b7a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2202      	movs	r2, #2
 8001b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fe50 	bl	8005824 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b8e:	d115      	bne.n	8001bbc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b98:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f00a ffd0 	bl	800cb50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 ff46 	bl	8005a48 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fe2f 	bl	8005824 <USB_ReadInterrupts>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d102      	bne.n	8001bd8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f001 f966 	bl	8002ea4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 fe21 	bl	8005824 <USB_ReadInterrupts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d106      	bne.n	8001bfa <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f00a ff93 	bl	800cb18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fe10 	bl	8005824 <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c0e:	d138      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 fa2d 	bl	8006074 <USB_HC_ReadInterrupt>
 8001c1a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e025      	b.n	8001c6e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d018      	beq.n	8001c68 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c4c:	d106      	bne.n	8001c5c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8cf 	bl	8001df8 <HCD_HC_IN_IRQHandler>
 8001c5a:	e005      	b.n	8001c68 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fcfd 	bl	8002662 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d3d4      	bcc.n	8001c22 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fdcc 	bl	8005824 <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d101      	bne.n	8001c9a <HAL_HCD_IRQHandler+0x1d2>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_HCD_IRQHandler+0x1d4>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d014      	beq.n	8001cca <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0210 	bic.w	r2, r2, #16
 8001cae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f001 f84b 	bl	8002d4c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0210 	orr.w	r2, r2, #16
 8001cc4:	619a      	str	r2, [r3, #24]
 8001cc6:	e000      	b.n	8001cca <HAL_HCD_IRQHandler+0x202>
      return;
 8001cc8:	bf00      	nop
    }
  }
}
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_HCD_Start+0x16>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e013      	b.n	8001d0e <HAL_HCD_Start+0x3e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fca3 	bl	800563e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 ff06 	bl	8005b10 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_HCD_Stop+0x16>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e00d      	b.n	8001d48 <HAL_HCD_Stop+0x32>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fae7 	bl	800630c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fead 	bl	8005abc <USB_ResetPort>
 8001d62:	4603      	mov	r3, r0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	335c      	adds	r3, #92	; 0x5c
 8001d88:	781b      	ldrb	r3, [r3, #0]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	334c      	adds	r3, #76	; 0x4c
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 feef 	bl	8005bb0 <USB_GetCurrentFrame>
 8001dd2:	4603      	mov	r3, r0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 feca 	bl	8005b82 <USB_GetHostSpeed>
 8001dee:	4603      	mov	r3, r0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d119      	bne.n	8001e5c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e34:	461a      	mov	r2, r3
 8001e36:	2304      	movs	r3, #4
 8001e38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	0151      	lsls	r1, r2, #5
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	440a      	add	r2, r1
 8001e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	60d3      	str	r3, [r2, #12]
 8001e5a:	e0ce      	b.n	8001ffa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e72:	d12c      	bne.n	8001ece <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	461a      	mov	r2, r3
 8001e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	335d      	adds	r3, #93	; 0x5d
 8001e98:	2207      	movs	r2, #7
 8001e9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	0151      	lsls	r1, r2, #5
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	440a      	add	r2, r1
 8001eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f004 f8e5 	bl	8006096 <USB_HC_Halt>
 8001ecc:	e095      	b.n	8001ffa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	d109      	bne.n	8001ef8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	6093      	str	r3, [r2, #8]
 8001ef6:	e080      	b.n	8001ffa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d134      	bne.n	8001f78 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	0151      	lsls	r1, r2, #5
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	440a      	add	r2, r1
 8001f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	335d      	adds	r3, #93	; 0x5d
 8001f3e:	2205      	movs	r2, #5
 8001f40:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2310      	movs	r3, #16
 8001f52:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	2308      	movs	r3, #8
 8001f64:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 f890 	bl	8006096 <USB_HC_Halt>
 8001f76:	e040      	b.n	8001ffa <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8e:	d134      	bne.n	8001ffa <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	0151      	lsls	r1, r2, #5
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	440a      	add	r2, r1
 8001fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 f86b 	bl	8006096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2310      	movs	r3, #16
 8001fd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	335d      	adds	r3, #93	; 0x5d
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800200c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002010:	d122      	bne.n	8002058 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	0151      	lsls	r1, r2, #5
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	440a      	add	r2, r1
 8002028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f004 f82a 	bl	8006096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204e:	461a      	mov	r2, r3
 8002050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002054:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002056:	e300      	b.n	800265a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4413      	add	r3, r2
 8002060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	f040 80fd 	bne.w	800226a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	3348      	adds	r3, #72	; 0x48
 8002088:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	0159      	lsls	r1, r3, #5
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	440b      	add	r3, r1
 8002092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800209c:	1ad1      	subs	r1, r2, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4403      	add	r3, r0
 80020ac:	334c      	adds	r3, #76	; 0x4c
 80020ae:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	335d      	adds	r3, #93	; 0x5d
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	3358      	adds	r3, #88	; 0x58
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	461a      	mov	r2, r3
 80020e6:	2301      	movs	r3, #1
 80020e8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	333f      	adds	r3, #63	; 0x3f
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	333f      	adds	r3, #63	; 0x3f
 8002110:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002112:	2b02      	cmp	r3, #2
 8002114:	d121      	bne.n	800215a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	0151      	lsls	r1, r2, #5
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	440a      	add	r2, r1
 800212c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f003 ffa8 	bl	8006096 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002152:	461a      	mov	r2, r3
 8002154:	2310      	movs	r3, #16
 8002156:	6093      	str	r3, [r2, #8]
 8002158:	e070      	b.n	800223c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	333f      	adds	r3, #63	; 0x3f
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d12a      	bne.n	80021c6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	0151      	lsls	r1, r2, #5
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	440a      	add	r2, r1
 8002186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800218a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800218e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	b2d8      	uxtb	r0, r3
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	335c      	adds	r3, #92	; 0x5c
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	4601      	mov	r1, r0
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f00a fcd4 	bl	800cb6c <HAL_HCD_HC_NotifyURBChange_Callback>
 80021c4:	e03a      	b.n	800223c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	333f      	adds	r3, #63	; 0x3f
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d12f      	bne.n	800223c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	335c      	adds	r3, #92	; 0x5c
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	3350      	adds	r3, #80	; 0x50
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2d8      	uxtb	r0, r3
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	3350      	adds	r3, #80	; 0x50
 8002218:	4602      	mov	r2, r0
 800221a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	b2d8      	uxtb	r0, r3
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	335c      	adds	r3, #92	; 0x5c
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	4601      	mov	r1, r0
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f00a fc98 	bl	800cb6c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	3350      	adds	r3, #80	; 0x50
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	f083 0301 	eor.w	r3, r3, #1
 8002252:	b2d8      	uxtb	r0, r3
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	3350      	adds	r3, #80	; 0x50
 8002264:	4602      	mov	r2, r0
 8002266:	701a      	strb	r2, [r3, #0]
}
 8002268:	e1f7      	b.n	800265a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b02      	cmp	r3, #2
 800227e:	f040 811a 	bne.w	80024b6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	0151      	lsls	r1, r2, #5
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	440a      	add	r2, r1
 8002298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800229c:	f023 0302 	bic.w	r3, r3, #2
 80022a0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	335d      	adds	r3, #93	; 0x5d
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d10a      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	335c      	adds	r3, #92	; 0x5c
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e0d9      	b.n	8002482 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	440b      	add	r3, r1
 80022dc:	335d      	adds	r3, #93	; 0x5d
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d10a      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	335c      	adds	r3, #92	; 0x5c
 80022f4:	2205      	movs	r2, #5
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e0c3      	b.n	8002482 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	335d      	adds	r3, #93	; 0x5d
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b06      	cmp	r3, #6
 800230e:	d00a      	beq.n	8002326 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	335d      	adds	r3, #93	; 0x5d
 8002320:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002322:	2b08      	cmp	r3, #8
 8002324:	d156      	bne.n	80023d4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	3358      	adds	r3, #88	; 0x58
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	1c59      	adds	r1, r3, #1
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4403      	add	r3, r0
 8002348:	3358      	adds	r3, #88	; 0x58
 800234a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	3358      	adds	r3, #88	; 0x58
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d914      	bls.n	800238c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3358      	adds	r3, #88	; 0x58
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	335c      	adds	r3, #92	; 0x5c
 8002386:	2204      	movs	r2, #4
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e009      	b.n	80023a0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	335c      	adds	r3, #92	; 0x5c
 800239c:	2202      	movs	r2, #2
 800239e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e056      	b.n	8002482 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	335d      	adds	r3, #93	; 0x5d
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d123      	bne.n	8002432 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	335c      	adds	r3, #92	; 0x5c
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002414:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800241c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	461a      	mov	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e027      	b.n	8002482 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	335d      	adds	r3, #93	; 0x5d
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b07      	cmp	r3, #7
 8002446:	d11c      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	3358      	adds	r3, #88	; 0x58
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c59      	adds	r1, r3, #1
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4403      	add	r3, r0
 800246a:	3358      	adds	r3, #88	; 0x58
 800246c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	335c      	adds	r3, #92	; 0x5c
 800247e:	2204      	movs	r2, #4
 8002480:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	461a      	mov	r2, r3
 8002490:	2302      	movs	r3, #2
 8002492:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	b2d8      	uxtb	r0, r3
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	335c      	adds	r3, #92	; 0x5c
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	4601      	mov	r1, r0
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f00a fb5c 	bl	800cb6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024b4:	e0d1      	b.n	800265a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d13e      	bne.n	800254a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	0151      	lsls	r1, r2, #5
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	440a      	add	r2, r1
 80024e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	3358      	adds	r3, #88	; 0x58
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1c59      	adds	r1, r3, #1
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4403      	add	r3, r0
 800250e:	3358      	adds	r3, #88	; 0x58
 8002510:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	335d      	adds	r3, #93	; 0x5d
 8002522:	2206      	movs	r2, #6
 8002524:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f003 fdb0 	bl	8006096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	461a      	mov	r2, r3
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	6093      	str	r3, [r2, #8]
}
 8002548:	e087      	b.n	800265a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b10      	cmp	r3, #16
 800255e:	d17c      	bne.n	800265a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	440b      	add	r3, r1
 800256e:	333f      	adds	r3, #63	; 0x3f
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d122      	bne.n	80025bc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	3358      	adds	r3, #88	; 0x58
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	0151      	lsls	r1, r2, #5
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	440a      	add	r2, r1
 80025a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 fd6e 	bl	8006096 <USB_HC_Halt>
 80025ba:	e045      	b.n	8002648 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	440b      	add	r3, r1
 80025ca:	333f      	adds	r3, #63	; 0x3f
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	333f      	adds	r3, #63	; 0x3f
 80025e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d12f      	bne.n	8002648 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	3358      	adds	r3, #88	; 0x58
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d121      	bne.n	8002648 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	335d      	adds	r3, #93	; 0x5d
 8002614:	2203      	movs	r2, #3
 8002616:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	0151      	lsls	r1, r2, #5
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	440a      	add	r2, r1
 800262e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fd27 	bl	8006096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	461a      	mov	r2, r3
 8002656:	2310      	movs	r3, #16
 8002658:	6093      	str	r3, [r2, #8]
}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b04      	cmp	r3, #4
 8002690:	d119      	bne.n	80026c6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	461a      	mov	r2, r3
 80026a0:	2304      	movs	r3, #4
 80026a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	0151      	lsls	r1, r2, #5
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	440a      	add	r2, r1
 80026ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026c4:	e33e      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d141      	bne.n	8002760 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	461a      	mov	r2, r3
 80026ea:	2320      	movs	r3, #32
 80026ec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	333d      	adds	r3, #61	; 0x3d
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	f040 831f 	bne.w	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	333d      	adds	r3, #61	; 0x3d
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	335c      	adds	r3, #92	; 0x5c
 800272a:	2202      	movs	r2, #2
 800272c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	0151      	lsls	r1, r2, #5
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	440a      	add	r2, r1
 8002744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f003 fc9c 	bl	8006096 <USB_HC_Halt>
}
 800275e:	e2f1      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d13f      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	335d      	adds	r3, #93	; 0x5d
 8002786:	2204      	movs	r2, #4
 8002788:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	333d      	adds	r3, #61	; 0x3d
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	440b      	add	r3, r1
 80027ac:	3358      	adds	r3, #88	; 0x58
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	0151      	lsls	r1, r2, #5
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	440a      	add	r2, r1
 80027c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 fc5a 	bl	8006096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ee:	461a      	mov	r2, r3
 80027f0:	2340      	movs	r3, #64	; 0x40
 80027f2:	6093      	str	r3, [r2, #8]
}
 80027f4:	e2a6      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800280c:	d122      	bne.n	8002854 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	0151      	lsls	r1, r2, #5
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	440a      	add	r2, r1
 8002824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f003 fc2c 	bl	8006096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002850:	6093      	str	r3, [r2, #8]
}
 8002852:	e277      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d135      	bne.n	80028d6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	3358      	adds	r3, #88	; 0x58
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	0151      	lsls	r1, r2, #5
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	440a      	add	r2, r1
 8002894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 fbf4 	bl	8006096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	461a      	mov	r2, r3
 80028bc:	2301      	movs	r3, #1
 80028be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	335d      	adds	r3, #93	; 0x5d
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
}
 80028d4:	e236      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d12b      	bne.n	8002944 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	461a      	mov	r2, r3
 80028fa:	2308      	movs	r3, #8
 80028fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	0151      	lsls	r1, r2, #5
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	440a      	add	r2, r1
 8002914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f003 fbb4 	bl	8006096 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	335d      	adds	r3, #93	; 0x5d
 800293e:	2205      	movs	r2, #5
 8002940:	701a      	strb	r2, [r3, #0]
}
 8002942:	e1ff      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b10      	cmp	r3, #16
 8002958:	d155      	bne.n	8002a06 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	3358      	adds	r3, #88	; 0x58
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	335d      	adds	r3, #93	; 0x5d
 800297e:	2203      	movs	r2, #3
 8002980:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	333d      	adds	r3, #61	; 0x3d
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d114      	bne.n	80029c2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	333c      	adds	r3, #60	; 0x3c
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	333d      	adds	r3, #61	; 0x3d
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	0151      	lsls	r1, r2, #5
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	440a      	add	r2, r1
 80029d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fb52 	bl	8006096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	461a      	mov	r2, r3
 8002a00:	2310      	movs	r3, #16
 8002a02:	6093      	str	r3, [r2, #8]
}
 8002a04:	e19e      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	2b80      	cmp	r3, #128	; 0x80
 8002a1a:	d12b      	bne.n	8002a74 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	0151      	lsls	r1, r2, #5
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	440a      	add	r2, r1
 8002a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a36:	f043 0302 	orr.w	r3, r3, #2
 8002a3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 fb25 	bl	8006096 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	335d      	adds	r3, #93	; 0x5d
 8002a5c:	2206      	movs	r2, #6
 8002a5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	6093      	str	r3, [r2, #8]
}
 8002a72:	e167      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8a:	d135      	bne.n	8002af8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	0151      	lsls	r1, r2, #5
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 faed 	bl	8006096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2310      	movs	r3, #16
 8002acc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ada:	461a      	mov	r2, r3
 8002adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	335d      	adds	r3, #93	; 0x5d
 8002af2:	2208      	movs	r2, #8
 8002af4:	701a      	strb	r2, [r3, #0]
}
 8002af6:	e125      	b.n	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	f040 811a 	bne.w	8002d44 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2a:	f023 0302 	bic.w	r3, r3, #2
 8002b2e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	335d      	adds	r3, #93	; 0x5d
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d137      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	335c      	adds	r3, #92	; 0x5c
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	333f      	adds	r3, #63	; 0x3f
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d00b      	beq.n	8002b88 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	333f      	adds	r3, #63	; 0x3f
 8002b80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	f040 80c5 	bne.w	8002d12 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	3351      	adds	r3, #81	; 0x51
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	f083 0301 	eor.w	r3, r3, #1
 8002b9e:	b2d8      	uxtb	r0, r3
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	3351      	adds	r3, #81	; 0x51
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e0ad      	b.n	8002d12 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	335d      	adds	r3, #93	; 0x5d
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d10a      	bne.n	8002be2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	335c      	adds	r3, #92	; 0x5c
 8002bdc:	2202      	movs	r2, #2
 8002bde:	701a      	strb	r2, [r3, #0]
 8002be0:	e097      	b.n	8002d12 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	335d      	adds	r3, #93	; 0x5d
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d10a      	bne.n	8002c0e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	335c      	adds	r3, #92	; 0x5c
 8002c08:	2202      	movs	r2, #2
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e081      	b.n	8002d12 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	335d      	adds	r3, #93	; 0x5d
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d10a      	bne.n	8002c3a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	335c      	adds	r3, #92	; 0x5c
 8002c34:	2205      	movs	r2, #5
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e06b      	b.n	8002d12 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	335d      	adds	r3, #93	; 0x5d
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	d00a      	beq.n	8002c66 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	335d      	adds	r3, #93	; 0x5d
 8002c60:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d155      	bne.n	8002d12 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	3358      	adds	r3, #88	; 0x58
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1c59      	adds	r1, r3, #1
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4403      	add	r3, r0
 8002c88:	3358      	adds	r3, #88	; 0x58
 8002c8a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	3358      	adds	r3, #88	; 0x58
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d914      	bls.n	8002ccc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	3358      	adds	r3, #88	; 0x58
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	335c      	adds	r3, #92	; 0x5c
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	e009      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	335c      	adds	r3, #92	; 0x5c
 8002cdc:	2202      	movs	r2, #2
 8002cde:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cf6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cfe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2302      	movs	r3, #2
 8002d22:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	b2d8      	uxtb	r0, r3
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4601      	mov	r1, r0
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f009 ff14 	bl	800cb6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d44:	bf00      	nop
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	0c5b      	lsrs	r3, r3, #17
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d80:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d003      	beq.n	8002d90 <HCD_RXQLVL_IRQHandler+0x44>
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	f000 8082 	beq.w	8002e92 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d8e:	e083      	b.n	8002e98 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d07f      	beq.n	8002e96 <HCD_RXQLVL_IRQHandler+0x14a>
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	3344      	adds	r3, #68	; 0x44
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d074      	beq.n	8002e96 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3344      	adds	r3, #68	; 0x44
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f002 fd03 	bl	80057d2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	3344      	adds	r3, #68	; 0x44
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	18d1      	adds	r1, r2, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4403      	add	r3, r0
 8002df0:	3344      	adds	r3, #68	; 0x44
 8002df2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	334c      	adds	r3, #76	; 0x4c
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	18d1      	adds	r1, r2, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4403      	add	r3, r0
 8002e18:	334c      	adds	r3, #76	; 0x4c
 8002e1a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HCD_RXQLVL_IRQHandler+0x154>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d031      	beq.n	8002e96 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e48:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e50:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3350      	adds	r3, #80	; 0x50
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	f083 0301 	eor.w	r3, r3, #1
 8002e7a:	b2d8      	uxtb	r0, r3
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	3350      	adds	r3, #80	; 0x50
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	701a      	strb	r2, [r3, #0]
      break;
 8002e90:	e001      	b.n	8002e96 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002e96:	bf00      	nop
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3728      	adds	r7, #40	; 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	1ff80000 	.word	0x1ff80000

08002ea4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ed0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d10b      	bne.n	8002ef4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d102      	bne.n	8002eec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f009 fe24 	bl	800cb34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f043 0302 	orr.w	r3, r3, #2
 8002ef2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d132      	bne.n	8002f64 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d126      	bne.n	8002f5e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d113      	bne.n	8002f40 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f22:	d106      	bne.n	8002f32 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2102      	movs	r1, #2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 fd8c 	bl	8005a48 <USB_InitFSLSPClkSel>
 8002f30:	e011      	b.n	8002f56 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 fd85 	bl	8005a48 <USB_InitFSLSPClkSel>
 8002f3e:	e00a      	b.n	8002f56 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d106      	bne.n	8002f56 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f54:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f009 fe1a 	bl	800cb90 <HAL_HCD_PortEnabled_Callback>
 8002f5c:	e002      	b.n	8002f64 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f009 fe24 	bl	800cbac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d103      	bne.n	8002f76 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f043 0320 	orr.w	r3, r3, #32
 8002f74:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	6013      	str	r3, [r2, #0]
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e11f      	b.n	80031de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fdc6 	bl	8000b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	; 0x24
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f001 f9de 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4a7b      	ldr	r2, [pc, #492]	; (80031e8 <HAL_I2C_Init+0x25c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d807      	bhi.n	8003010 <HAL_I2C_Init+0x84>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a7a      	ldr	r2, [pc, #488]	; (80031ec <HAL_I2C_Init+0x260>)
 8003004:	4293      	cmp	r3, r2
 8003006:	bf94      	ite	ls
 8003008:	2301      	movls	r3, #1
 800300a:	2300      	movhi	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e006      	b.n	800301e <HAL_I2C_Init+0x92>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a77      	ldr	r2, [pc, #476]	; (80031f0 <HAL_I2C_Init+0x264>)
 8003014:	4293      	cmp	r3, r2
 8003016:	bf94      	ite	ls
 8003018:	2301      	movls	r3, #1
 800301a:	2300      	movhi	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0db      	b.n	80031de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a72      	ldr	r2, [pc, #456]	; (80031f4 <HAL_I2C_Init+0x268>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0c9b      	lsrs	r3, r3, #18
 8003030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4a64      	ldr	r2, [pc, #400]	; (80031e8 <HAL_I2C_Init+0x25c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d802      	bhi.n	8003060 <HAL_I2C_Init+0xd4>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3301      	adds	r3, #1
 800305e:	e009      	b.n	8003074 <HAL_I2C_Init+0xe8>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	4a63      	ldr	r2, [pc, #396]	; (80031f8 <HAL_I2C_Init+0x26c>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	3301      	adds	r3, #1
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	430b      	orrs	r3, r1
 800307a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003086:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4956      	ldr	r1, [pc, #344]	; (80031e8 <HAL_I2C_Init+0x25c>)
 8003090:	428b      	cmp	r3, r1
 8003092:	d80d      	bhi.n	80030b0 <HAL_I2C_Init+0x124>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e59      	subs	r1, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	bf38      	it	cc
 80030ac:	2304      	movcc	r3, #4
 80030ae:	e04f      	b.n	8003150 <HAL_I2C_Init+0x1c4>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <HAL_I2C_Init+0x150>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e58      	subs	r0, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	440b      	add	r3, r1
 80030c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e012      	b.n	8003102 <HAL_I2C_Init+0x176>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	0099      	lsls	r1, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Init+0x17e>
 8003106:	2301      	movs	r3, #1
 8003108:	e022      	b.n	8003150 <HAL_I2C_Init+0x1c4>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10e      	bne.n	8003130 <HAL_I2C_Init+0x1a4>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1e58      	subs	r0, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	440b      	add	r3, r1
 8003120:	fbb0 f3f3 	udiv	r3, r0, r3
 8003124:	3301      	adds	r3, #1
 8003126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800312e:	e00f      	b.n	8003150 <HAL_I2C_Init+0x1c4>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	0099      	lsls	r1, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	6809      	ldr	r1, [r1, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800317e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6911      	ldr	r1, [r2, #16]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68d2      	ldr	r2, [r2, #12]
 800318a:	4311      	orrs	r1, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	430b      	orrs	r3, r1
 8003192:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	000186a0 	.word	0x000186a0
 80031ec:	001e847f 	.word	0x001e847f
 80031f0:	003d08ff 	.word	0x003d08ff
 80031f4:	431bde83 	.word	0x431bde83
 80031f8:	10624dd3 	.word	0x10624dd3

080031fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e128      	b.n	8003460 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a90      	ldr	r2, [pc, #576]	; (8003468 <HAL_I2S_Init+0x26c>)
 8003226:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7fd fcd3 	bl	8000bd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003244:	f023 030f 	bic.w	r3, r3, #15
 8003248:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2202      	movs	r2, #2
 8003250:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d060      	beq.n	800331c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003262:	2310      	movs	r3, #16
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	e001      	b.n	800326c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003268:	2320      	movs	r3, #32
 800326a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b20      	cmp	r3, #32
 8003272:	d802      	bhi.n	800327a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800327a:	2001      	movs	r0, #1
 800327c:	f001 f9d4 	bl	8004628 <HAL_RCCEx_GetPeriphCLKFreq>
 8003280:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328a:	d125      	bne.n	80032d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	fbb2 f2f3 	udiv	r2, r2, r3
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	3305      	adds	r3, #5
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	e01f      	b.n	80032f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	461a      	mov	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	3305      	adds	r3, #5
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e00e      	b.n	80032f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	461a      	mov	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	3305      	adds	r3, #5
 80032f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4a5c      	ldr	r2, [pc, #368]	; (800346c <HAL_I2S_Init+0x270>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	08db      	lsrs	r3, r3, #3
 8003300:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	e003      	b.n	8003324 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800331c:	2302      	movs	r3, #2
 800331e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d902      	bls.n	8003330 <HAL_I2S_Init+0x134>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2bff      	cmp	r3, #255	; 0xff
 800332e:	d907      	bls.n	8003340 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f043 0210 	orr.w	r2, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e08f      	b.n	8003460 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	ea42 0103 	orr.w	r1, r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	430a      	orrs	r2, r1
 8003352:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800335e:	f023 030f 	bic.w	r3, r3, #15
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6851      	ldr	r1, [r2, #4]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68d2      	ldr	r2, [r2, #12]
 8003370:	4311      	orrs	r1, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6992      	ldr	r2, [r2, #24]
 8003376:	430a      	orrs	r2, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003382:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d161      	bne.n	8003450 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a38      	ldr	r2, [pc, #224]	; (8003470 <HAL_I2S_Init+0x274>)
 8003390:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a37      	ldr	r2, [pc, #220]	; (8003474 <HAL_I2S_Init+0x278>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <HAL_I2S_Init+0x1a4>
 800339c:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_I2S_Init+0x27c>)
 800339e:	e001      	b.n	80033a4 <HAL_I2S_Init+0x1a8>
 80033a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	4932      	ldr	r1, [pc, #200]	; (8003474 <HAL_I2S_Init+0x278>)
 80033ac:	428a      	cmp	r2, r1
 80033ae:	d101      	bne.n	80033b4 <HAL_I2S_Init+0x1b8>
 80033b0:	4a31      	ldr	r2, [pc, #196]	; (8003478 <HAL_I2S_Init+0x27c>)
 80033b2:	e001      	b.n	80033b8 <HAL_I2S_Init+0x1bc>
 80033b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033bc:	f023 030f 	bic.w	r3, r3, #15
 80033c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <HAL_I2S_Init+0x278>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_I2S_Init+0x1d4>
 80033cc:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_I2S_Init+0x27c>)
 80033ce:	e001      	b.n	80033d4 <HAL_I2S_Init+0x1d8>
 80033d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d4:	2202      	movs	r2, #2
 80033d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a25      	ldr	r2, [pc, #148]	; (8003474 <HAL_I2S_Init+0x278>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_I2S_Init+0x1ea>
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_I2S_Init+0x27c>)
 80033e4:	e001      	b.n	80033ea <HAL_I2S_Init+0x1ee>
 80033e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f6:	d003      	beq.n	8003400 <HAL_I2S_Init+0x204>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	e001      	b.n	800340c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	b299      	uxth	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003422:	4303      	orrs	r3, r0
 8003424:	b29b      	uxth	r3, r3
 8003426:	430b      	orrs	r3, r1
 8003428:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800342a:	4313      	orrs	r3, r2
 800342c:	b29a      	uxth	r2, r3
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	4313      	orrs	r3, r2
 8003432:	b29b      	uxth	r3, r3
 8003434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003438:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a0d      	ldr	r2, [pc, #52]	; (8003474 <HAL_I2S_Init+0x278>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <HAL_I2S_Init+0x24c>
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_I2S_Init+0x27c>)
 8003446:	e001      	b.n	800344c <HAL_I2S_Init+0x250>
 8003448:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800344c:	897a      	ldrh	r2, [r7, #10]
 800344e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3720      	adds	r7, #32
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	08003573 	.word	0x08003573
 800346c:	cccccccd 	.word	0xcccccccd
 8003470:	08003689 	.word	0x08003689
 8003474:	40003800 	.word	0x40003800
 8003478:	40003400 	.word	0x40003400

0800347c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	1c9a      	adds	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10e      	bne.n	800350c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffb8 	bl	800347c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	b292      	uxth	r2, r2
 8003528:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	1c9a      	adds	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10e      	bne.n	800356a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800355a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff93 	bl	8003490 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b04      	cmp	r3, #4
 800358c:	d13a      	bne.n	8003604 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d109      	bne.n	80035ac <I2S_IRQHandler+0x3a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d102      	bne.n	80035ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ffb4 	bl	8003514 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d126      	bne.n	8003604 <I2S_IRQHandler+0x92>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d11f      	bne.n	8003604 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f043 0202 	orr.w	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ff50 	bl	80034a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b03      	cmp	r3, #3
 800360e:	d136      	bne.n	800367e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d109      	bne.n	800362e <I2S_IRQHandler+0xbc>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b80      	cmp	r3, #128	; 0x80
 8003626:	d102      	bne.n	800362e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff45 	bl	80034b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b08      	cmp	r3, #8
 8003636:	d122      	bne.n	800367e <I2S_IRQHandler+0x10c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b20      	cmp	r3, #32
 8003644:	d11b      	bne.n	800367e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003654:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff13 	bl	80034a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4aa2      	ldr	r2, [pc, #648]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036a2:	4ba2      	ldr	r3, [pc, #648]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036a4:	e001      	b.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a9b      	ldr	r2, [pc, #620]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036c0:	4b9a      	ldr	r3, [pc, #616]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036c2:	e001      	b.n	80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d4:	d004      	beq.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 8099 	bne.w	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d107      	bne.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f925 	bl	8003944 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d107      	bne.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f9c8 	bl	8003aa4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d13a      	bne.n	8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d035      	beq.n	8003794 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a7e      	ldr	r2, [pc, #504]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003732:	4b7e      	ldr	r3, [pc, #504]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003734:	e001      	b.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4979      	ldr	r1, [pc, #484]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003742:	428b      	cmp	r3, r1
 8003744:	d101      	bne.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003746:	4b79      	ldr	r3, [pc, #484]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003748:	e001      	b.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800374a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003752:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003762:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f043 0202 	orr.w	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fe88 	bl	80034a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b08      	cmp	r3, #8
 800379c:	f040 80be 	bne.w	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80b8 	beq.w	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a59      	ldr	r2, [pc, #356]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037c6:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c8:	e001      	b.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4954      	ldr	r1, [pc, #336]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037d6:	428b      	cmp	r3, r1
 80037d8:	d101      	bne.n	80037de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037da:	4b54      	ldr	r3, [pc, #336]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037dc:	e001      	b.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f043 0204 	orr.w	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fe4a 	bl	80034a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003810:	e084      	b.n	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	d107      	bne.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8be 	bl	80039a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8fd 	bl	8003a40 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d12f      	bne.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02a      	beq.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003868:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003874:	4b2d      	ldr	r3, [pc, #180]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003876:	e001      	b.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003878:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4929      	ldr	r1, [pc, #164]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003884:	428b      	cmp	r3, r1
 8003886:	d101      	bne.n	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003888:	4b28      	ldr	r3, [pc, #160]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800388a:	e001      	b.n	8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800388c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003890:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003894:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f043 0202 	orr.w	r2, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff fdfa 	bl	80034a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d131      	bne.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02c      	beq.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a17      	ldr	r2, [pc, #92]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038ce:	4b17      	ldr	r3, [pc, #92]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038d0:	e001      	b.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4912      	ldr	r1, [pc, #72]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038de:	428b      	cmp	r3, r1
 80038e0:	d101      	bne.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038e4:	e001      	b.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80038e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038fe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	f043 0204 	orr.w	r2, r3, #4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff fdc5 	bl	80034a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800391a:	e000      	b.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800391c:	bf00      	nop
}
 800391e:	bf00      	nop
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40003800 	.word	0x40003800
 800392c:	40003400 	.word	0x40003400

08003930 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c99      	adds	r1, r3, #2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6251      	str	r1, [r2, #36]	; 0x24
 8003956:	881a      	ldrh	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d113      	bne.n	800399e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003984:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ffc9 	bl	8003930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c99      	adds	r1, r3, #2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6251      	str	r1, [r2, #36]	; 0x24
 80039ba:	8819      	ldrh	r1, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <I2SEx_TxISR_I2SExt+0x90>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <I2SEx_TxISR_I2SExt+0x22>
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <I2SEx_TxISR_I2SExt+0x94>)
 80039c8:	e001      	b.n	80039ce <I2SEx_TxISR_I2SExt+0x26>
 80039ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ce:	460a      	mov	r2, r1
 80039d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d121      	bne.n	8003a2e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <I2SEx_TxISR_I2SExt+0x90>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <I2SEx_TxISR_I2SExt+0x50>
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <I2SEx_TxISR_I2SExt+0x94>)
 80039f6:	e001      	b.n	80039fc <I2SEx_TxISR_I2SExt+0x54>
 80039f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	490d      	ldr	r1, [pc, #52]	; (8003a38 <I2SEx_TxISR_I2SExt+0x90>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d101      	bne.n	8003a0c <I2SEx_TxISR_I2SExt+0x64>
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <I2SEx_TxISR_I2SExt+0x94>)
 8003a0a:	e001      	b.n	8003a10 <I2SEx_TxISR_I2SExt+0x68>
 8003a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff ff81 	bl	8003930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40003800 	.word	0x40003800
 8003a3c:	40003400 	.word	0x40003400

08003a40 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68d8      	ldr	r0, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	1c99      	adds	r1, r3, #2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a58:	b282      	uxth	r2, r0
 8003a5a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d113      	bne.n	8003a9c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a82:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ff4a 	bl	8003930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <I2SEx_RxISR_I2SExt+0x90>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <I2SEx_RxISR_I2SExt+0x16>
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <I2SEx_RxISR_I2SExt+0x94>)
 8003ab8:	e001      	b.n	8003abe <I2SEx_RxISR_I2SExt+0x1a>
 8003aba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abe:	68d8      	ldr	r0, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	1c99      	adds	r1, r3, #2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003aca:	b282      	uxth	r2, r0
 8003acc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d121      	bne.n	8003b2a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <I2SEx_RxISR_I2SExt+0x90>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <I2SEx_RxISR_I2SExt+0x50>
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <I2SEx_RxISR_I2SExt+0x94>)
 8003af2:	e001      	b.n	8003af8 <I2SEx_RxISR_I2SExt+0x54>
 8003af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	490d      	ldr	r1, [pc, #52]	; (8003b34 <I2SEx_RxISR_I2SExt+0x90>)
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d101      	bne.n	8003b08 <I2SEx_RxISR_I2SExt+0x64>
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <I2SEx_RxISR_I2SExt+0x94>)
 8003b06:	e001      	b.n	8003b0c <I2SEx_RxISR_I2SExt+0x68>
 8003b08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b10:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ff03 	bl	8003930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40003800 	.word	0x40003800
 8003b38:	40003400 	.word	0x40003400

08003b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e25b      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d075      	beq.n	8003c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5a:	4ba3      	ldr	r3, [pc, #652]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d00c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b66:	4ba0      	ldr	r3, [pc, #640]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d112      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b72:	4b9d      	ldr	r3, [pc, #628]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	4b99      	ldr	r3, [pc, #612]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05b      	beq.n	8003c44 <HAL_RCC_OscConfig+0x108>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d157      	bne.n	8003c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e236      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x74>
 8003ba2:	4b91      	ldr	r3, [pc, #580]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a90      	ldr	r2, [pc, #576]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e01d      	b.n	8003bec <HAL_RCC_OscConfig+0xb0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x98>
 8003bba:	4b8b      	ldr	r3, [pc, #556]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a8a      	ldr	r2, [pc, #552]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b88      	ldr	r3, [pc, #544]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a87      	ldr	r2, [pc, #540]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0xb0>
 8003bd4:	4b84      	ldr	r3, [pc, #528]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a83      	ldr	r2, [pc, #524]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b81      	ldr	r3, [pc, #516]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a80      	ldr	r2, [pc, #512]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fa16 	bl	8001024 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7fd fa12 	bl	8001024 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e1fb      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b76      	ldr	r3, [pc, #472]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0xc0>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fa02 	bl	8001024 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c24:	f7fd f9fe 	bl	8001024 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e1e7      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c36:	4b6c      	ldr	r3, [pc, #432]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0xe8>
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d063      	beq.n	8003d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c52:	4b65      	ldr	r3, [pc, #404]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5e:	4b62      	ldr	r3, [pc, #392]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d11c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6a:	4b5f      	ldr	r3, [pc, #380]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d116      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1bb      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b56      	ldr	r3, [pc, #344]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4952      	ldr	r1, [pc, #328]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca2:	e03a      	b.n	8003d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cac:	4b4f      	ldr	r3, [pc, #316]	; (8003dec <HAL_RCC_OscConfig+0x2b0>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd f9b7 	bl	8001024 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cba:	f7fd f9b3 	bl	8001024 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e19c      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ccc:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4940      	ldr	r1, [pc, #256]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
 8003cec:	e015      	b.n	8003d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cee:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <HAL_RCC_OscConfig+0x2b0>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd f996 	bl	8001024 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7fd f992 	bl	8001024 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e17b      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0e:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d030      	beq.n	8003d88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <HAL_RCC_OscConfig+0x2b4>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fd f976 	bl	8001024 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7fd f972 	bl	8001024 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e15b      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4e:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x200>
 8003d5a:	e015      	b.n	8003d88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_RCC_OscConfig+0x2b4>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d62:	f7fd f95f 	bl	8001024 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7fd f95b 	bl	8001024 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e144      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f0      	bne.n	8003d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80a0 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10f      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a0e      	ldr	r2, [pc, #56]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_OscConfig+0x2b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d121      	bne.n	8003e16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_RCC_OscConfig+0x2b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <HAL_RCC_OscConfig+0x2b8>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dde:	f7fd f921 	bl	8001024 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	e011      	b.n	8003e0a <HAL_RCC_OscConfig+0x2ce>
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	42470000 	.word	0x42470000
 8003df0:	42470e80 	.word	0x42470e80
 8003df4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df8:	f7fd f914 	bl	8001024 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e0fd      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b81      	ldr	r3, [pc, #516]	; (8004010 <HAL_RCC_OscConfig+0x4d4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x2f0>
 8003e1e:	4b7d      	ldr	r3, [pc, #500]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a7c      	ldr	r2, [pc, #496]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	e01c      	b.n	8003e66 <HAL_RCC_OscConfig+0x32a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCC_OscConfig+0x312>
 8003e34:	4b77      	ldr	r3, [pc, #476]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a76      	ldr	r2, [pc, #472]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e40:	4b74      	ldr	r3, [pc, #464]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a73      	ldr	r2, [pc, #460]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4c:	e00b      	b.n	8003e66 <HAL_RCC_OscConfig+0x32a>
 8003e4e:	4b71      	ldr	r3, [pc, #452]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a70      	ldr	r2, [pc, #448]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5a:	4b6e      	ldr	r3, [pc, #440]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a6d      	ldr	r2, [pc, #436]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d015      	beq.n	8003e9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fd f8d9 	bl	8001024 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd f8d5 	bl	8001024 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0bc      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	4b61      	ldr	r3, [pc, #388]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ee      	beq.n	8003e76 <HAL_RCC_OscConfig+0x33a>
 8003e98:	e014      	b.n	8003ec4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fd f8c3 	bl	8001024 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fd f8bf 	bl	8001024 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0a6      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	4b56      	ldr	r3, [pc, #344]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ee      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b52      	ldr	r3, [pc, #328]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a51      	ldr	r2, [pc, #324]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8092 	beq.w	8004004 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ee0:	4b4c      	ldr	r3, [pc, #304]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d05c      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d141      	bne.n	8003f78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b48      	ldr	r3, [pc, #288]	; (8004018 <HAL_RCC_OscConfig+0x4dc>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efa:	f7fd f893 	bl	8001024 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f02:	f7fd f88f 	bl	8001024 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e078      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f14:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	019b      	lsls	r3, r3, #6
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	4933      	ldr	r1, [pc, #204]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f4a:	4b33      	ldr	r3, [pc, #204]	; (8004018 <HAL_RCC_OscConfig+0x4dc>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7fd f868 	bl	8001024 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fd f864 	bl	8001024 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e04d      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x41c>
 8003f76:	e045      	b.n	8004004 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <HAL_RCC_OscConfig+0x4dc>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7fd f851 	bl	8001024 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fd f84d 	bl	8001024 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e036      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f98:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0x44a>
 8003fa4:	e02e      	b.n	8004004 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e029      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <HAL_RCC_OscConfig+0x4d8>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d11c      	bne.n	8004000 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d115      	bne.n	8004000 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fda:	4013      	ands	r3, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d10d      	bne.n	8004000 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d106      	bne.n	8004000 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40007000 	.word	0x40007000
 8004014:	40023800 	.word	0x40023800
 8004018:	42470060 	.word	0x42470060

0800401c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0cc      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004030:	4b68      	ldr	r3, [pc, #416]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d90c      	bls.n	8004058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403e:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b63      	ldr	r3, [pc, #396]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0b8      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4a58      	ldr	r2, [pc, #352]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800407a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004088:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a52      	ldr	r2, [pc, #328]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004094:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	494d      	ldr	r1, [pc, #308]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d044      	beq.n	800413c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d119      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e07f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d003      	beq.n	80040da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e06f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ea:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e067      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fa:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 0203 	bic.w	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4934      	ldr	r1, [pc, #208]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800410c:	f7fc ff8a 	bl	8001024 <HAL_GetTick>
 8004110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	e00a      	b.n	800412a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004114:	f7fc ff86 	bl	8001024 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e04f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 020c 	and.w	r2, r3, #12
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	429a      	cmp	r2, r3
 800413a:	d1eb      	bne.n	8004114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800413c:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d20c      	bcs.n	8004164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b20      	ldr	r3, [pc, #128]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e032      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4916      	ldr	r1, [pc, #88]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	490e      	ldr	r1, [pc, #56]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041a2:	f000 f821 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80041a6:	4601      	mov	r1, r0
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <HAL_RCC_ClockConfig+0x1c0>)
 80041b4:	5cd3      	ldrb	r3, [r2, r3]
 80041b6:	fa21 f303 	lsr.w	r3, r1, r3
 80041ba:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc fdfe 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023c00 	.word	0x40023c00
 80041d8:	40023800 	.word	0x40023800
 80041dc:	0800d348 	.word	0x0800d348
 80041e0:	20000000 	.word	0x20000000
 80041e4:	20000004 	.word	0x20000004

080041e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	2300      	movs	r3, #0
 80041f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041fe:	4b63      	ldr	r3, [pc, #396]	; (800438c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b04      	cmp	r3, #4
 8004208:	d007      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x32>
 800420a:	2b08      	cmp	r3, #8
 800420c:	d008      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x38>
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 80b4 	bne.w	800437c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b5e      	ldr	r3, [pc, #376]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004216:	60bb      	str	r3, [r7, #8]
       break;
 8004218:	e0b3      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800421a:	4b5e      	ldr	r3, [pc, #376]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800421c:	60bb      	str	r3, [r7, #8]
      break;
 800421e:	e0b0      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004220:	4b5a      	ldr	r3, [pc, #360]	; (800438c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004228:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800422a:	4b58      	ldr	r3, [pc, #352]	; (800438c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d04a      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004236:	4b55      	ldr	r3, [pc, #340]	; (800438c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	f04f 0400 	mov.w	r4, #0
 8004240:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	ea03 0501 	and.w	r5, r3, r1
 800424c:	ea04 0602 	and.w	r6, r4, r2
 8004250:	4629      	mov	r1, r5
 8004252:	4632      	mov	r2, r6
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	f04f 0400 	mov.w	r4, #0
 800425c:	0154      	lsls	r4, r2, #5
 800425e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004262:	014b      	lsls	r3, r1, #5
 8004264:	4619      	mov	r1, r3
 8004266:	4622      	mov	r2, r4
 8004268:	1b49      	subs	r1, r1, r5
 800426a:	eb62 0206 	sbc.w	r2, r2, r6
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	f04f 0400 	mov.w	r4, #0
 8004276:	0194      	lsls	r4, r2, #6
 8004278:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800427c:	018b      	lsls	r3, r1, #6
 800427e:	1a5b      	subs	r3, r3, r1
 8004280:	eb64 0402 	sbc.w	r4, r4, r2
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	00e2      	lsls	r2, r4, #3
 800428e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004292:	00d9      	lsls	r1, r3, #3
 8004294:	460b      	mov	r3, r1
 8004296:	4614      	mov	r4, r2
 8004298:	195b      	adds	r3, r3, r5
 800429a:	eb44 0406 	adc.w	r4, r4, r6
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	0262      	lsls	r2, r4, #9
 80042a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042ac:	0259      	lsls	r1, r3, #9
 80042ae:	460b      	mov	r3, r1
 80042b0:	4614      	mov	r4, r2
 80042b2:	4618      	mov	r0, r3
 80042b4:	4621      	mov	r1, r4
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f04f 0400 	mov.w	r4, #0
 80042bc:	461a      	mov	r2, r3
 80042be:	4623      	mov	r3, r4
 80042c0:	f7fb ff86 	bl	80001d0 <__aeabi_uldivmod>
 80042c4:	4603      	mov	r3, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e049      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042cc:	4b2f      	ldr	r3, [pc, #188]	; (800438c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	f04f 0400 	mov.w	r4, #0
 80042d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	ea03 0501 	and.w	r5, r3, r1
 80042e2:	ea04 0602 	and.w	r6, r4, r2
 80042e6:	4629      	mov	r1, r5
 80042e8:	4632      	mov	r2, r6
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	f04f 0400 	mov.w	r4, #0
 80042f2:	0154      	lsls	r4, r2, #5
 80042f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042f8:	014b      	lsls	r3, r1, #5
 80042fa:	4619      	mov	r1, r3
 80042fc:	4622      	mov	r2, r4
 80042fe:	1b49      	subs	r1, r1, r5
 8004300:	eb62 0206 	sbc.w	r2, r2, r6
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	f04f 0400 	mov.w	r4, #0
 800430c:	0194      	lsls	r4, r2, #6
 800430e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004312:	018b      	lsls	r3, r1, #6
 8004314:	1a5b      	subs	r3, r3, r1
 8004316:	eb64 0402 	sbc.w	r4, r4, r2
 800431a:	f04f 0100 	mov.w	r1, #0
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	00e2      	lsls	r2, r4, #3
 8004324:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004328:	00d9      	lsls	r1, r3, #3
 800432a:	460b      	mov	r3, r1
 800432c:	4614      	mov	r4, r2
 800432e:	195b      	adds	r3, r3, r5
 8004330:	eb44 0406 	adc.w	r4, r4, r6
 8004334:	f04f 0100 	mov.w	r1, #0
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	02a2      	lsls	r2, r4, #10
 800433e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004342:	0299      	lsls	r1, r3, #10
 8004344:	460b      	mov	r3, r1
 8004346:	4614      	mov	r4, r2
 8004348:	4618      	mov	r0, r3
 800434a:	4621      	mov	r1, r4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f04f 0400 	mov.w	r4, #0
 8004352:	461a      	mov	r2, r3
 8004354:	4623      	mov	r3, r4
 8004356:	f7fb ff3b 	bl	80001d0 <__aeabi_uldivmod>
 800435a:	4603      	mov	r3, r0
 800435c:	460c      	mov	r4, r1
 800435e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	3301      	adds	r3, #1
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	60bb      	str	r3, [r7, #8]
      break;
 800437a:	e002      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800437e:	60bb      	str	r3, [r7, #8]
      break;
 8004380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004382:	68bb      	ldr	r3, [r7, #8]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800438c:	40023800 	.word	0x40023800
 8004390:	00f42400 	.word	0x00f42400
 8004394:	007a1200 	.word	0x007a1200

08004398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_RCC_GetHCLKFreq+0x14>)
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000000 	.word	0x20000000

080043b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043b4:	f7ff fff0 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043b8:	4601      	mov	r1, r0
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	0a9b      	lsrs	r3, r3, #10
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	4a03      	ldr	r2, [pc, #12]	; (80043d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c6:	5cd3      	ldrb	r3, [r2, r3]
 80043c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40023800 	.word	0x40023800
 80043d4:	0800d358 	.word	0x0800d358

080043d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043dc:	f7ff ffdc 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043e0:	4601      	mov	r1, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	0b5b      	lsrs	r3, r3, #13
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4a03      	ldr	r2, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ee:	5cd3      	ldrb	r3, [r2, r3]
 80043f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40023800 	.word	0x40023800
 80043fc:	0800d358 	.word	0x0800d358

08004400 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	220f      	movs	r2, #15
 800440e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004410:	4b12      	ldr	r3, [pc, #72]	; (800445c <HAL_RCC_GetClockConfig+0x5c>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0203 	and.w	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_RCC_GetClockConfig+0x5c>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <HAL_RCC_GetClockConfig+0x5c>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <HAL_RCC_GetClockConfig+0x5c>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	08db      	lsrs	r3, r3, #3
 800443a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <HAL_RCC_GetClockConfig+0x60>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 020f 	and.w	r2, r3, #15
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40023800 	.word	0x40023800
 8004460:	40023c00 	.word	0x40023c00

08004464 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004488:	2b00      	cmp	r3, #0
 800448a:	d035      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800448c:	4b62      	ldr	r3, [pc, #392]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004492:	f7fc fdc7 	bl	8001024 <HAL_GetTick>
 8004496:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800449a:	f7fc fdc3 	bl	8001024 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e0b0      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044ac:	4b5b      	ldr	r3, [pc, #364]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f0      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	019a      	lsls	r2, r3, #6
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	071b      	lsls	r3, r3, #28
 80044c4:	4955      	ldr	r1, [pc, #340]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044cc:	4b52      	ldr	r3, [pc, #328]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044d2:	f7fc fda7 	bl	8001024 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044da:	f7fc fda3 	bl	8001024 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e090      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ec:	4b4b      	ldr	r3, [pc, #300]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8083 	beq.w	800460c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	4b44      	ldr	r3, [pc, #272]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	4a43      	ldr	r2, [pc, #268]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004514:	6413      	str	r3, [r2, #64]	; 0x40
 8004516:	4b41      	ldr	r3, [pc, #260]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004522:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a3e      	ldr	r2, [pc, #248]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800452e:	f7fc fd79 	bl	8001024 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004536:	f7fc fd75 	bl	8001024 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e062      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004548:	4b35      	ldr	r3, [pc, #212]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004554:	4b31      	ldr	r3, [pc, #196]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02f      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	429a      	cmp	r2, r3
 8004570:	d028      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004572:	4b2a      	ldr	r3, [pc, #168]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800457c:	4b29      	ldr	r3, [pc, #164]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004582:	4b28      	ldr	r3, [pc, #160]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004588:	4a24      	ldr	r2, [pc, #144]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800458e:	4b23      	ldr	r3, [pc, #140]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b01      	cmp	r3, #1
 8004598:	d114      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800459a:	f7fc fd43 	bl	8001024 <HAL_GetTick>
 800459e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a0:	e00a      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a2:	f7fc fd3f 	bl	8001024 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e02a      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ee      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d0:	d10d      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e6:	490d      	ldr	r1, [pc, #52]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	608b      	str	r3, [r1, #8]
 80045ec:	e005      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045ee:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	4a0a      	ldr	r2, [pc, #40]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045f8:	6093      	str	r3, [r2, #8]
 80045fa:	4b08      	ldr	r3, [pc, #32]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004606:	4905      	ldr	r1, [pc, #20]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	42470068 	.word	0x42470068
 800461c:	40023800 	.word	0x40023800
 8004620:	40007000 	.word	0x40007000
 8004624:	42470e40 	.word	0x42470e40

08004628 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d13d      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004646:	4b22      	ldr	r3, [pc, #136]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800464e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004656:	2b01      	cmp	r3, #1
 8004658:	d12f      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800465a:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800465c:	617b      	str	r3, [r7, #20]
          break;
 800465e:	e02f      	b.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004660:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800466c:	d108      	bne.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	e007      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004680:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004688:	4a14      	ldr	r2, [pc, #80]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004690:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80046a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046aa:	0f1b      	lsrs	r3, r3, #28
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	617b      	str	r3, [r7, #20]
          break;
 80046b8:	e002      	b.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
          break;
 80046be:	bf00      	nop
        }
      }
      break;
 80046c0:	bf00      	nop
    }
  }
  return frequency;
 80046c2:	697b      	ldr	r3, [r7, #20]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	40023800 	.word	0x40023800
 80046d4:	00bb8000 	.word	0x00bb8000
 80046d8:	007a1200 	.word	0x007a1200
 80046dc:	00f42400 	.word	0x00f42400

080046e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e056      	b.n	80047a0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d106      	bne.n	8004712 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7fc fac9 	bl	8000ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004728:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	ea42 0103 	orr.w	r1, r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	0c1b      	lsrs	r3, r3, #16
 8004770:	f003 0104 	and.w	r1, r3, #4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e01d      	b.n	80047f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f815 	bl	80047fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 f968 	bl	8004abc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b06      	cmp	r3, #6
 800483a:	d007      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b02      	cmp	r3, #2
 800486e:	d122      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d11b      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 0202 	mvn.w	r2, #2
 8004886:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f8ee 	bl	8004a7e <HAL_TIM_IC_CaptureCallback>
 80048a2:	e005      	b.n	80048b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f8e0 	bl	8004a6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f8f1 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d122      	bne.n	800490a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d11b      	bne.n	800490a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0204 	mvn.w	r2, #4
 80048da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8c4 	bl	8004a7e <HAL_TIM_IC_CaptureCallback>
 80048f6:	e005      	b.n	8004904 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f8b6 	bl	8004a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8c7 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d122      	bne.n	800495e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b08      	cmp	r3, #8
 8004924:	d11b      	bne.n	800495e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0208 	mvn.w	r2, #8
 800492e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2204      	movs	r2, #4
 8004934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f89a 	bl	8004a7e <HAL_TIM_IC_CaptureCallback>
 800494a:	e005      	b.n	8004958 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f88c 	bl	8004a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f89d 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b10      	cmp	r3, #16
 800496a:	d122      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d11b      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f06f 0210 	mvn.w	r2, #16
 8004982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2208      	movs	r2, #8
 8004988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f870 	bl	8004a7e <HAL_TIM_IC_CaptureCallback>
 800499e:	e005      	b.n	80049ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f862 	bl	8004a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f873 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d10e      	bne.n	80049de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d107      	bne.n	80049de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f06f 0201 	mvn.w	r2, #1
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fc f871 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e8:	2b80      	cmp	r3, #128	; 0x80
 80049ea:	d10e      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d107      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f903 	bl	8004c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b40      	cmp	r3, #64	; 0x40
 8004a16:	d10e      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	d107      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f838 	bl	8004aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d10e      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d107      	bne.n	8004a62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f06f 0220 	mvn.w	r2, #32
 8004a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8cd 	bl	8004bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a40      	ldr	r2, [pc, #256]	; (8004bd0 <TIM_Base_SetConfig+0x114>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ada:	d00f      	beq.n	8004afc <TIM_Base_SetConfig+0x40>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a3d      	ldr	r2, [pc, #244]	; (8004bd4 <TIM_Base_SetConfig+0x118>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <TIM_Base_SetConfig+0x40>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a3c      	ldr	r2, [pc, #240]	; (8004bd8 <TIM_Base_SetConfig+0x11c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_Base_SetConfig+0x40>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a3b      	ldr	r2, [pc, #236]	; (8004bdc <TIM_Base_SetConfig+0x120>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_Base_SetConfig+0x40>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a3a      	ldr	r2, [pc, #232]	; (8004be0 <TIM_Base_SetConfig+0x124>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d108      	bne.n	8004b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2f      	ldr	r2, [pc, #188]	; (8004bd0 <TIM_Base_SetConfig+0x114>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d02b      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1c:	d027      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a2c      	ldr	r2, [pc, #176]	; (8004bd4 <TIM_Base_SetConfig+0x118>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d023      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2b      	ldr	r2, [pc, #172]	; (8004bd8 <TIM_Base_SetConfig+0x11c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d01f      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a2a      	ldr	r2, [pc, #168]	; (8004bdc <TIM_Base_SetConfig+0x120>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01b      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a29      	ldr	r2, [pc, #164]	; (8004be0 <TIM_Base_SetConfig+0x124>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d017      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <TIM_Base_SetConfig+0x128>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a27      	ldr	r2, [pc, #156]	; (8004be8 <TIM_Base_SetConfig+0x12c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00f      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a26      	ldr	r2, [pc, #152]	; (8004bec <TIM_Base_SetConfig+0x130>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00b      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a25      	ldr	r2, [pc, #148]	; (8004bf0 <TIM_Base_SetConfig+0x134>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d007      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a24      	ldr	r2, [pc, #144]	; (8004bf4 <TIM_Base_SetConfig+0x138>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a23      	ldr	r2, [pc, #140]	; (8004bf8 <TIM_Base_SetConfig+0x13c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d108      	bne.n	8004b80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <TIM_Base_SetConfig+0x114>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_Base_SetConfig+0xf8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <TIM_Base_SetConfig+0x124>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d103      	bne.n	8004bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	615a      	str	r2, [r3, #20]
}
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800
 8004bdc:	40000c00 	.word	0x40000c00
 8004be0:	40010400 	.word	0x40010400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40014400 	.word	0x40014400
 8004bec:	40014800 	.word	0x40014800
 8004bf0:	40001800 	.word	0x40001800
 8004bf4:	40001c00 	.word	0x40001c00
 8004bf8:	40002000 	.word	0x40002000

08004bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e03f      	b.n	8004cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc f872 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2224      	movs	r2, #36	; 0x24
 8004c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f90b 	bl	8004e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b088      	sub	sp, #32
 8004cc2:	af02      	add	r7, sp, #8
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	f040 8083 	bne.w	8004de6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_UART_Transmit+0x2e>
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e07b      	b.n	8004de8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Transmit+0x40>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e074      	b.n	8004de8 <HAL_UART_Transmit+0x12a>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2221      	movs	r2, #33	; 0x21
 8004d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d14:	f7fc f986 	bl	8001024 <HAL_GetTick>
 8004d18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d2e:	e042      	b.n	8004db6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d46:	d122      	bne.n	8004d8e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f84c 	bl	8004df0 <UART_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e042      	b.n	8004de8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d74:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	3302      	adds	r3, #2
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	e017      	b.n	8004db6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	e013      	b.n	8004db6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2180      	movs	r1, #128	; 0x80
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f829 	bl	8004df0 <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e01f      	b.n	8004de8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	60ba      	str	r2, [r7, #8]
 8004dae:	781a      	ldrb	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1b7      	bne.n	8004d30 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f810 	bl	8004df0 <UART_WaitOnFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e006      	b.n	8004de8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e000      	b.n	8004de8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
  }
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e00:	e02c      	b.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d028      	beq.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e10:	f7fc f908 	bl	8001024 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d21d      	bcs.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e00f      	b.n	8004e7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4013      	ands	r3, r2
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d0c3      	beq.n	8004e02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ec6:	f023 030c 	bic.w	r3, r3, #12
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	68f9      	ldr	r1, [r7, #12]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef2:	f040 818b 	bne.w	800520c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4ac1      	ldr	r2, [pc, #772]	; (8005200 <UART_SetConfig+0x37c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d005      	beq.n	8004f0c <UART_SetConfig+0x88>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4abf      	ldr	r2, [pc, #764]	; (8005204 <UART_SetConfig+0x380>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	f040 80bd 	bne.w	8005086 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f0c:	f7ff fa64 	bl	80043d8 <HAL_RCC_GetPCLK2Freq>
 8004f10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	461d      	mov	r5, r3
 8004f16:	f04f 0600 	mov.w	r6, #0
 8004f1a:	46a8      	mov	r8, r5
 8004f1c:	46b1      	mov	r9, r6
 8004f1e:	eb18 0308 	adds.w	r3, r8, r8
 8004f22:	eb49 0409 	adc.w	r4, r9, r9
 8004f26:	4698      	mov	r8, r3
 8004f28:	46a1      	mov	r9, r4
 8004f2a:	eb18 0805 	adds.w	r8, r8, r5
 8004f2e:	eb49 0906 	adc.w	r9, r9, r6
 8004f32:	f04f 0100 	mov.w	r1, #0
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f46:	4688      	mov	r8, r1
 8004f48:	4691      	mov	r9, r2
 8004f4a:	eb18 0005 	adds.w	r0, r8, r5
 8004f4e:	eb49 0106 	adc.w	r1, r9, r6
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	461d      	mov	r5, r3
 8004f58:	f04f 0600 	mov.w	r6, #0
 8004f5c:	196b      	adds	r3, r5, r5
 8004f5e:	eb46 0406 	adc.w	r4, r6, r6
 8004f62:	461a      	mov	r2, r3
 8004f64:	4623      	mov	r3, r4
 8004f66:	f7fb f933 	bl	80001d0 <__aeabi_uldivmod>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4ba5      	ldr	r3, [pc, #660]	; (8005208 <UART_SetConfig+0x384>)
 8004f72:	fba3 2302 	umull	r2, r3, r3, r2
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	461d      	mov	r5, r3
 8004f80:	f04f 0600 	mov.w	r6, #0
 8004f84:	46a9      	mov	r9, r5
 8004f86:	46b2      	mov	sl, r6
 8004f88:	eb19 0309 	adds.w	r3, r9, r9
 8004f8c:	eb4a 040a 	adc.w	r4, sl, sl
 8004f90:	4699      	mov	r9, r3
 8004f92:	46a2      	mov	sl, r4
 8004f94:	eb19 0905 	adds.w	r9, r9, r5
 8004f98:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fb0:	4689      	mov	r9, r1
 8004fb2:	4692      	mov	sl, r2
 8004fb4:	eb19 0005 	adds.w	r0, r9, r5
 8004fb8:	eb4a 0106 	adc.w	r1, sl, r6
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	461d      	mov	r5, r3
 8004fc2:	f04f 0600 	mov.w	r6, #0
 8004fc6:	196b      	adds	r3, r5, r5
 8004fc8:	eb46 0406 	adc.w	r4, r6, r6
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	f7fb f8fe 	bl	80001d0 <__aeabi_uldivmod>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4b8b      	ldr	r3, [pc, #556]	; (8005208 <UART_SetConfig+0x384>)
 8004fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	2164      	movs	r1, #100	; 0x64
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	3332      	adds	r3, #50	; 0x32
 8004fee:	4a86      	ldr	r2, [pc, #536]	; (8005208 <UART_SetConfig+0x384>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ffc:	4498      	add	r8, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	461d      	mov	r5, r3
 8005002:	f04f 0600 	mov.w	r6, #0
 8005006:	46a9      	mov	r9, r5
 8005008:	46b2      	mov	sl, r6
 800500a:	eb19 0309 	adds.w	r3, r9, r9
 800500e:	eb4a 040a 	adc.w	r4, sl, sl
 8005012:	4699      	mov	r9, r3
 8005014:	46a2      	mov	sl, r4
 8005016:	eb19 0905 	adds.w	r9, r9, r5
 800501a:	eb4a 0a06 	adc.w	sl, sl, r6
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800502a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800502e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005032:	4689      	mov	r9, r1
 8005034:	4692      	mov	sl, r2
 8005036:	eb19 0005 	adds.w	r0, r9, r5
 800503a:	eb4a 0106 	adc.w	r1, sl, r6
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	461d      	mov	r5, r3
 8005044:	f04f 0600 	mov.w	r6, #0
 8005048:	196b      	adds	r3, r5, r5
 800504a:	eb46 0406 	adc.w	r4, r6, r6
 800504e:	461a      	mov	r2, r3
 8005050:	4623      	mov	r3, r4
 8005052:	f7fb f8bd 	bl	80001d0 <__aeabi_uldivmod>
 8005056:	4603      	mov	r3, r0
 8005058:	460c      	mov	r4, r1
 800505a:	461a      	mov	r2, r3
 800505c:	4b6a      	ldr	r3, [pc, #424]	; (8005208 <UART_SetConfig+0x384>)
 800505e:	fba3 1302 	umull	r1, r3, r3, r2
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2164      	movs	r1, #100	; 0x64
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	3332      	adds	r3, #50	; 0x32
 8005070:	4a65      	ldr	r2, [pc, #404]	; (8005208 <UART_SetConfig+0x384>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	f003 0207 	and.w	r2, r3, #7
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4442      	add	r2, r8
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	e26f      	b.n	8005566 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005086:	f7ff f993 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 800508a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	461d      	mov	r5, r3
 8005090:	f04f 0600 	mov.w	r6, #0
 8005094:	46a8      	mov	r8, r5
 8005096:	46b1      	mov	r9, r6
 8005098:	eb18 0308 	adds.w	r3, r8, r8
 800509c:	eb49 0409 	adc.w	r4, r9, r9
 80050a0:	4698      	mov	r8, r3
 80050a2:	46a1      	mov	r9, r4
 80050a4:	eb18 0805 	adds.w	r8, r8, r5
 80050a8:	eb49 0906 	adc.w	r9, r9, r6
 80050ac:	f04f 0100 	mov.w	r1, #0
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050c0:	4688      	mov	r8, r1
 80050c2:	4691      	mov	r9, r2
 80050c4:	eb18 0005 	adds.w	r0, r8, r5
 80050c8:	eb49 0106 	adc.w	r1, r9, r6
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	461d      	mov	r5, r3
 80050d2:	f04f 0600 	mov.w	r6, #0
 80050d6:	196b      	adds	r3, r5, r5
 80050d8:	eb46 0406 	adc.w	r4, r6, r6
 80050dc:	461a      	mov	r2, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	f7fb f876 	bl	80001d0 <__aeabi_uldivmod>
 80050e4:	4603      	mov	r3, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	461a      	mov	r2, r3
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <UART_SetConfig+0x384>)
 80050ec:	fba3 2302 	umull	r2, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	461d      	mov	r5, r3
 80050fa:	f04f 0600 	mov.w	r6, #0
 80050fe:	46a9      	mov	r9, r5
 8005100:	46b2      	mov	sl, r6
 8005102:	eb19 0309 	adds.w	r3, r9, r9
 8005106:	eb4a 040a 	adc.w	r4, sl, sl
 800510a:	4699      	mov	r9, r3
 800510c:	46a2      	mov	sl, r4
 800510e:	eb19 0905 	adds.w	r9, r9, r5
 8005112:	eb4a 0a06 	adc.w	sl, sl, r6
 8005116:	f04f 0100 	mov.w	r1, #0
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005122:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005126:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800512a:	4689      	mov	r9, r1
 800512c:	4692      	mov	sl, r2
 800512e:	eb19 0005 	adds.w	r0, r9, r5
 8005132:	eb4a 0106 	adc.w	r1, sl, r6
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	461d      	mov	r5, r3
 800513c:	f04f 0600 	mov.w	r6, #0
 8005140:	196b      	adds	r3, r5, r5
 8005142:	eb46 0406 	adc.w	r4, r6, r6
 8005146:	461a      	mov	r2, r3
 8005148:	4623      	mov	r3, r4
 800514a:	f7fb f841 	bl	80001d0 <__aeabi_uldivmod>
 800514e:	4603      	mov	r3, r0
 8005150:	460c      	mov	r4, r1
 8005152:	461a      	mov	r2, r3
 8005154:	4b2c      	ldr	r3, [pc, #176]	; (8005208 <UART_SetConfig+0x384>)
 8005156:	fba3 1302 	umull	r1, r3, r3, r2
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	2164      	movs	r1, #100	; 0x64
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	3332      	adds	r3, #50	; 0x32
 8005168:	4a27      	ldr	r2, [pc, #156]	; (8005208 <UART_SetConfig+0x384>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005176:	4498      	add	r8, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	461d      	mov	r5, r3
 800517c:	f04f 0600 	mov.w	r6, #0
 8005180:	46a9      	mov	r9, r5
 8005182:	46b2      	mov	sl, r6
 8005184:	eb19 0309 	adds.w	r3, r9, r9
 8005188:	eb4a 040a 	adc.w	r4, sl, sl
 800518c:	4699      	mov	r9, r3
 800518e:	46a2      	mov	sl, r4
 8005190:	eb19 0905 	adds.w	r9, r9, r5
 8005194:	eb4a 0a06 	adc.w	sl, sl, r6
 8005198:	f04f 0100 	mov.w	r1, #0
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051ac:	4689      	mov	r9, r1
 80051ae:	4692      	mov	sl, r2
 80051b0:	eb19 0005 	adds.w	r0, r9, r5
 80051b4:	eb4a 0106 	adc.w	r1, sl, r6
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	461d      	mov	r5, r3
 80051be:	f04f 0600 	mov.w	r6, #0
 80051c2:	196b      	adds	r3, r5, r5
 80051c4:	eb46 0406 	adc.w	r4, r6, r6
 80051c8:	461a      	mov	r2, r3
 80051ca:	4623      	mov	r3, r4
 80051cc:	f7fb f800 	bl	80001d0 <__aeabi_uldivmod>
 80051d0:	4603      	mov	r3, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	461a      	mov	r2, r3
 80051d6:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <UART_SetConfig+0x384>)
 80051d8:	fba3 1302 	umull	r1, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	2164      	movs	r1, #100	; 0x64
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	3332      	adds	r3, #50	; 0x32
 80051ea:	4a07      	ldr	r2, [pc, #28]	; (8005208 <UART_SetConfig+0x384>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	f003 0207 	and.w	r2, r3, #7
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4442      	add	r2, r8
 80051fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80051fe:	e1b2      	b.n	8005566 <UART_SetConfig+0x6e2>
 8005200:	40011000 	.word	0x40011000
 8005204:	40011400 	.word	0x40011400
 8005208:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4ad7      	ldr	r2, [pc, #860]	; (8005570 <UART_SetConfig+0x6ec>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d005      	beq.n	8005222 <UART_SetConfig+0x39e>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4ad6      	ldr	r2, [pc, #856]	; (8005574 <UART_SetConfig+0x6f0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	f040 80d1 	bne.w	80053c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005222:	f7ff f8d9 	bl	80043d8 <HAL_RCC_GetPCLK2Freq>
 8005226:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	469a      	mov	sl, r3
 800522c:	f04f 0b00 	mov.w	fp, #0
 8005230:	46d0      	mov	r8, sl
 8005232:	46d9      	mov	r9, fp
 8005234:	eb18 0308 	adds.w	r3, r8, r8
 8005238:	eb49 0409 	adc.w	r4, r9, r9
 800523c:	4698      	mov	r8, r3
 800523e:	46a1      	mov	r9, r4
 8005240:	eb18 080a 	adds.w	r8, r8, sl
 8005244:	eb49 090b 	adc.w	r9, r9, fp
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005254:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005258:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800525c:	4688      	mov	r8, r1
 800525e:	4691      	mov	r9, r2
 8005260:	eb1a 0508 	adds.w	r5, sl, r8
 8005264:	eb4b 0609 	adc.w	r6, fp, r9
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4619      	mov	r1, r3
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	f04f 0400 	mov.w	r4, #0
 800527a:	0094      	lsls	r4, r2, #2
 800527c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005280:	008b      	lsls	r3, r1, #2
 8005282:	461a      	mov	r2, r3
 8005284:	4623      	mov	r3, r4
 8005286:	4628      	mov	r0, r5
 8005288:	4631      	mov	r1, r6
 800528a:	f7fa ffa1 	bl	80001d0 <__aeabi_uldivmod>
 800528e:	4603      	mov	r3, r0
 8005290:	460c      	mov	r4, r1
 8005292:	461a      	mov	r2, r3
 8005294:	4bb8      	ldr	r3, [pc, #736]	; (8005578 <UART_SetConfig+0x6f4>)
 8005296:	fba3 2302 	umull	r2, r3, r3, r2
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	469b      	mov	fp, r3
 80052a4:	f04f 0c00 	mov.w	ip, #0
 80052a8:	46d9      	mov	r9, fp
 80052aa:	46e2      	mov	sl, ip
 80052ac:	eb19 0309 	adds.w	r3, r9, r9
 80052b0:	eb4a 040a 	adc.w	r4, sl, sl
 80052b4:	4699      	mov	r9, r3
 80052b6:	46a2      	mov	sl, r4
 80052b8:	eb19 090b 	adds.w	r9, r9, fp
 80052bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052d4:	4689      	mov	r9, r1
 80052d6:	4692      	mov	sl, r2
 80052d8:	eb1b 0509 	adds.w	r5, fp, r9
 80052dc:	eb4c 060a 	adc.w	r6, ip, sl
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4619      	mov	r1, r3
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	f04f 0400 	mov.w	r4, #0
 80052f2:	0094      	lsls	r4, r2, #2
 80052f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052f8:	008b      	lsls	r3, r1, #2
 80052fa:	461a      	mov	r2, r3
 80052fc:	4623      	mov	r3, r4
 80052fe:	4628      	mov	r0, r5
 8005300:	4631      	mov	r1, r6
 8005302:	f7fa ff65 	bl	80001d0 <__aeabi_uldivmod>
 8005306:	4603      	mov	r3, r0
 8005308:	460c      	mov	r4, r1
 800530a:	461a      	mov	r2, r3
 800530c:	4b9a      	ldr	r3, [pc, #616]	; (8005578 <UART_SetConfig+0x6f4>)
 800530e:	fba3 1302 	umull	r1, r3, r3, r2
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	2164      	movs	r1, #100	; 0x64
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	3332      	adds	r3, #50	; 0x32
 8005320:	4a95      	ldr	r2, [pc, #596]	; (8005578 <UART_SetConfig+0x6f4>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800532c:	4498      	add	r8, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	469b      	mov	fp, r3
 8005332:	f04f 0c00 	mov.w	ip, #0
 8005336:	46d9      	mov	r9, fp
 8005338:	46e2      	mov	sl, ip
 800533a:	eb19 0309 	adds.w	r3, r9, r9
 800533e:	eb4a 040a 	adc.w	r4, sl, sl
 8005342:	4699      	mov	r9, r3
 8005344:	46a2      	mov	sl, r4
 8005346:	eb19 090b 	adds.w	r9, r9, fp
 800534a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800535a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800535e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005362:	4689      	mov	r9, r1
 8005364:	4692      	mov	sl, r2
 8005366:	eb1b 0509 	adds.w	r5, fp, r9
 800536a:	eb4c 060a 	adc.w	r6, ip, sl
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4619      	mov	r1, r3
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	0094      	lsls	r4, r2, #2
 8005382:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005386:	008b      	lsls	r3, r1, #2
 8005388:	461a      	mov	r2, r3
 800538a:	4623      	mov	r3, r4
 800538c:	4628      	mov	r0, r5
 800538e:	4631      	mov	r1, r6
 8005390:	f7fa ff1e 	bl	80001d0 <__aeabi_uldivmod>
 8005394:	4603      	mov	r3, r0
 8005396:	460c      	mov	r4, r1
 8005398:	461a      	mov	r2, r3
 800539a:	4b77      	ldr	r3, [pc, #476]	; (8005578 <UART_SetConfig+0x6f4>)
 800539c:	fba3 1302 	umull	r1, r3, r3, r2
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	2164      	movs	r1, #100	; 0x64
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	3332      	adds	r3, #50	; 0x32
 80053ae:	4a72      	ldr	r2, [pc, #456]	; (8005578 <UART_SetConfig+0x6f4>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	f003 020f 	and.w	r2, r3, #15
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4442      	add	r2, r8
 80053c0:	609a      	str	r2, [r3, #8]
 80053c2:	e0d0      	b.n	8005566 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80053c4:	f7fe fff4 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 80053c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	469a      	mov	sl, r3
 80053ce:	f04f 0b00 	mov.w	fp, #0
 80053d2:	46d0      	mov	r8, sl
 80053d4:	46d9      	mov	r9, fp
 80053d6:	eb18 0308 	adds.w	r3, r8, r8
 80053da:	eb49 0409 	adc.w	r4, r9, r9
 80053de:	4698      	mov	r8, r3
 80053e0:	46a1      	mov	r9, r4
 80053e2:	eb18 080a 	adds.w	r8, r8, sl
 80053e6:	eb49 090b 	adc.w	r9, r9, fp
 80053ea:	f04f 0100 	mov.w	r1, #0
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053fe:	4688      	mov	r8, r1
 8005400:	4691      	mov	r9, r2
 8005402:	eb1a 0508 	adds.w	r5, sl, r8
 8005406:	eb4b 0609 	adc.w	r6, fp, r9
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4619      	mov	r1, r3
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	f04f 0400 	mov.w	r4, #0
 800541c:	0094      	lsls	r4, r2, #2
 800541e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005422:	008b      	lsls	r3, r1, #2
 8005424:	461a      	mov	r2, r3
 8005426:	4623      	mov	r3, r4
 8005428:	4628      	mov	r0, r5
 800542a:	4631      	mov	r1, r6
 800542c:	f7fa fed0 	bl	80001d0 <__aeabi_uldivmod>
 8005430:	4603      	mov	r3, r0
 8005432:	460c      	mov	r4, r1
 8005434:	461a      	mov	r2, r3
 8005436:	4b50      	ldr	r3, [pc, #320]	; (8005578 <UART_SetConfig+0x6f4>)
 8005438:	fba3 2302 	umull	r2, r3, r3, r2
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	469b      	mov	fp, r3
 8005446:	f04f 0c00 	mov.w	ip, #0
 800544a:	46d9      	mov	r9, fp
 800544c:	46e2      	mov	sl, ip
 800544e:	eb19 0309 	adds.w	r3, r9, r9
 8005452:	eb4a 040a 	adc.w	r4, sl, sl
 8005456:	4699      	mov	r9, r3
 8005458:	46a2      	mov	sl, r4
 800545a:	eb19 090b 	adds.w	r9, r9, fp
 800545e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005462:	f04f 0100 	mov.w	r1, #0
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800546e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005476:	4689      	mov	r9, r1
 8005478:	4692      	mov	sl, r2
 800547a:	eb1b 0509 	adds.w	r5, fp, r9
 800547e:	eb4c 060a 	adc.w	r6, ip, sl
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4619      	mov	r1, r3
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	f04f 0400 	mov.w	r4, #0
 8005494:	0094      	lsls	r4, r2, #2
 8005496:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800549a:	008b      	lsls	r3, r1, #2
 800549c:	461a      	mov	r2, r3
 800549e:	4623      	mov	r3, r4
 80054a0:	4628      	mov	r0, r5
 80054a2:	4631      	mov	r1, r6
 80054a4:	f7fa fe94 	bl	80001d0 <__aeabi_uldivmod>
 80054a8:	4603      	mov	r3, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b32      	ldr	r3, [pc, #200]	; (8005578 <UART_SetConfig+0x6f4>)
 80054b0:	fba3 1302 	umull	r1, r3, r3, r2
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	2164      	movs	r1, #100	; 0x64
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	3332      	adds	r3, #50	; 0x32
 80054c2:	4a2d      	ldr	r2, [pc, #180]	; (8005578 <UART_SetConfig+0x6f4>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ce:	4498      	add	r8, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	469b      	mov	fp, r3
 80054d4:	f04f 0c00 	mov.w	ip, #0
 80054d8:	46d9      	mov	r9, fp
 80054da:	46e2      	mov	sl, ip
 80054dc:	eb19 0309 	adds.w	r3, r9, r9
 80054e0:	eb4a 040a 	adc.w	r4, sl, sl
 80054e4:	4699      	mov	r9, r3
 80054e6:	46a2      	mov	sl, r4
 80054e8:	eb19 090b 	adds.w	r9, r9, fp
 80054ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054f0:	f04f 0100 	mov.w	r1, #0
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005500:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005504:	4689      	mov	r9, r1
 8005506:	4692      	mov	sl, r2
 8005508:	eb1b 0509 	adds.w	r5, fp, r9
 800550c:	eb4c 060a 	adc.w	r6, ip, sl
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4619      	mov	r1, r3
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	f04f 0400 	mov.w	r4, #0
 8005522:	0094      	lsls	r4, r2, #2
 8005524:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005528:	008b      	lsls	r3, r1, #2
 800552a:	461a      	mov	r2, r3
 800552c:	4623      	mov	r3, r4
 800552e:	4628      	mov	r0, r5
 8005530:	4631      	mov	r1, r6
 8005532:	f7fa fe4d 	bl	80001d0 <__aeabi_uldivmod>
 8005536:	4603      	mov	r3, r0
 8005538:	460c      	mov	r4, r1
 800553a:	461a      	mov	r2, r3
 800553c:	4b0e      	ldr	r3, [pc, #56]	; (8005578 <UART_SetConfig+0x6f4>)
 800553e:	fba3 1302 	umull	r1, r3, r3, r2
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	2164      	movs	r1, #100	; 0x64
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	3332      	adds	r3, #50	; 0x32
 8005550:	4a09      	ldr	r2, [pc, #36]	; (8005578 <UART_SetConfig+0x6f4>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	f003 020f 	and.w	r2, r3, #15
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4442      	add	r2, r8
 8005562:	609a      	str	r2, [r3, #8]
}
 8005564:	e7ff      	b.n	8005566 <UART_SetConfig+0x6e2>
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005570:	40011000 	.word	0x40011000
 8005574:	40011400 	.word	0x40011400
 8005578:	51eb851f 	.word	0x51eb851f

0800557c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800557c:	b084      	sub	sp, #16
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	f107 001c 	add.w	r0, r7, #28
 800558a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	2b01      	cmp	r3, #1
 8005592:	d122      	bne.n	80055da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d105      	bne.n	80055ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f94a 	bl	8005868 <USB_CoreReset>
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]
 80055d8:	e01a      	b.n	8005610 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f93e 	bl	8005868 <USB_CoreReset>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
 8005602:	e005      	b.n	8005610 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	2b01      	cmp	r3, #1
 8005614:	d10b      	bne.n	800562e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f043 0206 	orr.w	r2, r3, #6
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f043 0220 	orr.w	r2, r3, #32
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800563a:	b004      	add	sp, #16
 800563c:	4770      	bx	lr

0800563e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f043 0201 	orr.w	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f023 0201 	bic.w	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d106      	bne.n	80056ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	e00b      	b.n	80056c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d106      	bne.n	80056c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	60da      	str	r2, [r3, #12]
 80056c0:	e001      	b.n	80056c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e003      	b.n	80056ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80056c6:	2032      	movs	r0, #50	; 0x32
 80056c8:	f7fb fcb8 	bl	800103c <HAL_Delay>

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	019b      	lsls	r3, r3, #6
 80056ea:	f043 0220 	orr.w	r2, r3, #32
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a09      	ldr	r2, [pc, #36]	; (8005720 <USB_FlushTxFifo+0x48>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e006      	b.n	8005712 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b20      	cmp	r3, #32
 800570e:	d0f0      	beq.n	80056f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	00030d40 	.word	0x00030d40

08005724 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2210      	movs	r2, #16
 8005734:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3301      	adds	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4a09      	ldr	r2, [pc, #36]	; (8005764 <USB_FlushRxFifo+0x40>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e006      	b.n	8005756 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b10      	cmp	r3, #16
 8005752:	d0f0      	beq.n	8005736 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	00030d40 	.word	0x00030d40

08005768 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005768:	b480      	push	{r7}
 800576a:	b089      	sub	sp, #36	; 0x24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4611      	mov	r1, r2
 8005774:	461a      	mov	r2, r3
 8005776:	460b      	mov	r3, r1
 8005778:	71fb      	strb	r3, [r7, #7]
 800577a:	4613      	mov	r3, r2
 800577c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005786:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800578a:	2b00      	cmp	r3, #0
 800578c:	d11a      	bne.n	80057c4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800578e:	88bb      	ldrh	r3, [r7, #4]
 8005790:	3303      	adds	r3, #3
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005796:	2300      	movs	r3, #0
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	e00f      	b.n	80057bc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	031a      	lsls	r2, r3, #12
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a8:	461a      	mov	r2, r3
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	3304      	adds	r3, #4
 80057b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	3301      	adds	r3, #1
 80057ba:	61bb      	str	r3, [r7, #24]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d3eb      	bcc.n	800579c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3724      	adds	r7, #36	; 0x24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b089      	sub	sp, #36	; 0x24
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	4613      	mov	r3, r2
 80057de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	3303      	adds	r3, #3
 80057ec:	089b      	lsrs	r3, r3, #2
 80057ee:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80057f0:	2300      	movs	r3, #0
 80057f2:	61bb      	str	r3, [r7, #24]
 80057f4:	e00b      	b.n	800580e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	601a      	str	r2, [r3, #0]
    pDest++;
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	3304      	adds	r3, #4
 8005806:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	3301      	adds	r3, #1
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	429a      	cmp	r2, r3
 8005814:	d3ef      	bcc.n	80057f6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005816:	69fb      	ldr	r3, [r7, #28]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3724      	adds	r7, #36	; 0x24
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4013      	ands	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800583c:	68fb      	ldr	r3, [r7, #12]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0301 	and.w	r3, r3, #1
}
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a13      	ldr	r2, [pc, #76]	; (80058cc <USB_CoreReset+0x64>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e01b      	b.n	80058be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	daf2      	bge.n	8005874 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f043 0201 	orr.w	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3301      	adds	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4a09      	ldr	r2, [pc, #36]	; (80058cc <USB_CoreReset+0x64>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d901      	bls.n	80058b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e006      	b.n	80058be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d0f0      	beq.n	800589e <USB_CoreReset+0x36>

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	00030d40 	.word	0x00030d40

080058d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058d0:	b084      	sub	sp, #16
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	f107 001c 	add.w	r0, r7, #28
 80058de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058ec:	461a      	mov	r2, r3
 80058ee:	2300      	movs	r3, #0
 80058f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d018      	beq.n	8005954 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	2b01      	cmp	r3, #1
 8005926:	d10a      	bne.n	800593e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005936:	f043 0304 	orr.w	r3, r3, #4
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e014      	b.n	8005968 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800594c:	f023 0304 	bic.w	r3, r3, #4
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e009      	b.n	8005968 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005962:	f023 0304 	bic.w	r3, r3, #4
 8005966:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005968:	2110      	movs	r1, #16
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff feb4 	bl	80056d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fed7 	bl	8005724 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e015      	b.n	80059a8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4413      	add	r3, r2
 8005984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005988:	461a      	mov	r2, r3
 800598a:	f04f 33ff 	mov.w	r3, #4294967295
 800598e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	461a      	mov	r2, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d3e5      	bcc.n	800597c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80059b0:	2101      	movs	r1, #1
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f8ac 	bl	8005b10 <USB_DriveVbus>

  HAL_Delay(200U);
 80059b8:	20c8      	movs	r0, #200	; 0xc8
 80059ba:	f7fb fb3f 	bl	800103c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ca:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00b      	beq.n	80059f0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <USB_HostInit+0x164>)
 80059e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <USB_HostInit+0x168>)
 80059ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80059ee:	e009      	b.n	8005a04 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2280      	movs	r2, #128	; 0x80
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a10      	ldr	r2, [pc, #64]	; (8005a3c <USB_HostInit+0x16c>)
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a10      	ldr	r2, [pc, #64]	; (8005a40 <USB_HostInit+0x170>)
 8005a00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d105      	bne.n	8005a16 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	f043 0210 	orr.w	r2, r3, #16
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <USB_HostInit+0x174>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a2e:	b004      	add	sp, #16
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	01000200 	.word	0x01000200
 8005a38:	00e00300 	.word	0x00e00300
 8005a3c:	00600080 	.word	0x00600080
 8005a40:	004000e0 	.word	0x004000e0
 8005a44:	a3200008 	.word	0xa3200008

08005a48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a80:	4313      	orrs	r3, r2
 8005a82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d107      	bne.n	8005a9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a90:	461a      	mov	r2, r3
 8005a92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005a96:	6053      	str	r3, [r2, #4]
 8005a98:	e009      	b.n	8005aae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d106      	bne.n	8005aae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005aac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005adc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005aec:	2064      	movs	r0, #100	; 0x64
 8005aee:	f7fb faa5 	bl	800103c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005afe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005b00:	200a      	movs	r0, #10
 8005b02:	f7fb fa9b 	bl	800103c <HAL_Delay>

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <USB_DriveVbus+0x44>
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d106      	bne.n	8005b54 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b52:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5e:	d109      	bne.n	8005b74 <USB_DriveVbus+0x64>
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b72:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	0c5b      	lsrs	r3, r3, #17
 8005ba0:	f003 0303 	and.w	r3, r3, #3
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	b29b      	uxth	r3, r3
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	4608      	mov	r0, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	461a      	mov	r2, r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	70fb      	strb	r3, [r7, #3]
 8005be6:	460b      	mov	r3, r1
 8005be8:	70bb      	strb	r3, [r7, #2]
 8005bea:	4613      	mov	r3, r2
 8005bec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c02:	461a      	mov	r2, r3
 8005c04:	f04f 33ff 	mov.w	r3, #4294967295
 8005c08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d87e      	bhi.n	8005d10 <USB_HC_Init+0x13c>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <USB_HC_Init+0x44>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005cd3 	.word	0x08005cd3
 8005c20:	08005c29 	.word	0x08005c29
 8005c24:	08005c95 	.word	0x08005c95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c34:	461a      	mov	r2, r3
 8005c36:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	da10      	bge.n	8005c66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	78fa      	ldrb	r2, [r7, #3]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c62:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005c64:	e057      	b.n	8005d16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d051      	beq.n	8005d16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c90:	60d3      	str	r3, [r2, #12]
      break;
 8005c92:	e040      	b.n	8005d16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f240 639d 	movw	r3, #1693	; 0x69d
 8005ca6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ca8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da34      	bge.n	8005d1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	78fa      	ldrb	r2, [r7, #3]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cce:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005cd0:	e023      	b.n	8005d1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f240 2325 	movw	r3, #549	; 0x225
 8005ce4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ce6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da17      	bge.n	8005d1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005cee:	78fb      	ldrb	r3, [r7, #3]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	78fa      	ldrb	r2, [r7, #3]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d0e:	e006      	b.n	8005d1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
      break;
 8005d14:	e004      	b.n	8005d20 <USB_HC_Init+0x14c>
      break;
 8005d16:	bf00      	nop
 8005d18:	e002      	b.n	8005d20 <USB_HC_Init+0x14c>
      break;
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <USB_HC_Init+0x14c>
      break;
 8005d1e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d26:	699a      	ldr	r2, [r3, #24]
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	2101      	movs	r1, #1
 8005d30:	fa01 f303 	lsl.w	r3, r1, r3
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da03      	bge.n	8005d5a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	e001      	b.n	8005d5e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005d5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d103      	bne.n	8005d6e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e001      	b.n	8005d72 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d72:	787b      	ldrb	r3, [r7, #1]
 8005d74:	059b      	lsls	r3, r3, #22
 8005d76:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d7a:	78bb      	ldrb	r3, [r7, #2]
 8005d7c:	02db      	lsls	r3, r3, #11
 8005d7e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d82:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d88:	049b      	lsls	r3, r3, #18
 8005d8a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d8e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d96:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	0159      	lsls	r1, r3, #5
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	440b      	add	r3, r1
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dae:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005db0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d10f      	bne.n	8005dd8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	78fa      	ldrb	r2, [r7, #3]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dd6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop

08005de8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08c      	sub	sp, #48	; 0x30
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	4613      	mov	r3, r2
 8005df4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e04:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d028      	beq.n	8005e64 <USB_HC_StartXfer+0x7c>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	791b      	ldrb	r3, [r3, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d124      	bne.n	8005e64 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10b      	bne.n	8005e38 <USB_HC_StartXfer+0x50>
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	795b      	ldrb	r3, [r3, #5]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d107      	bne.n	8005e38 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fa30 	bl	8006294 <USB_DoPing>
      return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e114      	b.n	8006062 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d112      	bne.n	8005e64 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e58:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005e5c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2200      	movs	r2, #0
 8005e62:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d018      	beq.n	8005e9e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	8912      	ldrh	r2, [r2, #8]
 8005e74:	4413      	add	r3, r2
 8005e76:	3b01      	subs	r3, #1
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	8912      	ldrh	r2, [r2, #8]
 8005e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e80:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005e82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e84:	8b7b      	ldrh	r3, [r7, #26]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d90b      	bls.n	8005ea2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005e8a:	8b7b      	ldrh	r3, [r7, #26]
 8005e8c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005e8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	8912      	ldrh	r2, [r2, #8]
 8005e94:	fb02 f203 	mul.w	r2, r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	611a      	str	r2, [r3, #16]
 8005e9c:	e001      	b.n	8005ea2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	78db      	ldrb	r3, [r3, #3]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005eaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	8912      	ldrh	r2, [r2, #8]
 8005eb0:	fb02 f203 	mul.w	r2, r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ec0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ec2:	04d9      	lsls	r1, r3, #19
 8005ec4:	4b69      	ldr	r3, [pc, #420]	; (800606c <USB_HC_StartXfer+0x284>)
 8005ec6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ec8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	7a9b      	ldrb	r3, [r3, #10]
 8005ece:	075b      	lsls	r3, r3, #29
 8005ed0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ed4:	69f9      	ldr	r1, [r7, #28]
 8005ed6:	0148      	lsls	r0, r1, #5
 8005ed8:	6a39      	ldr	r1, [r7, #32]
 8005eda:	4401      	add	r1, r0
 8005edc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ee0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ee2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	68d9      	ldr	r1, [r3, #12]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efa:	460a      	mov	r2, r1
 8005efc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2301      	moveq	r3, #1
 8005f10:	2300      	movne	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	6a3a      	ldr	r2, [r7, #32]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f34:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	7e7b      	ldrb	r3, [r7, #25]
 8005f46:	075b      	lsls	r3, r3, #29
 8005f48:	69f9      	ldr	r1, [r7, #28]
 8005f4a:	0148      	lsls	r0, r1, #5
 8005f4c:	6a39      	ldr	r1, [r7, #32]
 8005f4e:	4401      	add	r1, r0
 8005f50:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005f54:	4313      	orrs	r3, r2
 8005f56:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a42      	ldr	r2, [pc, #264]	; (8006070 <USB_HC_StartXfer+0x288>)
 8005f68:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f6a:	4b41      	ldr	r3, [pc, #260]	; (8006070 <USB_HC_StartXfer+0x288>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f72:	4a3f      	ldr	r2, [pc, #252]	; (8006070 <USB_HC_StartXfer+0x288>)
 8005f74:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	78db      	ldrb	r3, [r3, #3]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d006      	beq.n	8005f8c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005f7e:	4b3c      	ldr	r3, [pc, #240]	; (8006070 <USB_HC_StartXfer+0x288>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f86:	4a3a      	ldr	r2, [pc, #232]	; (8006070 <USB_HC_StartXfer+0x288>)
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e005      	b.n	8005f98 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005f8c:	4b38      	ldr	r3, [pc, #224]	; (8006070 <USB_HC_StartXfer+0x288>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f94:	4a36      	ldr	r2, [pc, #216]	; (8006070 <USB_HC_StartXfer+0x288>)
 8005f96:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f98:	4b35      	ldr	r3, [pc, #212]	; (8006070 <USB_HC_StartXfer+0x288>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fa0:	4a33      	ldr	r2, [pc, #204]	; (8006070 <USB_HC_StartXfer+0x288>)
 8005fa2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4b2f      	ldr	r3, [pc, #188]	; (8006070 <USB_HC_StartXfer+0x288>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e04f      	b.n	8006062 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	78db      	ldrb	r3, [r3, #3]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d14a      	bne.n	8006060 <USB_HC_StartXfer+0x278>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d046      	beq.n	8006060 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	79db      	ldrb	r3, [r3, #7]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d830      	bhi.n	800603c <USB_HC_StartXfer+0x254>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <USB_HC_StartXfer+0x1f8>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08005ff1 	.word	0x08005ff1
 8005fe4:	08006015 	.word	0x08006015
 8005fe8:	08005ff1 	.word	0x08005ff1
 8005fec:	08006015 	.word	0x08006015
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	3303      	adds	r3, #3
 8005ff6:	089b      	lsrs	r3, r3, #2
 8005ff8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ffa:	8afa      	ldrh	r2, [r7, #22]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	b29b      	uxth	r3, r3
 8006002:	429a      	cmp	r2, r3
 8006004:	d91c      	bls.n	8006040 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f043 0220 	orr.w	r2, r3, #32
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	619a      	str	r2, [r3, #24]
        }
        break;
 8006012:	e015      	b.n	8006040 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	3303      	adds	r3, #3
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800601e:	8afa      	ldrh	r2, [r7, #22]
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	b29b      	uxth	r3, r3
 800602a:	429a      	cmp	r2, r3
 800602c:	d90a      	bls.n	8006044 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	619a      	str	r2, [r3, #24]
        }
        break;
 800603a:	e003      	b.n	8006044 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800603c:	bf00      	nop
 800603e:	e002      	b.n	8006046 <USB_HC_StartXfer+0x25e>
        break;
 8006040:	bf00      	nop
 8006042:	e000      	b.n	8006046 <USB_HC_StartXfer+0x25e>
        break;
 8006044:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	68d9      	ldr	r1, [r3, #12]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	785a      	ldrb	r2, [r3, #1]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	b298      	uxth	r0, r3
 8006054:	2300      	movs	r3, #0
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	4603      	mov	r3, r0
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7ff fb84 	bl	8005768 <USB_WritePacket>
  }

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3728      	adds	r7, #40	; 0x28
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	1ff80000 	.word	0x1ff80000
 8006070:	200000b4 	.word	0x200000b4

08006074 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	b29b      	uxth	r3, r3
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006096:	b480      	push	{r7}
 8006098:	b087      	sub	sp, #28
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	0c9b      	lsrs	r3, r3, #18
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <USB_HC_Halt+0x3a>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d16c      	bne.n	80061aa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ee:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d143      	bne.n	8006184 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	440a      	add	r2, r1
 8006112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800611a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4413      	add	r3, r2
 8006124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	440a      	add	r2, r1
 8006132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800613a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	4413      	add	r3, r2
 8006144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	440a      	add	r2, r1
 8006152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006156:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800615a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3301      	adds	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006168:	d81d      	bhi.n	80061a6 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800617c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006180:	d0ec      	beq.n	800615c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006182:	e080      	b.n	8006286 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	0151      	lsls	r1, r2, #5
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	440a      	add	r2, r1
 800619a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800619e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061a2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061a4:	e06f      	b.n	8006286 <USB_HC_Halt+0x1f0>
          break;
 80061a6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061a8:	e06d      	b.n	8006286 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d143      	bne.n	8006262 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061f8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	440a      	add	r2, r1
 8006210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006218:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	440a      	add	r2, r1
 8006230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006234:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006238:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	3301      	adds	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006246:	d81d      	bhi.n	8006284 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	4413      	add	r3, r2
 8006250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800625a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800625e:	d0ec      	beq.n	800623a <USB_HC_Halt+0x1a4>
 8006260:	e011      	b.n	8006286 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	440a      	add	r2, r1
 8006278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e000      	b.n	8006286 <USB_HC_Halt+0x1f0>
          break;
 8006284:	bf00      	nop
    }
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80062a8:	2301      	movs	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	04da      	lsls	r2, r3, #19
 80062b0:	4b15      	ldr	r3, [pc, #84]	; (8006308 <USB_DoPing+0x74>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f2:	461a      	mov	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	1ff80000 	.word	0x1ff80000

0800630c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff f99f 	bl	8005660 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006322:	2110      	movs	r1, #16
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff f9d7 	bl	80056d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff f9fa 	bl	8005724 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006330:	2300      	movs	r3, #0
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	e01f      	b.n	8006376 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800634c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006354:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800635c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	461a      	mov	r2, r3
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	3301      	adds	r3, #1
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b0f      	cmp	r3, #15
 800637a:	d9dc      	bls.n	8006336 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800637c:	2300      	movs	r3, #0
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	e034      	b.n	80063ec <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006398:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	461a      	mov	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	3301      	adds	r3, #1
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c8:	d80c      	bhi.n	80063e4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e0:	d0ec      	beq.n	80063bc <USB_StopHost+0xb0>
 80063e2:	e000      	b.n	80063e6 <USB_StopHost+0xda>
        break;
 80063e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	3301      	adds	r3, #1
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b0f      	cmp	r3, #15
 80063f0:	d9c7      	bls.n	8006382 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063f8:	461a      	mov	r2, r3
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
 80063fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f04f 32ff 	mov.w	r2, #4294967295
 8006406:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff f918 	bl	800563e <USB_EnableGlobalInt>

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800641c:	4904      	ldr	r1, [pc, #16]	; (8006430 <MX_FATFS_Init+0x18>)
 800641e:	4805      	ldr	r0, [pc, #20]	; (8006434 <MX_FATFS_Init+0x1c>)
 8006420:	f003 fb46 	bl	8009ab0 <FATFS_LinkDriver>
 8006424:	4603      	mov	r3, r0
 8006426:	461a      	mov	r2, r3
 8006428:	4b03      	ldr	r3, [pc, #12]	; (8006438 <MX_FATFS_Init+0x20>)
 800642a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800642c:	bf00      	nop
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20004b64 	.word	0x20004b64
 8006434:	0800d360 	.word	0x0800d360
 8006438:	20004fcc 	.word	0x20004fcc

0800643c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	4619      	mov	r1, r3
 8006466:	4808      	ldr	r0, [pc, #32]	; (8006488 <USBH_status+0x34>)
 8006468:	f000 fe53 	bl	8007112 <USBH_MSC_UnitIsReady>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <USBH_status+0x24>
  {
    res = RES_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
 8006476:	e001      	b.n	800647c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20005034 	.word	0x20005034

0800648c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b094      	sub	sp, #80	; 0x50
 8006490:	af02      	add	r7, sp, #8
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80064a2:	7bf9      	ldrb	r1, [r7, #15]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4812      	ldr	r0, [pc, #72]	; (80064f8 <USBH_read+0x6c>)
 80064ae:	f000 fe7a 	bl	80071a6 <USBH_MSC_Read>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d103      	bne.n	80064c0 <USBH_read+0x34>
  {
    res = RES_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80064be:	e015      	b.n	80064ec <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80064c0:	f107 0210 	add.w	r2, r7, #16
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	4619      	mov	r1, r3
 80064c8:	480b      	ldr	r0, [pc, #44]	; (80064f8 <USBH_read+0x6c>)
 80064ca:	f000 fe48 	bl	800715e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80064ce:	7f7b      	ldrb	r3, [r7, #29]
 80064d0:	2b28      	cmp	r3, #40	; 0x28
 80064d2:	d003      	beq.n	80064dc <USBH_read+0x50>
 80064d4:	2b3a      	cmp	r3, #58	; 0x3a
 80064d6:	d001      	beq.n	80064dc <USBH_read+0x50>
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d103      	bne.n	80064e4 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80064dc:	2303      	movs	r3, #3
 80064de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80064e2:	e003      	b.n	80064ec <USBH_read+0x60>

    default:
      res = RES_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80064ea:	bf00      	nop
    }
  }

  return res;
 80064ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3748      	adds	r7, #72	; 0x48
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20005034 	.word	0x20005034

080064fc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b094      	sub	sp, #80	; 0x50
 8006500:	af02      	add	r7, sp, #8
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006512:	7bf9      	ldrb	r1, [r7, #15]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	4817      	ldr	r0, [pc, #92]	; (800657c <USBH_write+0x80>)
 800651e:	f000 feab 	bl	8007278 <USBH_MSC_Write>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <USBH_write+0x34>
  {
    res = RES_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800652e:	e01f      	b.n	8006570 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006530:	f107 0210 	add.w	r2, r7, #16
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	4619      	mov	r1, r3
 8006538:	4810      	ldr	r0, [pc, #64]	; (800657c <USBH_write+0x80>)
 800653a:	f000 fe10 	bl	800715e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800653e:	7f7b      	ldrb	r3, [r7, #29]
 8006540:	2b27      	cmp	r3, #39	; 0x27
 8006542:	d009      	beq.n	8006558 <USBH_write+0x5c>
 8006544:	2b27      	cmp	r3, #39	; 0x27
 8006546:	dc02      	bgt.n	800654e <USBH_write+0x52>
 8006548:	2b04      	cmp	r3, #4
 800654a:	d009      	beq.n	8006560 <USBH_write+0x64>
 800654c:	e00c      	b.n	8006568 <USBH_write+0x6c>
 800654e:	2b28      	cmp	r3, #40	; 0x28
 8006550:	d006      	beq.n	8006560 <USBH_write+0x64>
 8006552:	2b3a      	cmp	r3, #58	; 0x3a
 8006554:	d004      	beq.n	8006560 <USBH_write+0x64>
 8006556:	e007      	b.n	8006568 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006558:	2302      	movs	r3, #2
 800655a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800655e:	e007      	b.n	8006570 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006560:	2303      	movs	r3, #3
 8006562:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006566:	e003      	b.n	8006570 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800656e:	bf00      	nop
    }
  }

  return res;
 8006570:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006574:	4618      	mov	r0, r3
 8006576:	3748      	adds	r7, #72	; 0x48
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20005034 	.word	0x20005034

08006580 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b090      	sub	sp, #64	; 0x40
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	603a      	str	r2, [r7, #0]
 800658a:	71fb      	strb	r3, [r7, #7]
 800658c:	460b      	mov	r3, r1
 800658e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006596:	79bb      	ldrb	r3, [r7, #6]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d852      	bhi.n	8006642 <USBH_ioctl+0xc2>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <USBH_ioctl+0x24>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065b5 	.word	0x080065b5
 80065a8:	080065bd 	.word	0x080065bd
 80065ac:	080065e7 	.word	0x080065e7
 80065b0:	08006613 	.word	0x08006613
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80065ba:	e045      	b.n	8006648 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80065bc:	f107 0208 	add.w	r2, r7, #8
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	4619      	mov	r1, r3
 80065c4:	4823      	ldr	r0, [pc, #140]	; (8006654 <USBH_ioctl+0xd4>)
 80065c6:	f000 fdca 	bl	800715e <USBH_MSC_GetLUNInfo>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d106      	bne.n	80065de <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80065dc:	e034      	b.n	8006648 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80065e4:	e030      	b.n	8006648 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80065e6:	f107 0208 	add.w	r2, r7, #8
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	4619      	mov	r1, r3
 80065ee:	4819      	ldr	r0, [pc, #100]	; (8006654 <USBH_ioctl+0xd4>)
 80065f0:	f000 fdb5 	bl	800715e <USBH_MSC_GetLUNInfo>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d107      	bne.n	800660a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80065fa:	8a3b      	ldrh	r3, [r7, #16]
 80065fc:	461a      	mov	r2, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006608:	e01e      	b.n	8006648 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006610:	e01a      	b.n	8006648 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006612:	f107 0208 	add.w	r2, r7, #8
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	4619      	mov	r1, r3
 800661a:	480e      	ldr	r0, [pc, #56]	; (8006654 <USBH_ioctl+0xd4>)
 800661c:	f000 fd9f 	bl	800715e <USBH_MSC_GetLUNInfo>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006626:	8a3b      	ldrh	r3, [r7, #16]
 8006628:	0a5b      	lsrs	r3, r3, #9
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006638:	e006      	b.n	8006648 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006640:	e002      	b.n	8006648 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006642:	2304      	movs	r3, #4
 8006644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006648:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800664c:	4618      	mov	r0, r3
 800664e:	3740      	adds	r7, #64	; 0x40
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20005034 	.word	0x20005034

08006658 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b089      	sub	sp, #36	; 0x24
 800665c:	af04      	add	r7, sp, #16
 800665e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006666:	7919      	ldrb	r1, [r3, #4]
 8006668:	2350      	movs	r3, #80	; 0x50
 800666a:	2206      	movs	r2, #6
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fd3f 	bl	80080f0 <USBH_FindInterface>
 8006672:	4603      	mov	r3, r0
 8006674:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	2bff      	cmp	r3, #255	; 0xff
 800667a:	d002      	beq.n	8006682 <USBH_MSC_InterfaceInit+0x2a>
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d901      	bls.n	8006686 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006682:	2302      	movs	r3, #2
 8006684:	e0ef      	b.n	8006866 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 fd14 	bl	80080b8 <USBH_SelectInterface>
 8006690:	4603      	mov	r3, r0
 8006692:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800669a:	2302      	movs	r3, #2
 800669c:	e0e3      	b.n	8006866 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80066a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80066a8:	f006 fce0 	bl	800d06c <malloc>
 80066ac:	4603      	mov	r3, r0
 80066ae:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80066c0:	2302      	movs	r3, #2
 80066c2:	e0d0      	b.n	8006866 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80066c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066c8:	2100      	movs	r1, #0
 80066ca:	68b8      	ldr	r0, [r7, #8]
 80066cc:	f006 fce9 	bl	800d0a2 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	211a      	movs	r1, #26
 80066d6:	fb01 f303 	mul.w	r3, r1, r3
 80066da:	4413      	add	r3, r2
 80066dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	b25b      	sxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	da16      	bge.n	8006716 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	211a      	movs	r1, #26
 80066ee:	fb01 f303 	mul.w	r3, r1, r3
 80066f2:	4413      	add	r3, r2
 80066f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	211a      	movs	r1, #26
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	4413      	add	r3, r2
 800670a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800670e:	881a      	ldrh	r2, [r3, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	815a      	strh	r2, [r3, #10]
 8006714:	e015      	b.n	8006742 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	211a      	movs	r1, #26
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	4413      	add	r3, r2
 8006722:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006726:	781a      	ldrb	r2, [r3, #0]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	211a      	movs	r1, #26
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	4413      	add	r3, r2
 8006738:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800673c:	881a      	ldrh	r2, [r3, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	211a      	movs	r1, #26
 8006748:	fb01 f303 	mul.w	r3, r1, r3
 800674c:	4413      	add	r3, r2
 800674e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	b25b      	sxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	da16      	bge.n	8006788 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	211a      	movs	r1, #26
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	4413      	add	r3, r2
 8006766:	f203 3356 	addw	r3, r3, #854	; 0x356
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	211a      	movs	r1, #26
 8006776:	fb01 f303 	mul.w	r3, r1, r3
 800677a:	4413      	add	r3, r2
 800677c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006780:	881a      	ldrh	r2, [r3, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	815a      	strh	r2, [r3, #10]
 8006786:	e015      	b.n	80067b4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	211a      	movs	r1, #26
 800678e:	fb01 f303 	mul.w	r3, r1, r3
 8006792:	4413      	add	r3, r2
 8006794:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	211a      	movs	r1, #26
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067ae:	881a      	ldrh	r2, [r3, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2200      	movs	r2, #0
 80067b8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	799b      	ldrb	r3, [r3, #6]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f003 f8c0 	bl	8009952 <USBH_AllocPipe>
 80067d2:	4603      	mov	r3, r0
 80067d4:	461a      	mov	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	79db      	ldrb	r3, [r3, #7]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f003 f8b6 	bl	8009952 <USBH_AllocPipe>
 80067e6:	4603      	mov	r3, r0
 80067e8:	461a      	mov	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fde6 	bl	80073c0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	7959      	ldrb	r1, [r3, #5]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	7998      	ldrb	r0, [r3, #6]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	8912      	ldrh	r2, [r2, #8]
 800680c:	9202      	str	r2, [sp, #8]
 800680e:	2202      	movs	r2, #2
 8006810:	9201      	str	r2, [sp, #4]
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	4623      	mov	r3, r4
 8006816:	4602      	mov	r2, r0
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f003 f86b 	bl	80098f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	7919      	ldrb	r1, [r3, #4]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	79d8      	ldrb	r0, [r3, #7]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	8952      	ldrh	r2, [r2, #10]
 8006836:	9202      	str	r2, [sp, #8]
 8006838:	2202      	movs	r2, #2
 800683a:	9201      	str	r2, [sp, #4]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4623      	mov	r3, r4
 8006840:	4602      	mov	r2, r0
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f003 f856 	bl	80098f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	791b      	ldrb	r3, [r3, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f006 fb27 	bl	800cea4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	795b      	ldrb	r3, [r3, #5]
 800685a:	2200      	movs	r2, #0
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f006 fb20 	bl	800cea4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	bd90      	pop	{r4, r7, pc}

0800686e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	795b      	ldrb	r3, [r3, #5]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00e      	beq.n	80068a6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	795b      	ldrb	r3, [r3, #5]
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f003 f84f 	bl	8009932 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	795b      	ldrb	r3, [r3, #5]
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f003 f87a 	bl	8009994 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	791b      	ldrb	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00e      	beq.n	80068cc <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	791b      	ldrb	r3, [r3, #4]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f003 f83c 	bl	8009932 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	791b      	ldrb	r3, [r3, #4]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f003 f867 	bl	8009994 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f006 fbcb 	bl	800d07c <free>
    phost->pActiveClass->pData = 0U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ec:	2200      	movs	r2, #0
 80068ee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	7b9b      	ldrb	r3, [r3, #14]
 8006914:	2b02      	cmp	r3, #2
 8006916:	d004      	beq.n	8006922 <USBH_MSC_ClassRequest+0x28>
 8006918:	2b03      	cmp	r3, #3
 800691a:	d03e      	beq.n	800699a <USBH_MSC_ClassRequest+0xa0>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d000      	beq.n	8006922 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8006920:	e04a      	b.n	80069b8 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fd2c 	bl	8007384 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b03      	cmp	r3, #3
 8006934:	d104      	bne.n	8006940 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d135      	bne.n	80069b2 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d804      	bhi.n	8006958 <USBH_MSC_ClassRequest+0x5e>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	b2da      	uxtb	r2, r3
 8006956:	e000      	b.n	800695a <USBH_MSC_ClassRequest+0x60>
 8006958:	2202      	movs	r2, #2
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800695e:	2300      	movs	r3, #0
 8006960:	73bb      	strb	r3, [r7, #14]
 8006962:	e014      	b.n	800698e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	2134      	movs	r1, #52	; 0x34
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	4413      	add	r3, r2
 8006970:	3392      	adds	r3, #146	; 0x92
 8006972:	2202      	movs	r2, #2
 8006974:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	2134      	movs	r1, #52	; 0x34
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	4413      	add	r3, r2
 8006982:	33c1      	adds	r3, #193	; 0xc1
 8006984:	2200      	movs	r2, #0
 8006986:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	3301      	adds	r3, #1
 800698c:	73bb      	strb	r3, [r7, #14]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	7bba      	ldrb	r2, [r7, #14]
 8006994:	429a      	cmp	r2, r3
 8006996:	d3e5      	bcc.n	8006964 <USBH_MSC_ClassRequest+0x6a>
      break;
 8006998:	e00b      	b.n	80069b2 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800699a:	2100      	movs	r1, #0
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f002 fa86 	bl	8008eae <USBH_ClrFeature>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	7bda      	ldrb	r2, [r3, #15]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	739a      	strb	r2, [r3, #14]
      break;
 80069b0:	e001      	b.n	80069b6 <USBH_MSC_ClassRequest+0xbc>
      break;
 80069b2:	bf00      	nop
 80069b4:	e000      	b.n	80069b8 <USBH_MSC_ClassRequest+0xbe>
      break;
 80069b6:	bf00      	nop
  }

  return status;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80069d6:	2301      	movs	r3, #1
 80069d8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80069da:	2301      	movs	r3, #1
 80069dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80069de:	2301      	movs	r3, #1
 80069e0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	7b1b      	ldrb	r3, [r3, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <USBH_MSC_Process+0x2e>
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	f000 828d 	beq.w	8006f0a <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80069f0:	e28e      	b.n	8006f10 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	429a      	cmp	r2, r3
 8006a00:	f080 8267 	bcs.w	8006ed2 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	2334      	movs	r3, #52	; 0x34
 8006a10:	fb03 f301 	mul.w	r3, r3, r1
 8006a14:	4413      	add	r3, r2
 8006a16:	3391      	adds	r3, #145	; 0x91
 8006a18:	2201      	movs	r2, #1
 8006a1a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a22:	4619      	mov	r1, r3
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	2334      	movs	r3, #52	; 0x34
 8006a28:	fb03 f301 	mul.w	r3, r3, r1
 8006a2c:	4413      	add	r3, r2
 8006a2e:	3390      	adds	r3, #144	; 0x90
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b08      	cmp	r3, #8
 8006a34:	f200 8235 	bhi.w	8006ea2 <USBH_MSC_Process+0x4de>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <USBH_MSC_Process+0x7c>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a65 	.word	0x08006a65
 8006a44:	08006ea3 	.word	0x08006ea3
 8006a48:	08006b2d 	.word	0x08006b2d
 8006a4c:	08006cb1 	.word	0x08006cb1
 8006a50:	08006a8b 	.word	0x08006a8b
 8006a54:	08006d7d 	.word	0x08006d7d
 8006a58:	08006ea3 	.word	0x08006ea3
 8006a5c:	08006ea3 	.word	0x08006ea3
 8006a60:	08006e91 	.word	0x08006e91
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	2334      	movs	r3, #52	; 0x34
 8006a70:	fb03 f301 	mul.w	r3, r3, r1
 8006a74:	4413      	add	r3, r2
 8006a76:	3390      	adds	r3, #144	; 0x90
 8006a78:	2204      	movs	r2, #4
 8006a7a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8006a88:	e214      	b.n	8006eb4 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a90:	b2d9      	uxtb	r1, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2334      	movs	r3, #52	; 0x34
 8006a9c:	fb03 f302 	mul.w	r3, r3, r2
 8006aa0:	3398      	adds	r3, #152	; 0x98
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	3307      	adds	r3, #7
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 f836 	bl	8007b1c <USBH_MSC_SCSI_Inquiry>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10b      	bne.n	8006ad2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	2334      	movs	r3, #52	; 0x34
 8006ac6:	fb03 f301 	mul.w	r3, r3, r1
 8006aca:	4413      	add	r3, r2
 8006acc:	3390      	adds	r3, #144	; 0x90
 8006ace:	2202      	movs	r2, #2
 8006ad0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d10c      	bne.n	8006af2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ade:	4619      	mov	r1, r3
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	2334      	movs	r3, #52	; 0x34
 8006ae4:	fb03 f301 	mul.w	r3, r3, r1
 8006ae8:	4413      	add	r3, r2
 8006aea:	3390      	adds	r3, #144	; 0x90
 8006aec:	2205      	movs	r2, #5
 8006aee:	701a      	strb	r2, [r3, #0]
            break;
 8006af0:	e1d9      	b.n	8006ea6 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	f040 81d6 	bne.w	8006ea6 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b00:	4619      	mov	r1, r3
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	2334      	movs	r3, #52	; 0x34
 8006b06:	fb03 f301 	mul.w	r3, r3, r1
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3390      	adds	r3, #144	; 0x90
 8006b0e:	2201      	movs	r2, #1
 8006b10:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b18:	4619      	mov	r1, r3
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	2334      	movs	r3, #52	; 0x34
 8006b1e:	fb03 f301 	mul.w	r3, r3, r1
 8006b22:	4413      	add	r3, r2
 8006b24:	3391      	adds	r3, #145	; 0x91
 8006b26:	2202      	movs	r2, #2
 8006b28:	701a      	strb	r2, [r3, #0]
            break;
 8006b2a:	e1bc      	b.n	8006ea6 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 ff32 	bl	80079a0 <USBH_MSC_SCSI_TestUnitReady>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d149      	bne.n	8006bda <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	2334      	movs	r3, #52	; 0x34
 8006b52:	fb03 f301 	mul.w	r3, r3, r1
 8006b56:	4413      	add	r3, r2
 8006b58:	3392      	adds	r3, #146	; 0x92
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00c      	beq.n	8006b7a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b66:	4619      	mov	r1, r3
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	2334      	movs	r3, #52	; 0x34
 8006b6c:	fb03 f301 	mul.w	r3, r3, r1
 8006b70:	4413      	add	r3, r2
 8006b72:	33c1      	adds	r3, #193	; 0xc1
 8006b74:	2201      	movs	r2, #1
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	e00b      	b.n	8006b92 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b80:	4619      	mov	r1, r3
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	2334      	movs	r3, #52	; 0x34
 8006b86:	fb03 f301 	mul.w	r3, r3, r1
 8006b8a:	4413      	add	r3, r2
 8006b8c:	33c1      	adds	r3, #193	; 0xc1
 8006b8e:	2200      	movs	r2, #0
 8006b90:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006b98:	4619      	mov	r1, r3
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	2334      	movs	r3, #52	; 0x34
 8006b9e:	fb03 f301 	mul.w	r3, r3, r1
 8006ba2:	4413      	add	r3, r2
 8006ba4:	3390      	adds	r3, #144	; 0x90
 8006ba6:	2203      	movs	r2, #3
 8006ba8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	2334      	movs	r3, #52	; 0x34
 8006bb6:	fb03 f301 	mul.w	r3, r3, r1
 8006bba:	4413      	add	r3, r2
 8006bbc:	3391      	adds	r3, #145	; 0x91
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006bc8:	4619      	mov	r1, r3
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	2334      	movs	r3, #52	; 0x34
 8006bce:	fb03 f301 	mul.w	r3, r3, r1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3392      	adds	r3, #146	; 0x92
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d14a      	bne.n	8006c76 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006be6:	4619      	mov	r1, r3
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	2334      	movs	r3, #52	; 0x34
 8006bec:	fb03 f301 	mul.w	r3, r3, r1
 8006bf0:	4413      	add	r3, r2
 8006bf2:	3392      	adds	r3, #146	; 0x92
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d00c      	beq.n	8006c14 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c00:	4619      	mov	r1, r3
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	2334      	movs	r3, #52	; 0x34
 8006c06:	fb03 f301 	mul.w	r3, r3, r1
 8006c0a:	4413      	add	r3, r2
 8006c0c:	33c1      	adds	r3, #193	; 0xc1
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	e00b      	b.n	8006c2c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	2334      	movs	r3, #52	; 0x34
 8006c20:	fb03 f301 	mul.w	r3, r3, r1
 8006c24:	4413      	add	r3, r2
 8006c26:	33c1      	adds	r3, #193	; 0xc1
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c32:	4619      	mov	r1, r3
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	2334      	movs	r3, #52	; 0x34
 8006c38:	fb03 f301 	mul.w	r3, r3, r1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3390      	adds	r3, #144	; 0x90
 8006c40:	2205      	movs	r2, #5
 8006c42:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	2334      	movs	r3, #52	; 0x34
 8006c50:	fb03 f301 	mul.w	r3, r3, r1
 8006c54:	4413      	add	r3, r2
 8006c56:	3391      	adds	r3, #145	; 0x91
 8006c58:	2201      	movs	r2, #1
 8006c5a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c62:	4619      	mov	r1, r3
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	2334      	movs	r3, #52	; 0x34
 8006c68:	fb03 f301 	mul.w	r3, r3, r1
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3392      	adds	r3, #146	; 0x92
 8006c70:	2202      	movs	r2, #2
 8006c72:	701a      	strb	r2, [r3, #0]
            break;
 8006c74:	e119      	b.n	8006eaa <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	f040 8116 	bne.w	8006eaa <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c84:	4619      	mov	r1, r3
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	2334      	movs	r3, #52	; 0x34
 8006c8a:	fb03 f301 	mul.w	r3, r3, r1
 8006c8e:	4413      	add	r3, r2
 8006c90:	3390      	adds	r3, #144	; 0x90
 8006c92:	2201      	movs	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	2334      	movs	r3, #52	; 0x34
 8006ca2:	fb03 f301 	mul.w	r3, r3, r1
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3391      	adds	r3, #145	; 0x91
 8006caa:	2202      	movs	r2, #2
 8006cac:	701a      	strb	r2, [r3, #0]
            break;
 8006cae:	e0fc      	b.n	8006eaa <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006cb6:	b2d9      	uxtb	r1, r3
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	2334      	movs	r3, #52	; 0x34
 8006cc2:	fb03 f302 	mul.w	r3, r3, r2
 8006cc6:	3390      	adds	r3, #144	; 0x90
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	3304      	adds	r3, #4
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fea8 	bl	8007a26 <USBH_MSC_SCSI_ReadCapacity>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d120      	bne.n	8006d22 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	2334      	movs	r3, #52	; 0x34
 8006cec:	fb03 f301 	mul.w	r3, r3, r1
 8006cf0:	4413      	add	r3, r2
 8006cf2:	3390      	adds	r3, #144	; 0x90
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006cfe:	4619      	mov	r1, r3
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	2334      	movs	r3, #52	; 0x34
 8006d04:	fb03 f301 	mul.w	r3, r3, r1
 8006d08:	4413      	add	r3, r2
 8006d0a:	3391      	adds	r3, #145	; 0x91
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d16:	3301      	adds	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006d20:	e0c5      	b.n	8006eae <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d10c      	bne.n	8006d42 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d2e:	4619      	mov	r1, r3
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	2334      	movs	r3, #52	; 0x34
 8006d34:	fb03 f301 	mul.w	r3, r3, r1
 8006d38:	4413      	add	r3, r2
 8006d3a:	3390      	adds	r3, #144	; 0x90
 8006d3c:	2205      	movs	r2, #5
 8006d3e:	701a      	strb	r2, [r3, #0]
            break;
 8006d40:	e0b5      	b.n	8006eae <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	f040 80b2 	bne.w	8006eae <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d50:	4619      	mov	r1, r3
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	2334      	movs	r3, #52	; 0x34
 8006d56:	fb03 f301 	mul.w	r3, r3, r1
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3390      	adds	r3, #144	; 0x90
 8006d5e:	2201      	movs	r2, #1
 8006d60:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d68:	4619      	mov	r1, r3
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	2334      	movs	r3, #52	; 0x34
 8006d6e:	fb03 f301 	mul.w	r3, r3, r1
 8006d72:	4413      	add	r3, r2
 8006d74:	3391      	adds	r3, #145	; 0x91
 8006d76:	2202      	movs	r2, #2
 8006d78:	701a      	strb	r2, [r3, #0]
            break;
 8006d7a:	e098      	b.n	8006eae <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d82:	b2d9      	uxtb	r1, r3
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	2334      	movs	r3, #52	; 0x34
 8006d8e:	fb03 f302 	mul.w	r3, r3, r2
 8006d92:	3398      	adds	r3, #152	; 0x98
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4413      	add	r3, r2
 8006d98:	3304      	adds	r3, #4
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 ff62 	bl	8007c66 <USBH_MSC_SCSI_RequestSense>
 8006da2:	4603      	mov	r3, r0
 8006da4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d145      	bne.n	8006e38 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006db2:	4619      	mov	r1, r3
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	2334      	movs	r3, #52	; 0x34
 8006db8:	fb03 f301 	mul.w	r3, r3, r1
 8006dbc:	4413      	add	r3, r2
 8006dbe:	339c      	adds	r3, #156	; 0x9c
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b06      	cmp	r3, #6
 8006dc4:	d00c      	beq.n	8006de0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006dcc:	4619      	mov	r1, r3
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	2334      	movs	r3, #52	; 0x34
 8006dd2:	fb03 f301 	mul.w	r3, r3, r1
 8006dd6:	4413      	add	r3, r2
 8006dd8:	339c      	adds	r3, #156	; 0x9c
 8006dda:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d117      	bne.n	8006e10 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	f242 720f 	movw	r2, #9999	; 0x270f
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d80c      	bhi.n	8006e10 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	2334      	movs	r3, #52	; 0x34
 8006e02:	fb03 f301 	mul.w	r3, r3, r1
 8006e06:	4413      	add	r3, r2
 8006e08:	3390      	adds	r3, #144	; 0x90
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	701a      	strb	r2, [r3, #0]
                  break;
 8006e0e:	e051      	b.n	8006eb4 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e16:	4619      	mov	r1, r3
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	2334      	movs	r3, #52	; 0x34
 8006e1c:	fb03 f301 	mul.w	r3, r3, r1
 8006e20:	4413      	add	r3, r2
 8006e22:	3390      	adds	r3, #144	; 0x90
 8006e24:	2201      	movs	r2, #1
 8006e26:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e2e:	3301      	adds	r3, #1
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d10c      	bne.n	8006e58 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e44:	4619      	mov	r1, r3
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	2334      	movs	r3, #52	; 0x34
 8006e4a:	fb03 f301 	mul.w	r3, r3, r1
 8006e4e:	4413      	add	r3, r2
 8006e50:	3390      	adds	r3, #144	; 0x90
 8006e52:	2208      	movs	r2, #8
 8006e54:	701a      	strb	r2, [r3, #0]
            break;
 8006e56:	e02c      	b.n	8006eb2 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d129      	bne.n	8006eb2 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e64:	4619      	mov	r1, r3
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	2334      	movs	r3, #52	; 0x34
 8006e6a:	fb03 f301 	mul.w	r3, r3, r1
 8006e6e:	4413      	add	r3, r2
 8006e70:	3390      	adds	r3, #144	; 0x90
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	2334      	movs	r3, #52	; 0x34
 8006e82:	fb03 f301 	mul.w	r3, r3, r1
 8006e86:	4413      	add	r3, r2
 8006e88:	3391      	adds	r3, #145	; 0x91
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	701a      	strb	r2, [r3, #0]
            break;
 8006e8e:	e010      	b.n	8006eb2 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006e96:	3301      	adds	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006ea0:	e008      	b.n	8006eb4 <USBH_MSC_Process+0x4f0>
            break;
 8006ea2:	bf00      	nop
 8006ea4:	e006      	b.n	8006eb4 <USBH_MSC_Process+0x4f0>
            break;
 8006ea6:	bf00      	nop
 8006ea8:	e004      	b.n	8006eb4 <USBH_MSC_Process+0x4f0>
            break;
 8006eaa:	bf00      	nop
 8006eac:	e002      	b.n	8006eb4 <USBH_MSC_Process+0x4f0>
            break;
 8006eae:	bf00      	nop
 8006eb0:	e000      	b.n	8006eb4 <USBH_MSC_Process+0x4f0>
            break;
 8006eb2:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f002 ffca 	bl	8009e64 <osMessageQueuePut>
      break;
 8006ed0:	e01e      	b.n	8006f10 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2201      	movs	r2, #1
 8006ede:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f002 ffb4 	bl	8009e64 <osMessageQueuePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f02:	2102      	movs	r1, #2
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
      break;
 8006f08:	e002      	b.n	8006f10 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f0e:	bf00      	nop
  }
  return error;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop

08006f1c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b088      	sub	sp, #32
 8006f36:	af02      	add	r7, sp, #8
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	2134      	movs	r1, #52	; 0x34
 8006f56:	fb01 f303 	mul.w	r3, r1, r3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3390      	adds	r3, #144	; 0x90
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b06      	cmp	r3, #6
 8006f62:	d005      	beq.n	8006f70 <USBH_MSC_RdWrProcess+0x3e>
 8006f64:	2b07      	cmp	r3, #7
 8006f66:	d046      	beq.n	8006ff6 <USBH_MSC_RdWrProcess+0xc4>
 8006f68:	2b05      	cmp	r3, #5
 8006f6a:	f000 8087 	beq.w	800707c <USBH_MSC_RdWrProcess+0x14a>
#endif
#endif
      break;

    default:
      break;
 8006f6e:	e0cb      	b.n	8007108 <USBH_MSC_RdWrProcess+0x1d6>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006f70:	78f9      	ldrb	r1, [r7, #3]
 8006f72:	2300      	movs	r3, #0
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	2300      	movs	r3, #0
 8006f78:	2200      	movs	r2, #0
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 ff57 	bl	8007e2e <USBH_MSC_SCSI_Read>
 8006f80:	4603      	mov	r3, r0
 8006f82:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10b      	bne.n	8006fa2 <USBH_MSC_RdWrProcess+0x70>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	2134      	movs	r1, #52	; 0x34
 8006f90:	fb01 f303 	mul.w	r3, r1, r3
 8006f94:	4413      	add	r3, r2
 8006f96:	3390      	adds	r3, #144	; 0x90
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	75fb      	strb	r3, [r7, #23]
 8006fa0:	e01a      	b.n	8006fd8 <USBH_MSC_RdWrProcess+0xa6>
      else if (scsi_status == USBH_FAIL)
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d109      	bne.n	8006fbc <USBH_MSC_RdWrProcess+0x8a>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	2134      	movs	r1, #52	; 0x34
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3390      	adds	r3, #144	; 0x90
 8006fb6:	2205      	movs	r2, #5
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	e00d      	b.n	8006fd8 <USBH_MSC_RdWrProcess+0xa6>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d10a      	bne.n	8006fd8 <USBH_MSC_RdWrProcess+0xa6>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	2134      	movs	r1, #52	; 0x34
 8006fc8:	fb01 f303 	mul.w	r3, r1, r3
 8006fcc:	4413      	add	r3, r2
 8006fce:	3390      	adds	r3, #144	; 0x90
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006fec:	2300      	movs	r3, #0
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f002 ff38 	bl	8009e64 <osMessageQueuePut>
      break;
 8006ff4:	e088      	b.n	8007108 <USBH_MSC_RdWrProcess+0x1d6>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006ff6:	78f9      	ldrb	r1, [r7, #3]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2200      	movs	r2, #0
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fea9 	bl	8007d58 <USBH_MSC_SCSI_Write>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10b      	bne.n	8007028 <USBH_MSC_RdWrProcess+0xf6>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	2134      	movs	r1, #52	; 0x34
 8007016:	fb01 f303 	mul.w	r3, r1, r3
 800701a:	4413      	add	r3, r2
 800701c:	3390      	adds	r3, #144	; 0x90
 800701e:	2201      	movs	r2, #1
 8007020:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	75fb      	strb	r3, [r7, #23]
 8007026:	e01a      	b.n	800705e <USBH_MSC_RdWrProcess+0x12c>
      else if (scsi_status == USBH_FAIL)
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d109      	bne.n	8007042 <USBH_MSC_RdWrProcess+0x110>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	2134      	movs	r1, #52	; 0x34
 8007034:	fb01 f303 	mul.w	r3, r1, r3
 8007038:	4413      	add	r3, r2
 800703a:	3390      	adds	r3, #144	; 0x90
 800703c:	2205      	movs	r2, #5
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e00d      	b.n	800705e <USBH_MSC_RdWrProcess+0x12c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	2b04      	cmp	r3, #4
 8007046:	d10a      	bne.n	800705e <USBH_MSC_RdWrProcess+0x12c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	2134      	movs	r1, #52	; 0x34
 800704e:	fb01 f303 	mul.w	r3, r1, r3
 8007052:	4413      	add	r3, r2
 8007054:	3390      	adds	r3, #144	; 0x90
 8007056:	2208      	movs	r2, #8
 8007058:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800705a:	2302      	movs	r3, #2
 800705c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2204      	movs	r2, #4
 8007062:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007072:	2300      	movs	r3, #0
 8007074:	2200      	movs	r2, #0
 8007076:	f002 fef5 	bl	8009e64 <osMessageQueuePut>
      break;
 800707a:	e045      	b.n	8007108 <USBH_MSC_RdWrProcess+0x1d6>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	2234      	movs	r2, #52	; 0x34
 8007080:	fb02 f303 	mul.w	r3, r2, r3
 8007084:	3398      	adds	r3, #152	; 0x98
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4413      	add	r3, r2
 800708a:	1d1a      	adds	r2, r3, #4
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fde8 	bl	8007c66 <USBH_MSC_SCSI_RequestSense>
 8007096:	4603      	mov	r3, r0
 8007098:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d113      	bne.n	80070c8 <USBH_MSC_RdWrProcess+0x196>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	2134      	movs	r1, #52	; 0x34
 80070a6:	fb01 f303 	mul.w	r3, r1, r3
 80070aa:	4413      	add	r3, r2
 80070ac:	3390      	adds	r3, #144	; 0x90
 80070ae:	2201      	movs	r2, #1
 80070b0:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80070b2:	78fb      	ldrb	r3, [r7, #3]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	2134      	movs	r1, #52	; 0x34
 80070b8:	fb01 f303 	mul.w	r3, r1, r3
 80070bc:	4413      	add	r3, r2
 80070be:	3391      	adds	r3, #145	; 0x91
 80070c0:	2202      	movs	r2, #2
 80070c2:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 80070c4:	2302      	movs	r3, #2
 80070c6:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d00d      	beq.n	80070ea <USBH_MSC_RdWrProcess+0x1b8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d10a      	bne.n	80070ea <USBH_MSC_RdWrProcess+0x1b8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	2134      	movs	r1, #52	; 0x34
 80070da:	fb01 f303 	mul.w	r3, r1, r3
 80070de:	4413      	add	r3, r2
 80070e0:	3390      	adds	r3, #144	; 0x90
 80070e2:	2208      	movs	r2, #8
 80070e4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80070e6:	2302      	movs	r3, #2
 80070e8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2204      	movs	r2, #4
 80070ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80070fe:	2300      	movs	r3, #0
 8007100:	2200      	movs	r2, #0
 8007102:	f002 feaf 	bl	8009e64 <osMessageQueuePut>
      break;
 8007106:	bf00      	nop

  }
  return error;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b0b      	cmp	r3, #11
 8007130:	d10c      	bne.n	800714c <USBH_MSC_UnitIsReady+0x3a>
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	2134      	movs	r1, #52	; 0x34
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	4413      	add	r3, r2
 800713e:	3391      	adds	r3, #145	; 0x91
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007146:	2301      	movs	r3, #1
 8007148:	73fb      	strb	r3, [r7, #15]
 800714a:	e001      	b.n	8007150 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b086      	sub	sp, #24
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	460b      	mov	r3, r1
 8007168:	607a      	str	r2, [r7, #4]
 800716a:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b0b      	cmp	r3, #11
 800717e:	d10d      	bne.n	800719c <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	2234      	movs	r2, #52	; 0x34
 8007184:	fb02 f303 	mul.w	r3, r2, r3
 8007188:	3390      	adds	r3, #144	; 0x90
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4413      	add	r3, r2
 800718e:	2234      	movs	r2, #52	; 0x34
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f005 ff7a 	bl	800d08c <memcpy>
    return USBH_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b088      	sub	sp, #32
 80071aa:	af02      	add	r7, sp, #8
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	460b      	mov	r3, r1
 80071b4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00e      	beq.n	80071ea <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80071d2:	2b0b      	cmp	r3, #11
 80071d4:	d109      	bne.n	80071ea <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80071d6:	7afb      	ldrb	r3, [r7, #11]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	2134      	movs	r1, #52	; 0x34
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	4413      	add	r3, r2
 80071e2:	3390      	adds	r3, #144	; 0x90
 80071e4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d001      	beq.n	80071ee <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80071ea:	2302      	movs	r3, #2
 80071ec:	e040      	b.n	8007270 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2206      	movs	r2, #6
 80071f2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80071f4:	7afb      	ldrb	r3, [r7, #11]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	2134      	movs	r1, #52	; 0x34
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	4413      	add	r3, r2
 8007200:	3390      	adds	r3, #144	; 0x90
 8007202:	2206      	movs	r2, #6
 8007204:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007206:	7afb      	ldrb	r3, [r7, #11]
 8007208:	b29a      	uxth	r2, r3
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007210:	7af9      	ldrb	r1, [r7, #11]
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fe07 	bl	8007e2e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007226:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007228:	e016      	b.n	8007258 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad2      	subs	r2, r2, r3
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	f242 7110 	movw	r1, #10000	; 0x2710
 800723a:	fb01 f303 	mul.w	r3, r1, r3
 800723e:	429a      	cmp	r2, r3
 8007240:	d805      	bhi.n	800724e <USBH_MSC_Read+0xa8>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2201      	movs	r2, #1
 8007252:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007254:	2302      	movs	r3, #2
 8007256:	e00b      	b.n	8007270 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	4619      	mov	r1, r3
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff fe68 	bl	8006f32 <USBH_MSC_RdWrProcess>
 8007262:	4603      	mov	r3, r0
 8007264:	2b01      	cmp	r3, #1
 8007266:	d0e0      	beq.n	800722a <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2201      	movs	r2, #1
 800726c:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af02      	add	r7, sp, #8
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	460b      	mov	r3, r1
 8007286:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00e      	beq.n	80072bc <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80072a4:	2b0b      	cmp	r3, #11
 80072a6:	d109      	bne.n	80072bc <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	2134      	movs	r1, #52	; 0x34
 80072ae:	fb01 f303 	mul.w	r3, r1, r3
 80072b2:	4413      	add	r3, r2
 80072b4:	3390      	adds	r3, #144	; 0x90
 80072b6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d001      	beq.n	80072c0 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80072bc:	2302      	movs	r3, #2
 80072be:	e040      	b.n	8007342 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2207      	movs	r2, #7
 80072c4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80072c6:	7afb      	ldrb	r3, [r7, #11]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	2134      	movs	r1, #52	; 0x34
 80072cc:	fb01 f303 	mul.w	r3, r1, r3
 80072d0:	4413      	add	r3, r2
 80072d2:	3390      	adds	r3, #144	; 0x90
 80072d4:	2207      	movs	r2, #7
 80072d6:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80072d8:	7afb      	ldrb	r3, [r7, #11]
 80072da:	b29a      	uxth	r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80072e2:	7af9      	ldrb	r1, [r7, #11]
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fd33 	bl	8007d58 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072f8:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80072fa:	e016      	b.n	800732a <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad2      	subs	r2, r2, r3
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f242 7110 	movw	r1, #10000	; 0x2710
 800730c:	fb01 f303 	mul.w	r3, r1, r3
 8007310:	429a      	cmp	r2, r3
 8007312:	d805      	bhi.n	8007320 <USBH_MSC_Write+0xa8>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d104      	bne.n	800732a <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2201      	movs	r2, #1
 8007324:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007326:	2302      	movs	r3, #2
 8007328:	e00b      	b.n	8007342 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	4619      	mov	r1, r3
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7ff fdff 	bl	8006f32 <USBH_MSC_RdWrProcess>
 8007334:	4603      	mov	r3, r0
 8007336:	2b01      	cmp	r3, #1
 8007338:	d0e0      	beq.n	80072fc <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2201      	movs	r2, #1
 800733e:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2221      	movs	r2, #33	; 0x21
 8007356:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	22ff      	movs	r2, #255	; 0xff
 800735c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007370:	2200      	movs	r2, #0
 8007372:	2100      	movs	r1, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 ff7a 	bl	800926e <USBH_CtlReq>
 800737a:	4603      	mov	r3, r0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	22a1      	movs	r2, #161	; 0xa1
 8007392:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	22fe      	movs	r2, #254	; 0xfe
 8007398:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80073ac:	2201      	movs	r2, #1
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 ff5c 	bl	800926e <USBH_CtlReq>
 80073b6:	4603      	mov	r3, r0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4a09      	ldr	r2, [pc, #36]	; (80073fc <USBH_MSC_BOT_Init+0x3c>)
 80073d6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4a09      	ldr	r2, [pc, #36]	; (8007400 <USBH_MSC_BOT_Init+0x40>)
 80073dc:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	43425355 	.word	0x43425355
 8007400:	20304050 	.word	0x20304050

08007404 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af02      	add	r7, sp, #8
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007410:	2301      	movs	r3, #1
 8007412:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007414:	2301      	movs	r3, #1
 8007416:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007418:	2301      	movs	r3, #1
 800741a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800741c:	2300      	movs	r3, #0
 800741e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007434:	3b01      	subs	r3, #1
 8007436:	2b0a      	cmp	r3, #10
 8007438:	f200 822d 	bhi.w	8007896 <USBH_MSC_BOT_Process+0x492>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <USBH_MSC_BOT_Process+0x40>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007471 	.word	0x08007471
 8007448:	0800749b 	.word	0x0800749b
 800744c:	08007559 	.word	0x08007559
 8007450:	08007577 	.word	0x08007577
 8007454:	08007633 	.word	0x08007633
 8007458:	08007657 	.word	0x08007657
 800745c:	08007745 	.word	0x08007745
 8007460:	08007761 	.word	0x08007761
 8007464:	080077eb 	.word	0x080077eb
 8007468:	0800781b 	.word	0x0800781b
 800746c:	0800787d 	.word	0x0800787d
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	795a      	ldrb	r2, [r3, #5]
 800748a:	2301      	movs	r3, #1
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	221f      	movs	r2, #31
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f002 f9eb 	bl	800986e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007498:	e20c      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	795b      	ldrb	r3, [r3, #5]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f005 fcd5 	bl	800ce50 <USBH_LL_GetURBState>
 80074a6:	4603      	mov	r3, r0
 80074a8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80074aa:	7d3b      	ldrb	r3, [r7, #20]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d126      	bne.n	80074fe <USBH_MSC_BOT_Process+0xfa>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00f      	beq.n	80074d8 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80074be:	b25b      	sxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da04      	bge.n	80074ce <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2203      	movs	r2, #3
 80074c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80074cc:	e008      	b.n	80074e0 <USBH_MSC_BOT_Process+0xdc>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2205      	movs	r2, #5
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80074d6:	e003      	b.n	80074e0 <USBH_MSC_BOT_Process+0xdc>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2207      	movs	r2, #7
 80074dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074f4:	2300      	movs	r3, #0
 80074f6:	2200      	movs	r2, #0
 80074f8:	f002 fcb4 	bl	8009e64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80074fc:	e1cd      	b.n	800789a <USBH_MSC_BOT_Process+0x496>
      else if (URB_Status == USBH_URB_NOTREADY)
 80074fe:	7d3b      	ldrb	r3, [r7, #20]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d112      	bne.n	800752a <USBH_MSC_BOT_Process+0x126>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007520:	2300      	movs	r3, #0
 8007522:	2200      	movs	r2, #0
 8007524:	f002 fc9e 	bl	8009e64 <osMessageQueuePut>
      break;
 8007528:	e1b7      	b.n	800789a <USBH_MSC_BOT_Process+0x496>
        if (URB_Status == USBH_URB_STALL)
 800752a:	7d3b      	ldrb	r3, [r7, #20]
 800752c:	2b05      	cmp	r3, #5
 800752e:	f040 81b4 	bne.w	800789a <USBH_MSC_BOT_Process+0x496>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	220a      	movs	r2, #10
 8007536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2202      	movs	r2, #2
 800753e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800754e:	2300      	movs	r3, #0
 8007550:	2200      	movs	r2, #0
 8007552:	f002 fc87 	bl	8009e64 <osMessageQueuePut>
      break;
 8007556:	e1a0      	b.n	800789a <USBH_MSC_BOT_Process+0x496>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	895a      	ldrh	r2, [r3, #10]
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	791b      	ldrb	r3, [r3, #4]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f002 f9a6 	bl	80098b8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2204      	movs	r2, #4
 8007570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8007574:	e19e      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f005 fc67 	bl	800ce50 <USBH_LL_GetURBState>
 8007582:	4603      	mov	r3, r0
 8007584:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007586:	7d3b      	ldrb	r3, [r7, #20]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d13b      	bne.n	8007604 <USBH_MSC_BOT_Process+0x200>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	8952      	ldrh	r2, [r2, #10]
 8007594:	4293      	cmp	r3, r2
 8007596:	d910      	bls.n	80075ba <USBH_MSC_BOT_Process+0x1b6>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	8952      	ldrh	r2, [r2, #10]
 80075a2:	441a      	add	r2, r3
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	8952      	ldrh	r2, [r2, #10]
 80075b2:	1a9a      	subs	r2, r3, r2
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80075b8:	e002      	b.n	80075c0 <USBH_MSC_BOT_Process+0x1bc>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2200      	movs	r2, #0
 80075be:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <USBH_MSC_BOT_Process+0x1da>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	895a      	ldrh	r2, [r3, #10]
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	791b      	ldrb	r3, [r3, #4]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f002 f96e 	bl	80098b8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80075dc:	e15f      	b.n	800789e <USBH_MSC_BOT_Process+0x49a>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2207      	movs	r2, #7
 80075e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80075fa:	2300      	movs	r3, #0
 80075fc:	2200      	movs	r2, #0
 80075fe:	f002 fc31 	bl	8009e64 <osMessageQueuePut>
      break;
 8007602:	e14c      	b.n	800789e <USBH_MSC_BOT_Process+0x49a>
      else if (URB_Status == USBH_URB_STALL)
 8007604:	7d3b      	ldrb	r3, [r7, #20]
 8007606:	2b05      	cmp	r3, #5
 8007608:	f040 8149 	bne.w	800789e <USBH_MSC_BOT_Process+0x49a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2209      	movs	r2, #9
 8007610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007628:	2300      	movs	r3, #0
 800762a:	2200      	movs	r2, #0
 800762c:	f002 fc1a 	bl	8009e64 <osMessageQueuePut>
      break;
 8007630:	e135      	b.n	800789e <USBH_MSC_BOT_Process+0x49a>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	891a      	ldrh	r2, [r3, #8]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	7958      	ldrb	r0, [r3, #5]
 8007640:	2301      	movs	r3, #1
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	4603      	mov	r3, r0
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f002 f911 	bl	800986e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2206      	movs	r2, #6
 8007650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007654:	e12e      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	795b      	ldrb	r3, [r3, #5]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f005 fbf7 	bl	800ce50 <USBH_LL_GetURBState>
 8007662:	4603      	mov	r3, r0
 8007664:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007666:	7d3b      	ldrb	r3, [r7, #20]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d13e      	bne.n	80076ea <USBH_MSC_BOT_Process+0x2e6>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	8912      	ldrh	r2, [r2, #8]
 8007674:	4293      	cmp	r3, r2
 8007676:	d910      	bls.n	800769a <USBH_MSC_BOT_Process+0x296>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	8912      	ldrh	r2, [r2, #8]
 8007682:	441a      	add	r2, r3
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	8912      	ldrh	r2, [r2, #8]
 8007692:	1a9a      	subs	r2, r3, r2
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	65da      	str	r2, [r3, #92]	; 0x5c
 8007698:	e002      	b.n	80076a0 <USBH_MSC_BOT_Process+0x29c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2200      	movs	r2, #0
 800769e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00d      	beq.n	80076c4 <USBH_MSC_BOT_Process+0x2c0>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	891a      	ldrh	r2, [r3, #8]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	7958      	ldrb	r0, [r3, #5]
 80076b6:	2301      	movs	r3, #1
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	4603      	mov	r3, r0
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f002 f8d6 	bl	800986e <USBH_BulkSendData>
 80076c2:	e003      	b.n	80076cc <USBH_MSC_BOT_Process+0x2c8>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2207      	movs	r2, #7
 80076c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80076e0:	2300      	movs	r3, #0
 80076e2:	2200      	movs	r2, #0
 80076e4:	f002 fbbe 	bl	8009e64 <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 80076e8:	e0db      	b.n	80078a2 <USBH_MSC_BOT_Process+0x49e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80076ea:	7d3b      	ldrb	r3, [r7, #20]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d112      	bne.n	8007716 <USBH_MSC_BOT_Process+0x312>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2205      	movs	r2, #5
 80076f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800770c:	2300      	movs	r3, #0
 800770e:	2200      	movs	r2, #0
 8007710:	f002 fba8 	bl	8009e64 <osMessageQueuePut>
      break;
 8007714:	e0c5      	b.n	80078a2 <USBH_MSC_BOT_Process+0x49e>
      else if (URB_Status == USBH_URB_STALL)
 8007716:	7d3b      	ldrb	r3, [r7, #20]
 8007718:	2b05      	cmp	r3, #5
 800771a:	f040 80c2 	bne.w	80078a2 <USBH_MSC_BOT_Process+0x49e>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	220a      	movs	r2, #10
 8007722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2202      	movs	r2, #2
 800772a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800773a:	2300      	movs	r3, #0
 800773c:	2200      	movs	r2, #0
 800773e:	f002 fb91 	bl	8009e64 <osMessageQueuePut>
      break;
 8007742:	e0ae      	b.n	80078a2 <USBH_MSC_BOT_Process+0x49e>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	791b      	ldrb	r3, [r3, #4]
 800774e:	220d      	movs	r2, #13
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f002 f8b1 	bl	80098b8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	2208      	movs	r2, #8
 800775a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800775e:	e0a9      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	791b      	ldrb	r3, [r3, #4]
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f005 fb72 	bl	800ce50 <USBH_LL_GetURBState>
 800776c:	4603      	mov	r3, r0
 800776e:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007770:	7d3b      	ldrb	r3, [r7, #20]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d123      	bne.n	80077be <USBH_MSC_BOT_Process+0x3ba>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f8c6 	bl	8007918 <USBH_MSC_DecodeCSW>
 800778c:	4603      	mov	r3, r0
 800778e:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007790:	7d7b      	ldrb	r3, [r7, #21]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <USBH_MSC_BOT_Process+0x398>
        {
          status = USBH_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	75fb      	strb	r3, [r7, #23]
 800779a:	e001      	b.n	80077a0 <USBH_MSC_BOT_Process+0x39c>
        }
        else
        {
          status = USBH_FAIL;
 800779c:	2302      	movs	r3, #2
 800779e:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80077b4:	2300      	movs	r3, #0
 80077b6:	2200      	movs	r2, #0
 80077b8:	f002 fb54 	bl	8009e64 <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 80077bc:	e073      	b.n	80078a6 <USBH_MSC_BOT_Process+0x4a2>
      else if (URB_Status == USBH_URB_STALL)
 80077be:	7d3b      	ldrb	r3, [r7, #20]
 80077c0:	2b05      	cmp	r3, #5
 80077c2:	d170      	bne.n	80078a6 <USBH_MSC_BOT_Process+0x4a2>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	2209      	movs	r2, #9
 80077c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80077e0:	2300      	movs	r3, #0
 80077e2:	2200      	movs	r2, #0
 80077e4:	f002 fb3e 	bl	8009e64 <osMessageQueuePut>
      break;
 80077e8:	e05d      	b.n	80078a6 <USBH_MSC_BOT_Process+0x4a2>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80077ea:	78fb      	ldrb	r3, [r7, #3]
 80077ec:	2200      	movs	r2, #0
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f865 	bl	80078c0 <USBH_MSC_BOT_Abort>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80077fa:	7dbb      	ldrb	r3, [r7, #22]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <USBH_MSC_BOT_Process+0x406>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2207      	movs	r2, #7
 8007804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007808:	e04f      	b.n	80078aa <USBH_MSC_BOT_Process+0x4a6>
      else if (error == USBH_UNRECOVERED_ERROR)
 800780a:	7dbb      	ldrb	r3, [r7, #22]
 800780c:	2b04      	cmp	r3, #4
 800780e:	d14c      	bne.n	80078aa <USBH_MSC_BOT_Process+0x4a6>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	220b      	movs	r2, #11
 8007814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007818:	e047      	b.n	80078aa <USBH_MSC_BOT_Process+0x4a6>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	2201      	movs	r2, #1
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f84d 	bl	80078c0 <USBH_MSC_BOT_Abort>
 8007826:	4603      	mov	r3, r0
 8007828:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800782a:	7dbb      	ldrb	r3, [r7, #22]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d11d      	bne.n	800786c <USBH_MSC_BOT_Process+0x468>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	795b      	ldrb	r3, [r3, #5]
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f005 fb67 	bl	800cf0a <USBH_LL_GetToggle>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	7959      	ldrb	r1, [r3, #5]
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	f1c3 0301 	rsb	r3, r3, #1
 800784a:	b2db      	uxtb	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f005 fb28 	bl	800cea4 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	791b      	ldrb	r3, [r3, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f005 fb21 	bl	800cea4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2209      	movs	r2, #9
 8007866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800786a:	e020      	b.n	80078ae <USBH_MSC_BOT_Process+0x4aa>
        if (error == USBH_UNRECOVERED_ERROR)
 800786c:	7dbb      	ldrb	r3, [r7, #22]
 800786e:	2b04      	cmp	r3, #4
 8007870:	d11d      	bne.n	80078ae <USBH_MSC_BOT_Process+0x4aa>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	220b      	movs	r2, #11
 8007876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800787a:	e018      	b.n	80078ae <USBH_MSC_BOT_Process+0x4aa>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff fd64 	bl	800734a <USBH_MSC_BOT_REQ_Reset>
 8007882:	4603      	mov	r3, r0
 8007884:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d112      	bne.n	80078b2 <USBH_MSC_BOT_Process+0x4ae>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8007894:	e00d      	b.n	80078b2 <USBH_MSC_BOT_Process+0x4ae>

    default:
      break;
 8007896:	bf00      	nop
 8007898:	e00c      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800789a:	bf00      	nop
 800789c:	e00a      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800789e:	bf00      	nop
 80078a0:	e008      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80078a2:	bf00      	nop
 80078a4:	e006      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80078a6:	bf00      	nop
 80078a8:	e004      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80078aa:	bf00      	nop
 80078ac:	e002      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80078ae:	bf00      	nop
 80078b0:	e000      	b.n	80078b4 <USBH_MSC_BOT_Process+0x4b0>
      break;
 80078b2:	bf00      	nop
  }
  return status;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop

080078c0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
 80078cc:	4613      	mov	r3, r2
 80078ce:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80078d0:	2302      	movs	r3, #2
 80078d2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80078de:	78bb      	ldrb	r3, [r7, #2]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <USBH_MSC_BOT_Abort+0x2a>
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d009      	beq.n	80078fc <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80078e8:	e011      	b.n	800790e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	79db      	ldrb	r3, [r3, #7]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 fadc 	bl	8008eae <USBH_ClrFeature>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]
      break;
 80078fa:	e008      	b.n	800790e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	799b      	ldrb	r3, [r3, #6]
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 fad3 	bl	8008eae <USBH_ClrFeature>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
      break;
 800790c:	bf00      	nop
  }
  return status;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800792a:	2301      	movs	r3, #1
 800792c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	791b      	ldrb	r3, [r3, #4]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f005 f9f9 	bl	800cd2c <USBH_LL_GetLastXferSize>
 800793a:	4603      	mov	r3, r0
 800793c:	2b0d      	cmp	r3, #13
 800793e:	d002      	beq.n	8007946 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8007940:	2302      	movs	r3, #2
 8007942:	73fb      	strb	r3, [r7, #15]
 8007944:	e024      	b.n	8007990 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800794a:	4a14      	ldr	r2, [pc, #80]	; (800799c <USBH_MSC_DecodeCSW+0x84>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d11d      	bne.n	800798c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007958:	429a      	cmp	r2, r3
 800795a:	d119      	bne.n	8007990 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007962:	2b00      	cmp	r3, #0
 8007964:	d102      	bne.n	800796c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
 800796a:	e011      	b.n	8007990 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007972:	2b01      	cmp	r3, #1
 8007974:	d102      	bne.n	800797c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007976:	2301      	movs	r3, #1
 8007978:	73fb      	strb	r3, [r7, #15]
 800797a:	e009      	b.n	8007990 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007982:	2b02      	cmp	r3, #2
 8007984:	d104      	bne.n	8007990 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007986:	2302      	movs	r3, #2
 8007988:	73fb      	strb	r3, [r7, #15]
 800798a:	e001      	b.n	8007990 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800798c:	2302      	movs	r3, #2
 800798e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	53425355 	.word	0x53425355

080079a0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80079ac:	2302      	movs	r3, #2
 80079ae:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d002      	beq.n	80079ca <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d021      	beq.n	8007a0c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80079c8:	e028      	b.n	8007a1c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2200      	movs	r2, #0
 80079ce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	220a      	movs	r2, #10
 80079dc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	3363      	adds	r3, #99	; 0x63
 80079e4:	2210      	movs	r2, #16
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f005 fb5a 	bl	800d0a2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2202      	movs	r2, #2
 8007a02:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8007a06:	2301      	movs	r3, #1
 8007a08:	73fb      	strb	r3, [r7, #15]
      break;
 8007a0a:	e007      	b.n	8007a1c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff fcf7 	bl	8007404 <USBH_MSC_BOT_Process>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]
      break;
 8007a1a:	bf00      	nop
  }

  return error;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	607a      	str	r2, [r7, #4]
 8007a32:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8007a34:	2301      	movs	r3, #1
 8007a36:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d002      	beq.n	8007a52 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d027      	beq.n	8007aa0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007a50:	e05f      	b.n	8007b12 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2208      	movs	r2, #8
 8007a56:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	2280      	movs	r2, #128	; 0x80
 8007a5c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	220a      	movs	r2, #10
 8007a64:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	3363      	adds	r3, #99	; 0x63
 8007a6c:	2210      	movs	r2, #16
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	f005 fb16 	bl	800d0a2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2225      	movs	r2, #37	; 0x25
 8007a7a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f103 0210 	add.w	r2, r3, #16
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9e:	e038      	b.n	8007b12 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f7ff fcad 	bl	8007404 <USBH_MSC_BOT_Process>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d12d      	bne.n	8007b10 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aba:	3303      	adds	r3, #3
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ac6:	3302      	adds	r3, #2
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	021b      	lsls	r3, r3, #8
 8007acc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007ada:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	061b      	lsls	r3, r3, #24
 8007ae6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af2:	3307      	adds	r3, #7
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007afe:	3306      	adds	r3, #6
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	809a      	strh	r2, [r3, #4]
      break;
 8007b10:	bf00      	nop
  }

  return error;
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	460b      	mov	r3, r1
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d002      	beq.n	8007b48 <USBH_MSC_SCSI_Inquiry+0x2c>
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d03d      	beq.n	8007bc2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007b46:	e089      	b.n	8007c5c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2224      	movs	r2, #36	; 0x24
 8007b4c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2280      	movs	r2, #128	; 0x80
 8007b52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	220a      	movs	r2, #10
 8007b5a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	3363      	adds	r3, #99	; 0x63
 8007b62:	220a      	movs	r2, #10
 8007b64:	2100      	movs	r1, #0
 8007b66:	4618      	mov	r0, r3
 8007b68:	f005 fa9b 	bl	800d0a2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2212      	movs	r2, #18
 8007b70:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	015b      	lsls	r3, r3, #5
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2224      	movs	r2, #36	; 0x24
 8007b94:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f103 0210 	add.w	r2, r3, #16
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc0:	e04c      	b.n	8007c5c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007bc2:	7afb      	ldrb	r3, [r7, #11]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f7ff fc1c 	bl	8007404 <USBH_MSC_BOT_Process>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d141      	bne.n	8007c5a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007bd6:	2222      	movs	r2, #34	; 0x22
 8007bd8:	2100      	movs	r1, #0
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f005 fa61 	bl	800d0a2 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c08:	3301      	adds	r3, #1
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	b25b      	sxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	da03      	bge.n	8007c1a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	709a      	strb	r2, [r3, #2]
 8007c18:	e002      	b.n	8007c20 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	1cd8      	adds	r0, r3, #3
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	2208      	movs	r2, #8
 8007c2e:	4619      	mov	r1, r3
 8007c30:	f005 fa2c 	bl	800d08c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f103 000c 	add.w	r0, r3, #12
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c40:	3310      	adds	r3, #16
 8007c42:	2210      	movs	r2, #16
 8007c44:	4619      	mov	r1, r3
 8007c46:	f005 fa21 	bl	800d08c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	331d      	adds	r3, #29
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007c54:	3220      	adds	r2, #32
 8007c56:	6812      	ldr	r2, [r2, #0]
 8007c58:	601a      	str	r2, [r3, #0]
      break;
 8007c5a:	bf00      	nop
  }

  return error;
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b086      	sub	sp, #24
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	607a      	str	r2, [r7, #4]
 8007c72:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007c74:	2302      	movs	r3, #2
 8007c76:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d002      	beq.n	8007c92 <USBH_MSC_SCSI_RequestSense+0x2c>
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d03d      	beq.n	8007d0c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007c90:	e05d      	b.n	8007d4e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	220e      	movs	r2, #14
 8007c96:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2280      	movs	r2, #128	; 0x80
 8007c9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	220a      	movs	r2, #10
 8007ca4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	3363      	adds	r3, #99	; 0x63
 8007cac:	2210      	movs	r2, #16
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f005 f9f6 	bl	800d0a2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	2203      	movs	r2, #3
 8007cba:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007cbe:	7afb      	ldrb	r3, [r7, #11]
 8007cc0:	015b      	lsls	r3, r3, #5
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	220e      	movs	r2, #14
 8007cde:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f103 0210 	add.w	r2, r3, #16
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007d06:	2301      	movs	r3, #1
 8007d08:	75fb      	strb	r3, [r7, #23]
      break;
 8007d0a:	e020      	b.n	8007d4e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007d0c:	7afb      	ldrb	r3, [r7, #11]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fb77 	bl	8007404 <USBH_MSC_BOT_Process>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d115      	bne.n	8007d4c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d26:	3302      	adds	r3, #2
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d3a:	7b1a      	ldrb	r2, [r3, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d46:	7b5a      	ldrb	r2, [r3, #13]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	709a      	strb	r2, [r3, #2]
      break;
 8007d4c:	bf00      	nop
  }

  return error;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	607a      	str	r2, [r7, #4]
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	460b      	mov	r3, r1
 8007d66:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d002      	beq.n	8007d86 <USBH_MSC_SCSI_Write+0x2e>
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d047      	beq.n	8007e14 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007d84:	e04e      	b.n	8007e24 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	fb03 f202 	mul.w	r2, r3, r2
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	220a      	movs	r2, #10
 8007da4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	3363      	adds	r3, #99	; 0x63
 8007dac:	2210      	movs	r2, #16
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f005 f976 	bl	800d0a2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	222a      	movs	r2, #42	; 0x2a
 8007dba:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007dbe:	79fa      	ldrb	r2, [r7, #7]
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007dc6:	79ba      	ldrb	r2, [r7, #6]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007dce:	797a      	ldrb	r2, [r7, #5]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007dd6:	1d3b      	adds	r3, r7, #4
 8007dd8:	781a      	ldrb	r2, [r3, #0]
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007de0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007dea:	f107 0320 	add.w	r3, r7, #32
 8007dee:	781a      	ldrb	r2, [r3, #0]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	2202      	movs	r2, #2
 8007e02:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	75fb      	strb	r3, [r7, #23]
      break;
 8007e12:	e007      	b.n	8007e24 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	4619      	mov	r1, r3
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff faf3 	bl	8007404 <USBH_MSC_BOT_Process>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	75fb      	strb	r3, [r7, #23]
      break;
 8007e22:	bf00      	nop
  }

  return error;
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b086      	sub	sp, #24
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d002      	beq.n	8007e5c <USBH_MSC_SCSI_Read+0x2e>
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d047      	beq.n	8007eea <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007e5a:	e04e      	b.n	8007efa <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007e62:	461a      	mov	r2, r3
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	fb03 f202 	mul.w	r2, r3, r2
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2280      	movs	r2, #128	; 0x80
 8007e72:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	220a      	movs	r2, #10
 8007e7a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	3363      	adds	r3, #99	; 0x63
 8007e82:	2210      	movs	r2, #16
 8007e84:	2100      	movs	r1, #0
 8007e86:	4618      	mov	r0, r3
 8007e88:	f005 f90b 	bl	800d0a2 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	2228      	movs	r2, #40	; 0x28
 8007e90:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007e94:	79fa      	ldrb	r2, [r7, #7]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007e9c:	79ba      	ldrb	r2, [r7, #6]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007ea4:	797a      	ldrb	r2, [r7, #5]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007eb6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007ec0:	f107 0320 	add.w	r3, r7, #32
 8007ec4:	781a      	ldrb	r2, [r3, #0]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee8:	e007      	b.n	8007efa <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	4619      	mov	r1, r3
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f7ff fa88 	bl	8007404 <USBH_MSC_BOT_Process>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef8:	bf00      	nop
  }

  return error;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e044      	b.n	8007fa6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	79fa      	ldrb	r2, [r7, #7]
 8007f20:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f841 	bl	8007fbc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2104      	movs	r1, #4
 8007f6c:	2010      	movs	r0, #16
 8007f6e:	f001 fef3 	bl	8009d58 <osMessageQueueNew>
 8007f72:	4602      	mov	r2, r0
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <USBH_Init+0xac>)
 8007f7c:	4a0d      	ldr	r2, [pc, #52]	; (8007fb4 <USBH_Init+0xb0>)
 8007f7e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <USBH_Init+0xac>)
 8007f82:	2280      	movs	r2, #128	; 0x80
 8007f84:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007f86:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <USBH_Init+0xac>)
 8007f88:	2218      	movs	r2, #24
 8007f8a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007f8c:	4a08      	ldr	r2, [pc, #32]	; (8007fb0 <USBH_Init+0xac>)
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	4809      	ldr	r0, [pc, #36]	; (8007fb8 <USBH_Init+0xb4>)
 8007f92:	f001 fe0d 	bl	8009bb0 <osThreadNew>
 8007f96:	4602      	mov	r2, r0
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f004 fe12 	bl	800cbc8 <USBH_LL_Init>

  return USBH_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20004fd0 	.word	0x20004fd0
 8007fb4:	0800d288 	.word	0x0800d288
 8007fb8:	08008c25 	.word	0x08008c25

08007fbc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	e009      	b.n	8007fe2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	33e0      	adds	r3, #224	; 0xe0
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b0e      	cmp	r3, #14
 8007fe6:	d9f2      	bls.n	8007fce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	e009      	b.n	8008002 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3301      	adds	r3, #1
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008008:	d3f1      	bcc.n	8007fee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2240      	movs	r2, #64	; 0x40
 800802e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d016      	beq.n	80080a6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10e      	bne.n	80080a0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008088:	1c59      	adds	r1, r3, #1
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	33de      	adds	r3, #222	; 0xde
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
 800809e:	e004      	b.n	80080aa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80080a0:	2302      	movs	r3, #2
 80080a2:	73fb      	strb	r3, [r7, #15]
 80080a4:	e001      	b.n	80080aa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80080a6:	2302      	movs	r3, #2
 80080a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80080ce:	78fa      	ldrb	r2, [r7, #3]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d204      	bcs.n	80080de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	78fa      	ldrb	r2, [r7, #3]
 80080d8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80080dc:	e001      	b.n	80080e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80080de:	2302      	movs	r3, #2
 80080e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	461a      	mov	r2, r3
 80080fe:	4603      	mov	r3, r0
 8008100:	70fb      	strb	r3, [r7, #3]
 8008102:	460b      	mov	r3, r1
 8008104:	70bb      	strb	r3, [r7, #2]
 8008106:	4613      	mov	r3, r2
 8008108:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800810e:	2300      	movs	r3, #0
 8008110:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008118:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800811a:	e025      	b.n	8008168 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	221a      	movs	r2, #26
 8008120:	fb02 f303 	mul.w	r3, r2, r3
 8008124:	3308      	adds	r3, #8
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	3302      	adds	r3, #2
 800812c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	795b      	ldrb	r3, [r3, #5]
 8008132:	78fa      	ldrb	r2, [r7, #3]
 8008134:	429a      	cmp	r2, r3
 8008136:	d002      	beq.n	800813e <USBH_FindInterface+0x4e>
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	2bff      	cmp	r3, #255	; 0xff
 800813c:	d111      	bne.n	8008162 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008142:	78ba      	ldrb	r2, [r7, #2]
 8008144:	429a      	cmp	r2, r3
 8008146:	d002      	beq.n	800814e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008148:	78bb      	ldrb	r3, [r7, #2]
 800814a:	2bff      	cmp	r3, #255	; 0xff
 800814c:	d109      	bne.n	8008162 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008152:	787a      	ldrb	r2, [r7, #1]
 8008154:	429a      	cmp	r2, r3
 8008156:	d002      	beq.n	800815e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008158:	787b      	ldrb	r3, [r7, #1]
 800815a:	2bff      	cmp	r3, #255	; 0xff
 800815c:	d101      	bne.n	8008162 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	e006      	b.n	8008170 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	3301      	adds	r3, #1
 8008166:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d9d6      	bls.n	800811c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800816e:	23ff      	movs	r3, #255	; 0xff
}
 8008170:	4618      	mov	r0, r3
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f004 fd5b 	bl	800cc40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800818a:	2101      	movs	r1, #1
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f004 fe72 	bl	800ce76 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af04      	add	r7, sp, #16
 80081a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80081a4:	2302      	movs	r3, #2
 80081a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d102      	bne.n	80081be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2203      	movs	r2, #3
 80081bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b0b      	cmp	r3, #11
 80081c6:	f200 823c 	bhi.w	8008642 <USBH_Process+0x4a6>
 80081ca:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <USBH_Process+0x34>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	08008201 	.word	0x08008201
 80081d4:	0800824f 	.word	0x0800824f
 80081d8:	080082d3 	.word	0x080082d3
 80081dc:	080085c1 	.word	0x080085c1
 80081e0:	08008643 	.word	0x08008643
 80081e4:	08008393 	.word	0x08008393
 80081e8:	0800854b 	.word	0x0800854b
 80081ec:	080083e5 	.word	0x080083e5
 80081f0:	08008421 	.word	0x08008421
 80081f4:	0800845b 	.word	0x0800845b
 80081f8:	080084a3 	.word	0x080084a3
 80081fc:	080085a9 	.word	0x080085a9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 821c 	beq.w	8008646 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008214:	20c8      	movs	r0, #200	; 0xc8
 8008216:	f004 feab 	bl	800cf70 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f004 fd6b 	bl	800ccf6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008244:	2300      	movs	r3, #0
 8008246:	2200      	movs	r2, #0
 8008248:	f001 fe0c 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800824c:	e1fb      	b.n	8008646 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008254:	2b01      	cmp	r3, #1
 8008256:	d107      	bne.n	8008268 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e025      	b.n	80082b4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800826e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008272:	d914      	bls.n	800829e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800827a:	3301      	adds	r3, #1
 800827c:	b2da      	uxtb	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800828a:	2b03      	cmp	r3, #3
 800828c:	d903      	bls.n	8008296 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	220d      	movs	r2, #13
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e00e      	b.n	80082b4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	e00a      	b.n	80082b4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80082a4:	f103 020a 	add.w	r2, r3, #10
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80082ae:	200a      	movs	r0, #10
 80082b0:	f004 fe5e 	bl	800cf70 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80082c8:	2300      	movs	r3, #0
 80082ca:	2200      	movs	r2, #0
 80082cc:	f001 fdca 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      break;
 80082d0:	e1c0      	b.n	8008654 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082e2:	2104      	movs	r1, #4
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80082e8:	2064      	movs	r0, #100	; 0x64
 80082ea:	f004 fe41 	bl	800cf70 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f004 fcdc 	bl	800ccac <USBH_LL_GetSpeed>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2205      	movs	r2, #5
 8008302:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008304:	2100      	movs	r1, #0
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 fb23 	bl	8009952 <USBH_AllocPipe>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008314:	2180      	movs	r1, #128	; 0x80
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fb1b 	bl	8009952 <USBH_AllocPipe>
 800831c:	4603      	mov	r3, r0
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	7919      	ldrb	r1, [r3, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008338:	b292      	uxth	r2, r2
 800833a:	9202      	str	r2, [sp, #8]
 800833c:	2200      	movs	r2, #0
 800833e:	9201      	str	r2, [sp, #4]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	4603      	mov	r3, r0
 8008344:	2280      	movs	r2, #128	; 0x80
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 fad4 	bl	80098f4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7959      	ldrb	r1, [r3, #5]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008360:	b292      	uxth	r2, r2
 8008362:	9202      	str	r2, [sp, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	9201      	str	r2, [sp, #4]
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	4603      	mov	r3, r0
 800836c:	2200      	movs	r2, #0
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f001 fac0 	bl	80098f4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008388:	2300      	movs	r3, #0
 800838a:	2200      	movs	r2, #0
 800838c:	f001 fd6a 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      break;
 8008390:	e160      	b.n	8008654 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f964 	bl	8008660 <USBH_HandleEnum>
 8008398:	4603      	mov	r3, r0
 800839a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f040 8152 	bne.w	800864a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d103      	bne.n	80083c0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2208      	movs	r2, #8
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	e002      	b.n	80083c6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2207      	movs	r2, #7
 80083c4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2205      	movs	r2, #5
 80083ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80083da:	2300      	movs	r3, #0
 80083dc:	2200      	movs	r2, #0
 80083de:	f001 fd41 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80083e2:	e132      	b.n	800864a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 812f 	beq.w	800864e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083f6:	2101      	movs	r1, #1
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2208      	movs	r2, #8
 8008400:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2205      	movs	r2, #5
 8008406:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008416:	2300      	movs	r3, #0
 8008418:	2200      	movs	r2, #0
 800841a:	f001 fd23 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800841e:	e116      	b.n	800864e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008426:	b29b      	uxth	r3, r3
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fcf8 	bl	8008e20 <USBH_SetCfg>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2209      	movs	r2, #9
 800843a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008450:	2300      	movs	r3, #0
 8008452:	2200      	movs	r2, #0
 8008454:	f001 fd06 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      break;
 8008458:	e0fc      	b.n	8008654 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008468:	2101      	movs	r1, #1
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fcfb 	bl	8008e66 <USBH_SetFeature>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	220a      	movs	r2, #10
 800847a:	701a      	strb	r2, [r3, #0]
 800847c:	e002      	b.n	8008484 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	220a      	movs	r2, #10
 8008482:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008498:	2300      	movs	r3, #0
 800849a:	2200      	movs	r2, #0
 800849c:	f001 fce2 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      break;
 80084a0:	e0d8      	b.n	8008654 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d03f      	beq.n	800852c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
 80084b8:	e016      	b.n	80084e8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80084ba:	7bfa      	ldrb	r2, [r7, #15]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	32de      	adds	r2, #222	; 0xde
 80084c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c4:	791a      	ldrb	r2, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d108      	bne.n	80084e2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80084d0:	7bfa      	ldrb	r2, [r7, #15]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	32de      	adds	r2, #222	; 0xde
 80084d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80084e0:	e005      	b.n	80084ee <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	3301      	adds	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0e5      	beq.n	80084ba <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d016      	beq.n	8008526 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	4798      	blx	r3
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2206      	movs	r2, #6
 800850e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008516:	2103      	movs	r1, #3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	4798      	blx	r3
 800851c:	e006      	b.n	800852c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	220d      	movs	r2, #13
 8008522:	701a      	strb	r2, [r3, #0]
 8008524:	e002      	b.n	800852c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	220d      	movs	r2, #13
 800852a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2205      	movs	r2, #5
 8008530:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008540:	2300      	movs	r3, #0
 8008542:	2200      	movs	r2, #0
 8008544:	f001 fc8e 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      break;
 8008548:	e084      	b.n	8008654 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d017      	beq.n	8008584 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	4798      	blx	r3
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b00      	cmp	r3, #0
 800856a:	d103      	bne.n	8008574 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	220b      	movs	r2, #11
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e00a      	b.n	800858a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d106      	bne.n	800858a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	220d      	movs	r2, #13
 8008580:	701a      	strb	r2, [r3, #0]
 8008582:	e002      	b.n	800858a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	220d      	movs	r2, #13
 8008588:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2205      	movs	r2, #5
 800858e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800859e:	2300      	movs	r3, #0
 80085a0:	2200      	movs	r2, #0
 80085a2:	f001 fc5f 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      break;
 80085a6:	e055      	b.n	8008654 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d04f      	beq.n	8008652 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
      }
      break;
 80085be:	e048      	b.n	8008652 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff fcf7 	bl	8007fbc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d009      	beq.n	80085ec <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d005      	beq.n	8008602 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085fc:	2105      	movs	r1, #5
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b01      	cmp	r3, #1
 800860c:	d107      	bne.n	800861e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff fdb0 	bl	800817c <USBH_Start>
 800861c:	e002      	b.n	8008624 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f004 fb0e 	bl	800cc40 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008638:	2300      	movs	r3, #0
 800863a:	2200      	movs	r2, #0
 800863c:	f001 fc12 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      break;
 8008640:	e008      	b.n	8008654 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008642:	bf00      	nop
 8008644:	e006      	b.n	8008654 <USBH_Process+0x4b8>
      break;
 8008646:	bf00      	nop
 8008648:	e004      	b.n	8008654 <USBH_Process+0x4b8>
      break;
 800864a:	bf00      	nop
 800864c:	e002      	b.n	8008654 <USBH_Process+0x4b8>
    break;
 800864e:	bf00      	nop
 8008650:	e000      	b.n	8008654 <USBH_Process+0x4b8>
      break;
 8008652:	bf00      	nop
  }
  return USBH_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop

08008660 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b088      	sub	sp, #32
 8008664:	af04      	add	r7, sp, #16
 8008666:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008668:	2301      	movs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800866c:	2301      	movs	r3, #1
 800866e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	2b07      	cmp	r3, #7
 8008676:	f200 8208 	bhi.w	8008a8a <USBH_HandleEnum+0x42a>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <USBH_HandleEnum+0x20>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	080086a1 	.word	0x080086a1
 8008684:	0800875f 	.word	0x0800875f
 8008688:	080087c9 	.word	0x080087c9
 800868c:	08008857 	.word	0x08008857
 8008690:	080088c1 	.word	0x080088c1
 8008694:	08008931 	.word	0x08008931
 8008698:	080089cd 	.word	0x080089cd
 800869c:	08008a4b 	.word	0x08008a4b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80086a0:	2108      	movs	r1, #8
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 faec 	bl	8008c80 <USBH_Get_DevDesc>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d130      	bne.n	8008714 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	7919      	ldrb	r1, [r3, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086d6:	b292      	uxth	r2, r2
 80086d8:	9202      	str	r2, [sp, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	9201      	str	r2, [sp, #4]
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	4603      	mov	r3, r0
 80086e2:	2280      	movs	r2, #128	; 0x80
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 f905 	bl	80098f4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	7959      	ldrb	r1, [r3, #5]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086fe:	b292      	uxth	r2, r2
 8008700:	9202      	str	r2, [sp, #8]
 8008702:	2200      	movs	r2, #0
 8008704:	9201      	str	r2, [sp, #4]
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	4603      	mov	r3, r0
 800870a:	2200      	movs	r2, #0
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 f8f1 	bl	80098f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008712:	e1bc      	b.n	8008a8e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	2b03      	cmp	r3, #3
 8008718:	f040 81b9 	bne.w	8008a8e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008722:	3301      	adds	r3, #1
 8008724:	b2da      	uxtb	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008732:	2b03      	cmp	r3, #3
 8008734:	d903      	bls.n	800873e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	220d      	movs	r2, #13
 800873a:	701a      	strb	r2, [r3, #0]
      break;
 800873c:	e1a7      	b.n	8008a8e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	795b      	ldrb	r3, [r3, #5]
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 f925 	bl	8009994 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	791b      	ldrb	r3, [r3, #4]
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 f91f 	bl	8009994 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	701a      	strb	r2, [r3, #0]
      break;
 800875c:	e197      	b.n	8008a8e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800875e:	2112      	movs	r1, #18
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fa8d 	bl	8008c80 <USBH_Get_DevDesc>
 8008766:	4603      	mov	r3, r0
 8008768:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d103      	bne.n	8008778 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008776:	e18c      	b.n	8008a92 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	2b03      	cmp	r3, #3
 800877c:	f040 8189 	bne.w	8008a92 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008786:	3301      	adds	r3, #1
 8008788:	b2da      	uxtb	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008796:	2b03      	cmp	r3, #3
 8008798:	d903      	bls.n	80087a2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	220d      	movs	r2, #13
 800879e:	701a      	strb	r2, [r3, #0]
      break;
 80087a0:	e177      	b.n	8008a92 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	795b      	ldrb	r3, [r3, #5]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 f8f3 	bl	8009994 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	791b      	ldrb	r3, [r3, #4]
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 f8ed 	bl	8009994 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	701a      	strb	r2, [r3, #0]
      break;
 80087c6:	e164      	b.n	8008a92 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80087c8:	2101      	movs	r1, #1
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fb04 	bl	8008dd8 <USBH_SetAddress>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d132      	bne.n	8008840 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80087da:	2002      	movs	r0, #2
 80087dc:	f004 fbc8 	bl	800cf70 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2203      	movs	r2, #3
 80087ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	7919      	ldrb	r1, [r3, #4]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008802:	b292      	uxth	r2, r2
 8008804:	9202      	str	r2, [sp, #8]
 8008806:	2200      	movs	r2, #0
 8008808:	9201      	str	r2, [sp, #4]
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	4603      	mov	r3, r0
 800880e:	2280      	movs	r2, #128	; 0x80
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 f86f 	bl	80098f4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	7959      	ldrb	r1, [r3, #5]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800882a:	b292      	uxth	r2, r2
 800882c:	9202      	str	r2, [sp, #8]
 800882e:	2200      	movs	r2, #0
 8008830:	9201      	str	r2, [sp, #4]
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	4603      	mov	r3, r0
 8008836:	2200      	movs	r2, #0
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f001 f85b 	bl	80098f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800883e:	e12a      	b.n	8008a96 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	2b03      	cmp	r3, #3
 8008844:	f040 8127 	bne.w	8008a96 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	220d      	movs	r2, #13
 800884c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	705a      	strb	r2, [r3, #1]
      break;
 8008854:	e11f      	b.n	8008a96 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008856:	2109      	movs	r1, #9
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fa39 	bl	8008cd0 <USBH_Get_CfgDesc>
 800885e:	4603      	mov	r3, r0
 8008860:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d103      	bne.n	8008870 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2204      	movs	r2, #4
 800886c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800886e:	e114      	b.n	8008a9a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b03      	cmp	r3, #3
 8008874:	f040 8111 	bne.w	8008a9a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800887e:	3301      	adds	r3, #1
 8008880:	b2da      	uxtb	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800888e:	2b03      	cmp	r3, #3
 8008890:	d903      	bls.n	800889a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	220d      	movs	r2, #13
 8008896:	701a      	strb	r2, [r3, #0]
      break;
 8008898:	e0ff      	b.n	8008a9a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	795b      	ldrb	r3, [r3, #5]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 f877 	bl	8009994 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	791b      	ldrb	r3, [r3, #4]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 f871 	bl	8009994 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	701a      	strb	r2, [r3, #0]
      break;
 80088be:	e0ec      	b.n	8008a9a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fa01 	bl	8008cd0 <USBH_Get_CfgDesc>
 80088ce:	4603      	mov	r3, r0
 80088d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d103      	bne.n	80088e0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2205      	movs	r2, #5
 80088dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088de:	e0de      	b.n	8008a9e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	f040 80db 	bne.w	8008a9e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088ee:	3301      	adds	r3, #1
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d903      	bls.n	800890a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	220d      	movs	r2, #13
 8008906:	701a      	strb	r2, [r3, #0]
      break;
 8008908:	e0c9      	b.n	8008a9e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	795b      	ldrb	r3, [r3, #5]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 f83f 	bl	8009994 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	791b      	ldrb	r3, [r3, #4]
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 f839 	bl	8009994 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]
      break;
 800892e:	e0b6      	b.n	8008a9e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008936:	2b00      	cmp	r3, #0
 8008938:	d036      	beq.n	80089a8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008946:	23ff      	movs	r3, #255	; 0xff
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f9e5 	bl	8008d18 <USBH_Get_StringDesc>
 800894e:	4603      	mov	r3, r0
 8008950:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008952:	7bbb      	ldrb	r3, [r7, #14]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d111      	bne.n	800897c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2206      	movs	r2, #6
 800895c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2205      	movs	r2, #5
 8008962:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008972:	2300      	movs	r3, #0
 8008974:	2200      	movs	r2, #0
 8008976:	f001 fa75 	bl	8009e64 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800897a:	e092      	b.n	8008aa2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	2b03      	cmp	r3, #3
 8008980:	f040 808f 	bne.w	8008aa2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2206      	movs	r2, #6
 8008988:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2205      	movs	r2, #5
 800898e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800899e:	2300      	movs	r3, #0
 80089a0:	2200      	movs	r2, #0
 80089a2:	f001 fa5f 	bl	8009e64 <osMessageQueuePut>
      break;
 80089a6:	e07c      	b.n	8008aa2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2206      	movs	r2, #6
 80089ac:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2205      	movs	r2, #5
 80089b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80089c2:	2300      	movs	r3, #0
 80089c4:	2200      	movs	r2, #0
 80089c6:	f001 fa4d 	bl	8009e64 <osMessageQueuePut>
      break;
 80089ca:	e06a      	b.n	8008aa2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d027      	beq.n	8008a26 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80089e2:	23ff      	movs	r3, #255	; 0xff
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f997 	bl	8008d18 <USBH_Get_StringDesc>
 80089ea:	4603      	mov	r3, r0
 80089ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80089ee:	7bbb      	ldrb	r3, [r7, #14]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d103      	bne.n	80089fc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2207      	movs	r2, #7
 80089f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80089fa:	e054      	b.n	8008aa6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d151      	bne.n	8008aa6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2207      	movs	r2, #7
 8008a06:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2205      	movs	r2, #5
 8008a0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f001 fa20 	bl	8009e64 <osMessageQueuePut>
      break;
 8008a24:	e03f      	b.n	8008aa6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2207      	movs	r2, #7
 8008a2a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2205      	movs	r2, #5
 8008a30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008a40:	2300      	movs	r3, #0
 8008a42:	2200      	movs	r2, #0
 8008a44:	f001 fa0e 	bl	8009e64 <osMessageQueuePut>
      break;
 8008a48:	e02d      	b.n	8008aa6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d017      	beq.n	8008a84 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008a60:	23ff      	movs	r3, #255	; 0xff
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f958 	bl	8008d18 <USBH_Get_StringDesc>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d102      	bne.n	8008a78 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008a76:	e018      	b.n	8008aaa <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d115      	bne.n	8008aaa <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73fb      	strb	r3, [r7, #15]
      break;
 8008a82:	e012      	b.n	8008aaa <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]
      break;
 8008a88:	e00f      	b.n	8008aaa <USBH_HandleEnum+0x44a>

    default:
      break;
 8008a8a:	bf00      	nop
 8008a8c:	e00e      	b.n	8008aac <USBH_HandleEnum+0x44c>
      break;
 8008a8e:	bf00      	nop
 8008a90:	e00c      	b.n	8008aac <USBH_HandleEnum+0x44c>
      break;
 8008a92:	bf00      	nop
 8008a94:	e00a      	b.n	8008aac <USBH_HandleEnum+0x44c>
      break;
 8008a96:	bf00      	nop
 8008a98:	e008      	b.n	8008aac <USBH_HandleEnum+0x44c>
      break;
 8008a9a:	bf00      	nop
 8008a9c:	e006      	b.n	8008aac <USBH_HandleEnum+0x44c>
      break;
 8008a9e:	bf00      	nop
 8008aa0:	e004      	b.n	8008aac <USBH_HandleEnum+0x44c>
      break;
 8008aa2:	bf00      	nop
 8008aa4:	e002      	b.n	8008aac <USBH_HandleEnum+0x44c>
      break;
 8008aa6:	bf00      	nop
 8008aa8:	e000      	b.n	8008aac <USBH_HandleEnum+0x44c>
      break;
 8008aaa:	bf00      	nop
  }
  return Status;
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop

08008ab8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f804 	bl	8008afa <USBH_HandleSof>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b0b      	cmp	r3, #11
 8008b0a:	d10a      	bne.n	8008b22 <USBH_HandleSof+0x28>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	4798      	blx	r3
  }
}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2200      	movs	r2, #0
 8008b52:	f001 f987 	bl	8009e64 <osMessageQueuePut>
#endif
#endif

  return;
 8008b56:	bf00      	nop
}
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008b6e:	bf00      	nop
}
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f001 f957 	bl	8009e64 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f004 f848 	bl	800cc76 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	791b      	ldrb	r3, [r3, #4]
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fed1 	bl	8009994 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	795b      	ldrb	r3, [r3, #5]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fecb 	bl	8009994 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008c12:	2300      	movs	r3, #0
 8008c14:	2200      	movs	r2, #0
 8008c16:	f001 f925 	bl	8009e64 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008c38:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f001 f985 	bl	8009f4c <osMessageQueueGet>
 8008c42:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f0      	bne.n	8008c2c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff faa6 	bl	800819c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008c50:	e7ec      	b.n	8008c2c <USBH_Process_OS+0x8>

08008c52 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2200      	movs	r2, #0
 8008c72:	f001 f8f7 	bl	8009e64 <osMessageQueuePut>
#endif

  return USBH_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af02      	add	r7, sp, #8
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008c92:	78fb      	ldrb	r3, [r7, #3]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f864 	bl	8008d6e <USBH_GetDescriptor>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	b292      	uxth	r2, r2
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	f000 f918 	bl	8008ef6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	331c      	adds	r3, #28
 8008ce0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ce2:	887b      	ldrh	r3, [r7, #2]
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cec:	2100      	movs	r1, #0
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f83d 	bl	8008d6e <USBH_GetDescriptor>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	72fb      	strb	r3, [r7, #11]
 8008cf8:	7afb      	ldrb	r3, [r7, #11]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d107      	bne.n	8008d0e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d04:	887a      	ldrh	r2, [r7, #2]
 8008d06:	68f9      	ldr	r1, [r7, #12]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 f964 	bl	8008fd6 <USBH_ParseCfgDesc>
  }

  return status;
 8008d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af02      	add	r7, sp, #8
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	607a      	str	r2, [r7, #4]
 8008d22:	461a      	mov	r2, r3
 8008d24:	460b      	mov	r3, r1
 8008d26:	72fb      	strb	r3, [r7, #11]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008d34:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008d3c:	893b      	ldrh	r3, [r7, #8]
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	460b      	mov	r3, r1
 8008d42:	2100      	movs	r1, #0
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 f812 	bl	8008d6e <USBH_GetDescriptor>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	75fb      	strb	r3, [r7, #23]
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d107      	bne.n	8008d64 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d5a:	893a      	ldrh	r2, [r7, #8]
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fa37 	bl	80091d2 <USBH_ParseStringDesc>
  }

  return status;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	607b      	str	r3, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	72fb      	strb	r3, [r7, #11]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	789b      	ldrb	r3, [r3, #2]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d11c      	bne.n	8008dc2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2206      	movs	r2, #6
 8008d98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	893a      	ldrh	r2, [r7, #8]
 8008d9e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008da0:	893b      	ldrh	r3, [r7, #8]
 8008da2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008daa:	d104      	bne.n	8008db6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f240 4209 	movw	r2, #1033	; 0x409
 8008db2:	829a      	strh	r2, [r3, #20]
 8008db4:	e002      	b.n	8008dbc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8b3a      	ldrh	r2, [r7, #24]
 8008dc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008dc2:	8b3b      	ldrh	r3, [r7, #24]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 fa50 	bl	800926e <USBH_CtlReq>
 8008dce:	4603      	mov	r3, r0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	789b      	ldrb	r3, [r3, #2]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d10f      	bne.n	8008e0c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2205      	movs	r2, #5
 8008df6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2100      	movs	r1, #0
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fa2c 	bl	800926e <USBH_CtlReq>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	789b      	ldrb	r3, [r3, #2]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d10e      	bne.n	8008e52 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2209      	movs	r2, #9
 8008e3e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	887a      	ldrh	r2, [r7, #2]
 8008e44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008e52:	2200      	movs	r2, #0
 8008e54:	2100      	movs	r1, #0
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fa09 	bl	800926e <USBH_CtlReq>
 8008e5c:	4603      	mov	r3, r0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	789b      	ldrb	r3, [r3, #2]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d10f      	bne.n	8008e9a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2203      	movs	r2, #3
 8008e84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f9e5 	bl	800926e <USBH_CtlReq>
 8008ea4:	4603      	mov	r3, r0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	789b      	ldrb	r3, [r3, #2]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d10f      	bne.n	8008ee2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f9c1 	bl	800926e <USBH_CtlReq>
 8008eec:	4603      	mov	r3, r0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b085      	sub	sp, #20
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	4613      	mov	r3, r2
 8008f02:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	781a      	ldrb	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	785a      	ldrb	r2, [r3, #1]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	3302      	adds	r3, #2
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	3303      	adds	r3, #3
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	791a      	ldrb	r2, [r3, #4]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	795a      	ldrb	r2, [r3, #5]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	799a      	ldrb	r2, [r3, #6]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	79da      	ldrb	r2, [r3, #7]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008f50:	88fb      	ldrh	r3, [r7, #6]
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	d939      	bls.n	8008fca <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	3309      	adds	r3, #9
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	330a      	adds	r3, #10
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	330b      	adds	r3, #11
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	021b      	lsls	r3, r3, #8
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	4313      	orrs	r3, r2
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	330c      	adds	r3, #12
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	330d      	adds	r3, #13
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	021b      	lsls	r3, r3, #8
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	7b9a      	ldrb	r2, [r3, #14]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	7bda      	ldrb	r2, [r3, #15]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	7c1a      	ldrb	r2, [r3, #16]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	7c5a      	ldrb	r2, [r3, #17]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	745a      	strb	r2, [r3, #17]
  }
}
 8008fca:	bf00      	nop
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b08a      	sub	sp, #40	; 0x28
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	781a      	ldrb	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	785a      	ldrb	r2, [r3, #1]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	3302      	adds	r3, #2
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	b29a      	uxth	r2, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	3303      	adds	r3, #3
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	021b      	lsls	r3, r3, #8
 800901a:	b29b      	uxth	r3, r3
 800901c:	4313      	orrs	r3, r2
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	791a      	ldrb	r2, [r3, #4]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	795a      	ldrb	r2, [r3, #5]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	799a      	ldrb	r2, [r3, #6]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	79da      	ldrb	r2, [r3, #7]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	7a1a      	ldrb	r2, [r3, #8]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800904c:	88fb      	ldrh	r3, [r7, #6]
 800904e:	2b09      	cmp	r3, #9
 8009050:	d95f      	bls.n	8009112 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009052:	2309      	movs	r3, #9
 8009054:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009056:	2300      	movs	r3, #0
 8009058:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800905a:	e051      	b.n	8009100 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800905c:	f107 0316 	add.w	r3, r7, #22
 8009060:	4619      	mov	r1, r3
 8009062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009064:	f000 f8e8 	bl	8009238 <USBH_GetNextDesc>
 8009068:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	785b      	ldrb	r3, [r3, #1]
 800906e:	2b04      	cmp	r3, #4
 8009070:	d146      	bne.n	8009100 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009076:	221a      	movs	r2, #26
 8009078:	fb02 f303 	mul.w	r3, r2, r3
 800907c:	3308      	adds	r3, #8
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4413      	add	r3, r2
 8009082:	3302      	adds	r3, #2
 8009084:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009088:	69f8      	ldr	r0, [r7, #28]
 800908a:	f000 f846 	bl	800911a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009094:	2300      	movs	r3, #0
 8009096:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009098:	e022      	b.n	80090e0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800909a:	f107 0316 	add.w	r3, r7, #22
 800909e:	4619      	mov	r1, r3
 80090a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090a2:	f000 f8c9 	bl	8009238 <USBH_GetNextDesc>
 80090a6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	785b      	ldrb	r3, [r3, #1]
 80090ac:	2b05      	cmp	r3, #5
 80090ae:	d117      	bne.n	80090e0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80090b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80090b8:	3201      	adds	r2, #1
 80090ba:	00d2      	lsls	r2, r2, #3
 80090bc:	211a      	movs	r1, #26
 80090be:	fb01 f303 	mul.w	r3, r1, r3
 80090c2:	4413      	add	r3, r2
 80090c4:	3308      	adds	r3, #8
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	4413      	add	r3, r2
 80090ca:	3304      	adds	r3, #4
 80090cc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80090ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090d0:	69b8      	ldr	r0, [r7, #24]
 80090d2:	f000 f851 	bl	8009178 <USBH_ParseEPDesc>
            ep_ix++;
 80090d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80090da:	3301      	adds	r3, #1
 80090dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	791b      	ldrb	r3, [r3, #4]
 80090e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d204      	bcs.n	80090f6 <USBH_ParseCfgDesc+0x120>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	885a      	ldrh	r2, [r3, #2]
 80090f0:	8afb      	ldrh	r3, [r7, #22]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d8d1      	bhi.n	800909a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80090f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090fa:	3301      	adds	r3, #1
 80090fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009104:	2b01      	cmp	r3, #1
 8009106:	d804      	bhi.n	8009112 <USBH_ParseCfgDesc+0x13c>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	885a      	ldrh	r2, [r3, #2]
 800910c:	8afb      	ldrh	r3, [r7, #22]
 800910e:	429a      	cmp	r2, r3
 8009110:	d8a4      	bhi.n	800905c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009112:	bf00      	nop
 8009114:	3728      	adds	r7, #40	; 0x28
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	781a      	ldrb	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	785a      	ldrb	r2, [r3, #1]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	789a      	ldrb	r2, [r3, #2]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	78da      	ldrb	r2, [r3, #3]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	791a      	ldrb	r2, [r3, #4]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	795a      	ldrb	r2, [r3, #5]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	799a      	ldrb	r2, [r3, #6]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	79da      	ldrb	r2, [r3, #7]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	7a1a      	ldrb	r2, [r3, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	721a      	strb	r2, [r3, #8]
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781a      	ldrb	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	785a      	ldrb	r2, [r3, #1]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	789a      	ldrb	r2, [r3, #2]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	78da      	ldrb	r2, [r3, #3]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	3304      	adds	r3, #4
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	3305      	adds	r3, #5
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	799a      	ldrb	r2, [r3, #6]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	719a      	strb	r2, [r3, #6]
}
 80091c6:	bf00      	nop
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b087      	sub	sp, #28
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	4613      	mov	r3, r2
 80091de:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	3301      	adds	r3, #1
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d120      	bne.n	800922c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	1e9a      	subs	r2, r3, #2
 80091f0:	88fb      	ldrh	r3, [r7, #6]
 80091f2:	4293      	cmp	r3, r2
 80091f4:	bf28      	it	cs
 80091f6:	4613      	movcs	r3, r2
 80091f8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3302      	adds	r3, #2
 80091fe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009200:	2300      	movs	r3, #0
 8009202:	82fb      	strh	r3, [r7, #22]
 8009204:	e00b      	b.n	800921e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009206:	8afb      	ldrh	r3, [r7, #22]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4413      	add	r3, r2
 800920c:	781a      	ldrb	r2, [r3, #0]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	3301      	adds	r3, #1
 8009216:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009218:	8afb      	ldrh	r3, [r7, #22]
 800921a:	3302      	adds	r3, #2
 800921c:	82fb      	strh	r3, [r7, #22]
 800921e:	8afa      	ldrh	r2, [r7, #22]
 8009220:	8abb      	ldrh	r3, [r7, #20]
 8009222:	429a      	cmp	r2, r3
 8009224:	d3ef      	bcc.n	8009206 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2200      	movs	r2, #0
 800922a:	701a      	strb	r2, [r3, #0]
  }
}
 800922c:	bf00      	nop
 800922e:	371c      	adds	r7, #28
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	881a      	ldrh	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	b29b      	uxth	r3, r3
 800924c:	4413      	add	r3, r2
 800924e:	b29a      	uxth	r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4413      	add	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009260:	68fb      	ldr	r3, [r7, #12]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b086      	sub	sp, #24
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	4613      	mov	r3, r2
 800927a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800927c:	2301      	movs	r3, #1
 800927e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	789b      	ldrb	r3, [r3, #2]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d002      	beq.n	800928e <USBH_CtlReq+0x20>
 8009288:	2b02      	cmp	r3, #2
 800928a:	d01d      	beq.n	80092c8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800928c:	e043      	b.n	8009316 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	88fa      	ldrh	r2, [r7, #6]
 8009298:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2201      	movs	r2, #1
 800929e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2202      	movs	r2, #2
 80092a4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80092a6:	2301      	movs	r3, #1
 80092a8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2203      	movs	r2, #3
 80092ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80092be:	2300      	movs	r3, #0
 80092c0:	2200      	movs	r2, #0
 80092c2:	f000 fdcf 	bl	8009e64 <osMessageQueuePut>
      break;
 80092c6:	e026      	b.n	8009316 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 f829 	bl	8009320 <USBH_HandleControl>
 80092ce:	4603      	mov	r3, r0
 80092d0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <USBH_CtlReq+0x70>
 80092d8:	7dfb      	ldrb	r3, [r7, #23]
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d106      	bne.n	80092ec <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	761a      	strb	r2, [r3, #24]
 80092ea:	e005      	b.n	80092f8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d102      	bne.n	80092f8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2203      	movs	r2, #3
 80092fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800930c:	2300      	movs	r3, #0
 800930e:	2200      	movs	r2, #0
 8009310:	f000 fda8 	bl	8009e64 <osMessageQueuePut>
      break;
 8009314:	bf00      	nop
  }
  return status;
 8009316:	7dfb      	ldrb	r3, [r7, #23]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af02      	add	r7, sp, #8
 8009326:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009328:	2301      	movs	r3, #1
 800932a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	7e1b      	ldrb	r3, [r3, #24]
 8009334:	3b01      	subs	r3, #1
 8009336:	2b0a      	cmp	r3, #10
 8009338:	f200 822b 	bhi.w	8009792 <USBH_HandleControl+0x472>
 800933c:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <USBH_HandleControl+0x24>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	08009371 	.word	0x08009371
 8009348:	0800938b 	.word	0x0800938b
 800934c:	0800942d 	.word	0x0800942d
 8009350:	08009453 	.word	0x08009453
 8009354:	080094df 	.word	0x080094df
 8009358:	0800950b 	.word	0x0800950b
 800935c:	080095cd 	.word	0x080095cd
 8009360:	080095ef 	.word	0x080095ef
 8009364:	08009681 	.word	0x08009681
 8009368:	080096a9 	.word	0x080096a9
 800936c:	0800973b 	.word	0x0800973b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f103 0110 	add.w	r1, r3, #16
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	795b      	ldrb	r3, [r3, #5]
 800937a:	461a      	mov	r2, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fa19 	bl	80097b4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2202      	movs	r2, #2
 8009386:	761a      	strb	r2, [r3, #24]
      break;
 8009388:	e20e      	b.n	80097a8 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	795b      	ldrb	r3, [r3, #5]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f003 fd5d 	bl	800ce50 <USBH_LL_GetURBState>
 8009396:	4603      	mov	r3, r0
 8009398:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d12c      	bne.n	80093fa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	7c1b      	ldrb	r3, [r3, #16]
 80093a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	8adb      	ldrh	r3, [r3, #22]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80093b2:	7b7b      	ldrb	r3, [r7, #13]
 80093b4:	2b80      	cmp	r3, #128	; 0x80
 80093b6:	d103      	bne.n	80093c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2203      	movs	r2, #3
 80093bc:	761a      	strb	r2, [r3, #24]
 80093be:	e00d      	b.n	80093dc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2205      	movs	r2, #5
 80093c4:	761a      	strb	r2, [r3, #24]
 80093c6:	e009      	b.n	80093dc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80093c8:	7b7b      	ldrb	r3, [r7, #13]
 80093ca:	2b80      	cmp	r3, #128	; 0x80
 80093cc:	d103      	bne.n	80093d6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2209      	movs	r2, #9
 80093d2:	761a      	strb	r2, [r3, #24]
 80093d4:	e002      	b.n	80093dc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2207      	movs	r2, #7
 80093da:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2203      	movs	r2, #3
 80093e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80093f0:	2300      	movs	r3, #0
 80093f2:	2200      	movs	r2, #0
 80093f4:	f000 fd36 	bl	8009e64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80093f8:	e1cd      	b.n	8009796 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d003      	beq.n	8009408 <USBH_HandleControl+0xe8>
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	2b02      	cmp	r3, #2
 8009404:	f040 81c7 	bne.w	8009796 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	220b      	movs	r2, #11
 800940c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2203      	movs	r2, #3
 8009412:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009422:	2300      	movs	r3, #0
 8009424:	2200      	movs	r2, #0
 8009426:	f000 fd1d 	bl	8009e64 <osMessageQueuePut>
      break;
 800942a:	e1b4      	b.n	8009796 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009432:	b29a      	uxth	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6899      	ldr	r1, [r3, #8]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	899a      	ldrh	r2, [r3, #12]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	791b      	ldrb	r3, [r3, #4]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f9f4 	bl	8009832 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2204      	movs	r2, #4
 800944e:	761a      	strb	r2, [r3, #24]
      break;
 8009450:	e1aa      	b.n	80097a8 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	791b      	ldrb	r3, [r3, #4]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f003 fcf9 	bl	800ce50 <USBH_LL_GetURBState>
 800945e:	4603      	mov	r3, r0
 8009460:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d110      	bne.n	800948a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2209      	movs	r2, #9
 800946c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2203      	movs	r2, #3
 8009472:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009482:	2300      	movs	r3, #0
 8009484:	2200      	movs	r2, #0
 8009486:	f000 fced 	bl	8009e64 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	2b05      	cmp	r3, #5
 800948e:	d110      	bne.n	80094b2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009490:	2303      	movs	r3, #3
 8009492:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2203      	movs	r2, #3
 8009498:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80094a8:	2300      	movs	r3, #0
 80094aa:	2200      	movs	r2, #0
 80094ac:	f000 fcda 	bl	8009e64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80094b0:	e173      	b.n	800979a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b04      	cmp	r3, #4
 80094b6:	f040 8170 	bne.w	800979a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	220b      	movs	r2, #11
 80094be:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2203      	movs	r2, #3
 80094c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80094d4:	2300      	movs	r3, #0
 80094d6:	2200      	movs	r2, #0
 80094d8:	f000 fcc4 	bl	8009e64 <osMessageQueuePut>
      break;
 80094dc:	e15d      	b.n	800979a <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6899      	ldr	r1, [r3, #8]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	899a      	ldrh	r2, [r3, #12]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	7958      	ldrb	r0, [r3, #5]
 80094ea:	2301      	movs	r3, #1
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	4603      	mov	r3, r0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f979 	bl	80097e8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2206      	movs	r2, #6
 8009506:	761a      	strb	r2, [r3, #24]
      break;
 8009508:	e14e      	b.n	80097a8 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	795b      	ldrb	r3, [r3, #5]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f003 fc9d 	bl	800ce50 <USBH_LL_GetURBState>
 8009516:	4603      	mov	r3, r0
 8009518:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d111      	bne.n	8009544 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2207      	movs	r2, #7
 8009524:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2203      	movs	r2, #3
 800952a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800953a:	2300      	movs	r3, #0
 800953c:	2200      	movs	r2, #0
 800953e:	f000 fc91 	bl	8009e64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009542:	e12c      	b.n	800979e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	2b05      	cmp	r3, #5
 8009548:	d113      	bne.n	8009572 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	220c      	movs	r2, #12
 800954e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009550:	2303      	movs	r3, #3
 8009552:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2203      	movs	r2, #3
 8009558:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009568:	2300      	movs	r3, #0
 800956a:	2200      	movs	r2, #0
 800956c:	f000 fc7a 	bl	8009e64 <osMessageQueuePut>
      break;
 8009570:	e115      	b.n	800979e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	2b02      	cmp	r3, #2
 8009576:	d111      	bne.n	800959c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2205      	movs	r2, #5
 800957c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2203      	movs	r2, #3
 8009582:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009592:	2300      	movs	r3, #0
 8009594:	2200      	movs	r2, #0
 8009596:	f000 fc65 	bl	8009e64 <osMessageQueuePut>
      break;
 800959a:	e100      	b.n	800979e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	2b04      	cmp	r3, #4
 80095a0:	f040 80fd 	bne.w	800979e <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	220b      	movs	r2, #11
 80095a8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80095aa:	2302      	movs	r3, #2
 80095ac:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2203      	movs	r2, #3
 80095b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095c2:	2300      	movs	r3, #0
 80095c4:	2200      	movs	r2, #0
 80095c6:	f000 fc4d 	bl	8009e64 <osMessageQueuePut>
      break;
 80095ca:	e0e8      	b.n	800979e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	791b      	ldrb	r3, [r3, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	2100      	movs	r1, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f92c 	bl	8009832 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2208      	movs	r2, #8
 80095ea:	761a      	strb	r2, [r3, #24]

      break;
 80095ec:	e0dc      	b.n	80097a8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	791b      	ldrb	r3, [r3, #4]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f003 fc2b 	bl	800ce50 <USBH_LL_GetURBState>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d113      	bne.n	800962c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	220d      	movs	r2, #13
 8009608:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2203      	movs	r2, #3
 8009612:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009622:	2300      	movs	r3, #0
 8009624:	2200      	movs	r2, #0
 8009626:	f000 fc1d 	bl	8009e64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800962a:	e0ba      	b.n	80097a2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	2b04      	cmp	r3, #4
 8009630:	d111      	bne.n	8009656 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	220b      	movs	r2, #11
 8009636:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2203      	movs	r2, #3
 800963c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800964c:	2300      	movs	r3, #0
 800964e:	2200      	movs	r2, #0
 8009650:	f000 fc08 	bl	8009e64 <osMessageQueuePut>
      break;
 8009654:	e0a5      	b.n	80097a2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	2b05      	cmp	r3, #5
 800965a:	f040 80a2 	bne.w	80097a2 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800965e:	2303      	movs	r3, #3
 8009660:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2203      	movs	r2, #3
 8009666:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009676:	2300      	movs	r3, #0
 8009678:	2200      	movs	r2, #0
 800967a:	f000 fbf3 	bl	8009e64 <osMessageQueuePut>
      break;
 800967e:	e090      	b.n	80097a2 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	795a      	ldrb	r2, [r3, #5]
 8009684:	2301      	movs	r3, #1
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	4613      	mov	r3, r2
 800968a:	2200      	movs	r2, #0
 800968c:	2100      	movs	r1, #0
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f8aa 	bl	80097e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800969a:	b29a      	uxth	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	220a      	movs	r2, #10
 80096a4:	761a      	strb	r2, [r3, #24]
      break;
 80096a6:	e07f      	b.n	80097a8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	795b      	ldrb	r3, [r3, #5]
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f003 fbce 	bl	800ce50 <USBH_LL_GetURBState>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d113      	bne.n	80096e6 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	220d      	movs	r2, #13
 80096c6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2203      	movs	r2, #3
 80096cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80096dc:	2300      	movs	r3, #0
 80096de:	2200      	movs	r2, #0
 80096e0:	f000 fbc0 	bl	8009e64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80096e4:	e05f      	b.n	80097a6 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d111      	bne.n	8009710 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2209      	movs	r2, #9
 80096f0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2203      	movs	r2, #3
 80096f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009706:	2300      	movs	r3, #0
 8009708:	2200      	movs	r2, #0
 800970a:	f000 fbab 	bl	8009e64 <osMessageQueuePut>
      break;
 800970e:	e04a      	b.n	80097a6 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	2b04      	cmp	r3, #4
 8009714:	d147      	bne.n	80097a6 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	220b      	movs	r2, #11
 800971a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2203      	movs	r2, #3
 8009720:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009730:	2300      	movs	r3, #0
 8009732:	2200      	movs	r2, #0
 8009734:	f000 fb96 	bl	8009e64 <osMessageQueuePut>
      break;
 8009738:	e035      	b.n	80097a6 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	7e5b      	ldrb	r3, [r3, #25]
 800973e:	3301      	adds	r3, #1
 8009740:	b2da      	uxtb	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	765a      	strb	r2, [r3, #25]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	7e5b      	ldrb	r3, [r3, #25]
 800974a:	2b02      	cmp	r3, #2
 800974c:	d806      	bhi.n	800975c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800975a:	e025      	b.n	80097a8 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009762:	2106      	movs	r1, #6
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	795b      	ldrb	r3, [r3, #5]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f90d 	bl	8009994 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	791b      	ldrb	r3, [r3, #4]
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f907 	bl	8009994 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800978c:	2302      	movs	r3, #2
 800978e:	73fb      	strb	r3, [r7, #15]
      break;
 8009790:	e00a      	b.n	80097a8 <USBH_HandleControl+0x488>

    default:
      break;
 8009792:	bf00      	nop
 8009794:	e008      	b.n	80097a8 <USBH_HandleControl+0x488>
      break;
 8009796:	bf00      	nop
 8009798:	e006      	b.n	80097a8 <USBH_HandleControl+0x488>
      break;
 800979a:	bf00      	nop
 800979c:	e004      	b.n	80097a8 <USBH_HandleControl+0x488>
      break;
 800979e:	bf00      	nop
 80097a0:	e002      	b.n	80097a8 <USBH_HandleControl+0x488>
      break;
 80097a2:	bf00      	nop
 80097a4:	e000      	b.n	80097a8 <USBH_HandleControl+0x488>
      break;
 80097a6:	bf00      	nop
  }

  return status;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop

080097b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af04      	add	r7, sp, #16
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80097c2:	79f9      	ldrb	r1, [r7, #7]
 80097c4:	2300      	movs	r3, #0
 80097c6:	9303      	str	r3, [sp, #12]
 80097c8:	2308      	movs	r3, #8
 80097ca:	9302      	str	r3, [sp, #8]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	2300      	movs	r3, #0
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	2300      	movs	r3, #0
 80097d6:	2200      	movs	r2, #0
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f003 fb08 	bl	800cdee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b088      	sub	sp, #32
 80097ec:	af04      	add	r7, sp, #16
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	4611      	mov	r1, r2
 80097f4:	461a      	mov	r2, r3
 80097f6:	460b      	mov	r3, r1
 80097f8:	80fb      	strh	r3, [r7, #6]
 80097fa:	4613      	mov	r3, r2
 80097fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800980c:	7979      	ldrb	r1, [r7, #5]
 800980e:	7e3b      	ldrb	r3, [r7, #24]
 8009810:	9303      	str	r3, [sp, #12]
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	9302      	str	r3, [sp, #8]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	9301      	str	r3, [sp, #4]
 800981a:	2301      	movs	r3, #1
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	2300      	movs	r3, #0
 8009820:	2200      	movs	r2, #0
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f003 fae3 	bl	800cdee <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b088      	sub	sp, #32
 8009836:	af04      	add	r7, sp, #16
 8009838:	60f8      	str	r0, [r7, #12]
 800983a:	60b9      	str	r1, [r7, #8]
 800983c:	4611      	mov	r1, r2
 800983e:	461a      	mov	r2, r3
 8009840:	460b      	mov	r3, r1
 8009842:	80fb      	strh	r3, [r7, #6]
 8009844:	4613      	mov	r3, r2
 8009846:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009848:	7979      	ldrb	r1, [r7, #5]
 800984a:	2300      	movs	r3, #0
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	88fb      	ldrh	r3, [r7, #6]
 8009850:	9302      	str	r3, [sp, #8]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	2301      	movs	r3, #1
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	2300      	movs	r3, #0
 800985c:	2201      	movs	r2, #1
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f003 fac5 	bl	800cdee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009864:	2300      	movs	r3, #0

}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b088      	sub	sp, #32
 8009872:	af04      	add	r7, sp, #16
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	4611      	mov	r1, r2
 800987a:	461a      	mov	r2, r3
 800987c:	460b      	mov	r3, r1
 800987e:	80fb      	strh	r3, [r7, #6]
 8009880:	4613      	mov	r3, r2
 8009882:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009892:	7979      	ldrb	r1, [r7, #5]
 8009894:	7e3b      	ldrb	r3, [r7, #24]
 8009896:	9303      	str	r3, [sp, #12]
 8009898:	88fb      	ldrh	r3, [r7, #6]
 800989a:	9302      	str	r3, [sp, #8]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	2301      	movs	r3, #1
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	2302      	movs	r3, #2
 80098a6:	2200      	movs	r2, #0
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f003 faa0 	bl	800cdee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af04      	add	r7, sp, #16
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	4611      	mov	r1, r2
 80098c4:	461a      	mov	r2, r3
 80098c6:	460b      	mov	r3, r1
 80098c8:	80fb      	strh	r3, [r7, #6]
 80098ca:	4613      	mov	r3, r2
 80098cc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098ce:	7979      	ldrb	r1, [r7, #5]
 80098d0:	2300      	movs	r3, #0
 80098d2:	9303      	str	r3, [sp, #12]
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	9302      	str	r3, [sp, #8]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	2301      	movs	r3, #1
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	2302      	movs	r3, #2
 80098e2:	2201      	movs	r2, #1
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f003 fa82 	bl	800cdee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af04      	add	r7, sp, #16
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	4608      	mov	r0, r1
 80098fe:	4611      	mov	r1, r2
 8009900:	461a      	mov	r2, r3
 8009902:	4603      	mov	r3, r0
 8009904:	70fb      	strb	r3, [r7, #3]
 8009906:	460b      	mov	r3, r1
 8009908:	70bb      	strb	r3, [r7, #2]
 800990a:	4613      	mov	r3, r2
 800990c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800990e:	7878      	ldrb	r0, [r7, #1]
 8009910:	78ba      	ldrb	r2, [r7, #2]
 8009912:	78f9      	ldrb	r1, [r7, #3]
 8009914:	8b3b      	ldrh	r3, [r7, #24]
 8009916:	9302      	str	r3, [sp, #8]
 8009918:	7d3b      	ldrb	r3, [r7, #20]
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	7c3b      	ldrb	r3, [r7, #16]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	4603      	mov	r3, r0
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f003 fa15 	bl	800cd52 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	460b      	mov	r3, r1
 800993c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f003 fa34 	bl	800cdb0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	460b      	mov	r3, r1
 800995c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f836 	bl	80099d0 <USBH_GetFreePipe>
 8009964:	4603      	mov	r3, r0
 8009966:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009968:	89fb      	ldrh	r3, [r7, #14]
 800996a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800996e:	4293      	cmp	r3, r2
 8009970:	d00a      	beq.n	8009988 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009972:	78fa      	ldrb	r2, [r7, #3]
 8009974:	89fb      	ldrh	r3, [r7, #14]
 8009976:	f003 030f 	and.w	r3, r3, #15
 800997a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800997e:	6879      	ldr	r1, [r7, #4]
 8009980:	33e0      	adds	r3, #224	; 0xe0
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	440b      	add	r3, r1
 8009986:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009988:	89fb      	ldrh	r3, [r7, #14]
 800998a:	b2db      	uxtb	r3, r3
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80099a0:	78fb      	ldrb	r3, [r7, #3]
 80099a2:	2b0a      	cmp	r3, #10
 80099a4:	d80d      	bhi.n	80099c2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80099a6:	78fb      	ldrb	r3, [r7, #3]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	33e0      	adds	r3, #224	; 0xe0
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	33e0      	adds	r3, #224	; 0xe0
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80099dc:	2300      	movs	r3, #0
 80099de:	73fb      	strb	r3, [r7, #15]
 80099e0:	e00f      	b.n	8009a02 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	33e0      	adds	r3, #224	; 0xe0
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d102      	bne.n	80099fc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	e007      	b.n	8009a0c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	3301      	adds	r3, #1
 8009a00:	73fb      	strb	r3, [r7, #15]
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	2b0a      	cmp	r3, #10
 8009a06:	d9ec      	bls.n	80099e2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	4613      	mov	r3, r2
 8009a24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a26:	2301      	movs	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a2e:	4b1f      	ldr	r3, [pc, #124]	; (8009aac <FATFS_LinkDriverEx+0x94>)
 8009a30:	7a5b      	ldrb	r3, [r3, #9]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d131      	bne.n	8009a9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a38:	4b1c      	ldr	r3, [pc, #112]	; (8009aac <FATFS_LinkDriverEx+0x94>)
 8009a3a:	7a5b      	ldrb	r3, [r3, #9]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	461a      	mov	r2, r3
 8009a40:	4b1a      	ldr	r3, [pc, #104]	; (8009aac <FATFS_LinkDriverEx+0x94>)
 8009a42:	2100      	movs	r1, #0
 8009a44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a46:	4b19      	ldr	r3, [pc, #100]	; (8009aac <FATFS_LinkDriverEx+0x94>)
 8009a48:	7a5b      	ldrb	r3, [r3, #9]
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	4a17      	ldr	r2, [pc, #92]	; (8009aac <FATFS_LinkDriverEx+0x94>)
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009a56:	4b15      	ldr	r3, [pc, #84]	; (8009aac <FATFS_LinkDriverEx+0x94>)
 8009a58:	7a5b      	ldrb	r3, [r3, #9]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <FATFS_LinkDriverEx+0x94>)
 8009a60:	4413      	add	r3, r2
 8009a62:	79fa      	ldrb	r2, [r7, #7]
 8009a64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009a66:	4b11      	ldr	r3, [pc, #68]	; (8009aac <FATFS_LinkDriverEx+0x94>)
 8009a68:	7a5b      	ldrb	r3, [r3, #9]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	b2d1      	uxtb	r1, r2
 8009a70:	4a0e      	ldr	r2, [pc, #56]	; (8009aac <FATFS_LinkDriverEx+0x94>)
 8009a72:	7251      	strb	r1, [r2, #9]
 8009a74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009a76:	7dbb      	ldrb	r3, [r7, #22]
 8009a78:	3330      	adds	r3, #48	; 0x30
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	3301      	adds	r3, #1
 8009a84:	223a      	movs	r2, #58	; 0x3a
 8009a86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	3302      	adds	r3, #2
 8009a8c:	222f      	movs	r2, #47	; 0x2f
 8009a8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	3303      	adds	r3, #3
 8009a94:	2200      	movs	r2, #0
 8009a96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	371c      	adds	r7, #28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	200000b8 	.word	0x200000b8

08009ab0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009aba:	2200      	movs	r2, #0
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7ff ffaa 	bl	8009a18 <FATFS_LinkDriverEx>
 8009ac4:	4603      	mov	r3, r0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ace:	b480      	push	{r7}
 8009ad0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009ad2:	bf00      	nop
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ae2:	f3ef 8305 	mrs	r3, IPSR
 8009ae6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10f      	bne.n	8009b0e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aee:	f3ef 8310 	mrs	r3, PRIMASK
 8009af2:	607b      	str	r3, [r7, #4]
  return(result);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d105      	bne.n	8009b06 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009afa:	f3ef 8311 	mrs	r3, BASEPRI
 8009afe:	603b      	str	r3, [r7, #0]
  return(result);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d007      	beq.n	8009b16 <osKernelInitialize+0x3a>
 8009b06:	4b0e      	ldr	r3, [pc, #56]	; (8009b40 <osKernelInitialize+0x64>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d103      	bne.n	8009b16 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009b0e:	f06f 0305 	mvn.w	r3, #5
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	e00c      	b.n	8009b30 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b16:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <osKernelInitialize+0x64>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d105      	bne.n	8009b2a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b1e:	4b08      	ldr	r3, [pc, #32]	; (8009b40 <osKernelInitialize+0x64>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	e002      	b.n	8009b30 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009b30:	68fb      	ldr	r3, [r7, #12]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	200000c4 	.word	0x200000c4

08009b44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b4a:	f3ef 8305 	mrs	r3, IPSR
 8009b4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10f      	bne.n	8009b76 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b56:	f3ef 8310 	mrs	r3, PRIMASK
 8009b5a:	607b      	str	r3, [r7, #4]
  return(result);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d105      	bne.n	8009b6e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b62:	f3ef 8311 	mrs	r3, BASEPRI
 8009b66:	603b      	str	r3, [r7, #0]
  return(result);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <osKernelStart+0x3a>
 8009b6e:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <osKernelStart+0x68>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d103      	bne.n	8009b7e <osKernelStart+0x3a>
    stat = osErrorISR;
 8009b76:	f06f 0305 	mvn.w	r3, #5
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	e010      	b.n	8009ba0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b7e:	4b0b      	ldr	r3, [pc, #44]	; (8009bac <osKernelStart+0x68>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d109      	bne.n	8009b9a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b86:	f7ff ffa2 	bl	8009ace <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b8a:	4b08      	ldr	r3, [pc, #32]	; (8009bac <osKernelStart+0x68>)
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b90:	f001 fa9a 	bl	800b0c8 <vTaskStartScheduler>
      stat = osOK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	60fb      	str	r3, [r7, #12]
 8009b98:	e002      	b.n	8009ba0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	200000c4 	.word	0x200000c4

08009bb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b090      	sub	sp, #64	; 0x40
 8009bb4:	af04      	add	r7, sp, #16
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bc0:	f3ef 8305 	mrs	r3, IPSR
 8009bc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8009bc6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f040 808f 	bne.w	8009cec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bce:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d105      	bne.n	8009be6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009bda:	f3ef 8311 	mrs	r3, BASEPRI
 8009bde:	617b      	str	r3, [r7, #20]
  return(result);
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <osThreadNew+0x3e>
 8009be6:	4b44      	ldr	r3, [pc, #272]	; (8009cf8 <osThreadNew+0x148>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d07e      	beq.n	8009cec <osThreadNew+0x13c>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d07b      	beq.n	8009cec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009bf4:	2380      	movs	r3, #128	; 0x80
 8009bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009bf8:	2318      	movs	r3, #24
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009c00:	f04f 33ff 	mov.w	r3, #4294967295
 8009c04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d045      	beq.n	8009c98 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <osThreadNew+0x6a>
        name = attr->name;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <osThreadNew+0x90>
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	2b38      	cmp	r3, #56	; 0x38
 8009c32:	d805      	bhi.n	8009c40 <osThreadNew+0x90>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <osThreadNew+0x94>
        return (NULL);
 8009c40:	2300      	movs	r3, #0
 8009c42:	e054      	b.n	8009cee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	089b      	lsrs	r3, r3, #2
 8009c52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00e      	beq.n	8009c7a <osThreadNew+0xca>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	2b5b      	cmp	r3, #91	; 0x5b
 8009c62:	d90a      	bls.n	8009c7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d006      	beq.n	8009c7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <osThreadNew+0xca>
        mem = 1;
 8009c74:	2301      	movs	r3, #1
 8009c76:	623b      	str	r3, [r7, #32]
 8009c78:	e010      	b.n	8009c9c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10c      	bne.n	8009c9c <osThreadNew+0xec>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d108      	bne.n	8009c9c <osThreadNew+0xec>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d104      	bne.n	8009c9c <osThreadNew+0xec>
          mem = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	623b      	str	r3, [r7, #32]
 8009c96:	e001      	b.n	8009c9c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d110      	bne.n	8009cc4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009caa:	9202      	str	r2, [sp, #8]
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f001 f833 	bl	800ad24 <xTaskCreateStatic>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	613b      	str	r3, [r7, #16]
 8009cc2:	e013      	b.n	8009cec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d110      	bne.n	8009cec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	f107 0310 	add.w	r3, r7, #16
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f001 f87b 	bl	800add8 <xTaskCreate>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d001      	beq.n	8009cec <osThreadNew+0x13c>
          hTask = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009cec:	693b      	ldr	r3, [r7, #16]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3730      	adds	r7, #48	; 0x30
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	200000c4 	.word	0x200000c4

08009cfc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d04:	f3ef 8305 	mrs	r3, IPSR
 8009d08:	613b      	str	r3, [r7, #16]
  return(result);
 8009d0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10f      	bne.n	8009d30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d10:	f3ef 8310 	mrs	r3, PRIMASK
 8009d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d105      	bne.n	8009d28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d1c:	f3ef 8311 	mrs	r3, BASEPRI
 8009d20:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d007      	beq.n	8009d38 <osDelay+0x3c>
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <osDelay+0x58>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d103      	bne.n	8009d38 <osDelay+0x3c>
    stat = osErrorISR;
 8009d30:	f06f 0305 	mvn.w	r3, #5
 8009d34:	617b      	str	r3, [r7, #20]
 8009d36:	e007      	b.n	8009d48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d002      	beq.n	8009d48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f001 f98c 	bl	800b060 <vTaskDelay>
    }
  }

  return (stat);
 8009d48:	697b      	ldr	r3, [r7, #20]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	200000c4 	.word	0x200000c4

08009d58 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08c      	sub	sp, #48	; 0x30
 8009d5c:	af02      	add	r7, sp, #8
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009d64:	2300      	movs	r3, #0
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d68:	f3ef 8305 	mrs	r3, IPSR
 8009d6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d6e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d170      	bne.n	8009e56 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d74:	f3ef 8310 	mrs	r3, PRIMASK
 8009d78:	617b      	str	r3, [r7, #20]
  return(result);
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d105      	bne.n	8009d8c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d80:	f3ef 8311 	mrs	r3, BASEPRI
 8009d84:	613b      	str	r3, [r7, #16]
  return(result);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d003      	beq.n	8009d94 <osMessageQueueNew+0x3c>
 8009d8c:	4b34      	ldr	r3, [pc, #208]	; (8009e60 <osMessageQueueNew+0x108>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d060      	beq.n	8009e56 <osMessageQueueNew+0xfe>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d05d      	beq.n	8009e56 <osMessageQueueNew+0xfe>
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d05a      	beq.n	8009e56 <osMessageQueueNew+0xfe>
    mem = -1;
 8009da0:	f04f 33ff 	mov.w	r3, #4294967295
 8009da4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d029      	beq.n	8009e00 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d012      	beq.n	8009dda <osMessageQueueNew+0x82>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	2b4f      	cmp	r3, #79	; 0x4f
 8009dba:	d90e      	bls.n	8009dda <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	695a      	ldr	r2, [r3, #20]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	68b9      	ldr	r1, [r7, #8]
 8009dcc:	fb01 f303 	mul.w	r3, r1, r3
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d302      	bcc.n	8009dda <osMessageQueueNew+0x82>
        mem = 1;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	623b      	str	r3, [r7, #32]
 8009dd8:	e014      	b.n	8009e04 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d110      	bne.n	8009e04 <osMessageQueueNew+0xac>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10c      	bne.n	8009e04 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d108      	bne.n	8009e04 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d104      	bne.n	8009e04 <osMessageQueueNew+0xac>
          mem = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	623b      	str	r3, [r7, #32]
 8009dfe:	e001      	b.n	8009e04 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d10c      	bne.n	8009e24 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	691a      	ldr	r2, [r3, #16]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6899      	ldr	r1, [r3, #8]
 8009e12:	2300      	movs	r3, #0
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	460b      	mov	r3, r1
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f000 fa58 	bl	800a2d0 <xQueueGenericCreateStatic>
 8009e20:	6278      	str	r0, [r7, #36]	; 0x24
 8009e22:	e008      	b.n	8009e36 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d105      	bne.n	8009e36 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	68b9      	ldr	r1, [r7, #8]
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f000 fac1 	bl	800a3b6 <xQueueGenericCreate>
 8009e34:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00c      	beq.n	8009e56 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d003      	beq.n	8009e4a <osMessageQueueNew+0xf2>
        name = attr->name;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	61fb      	str	r3, [r7, #28]
 8009e48:	e001      	b.n	8009e4e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009e4e:	69f9      	ldr	r1, [r7, #28]
 8009e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e52:	f000 ff0b 	bl	800ac6c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3728      	adds	r7, #40	; 0x28
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	200000c4 	.word	0x200000c4

08009e64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08a      	sub	sp, #40	; 0x28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	4613      	mov	r3, r2
 8009e72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e7c:	f3ef 8305 	mrs	r3, IPSR
 8009e80:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e82:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10f      	bne.n	8009ea8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e88:	f3ef 8310 	mrs	r3, PRIMASK
 8009e8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d105      	bne.n	8009ea0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e94:	f3ef 8311 	mrs	r3, BASEPRI
 8009e98:	617b      	str	r3, [r7, #20]
  return(result);
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d02c      	beq.n	8009efa <osMessageQueuePut+0x96>
 8009ea0:	4b28      	ldr	r3, [pc, #160]	; (8009f44 <osMessageQueuePut+0xe0>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d128      	bne.n	8009efa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d005      	beq.n	8009eba <osMessageQueuePut+0x56>
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d002      	beq.n	8009eba <osMessageQueuePut+0x56>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009eba:	f06f 0303 	mvn.w	r3, #3
 8009ebe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ec0:	e039      	b.n	8009f36 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009ec6:	f107 0210 	add.w	r2, r7, #16
 8009eca:	2300      	movs	r3, #0
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	6a38      	ldr	r0, [r7, #32]
 8009ed0:	f000 fbce 	bl	800a670 <xQueueGenericSendFromISR>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d003      	beq.n	8009ee2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009eda:	f06f 0302 	mvn.w	r3, #2
 8009ede:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ee0:	e029      	b.n	8009f36 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d026      	beq.n	8009f36 <osMessageQueuePut+0xd2>
 8009ee8:	4b17      	ldr	r3, [pc, #92]	; (8009f48 <osMessageQueuePut+0xe4>)
 8009eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ef8:	e01d      	b.n	8009f36 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <osMessageQueuePut+0xa2>
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d103      	bne.n	8009f0e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009f06:	f06f 0303 	mvn.w	r3, #3
 8009f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0c:	e014      	b.n	8009f38 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009f0e:	2300      	movs	r3, #0
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	68b9      	ldr	r1, [r7, #8]
 8009f14:	6a38      	ldr	r0, [r7, #32]
 8009f16:	f000 fab1 	bl	800a47c <xQueueGenericSend>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d00b      	beq.n	8009f38 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009f26:	f06f 0301 	mvn.w	r3, #1
 8009f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f2c:	e004      	b.n	8009f38 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009f2e:	f06f 0302 	mvn.w	r3, #2
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24
 8009f34:	e000      	b.n	8009f38 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009f36:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3728      	adds	r7, #40	; 0x28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	200000c4 	.word	0x200000c4
 8009f48:	e000ed04 	.word	0xe000ed04

08009f4c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b08a      	sub	sp, #40	; 0x28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f62:	f3ef 8305 	mrs	r3, IPSR
 8009f66:	61fb      	str	r3, [r7, #28]
  return(result);
 8009f68:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10f      	bne.n	8009f8e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8009f72:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d105      	bne.n	8009f86 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8009f7e:	617b      	str	r3, [r7, #20]
  return(result);
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d02c      	beq.n	8009fe0 <osMessageQueueGet+0x94>
 8009f86:	4b28      	ldr	r3, [pc, #160]	; (800a028 <osMessageQueueGet+0xdc>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d128      	bne.n	8009fe0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <osMessageQueueGet+0x54>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d002      	beq.n	8009fa0 <osMessageQueueGet+0x54>
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d003      	beq.n	8009fa8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009fa0:	f06f 0303 	mvn.w	r3, #3
 8009fa4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009fa6:	e038      	b.n	800a01a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009fac:	f107 0310 	add.w	r3, r7, #16
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	6a38      	ldr	r0, [r7, #32]
 8009fb6:	f000 fccb 	bl	800a950 <xQueueReceiveFromISR>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d003      	beq.n	8009fc8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009fc0:	f06f 0302 	mvn.w	r3, #2
 8009fc4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009fc6:	e028      	b.n	800a01a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d025      	beq.n	800a01a <osMessageQueueGet+0xce>
 8009fce:	4b17      	ldr	r3, [pc, #92]	; (800a02c <osMessageQueueGet+0xe0>)
 8009fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009fde:	e01c      	b.n	800a01a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <osMessageQueueGet+0xa0>
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d103      	bne.n	8009ff4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009fec:	f06f 0303 	mvn.w	r3, #3
 8009ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ff2:	e013      	b.n	800a01c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	68b9      	ldr	r1, [r7, #8]
 8009ff8:	6a38      	ldr	r0, [r7, #32]
 8009ffa:	f000 fbcd 	bl	800a798 <xQueueReceive>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b01      	cmp	r3, #1
 800a002:	d00b      	beq.n	800a01c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a00a:	f06f 0301 	mvn.w	r3, #1
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
 800a010:	e004      	b.n	800a01c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a012:	f06f 0302 	mvn.w	r3, #2
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
 800a018:	e000      	b.n	800a01c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a01a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3728      	adds	r7, #40	; 0x28
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	200000c4 	.word	0x200000c4
 800a02c:	e000ed04 	.word	0xe000ed04

0800a030 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4a07      	ldr	r2, [pc, #28]	; (800a05c <vApplicationGetIdleTaskMemory+0x2c>)
 800a040:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	4a06      	ldr	r2, [pc, #24]	; (800a060 <vApplicationGetIdleTaskMemory+0x30>)
 800a046:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2280      	movs	r2, #128	; 0x80
 800a04c:	601a      	str	r2, [r3, #0]
}
 800a04e:	bf00      	nop
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	200000c8 	.word	0x200000c8
 800a060:	20000124 	.word	0x20000124

0800a064 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4a07      	ldr	r2, [pc, #28]	; (800a090 <vApplicationGetTimerTaskMemory+0x2c>)
 800a074:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	4a06      	ldr	r2, [pc, #24]	; (800a094 <vApplicationGetTimerTaskMemory+0x30>)
 800a07a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a082:	601a      	str	r2, [r3, #0]
}
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	20000324 	.word	0x20000324
 800a094:	20000380 	.word	0x20000380

0800a098 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f103 0208 	add.w	r2, r3, #8
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f103 0208 	add.w	r2, r3, #8
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f103 0208 	add.w	r2, r3, #8
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b085      	sub	sp, #20
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a13a:	b480      	push	{r7}
 800a13c:	b085      	sub	sp, #20
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a150:	d103      	bne.n	800a15a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	e00c      	b.n	800a174 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3308      	adds	r3, #8
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	e002      	b.n	800a168 <vListInsert+0x2e>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	429a      	cmp	r2, r3
 800a172:	d2f6      	bcs.n	800a162 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	601a      	str	r2, [r3, #0]
}
 800a1a0:	bf00      	nop
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	6892      	ldr	r2, [r2, #8]
 800a1c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	6852      	ldr	r2, [r2, #4]
 800a1cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d103      	bne.n	800a1e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	1e5a      	subs	r2, r3, #1
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d109      	bne.n	800a228 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	60bb      	str	r3, [r7, #8]
 800a226:	e7fe      	b.n	800a226 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a228:	f002 f8d0 	bl	800c3cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a234:	68f9      	ldr	r1, [r7, #12]
 800a236:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a238:	fb01 f303 	mul.w	r3, r1, r3
 800a23c:	441a      	add	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a258:	3b01      	subs	r3, #1
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a25e:	fb01 f303 	mul.w	r3, r1, r3
 800a262:	441a      	add	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	22ff      	movs	r2, #255	; 0xff
 800a26c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	22ff      	movs	r2, #255	; 0xff
 800a274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d114      	bne.n	800a2a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d01a      	beq.n	800a2bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3310      	adds	r3, #16
 800a28a:	4618      	mov	r0, r3
 800a28c:	f001 f99c 	bl	800b5c8 <xTaskRemoveFromEventList>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d012      	beq.n	800a2bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a296:	4b0d      	ldr	r3, [pc, #52]	; (800a2cc <xQueueGenericReset+0xcc>)
 800a298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	e009      	b.n	800a2bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3310      	adds	r3, #16
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7ff fef3 	bl	800a098 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	3324      	adds	r3, #36	; 0x24
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff feee 	bl	800a098 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a2bc:	f002 f8b4 	bl	800c428 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a2c0:	2301      	movs	r3, #1
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	e000ed04 	.word	0xe000ed04

0800a2d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b08e      	sub	sp, #56	; 0x38
 800a2d4:	af02      	add	r7, sp, #8
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d109      	bne.n	800a2f8 <xQueueGenericCreateStatic+0x28>
 800a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2f6:	e7fe      	b.n	800a2f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d109      	bne.n	800a312 <xQueueGenericCreateStatic+0x42>
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24
 800a310:	e7fe      	b.n	800a310 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <xQueueGenericCreateStatic+0x4e>
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <xQueueGenericCreateStatic+0x52>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <xQueueGenericCreateStatic+0x54>
 800a322:	2300      	movs	r3, #0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d109      	bne.n	800a33c <xQueueGenericCreateStatic+0x6c>
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	623b      	str	r3, [r7, #32]
 800a33a:	e7fe      	b.n	800a33a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d102      	bne.n	800a348 <xQueueGenericCreateStatic+0x78>
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <xQueueGenericCreateStatic+0x7c>
 800a348:	2301      	movs	r3, #1
 800a34a:	e000      	b.n	800a34e <xQueueGenericCreateStatic+0x7e>
 800a34c:	2300      	movs	r3, #0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d109      	bne.n	800a366 <xQueueGenericCreateStatic+0x96>
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	61fb      	str	r3, [r7, #28]
 800a364:	e7fe      	b.n	800a364 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a366:	2350      	movs	r3, #80	; 0x50
 800a368:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b50      	cmp	r3, #80	; 0x50
 800a36e:	d009      	beq.n	800a384 <xQueueGenericCreateStatic+0xb4>
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	61bb      	str	r3, [r7, #24]
 800a382:	e7fe      	b.n	800a382 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a384:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00d      	beq.n	800a3ac <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a392:	2201      	movs	r2, #1
 800a394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a398:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	68b9      	ldr	r1, [r7, #8]
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f000 f844 	bl	800a434 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3730      	adds	r7, #48	; 0x30
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b08a      	sub	sp, #40	; 0x28
 800a3ba:	af02      	add	r7, sp, #8
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d109      	bne.n	800a3de <xQueueGenericCreate+0x28>
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	613b      	str	r3, [r7, #16]
 800a3dc:	e7fe      	b.n	800a3dc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d102      	bne.n	800a3ea <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	61fb      	str	r3, [r7, #28]
 800a3e8:	e004      	b.n	800a3f4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	fb02 f303 	mul.w	r3, r2, r3
 800a3f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	3350      	adds	r3, #80	; 0x50
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f002 f901 	bl	800c600 <pvPortMalloc>
 800a3fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d011      	beq.n	800a42a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	3350      	adds	r3, #80	; 0x50
 800a40e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a418:	79fa      	ldrb	r2, [r7, #7]
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	4613      	mov	r3, r2
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	68b9      	ldr	r1, [r7, #8]
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 f805 	bl	800a434 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a42a:	69bb      	ldr	r3, [r7, #24]
	}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3720      	adds	r7, #32
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d103      	bne.n	800a450 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	e002      	b.n	800a456 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a462:	2101      	movs	r1, #1
 800a464:	69b8      	ldr	r0, [r7, #24]
 800a466:	f7ff fecb 	bl	800a200 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	78fa      	ldrb	r2, [r7, #3]
 800a46e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a472:	bf00      	nop
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
	...

0800a47c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b08e      	sub	sp, #56	; 0x38
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a48a:	2300      	movs	r3, #0
 800a48c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a494:	2b00      	cmp	r3, #0
 800a496:	d109      	bne.n	800a4ac <xQueueGenericSend+0x30>
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4aa:	e7fe      	b.n	800a4aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d103      	bne.n	800a4ba <xQueueGenericSend+0x3e>
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d101      	bne.n	800a4be <xQueueGenericSend+0x42>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e000      	b.n	800a4c0 <xQueueGenericSend+0x44>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d109      	bne.n	800a4d8 <xQueueGenericSend+0x5c>
 800a4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c8:	f383 8811 	msr	BASEPRI, r3
 800a4cc:	f3bf 8f6f 	isb	sy
 800a4d0:	f3bf 8f4f 	dsb	sy
 800a4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4d6:	e7fe      	b.n	800a4d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d103      	bne.n	800a4e6 <xQueueGenericSend+0x6a>
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <xQueueGenericSend+0x6e>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e000      	b.n	800a4ec <xQueueGenericSend+0x70>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d109      	bne.n	800a504 <xQueueGenericSend+0x88>
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	623b      	str	r3, [r7, #32]
 800a502:	e7fe      	b.n	800a502 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a504:	f001 fa16 	bl	800b934 <xTaskGetSchedulerState>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d102      	bne.n	800a514 <xQueueGenericSend+0x98>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <xQueueGenericSend+0x9c>
 800a514:	2301      	movs	r3, #1
 800a516:	e000      	b.n	800a51a <xQueueGenericSend+0x9e>
 800a518:	2300      	movs	r3, #0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d109      	bne.n	800a532 <xQueueGenericSend+0xb6>
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	61fb      	str	r3, [r7, #28]
 800a530:	e7fe      	b.n	800a530 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a532:	f001 ff4b 	bl	800c3cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53e:	429a      	cmp	r2, r3
 800a540:	d302      	bcc.n	800a548 <xQueueGenericSend+0xcc>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b02      	cmp	r3, #2
 800a546:	d129      	bne.n	800a59c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	68b9      	ldr	r1, [r7, #8]
 800a54c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a54e:	f000 fa7c 	bl	800aa4a <prvCopyDataToQueue>
 800a552:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d010      	beq.n	800a57e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55e:	3324      	adds	r3, #36	; 0x24
 800a560:	4618      	mov	r0, r3
 800a562:	f001 f831 	bl	800b5c8 <xTaskRemoveFromEventList>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d013      	beq.n	800a594 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a56c:	4b3f      	ldr	r3, [pc, #252]	; (800a66c <xQueueGenericSend+0x1f0>)
 800a56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	e00a      	b.n	800a594 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d007      	beq.n	800a594 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a584:	4b39      	ldr	r3, [pc, #228]	; (800a66c <xQueueGenericSend+0x1f0>)
 800a586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a594:	f001 ff48 	bl	800c428 <vPortExitCritical>
				return pdPASS;
 800a598:	2301      	movs	r3, #1
 800a59a:	e063      	b.n	800a664 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d103      	bne.n	800a5aa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5a2:	f001 ff41 	bl	800c428 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e05c      	b.n	800a664 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d106      	bne.n	800a5be <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5b0:	f107 0314 	add.w	r3, r7, #20
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f001 f869 	bl	800b68c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5be:	f001 ff33 	bl	800c428 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5c2:	f000 fde5 	bl	800b190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5c6:	f001 ff01 	bl	800c3cc <vPortEnterCritical>
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5d0:	b25b      	sxtb	r3, r3
 800a5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d6:	d103      	bne.n	800a5e0 <xQueueGenericSend+0x164>
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5e6:	b25b      	sxtb	r3, r3
 800a5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ec:	d103      	bne.n	800a5f6 <xQueueGenericSend+0x17a>
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5f6:	f001 ff17 	bl	800c428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5fa:	1d3a      	adds	r2, r7, #4
 800a5fc:	f107 0314 	add.w	r3, r7, #20
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f001 f858 	bl	800b6b8 <xTaskCheckForTimeOut>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d124      	bne.n	800a658 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a60e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a610:	f000 fb13 	bl	800ac3a <prvIsQueueFull>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d018      	beq.n	800a64c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	3310      	adds	r3, #16
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	4611      	mov	r1, r2
 800a622:	4618      	mov	r0, r3
 800a624:	f000 ff82 	bl	800b52c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a62a:	f000 fa9e 	bl	800ab6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a62e:	f000 fdbd 	bl	800b1ac <xTaskResumeAll>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	f47f af7c 	bne.w	800a532 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a63a:	4b0c      	ldr	r3, [pc, #48]	; (800a66c <xQueueGenericSend+0x1f0>)
 800a63c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	e772      	b.n	800a532 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a64c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a64e:	f000 fa8c 	bl	800ab6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a652:	f000 fdab 	bl	800b1ac <xTaskResumeAll>
 800a656:	e76c      	b.n	800a532 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a65a:	f000 fa86 	bl	800ab6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a65e:	f000 fda5 	bl	800b1ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a662:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a664:	4618      	mov	r0, r3
 800a666:	3738      	adds	r7, #56	; 0x38
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	e000ed04 	.word	0xe000ed04

0800a670 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08e      	sub	sp, #56	; 0x38
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
 800a67c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	2b00      	cmp	r3, #0
 800a686:	d109      	bne.n	800a69c <xQueueGenericSendFromISR+0x2c>
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	627b      	str	r3, [r7, #36]	; 0x24
 800a69a:	e7fe      	b.n	800a69a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d103      	bne.n	800a6aa <xQueueGenericSendFromISR+0x3a>
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <xQueueGenericSendFromISR+0x3e>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e000      	b.n	800a6b0 <xQueueGenericSendFromISR+0x40>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <xQueueGenericSendFromISR+0x58>
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	623b      	str	r3, [r7, #32]
 800a6c6:	e7fe      	b.n	800a6c6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d103      	bne.n	800a6d6 <xQueueGenericSendFromISR+0x66>
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d101      	bne.n	800a6da <xQueueGenericSendFromISR+0x6a>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e000      	b.n	800a6dc <xQueueGenericSendFromISR+0x6c>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d109      	bne.n	800a6f4 <xQueueGenericSendFromISR+0x84>
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	61fb      	str	r3, [r7, #28]
 800a6f2:	e7fe      	b.n	800a6f2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6f4:	f001 ff46 	bl	800c584 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6f8:	f3ef 8211 	mrs	r2, BASEPRI
 800a6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	61ba      	str	r2, [r7, #24]
 800a70e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a710:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a712:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d302      	bcc.n	800a726 <xQueueGenericSendFromISR+0xb6>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	2b02      	cmp	r3, #2
 800a724:	d12c      	bne.n	800a780 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a72c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	68b9      	ldr	r1, [r7, #8]
 800a734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a736:	f000 f988 	bl	800aa4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a73a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d112      	bne.n	800a76a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d016      	beq.n	800a77a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74e:	3324      	adds	r3, #36	; 0x24
 800a750:	4618      	mov	r0, r3
 800a752:	f000 ff39 	bl	800b5c8 <xTaskRemoveFromEventList>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00e      	beq.n	800a77a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00b      	beq.n	800a77a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	601a      	str	r2, [r3, #0]
 800a768:	e007      	b.n	800a77a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a76a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a76e:	3301      	adds	r3, #1
 800a770:	b2db      	uxtb	r3, r3
 800a772:	b25a      	sxtb	r2, r3
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a77a:	2301      	movs	r3, #1
 800a77c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a77e:	e001      	b.n	800a784 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a780:	2300      	movs	r3, #0
 800a782:	637b      	str	r3, [r7, #52]	; 0x34
 800a784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a786:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a790:	4618      	mov	r0, r3
 800a792:	3738      	adds	r7, #56	; 0x38
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08c      	sub	sp, #48	; 0x30
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d109      	bne.n	800a7c6 <xQueueReceive+0x2e>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	623b      	str	r3, [r7, #32]
 800a7c4:	e7fe      	b.n	800a7c4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d103      	bne.n	800a7d4 <xQueueReceive+0x3c>
 800a7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <xQueueReceive+0x40>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e000      	b.n	800a7da <xQueueReceive+0x42>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d109      	bne.n	800a7f2 <xQueueReceive+0x5a>
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	61fb      	str	r3, [r7, #28]
 800a7f0:	e7fe      	b.n	800a7f0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7f2:	f001 f89f 	bl	800b934 <xTaskGetSchedulerState>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d102      	bne.n	800a802 <xQueueReceive+0x6a>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d101      	bne.n	800a806 <xQueueReceive+0x6e>
 800a802:	2301      	movs	r3, #1
 800a804:	e000      	b.n	800a808 <xQueueReceive+0x70>
 800a806:	2300      	movs	r3, #0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d109      	bne.n	800a820 <xQueueReceive+0x88>
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	61bb      	str	r3, [r7, #24]
 800a81e:	e7fe      	b.n	800a81e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a820:	f001 fdd4 	bl	800c3cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a828:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d01f      	beq.n	800a870 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a830:	68b9      	ldr	r1, [r7, #8]
 800a832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a834:	f000 f973 	bl	800ab1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	1e5a      	subs	r2, r3, #1
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00f      	beq.n	800a868 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	3310      	adds	r3, #16
 800a84c:	4618      	mov	r0, r3
 800a84e:	f000 febb 	bl	800b5c8 <xTaskRemoveFromEventList>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d007      	beq.n	800a868 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a858:	4b3c      	ldr	r3, [pc, #240]	; (800a94c <xQueueReceive+0x1b4>)
 800a85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85e:	601a      	str	r2, [r3, #0]
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a868:	f001 fdde 	bl	800c428 <vPortExitCritical>
				return pdPASS;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e069      	b.n	800a944 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d103      	bne.n	800a87e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a876:	f001 fdd7 	bl	800c428 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a87a:	2300      	movs	r3, #0
 800a87c:	e062      	b.n	800a944 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d106      	bne.n	800a892 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a884:	f107 0310 	add.w	r3, r7, #16
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 feff 	bl	800b68c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a88e:	2301      	movs	r3, #1
 800a890:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a892:	f001 fdc9 	bl	800c428 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a896:	f000 fc7b 	bl	800b190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a89a:	f001 fd97 	bl	800c3cc <vPortEnterCritical>
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8a4:	b25b      	sxtb	r3, r3
 800a8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8aa:	d103      	bne.n	800a8b4 <xQueueReceive+0x11c>
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8ba:	b25b      	sxtb	r3, r3
 800a8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c0:	d103      	bne.n	800a8ca <xQueueReceive+0x132>
 800a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ca:	f001 fdad 	bl	800c428 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8ce:	1d3a      	adds	r2, r7, #4
 800a8d0:	f107 0310 	add.w	r3, r7, #16
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 feee 	bl	800b6b8 <xTaskCheckForTimeOut>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d123      	bne.n	800a92a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8e4:	f000 f993 	bl	800ac0e <prvIsQueueEmpty>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d017      	beq.n	800a91e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f0:	3324      	adds	r3, #36	; 0x24
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 fe18 	bl	800b52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8fe:	f000 f934 	bl	800ab6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a902:	f000 fc53 	bl	800b1ac <xTaskResumeAll>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d189      	bne.n	800a820 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a90c:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <xQueueReceive+0x1b4>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	e780      	b.n	800a820 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a91e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a920:	f000 f923 	bl	800ab6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a924:	f000 fc42 	bl	800b1ac <xTaskResumeAll>
 800a928:	e77a      	b.n	800a820 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a92a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a92c:	f000 f91d 	bl	800ab6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a930:	f000 fc3c 	bl	800b1ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a936:	f000 f96a 	bl	800ac0e <prvIsQueueEmpty>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f43f af6f 	beq.w	800a820 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a942:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a944:	4618      	mov	r0, r3
 800a946:	3730      	adds	r7, #48	; 0x30
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	e000ed04 	.word	0xe000ed04

0800a950 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08e      	sub	sp, #56	; 0x38
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	2b00      	cmp	r3, #0
 800a964:	d109      	bne.n	800a97a <xQueueReceiveFromISR+0x2a>
 800a966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	623b      	str	r3, [r7, #32]
 800a978:	e7fe      	b.n	800a978 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d103      	bne.n	800a988 <xQueueReceiveFromISR+0x38>
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <xQueueReceiveFromISR+0x3c>
 800a988:	2301      	movs	r3, #1
 800a98a:	e000      	b.n	800a98e <xQueueReceiveFromISR+0x3e>
 800a98c:	2300      	movs	r3, #0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d109      	bne.n	800a9a6 <xQueueReceiveFromISR+0x56>
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	61fb      	str	r3, [r7, #28]
 800a9a4:	e7fe      	b.n	800a9a4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9a6:	f001 fded 	bl	800c584 <vPortValidateInterruptPriority>
	__asm volatile
 800a9aa:	f3ef 8211 	mrs	r2, BASEPRI
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	61ba      	str	r2, [r7, #24]
 800a9c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a9c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d02f      	beq.n	800aa32 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9dc:	68b9      	ldr	r1, [r7, #8]
 800a9de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9e0:	f000 f89d 	bl	800ab1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	1e5a      	subs	r2, r3, #1
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a9ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f4:	d112      	bne.n	800aa1c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d016      	beq.n	800aa2c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	3310      	adds	r3, #16
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fde0 	bl	800b5c8 <xTaskRemoveFromEventList>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00e      	beq.n	800aa2c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00b      	beq.n	800aa2c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	e007      	b.n	800aa2c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa20:	3301      	adds	r3, #1
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	b25a      	sxtb	r2, r3
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa30:	e001      	b.n	800aa36 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	637b      	str	r3, [r7, #52]	; 0x34
 800aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa38:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3738      	adds	r7, #56	; 0x38
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b086      	sub	sp, #24
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa56:	2300      	movs	r3, #0
 800aa58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10d      	bne.n	800aa84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d14d      	bne.n	800ab0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 ff7b 	bl	800b970 <xTaskPriorityDisinherit>
 800aa7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	609a      	str	r2, [r3, #8]
 800aa82:	e043      	b.n	800ab0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d119      	bne.n	800aabe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6858      	ldr	r0, [r3, #4]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	461a      	mov	r2, r3
 800aa94:	68b9      	ldr	r1, [r7, #8]
 800aa96:	f002 faf9 	bl	800d08c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	685a      	ldr	r2, [r3, #4]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa2:	441a      	add	r2, r3
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	685a      	ldr	r2, [r3, #4]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d32b      	bcc.n	800ab0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	605a      	str	r2, [r3, #4]
 800aabc:	e026      	b.n	800ab0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	68d8      	ldr	r0, [r3, #12]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac6:	461a      	mov	r2, r3
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	f002 fadf 	bl	800d08c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	425b      	negs	r3, r3
 800aad8:	441a      	add	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68da      	ldr	r2, [r3, #12]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d207      	bcs.n	800aafa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	689a      	ldr	r2, [r3, #8]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	425b      	negs	r3, r3
 800aaf4:	441a      	add	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d105      	bne.n	800ab0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d002      	beq.n	800ab0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab14:	697b      	ldr	r3, [r7, #20]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b082      	sub	sp, #8
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d018      	beq.n	800ab62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68da      	ldr	r2, [r3, #12]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab38:	441a      	add	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68da      	ldr	r2, [r3, #12]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d303      	bcc.n	800ab52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	68d9      	ldr	r1, [r3, #12]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	6838      	ldr	r0, [r7, #0]
 800ab5e:	f002 fa95 	bl	800d08c <memcpy>
	}
}
 800ab62:	bf00      	nop
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab72:	f001 fc2b 	bl	800c3cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab7e:	e011      	b.n	800aba4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d012      	beq.n	800abae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3324      	adds	r3, #36	; 0x24
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 fd1b 	bl	800b5c8 <xTaskRemoveFromEventList>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab98:	f000 fdee 	bl	800b778 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	dce9      	bgt.n	800ab80 <prvUnlockQueue+0x16>
 800abac:	e000      	b.n	800abb0 <prvUnlockQueue+0x46>
					break;
 800abae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	22ff      	movs	r2, #255	; 0xff
 800abb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abb8:	f001 fc36 	bl	800c428 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abbc:	f001 fc06 	bl	800c3cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abc6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abc8:	e011      	b.n	800abee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d012      	beq.n	800abf8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	3310      	adds	r3, #16
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fcf6 	bl	800b5c8 <xTaskRemoveFromEventList>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800abe2:	f000 fdc9 	bl	800b778 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800abe6:	7bbb      	ldrb	r3, [r7, #14]
 800abe8:	3b01      	subs	r3, #1
 800abea:	b2db      	uxtb	r3, r3
 800abec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	dce9      	bgt.n	800abca <prvUnlockQueue+0x60>
 800abf6:	e000      	b.n	800abfa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800abf8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	22ff      	movs	r2, #255	; 0xff
 800abfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac02:	f001 fc11 	bl	800c428 <vPortExitCritical>
}
 800ac06:	bf00      	nop
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac16:	f001 fbd9 	bl	800c3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d102      	bne.n	800ac28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac22:	2301      	movs	r3, #1
 800ac24:	60fb      	str	r3, [r7, #12]
 800ac26:	e001      	b.n	800ac2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac2c:	f001 fbfc 	bl	800c428 <vPortExitCritical>

	return xReturn;
 800ac30:	68fb      	ldr	r3, [r7, #12]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac42:	f001 fbc3 	bl	800c3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d102      	bne.n	800ac58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac52:	2301      	movs	r3, #1
 800ac54:	60fb      	str	r3, [r7, #12]
 800ac56:	e001      	b.n	800ac5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac5c:	f001 fbe4 	bl	800c428 <vPortExitCritical>

	return xReturn;
 800ac60:	68fb      	ldr	r3, [r7, #12]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac76:	2300      	movs	r3, #0
 800ac78:	60fb      	str	r3, [r7, #12]
 800ac7a:	e014      	b.n	800aca6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac7c:	4a0e      	ldr	r2, [pc, #56]	; (800acb8 <vQueueAddToRegistry+0x4c>)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10b      	bne.n	800aca0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac88:	490b      	ldr	r1, [pc, #44]	; (800acb8 <vQueueAddToRegistry+0x4c>)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac92:	4a09      	ldr	r2, [pc, #36]	; (800acb8 <vQueueAddToRegistry+0x4c>)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac9e:	e005      	b.n	800acac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3301      	adds	r3, #1
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b07      	cmp	r3, #7
 800acaa:	d9e7      	bls.n	800ac7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800acac:	bf00      	nop
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	20004ff4 	.word	0x20004ff4

0800acbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800accc:	f001 fb7e 	bl	800c3cc <vPortEnterCritical>
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acd6:	b25b      	sxtb	r3, r3
 800acd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acdc:	d103      	bne.n	800ace6 <vQueueWaitForMessageRestricted+0x2a>
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acec:	b25b      	sxtb	r3, r3
 800acee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf2:	d103      	bne.n	800acfc <vQueueWaitForMessageRestricted+0x40>
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acfc:	f001 fb94 	bl	800c428 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d106      	bne.n	800ad16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	3324      	adds	r3, #36	; 0x24
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	68b9      	ldr	r1, [r7, #8]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 fc2f 	bl	800b574 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad16:	6978      	ldr	r0, [r7, #20]
 800ad18:	f7ff ff27 	bl	800ab6a <prvUnlockQueue>
	}
 800ad1c:	bf00      	nop
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08e      	sub	sp, #56	; 0x38
 800ad28:	af04      	add	r7, sp, #16
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
 800ad30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d109      	bne.n	800ad4c <xTaskCreateStatic+0x28>
	__asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	623b      	str	r3, [r7, #32]
 800ad4a:	e7fe      	b.n	800ad4a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d109      	bne.n	800ad66 <xTaskCreateStatic+0x42>
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	61fb      	str	r3, [r7, #28]
 800ad64:	e7fe      	b.n	800ad64 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad66:	235c      	movs	r3, #92	; 0x5c
 800ad68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	2b5c      	cmp	r3, #92	; 0x5c
 800ad6e:	d009      	beq.n	800ad84 <xTaskCreateStatic+0x60>
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	61bb      	str	r3, [r7, #24]
 800ad82:	e7fe      	b.n	800ad82 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d01e      	beq.n	800adca <xTaskCreateStatic+0xa6>
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d01b      	beq.n	800adca <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9e:	2202      	movs	r2, #2
 800ada0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ada4:	2300      	movs	r3, #0
 800ada6:	9303      	str	r3, [sp, #12]
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	9302      	str	r3, [sp, #8]
 800adac:	f107 0314 	add.w	r3, r7, #20
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 f850 	bl	800ae62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adc4:	f000 f8dc 	bl	800af80 <prvAddNewTaskToReadyList>
 800adc8:	e001      	b.n	800adce <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800adca:	2300      	movs	r3, #0
 800adcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800adce:	697b      	ldr	r3, [r7, #20]
	}
 800add0:	4618      	mov	r0, r3
 800add2:	3728      	adds	r7, #40	; 0x28
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08c      	sub	sp, #48	; 0x30
 800addc:	af04      	add	r7, sp, #16
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	4613      	mov	r3, r2
 800ade6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ade8:	88fb      	ldrh	r3, [r7, #6]
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4618      	mov	r0, r3
 800adee:	f001 fc07 	bl	800c600 <pvPortMalloc>
 800adf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00e      	beq.n	800ae18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800adfa:	205c      	movs	r0, #92	; 0x5c
 800adfc:	f001 fc00 	bl	800c600 <pvPortMalloc>
 800ae00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d003      	beq.n	800ae10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	631a      	str	r2, [r3, #48]	; 0x30
 800ae0e:	e005      	b.n	800ae1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae10:	6978      	ldr	r0, [r7, #20]
 800ae12:	f001 fcb7 	bl	800c784 <vPortFree>
 800ae16:	e001      	b.n	800ae1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d017      	beq.n	800ae52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae2a:	88fa      	ldrh	r2, [r7, #6]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9303      	str	r3, [sp, #12]
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	9302      	str	r3, [sp, #8]
 800ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	68b9      	ldr	r1, [r7, #8]
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f000 f80e 	bl	800ae62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae46:	69f8      	ldr	r0, [r7, #28]
 800ae48:	f000 f89a 	bl	800af80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	61bb      	str	r3, [r7, #24]
 800ae50:	e002      	b.n	800ae58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae52:	f04f 33ff 	mov.w	r3, #4294967295
 800ae56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae58:	69bb      	ldr	r3, [r7, #24]
	}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3720      	adds	r7, #32
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b088      	sub	sp, #32
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	60f8      	str	r0, [r7, #12]
 800ae6a:	60b9      	str	r1, [r7, #8]
 800ae6c:	607a      	str	r2, [r7, #4]
 800ae6e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	461a      	mov	r2, r3
 800ae7a:	21a5      	movs	r1, #165	; 0xa5
 800ae7c:	f002 f911 	bl	800d0a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	f023 0307 	bic.w	r3, r3, #7
 800ae98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	f003 0307 	and.w	r3, r3, #7
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d009      	beq.n	800aeb8 <prvInitialiseNewTask+0x56>
 800aea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	617b      	str	r3, [r7, #20]
 800aeb6:	e7fe      	b.n	800aeb6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d01f      	beq.n	800aefe <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aebe:	2300      	movs	r3, #0
 800aec0:	61fb      	str	r3, [r7, #28]
 800aec2:	e012      	b.n	800aeea <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4413      	add	r3, r2
 800aeca:	7819      	ldrb	r1, [r3, #0]
 800aecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	4413      	add	r3, r2
 800aed2:	3334      	adds	r3, #52	; 0x34
 800aed4:	460a      	mov	r2, r1
 800aed6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	4413      	add	r3, r2
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d006      	beq.n	800aef2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	3301      	adds	r3, #1
 800aee8:	61fb      	str	r3, [r7, #28]
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	2b0f      	cmp	r3, #15
 800aeee:	d9e9      	bls.n	800aec4 <prvInitialiseNewTask+0x62>
 800aef0:	e000      	b.n	800aef4 <prvInitialiseNewTask+0x92>
			{
				break;
 800aef2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aefc:	e003      	b.n	800af06 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af08:	2b37      	cmp	r3, #55	; 0x37
 800af0a:	d901      	bls.n	800af10 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af0c:	2337      	movs	r3, #55	; 0x37
 800af0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	2200      	movs	r2, #0
 800af20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	3304      	adds	r3, #4
 800af26:	4618      	mov	r0, r3
 800af28:	f7ff f8d6 	bl	800a0d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2e:	3318      	adds	r3, #24
 800af30:	4618      	mov	r0, r3
 800af32:	f7ff f8d1 	bl	800a0d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4e:	2200      	movs	r2, #0
 800af50:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af5a:	683a      	ldr	r2, [r7, #0]
 800af5c:	68f9      	ldr	r1, [r7, #12]
 800af5e:	69b8      	ldr	r0, [r7, #24]
 800af60:	f001 f90c 	bl	800c17c <pxPortInitialiseStack>
 800af64:	4602      	mov	r2, r0
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af76:	bf00      	nop
 800af78:	3720      	adds	r7, #32
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
	...

0800af80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af88:	f001 fa20 	bl	800c3cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af8c:	4b2d      	ldr	r3, [pc, #180]	; (800b044 <prvAddNewTaskToReadyList+0xc4>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3301      	adds	r3, #1
 800af92:	4a2c      	ldr	r2, [pc, #176]	; (800b044 <prvAddNewTaskToReadyList+0xc4>)
 800af94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af96:	4b2c      	ldr	r3, [pc, #176]	; (800b048 <prvAddNewTaskToReadyList+0xc8>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d109      	bne.n	800afb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af9e:	4a2a      	ldr	r2, [pc, #168]	; (800b048 <prvAddNewTaskToReadyList+0xc8>)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afa4:	4b27      	ldr	r3, [pc, #156]	; (800b044 <prvAddNewTaskToReadyList+0xc4>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d110      	bne.n	800afce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afac:	f000 fc08 	bl	800b7c0 <prvInitialiseTaskLists>
 800afb0:	e00d      	b.n	800afce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afb2:	4b26      	ldr	r3, [pc, #152]	; (800b04c <prvAddNewTaskToReadyList+0xcc>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d109      	bne.n	800afce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afba:	4b23      	ldr	r3, [pc, #140]	; (800b048 <prvAddNewTaskToReadyList+0xc8>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d802      	bhi.n	800afce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afc8:	4a1f      	ldr	r2, [pc, #124]	; (800b048 <prvAddNewTaskToReadyList+0xc8>)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afce:	4b20      	ldr	r3, [pc, #128]	; (800b050 <prvAddNewTaskToReadyList+0xd0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3301      	adds	r3, #1
 800afd4:	4a1e      	ldr	r2, [pc, #120]	; (800b050 <prvAddNewTaskToReadyList+0xd0>)
 800afd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800afd8:	4b1d      	ldr	r3, [pc, #116]	; (800b050 <prvAddNewTaskToReadyList+0xd0>)
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe4:	4b1b      	ldr	r3, [pc, #108]	; (800b054 <prvAddNewTaskToReadyList+0xd4>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d903      	bls.n	800aff4 <prvAddNewTaskToReadyList+0x74>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff0:	4a18      	ldr	r2, [pc, #96]	; (800b054 <prvAddNewTaskToReadyList+0xd4>)
 800aff2:	6013      	str	r3, [r2, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff8:	4613      	mov	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4413      	add	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4a15      	ldr	r2, [pc, #84]	; (800b058 <prvAddNewTaskToReadyList+0xd8>)
 800b002:	441a      	add	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3304      	adds	r3, #4
 800b008:	4619      	mov	r1, r3
 800b00a:	4610      	mov	r0, r2
 800b00c:	f7ff f871 	bl	800a0f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b010:	f001 fa0a 	bl	800c428 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b014:	4b0d      	ldr	r3, [pc, #52]	; (800b04c <prvAddNewTaskToReadyList+0xcc>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00e      	beq.n	800b03a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b01c:	4b0a      	ldr	r3, [pc, #40]	; (800b048 <prvAddNewTaskToReadyList+0xc8>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b026:	429a      	cmp	r2, r3
 800b028:	d207      	bcs.n	800b03a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b02a:	4b0c      	ldr	r3, [pc, #48]	; (800b05c <prvAddNewTaskToReadyList+0xdc>)
 800b02c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b030:	601a      	str	r2, [r3, #0]
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b03a:	bf00      	nop
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000c54 	.word	0x20000c54
 800b048:	20000780 	.word	0x20000780
 800b04c:	20000c60 	.word	0x20000c60
 800b050:	20000c70 	.word	0x20000c70
 800b054:	20000c5c 	.word	0x20000c5c
 800b058:	20000784 	.word	0x20000784
 800b05c:	e000ed04 	.word	0xe000ed04

0800b060 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d016      	beq.n	800b0a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b072:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <vTaskDelay+0x60>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d009      	beq.n	800b08e <vTaskDelay+0x2e>
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	60bb      	str	r3, [r7, #8]
 800b08c:	e7fe      	b.n	800b08c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b08e:	f000 f87f 	bl	800b190 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b092:	2100      	movs	r1, #0
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fcd7 	bl	800ba48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b09a:	f000 f887 	bl	800b1ac <xTaskResumeAll>
 800b09e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d107      	bne.n	800b0b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b0a6:	4b07      	ldr	r3, [pc, #28]	; (800b0c4 <vTaskDelay+0x64>)
 800b0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0b6:	bf00      	nop
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20000c7c 	.word	0x20000c7c
 800b0c4:	e000ed04 	.word	0xe000ed04

0800b0c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b08a      	sub	sp, #40	; 0x28
 800b0cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0d6:	463a      	mov	r2, r7
 800b0d8:	1d39      	adds	r1, r7, #4
 800b0da:	f107 0308 	add.w	r3, r7, #8
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe ffa6 	bl	800a030 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	9202      	str	r2, [sp, #8]
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	460a      	mov	r2, r1
 800b0f6:	4920      	ldr	r1, [pc, #128]	; (800b178 <vTaskStartScheduler+0xb0>)
 800b0f8:	4820      	ldr	r0, [pc, #128]	; (800b17c <vTaskStartScheduler+0xb4>)
 800b0fa:	f7ff fe13 	bl	800ad24 <xTaskCreateStatic>
 800b0fe:	4602      	mov	r2, r0
 800b100:	4b1f      	ldr	r3, [pc, #124]	; (800b180 <vTaskStartScheduler+0xb8>)
 800b102:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b104:	4b1e      	ldr	r3, [pc, #120]	; (800b180 <vTaskStartScheduler+0xb8>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b10c:	2301      	movs	r3, #1
 800b10e:	617b      	str	r3, [r7, #20]
 800b110:	e001      	b.n	800b116 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b112:	2300      	movs	r3, #0
 800b114:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d102      	bne.n	800b122 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b11c:	f000 fce8 	bl	800baf0 <xTimerCreateTimerTask>
 800b120:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d115      	bne.n	800b154 <vTaskStartScheduler+0x8c>
 800b128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12c:	f383 8811 	msr	BASEPRI, r3
 800b130:	f3bf 8f6f 	isb	sy
 800b134:	f3bf 8f4f 	dsb	sy
 800b138:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b13a:	4b12      	ldr	r3, [pc, #72]	; (800b184 <vTaskStartScheduler+0xbc>)
 800b13c:	f04f 32ff 	mov.w	r2, #4294967295
 800b140:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b142:	4b11      	ldr	r3, [pc, #68]	; (800b188 <vTaskStartScheduler+0xc0>)
 800b144:	2201      	movs	r2, #1
 800b146:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b148:	4b10      	ldr	r3, [pc, #64]	; (800b18c <vTaskStartScheduler+0xc4>)
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b14e:	f001 f89f 	bl	800c290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b152:	e00d      	b.n	800b170 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15a:	d109      	bne.n	800b170 <vTaskStartScheduler+0xa8>
 800b15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	e7fe      	b.n	800b16e <vTaskStartScheduler+0xa6>
}
 800b170:	bf00      	nop
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	0800d294 	.word	0x0800d294
 800b17c:	0800b791 	.word	0x0800b791
 800b180:	20000c78 	.word	0x20000c78
 800b184:	20000c74 	.word	0x20000c74
 800b188:	20000c60 	.word	0x20000c60
 800b18c:	20000c58 	.word	0x20000c58

0800b190 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b190:	b480      	push	{r7}
 800b192:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b194:	4b04      	ldr	r3, [pc, #16]	; (800b1a8 <vTaskSuspendAll+0x18>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3301      	adds	r3, #1
 800b19a:	4a03      	ldr	r2, [pc, #12]	; (800b1a8 <vTaskSuspendAll+0x18>)
 800b19c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b19e:	bf00      	nop
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr
 800b1a8:	20000c7c 	.word	0x20000c7c

0800b1ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1ba:	4b41      	ldr	r3, [pc, #260]	; (800b2c0 <xTaskResumeAll+0x114>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d109      	bne.n	800b1d6 <xTaskResumeAll+0x2a>
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	e7fe      	b.n	800b1d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b1d6:	f001 f8f9 	bl	800c3cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1da:	4b39      	ldr	r3, [pc, #228]	; (800b2c0 <xTaskResumeAll+0x114>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	4a37      	ldr	r2, [pc, #220]	; (800b2c0 <xTaskResumeAll+0x114>)
 800b1e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1e4:	4b36      	ldr	r3, [pc, #216]	; (800b2c0 <xTaskResumeAll+0x114>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d162      	bne.n	800b2b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1ec:	4b35      	ldr	r3, [pc, #212]	; (800b2c4 <xTaskResumeAll+0x118>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d05e      	beq.n	800b2b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1f4:	e02f      	b.n	800b256 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1f6:	4b34      	ldr	r3, [pc, #208]	; (800b2c8 <xTaskResumeAll+0x11c>)
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	3318      	adds	r3, #24
 800b202:	4618      	mov	r0, r3
 800b204:	f7fe ffd2 	bl	800a1ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3304      	adds	r3, #4
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe ffcd 	bl	800a1ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b216:	4b2d      	ldr	r3, [pc, #180]	; (800b2cc <xTaskResumeAll+0x120>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d903      	bls.n	800b226 <xTaskResumeAll+0x7a>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b222:	4a2a      	ldr	r2, [pc, #168]	; (800b2cc <xTaskResumeAll+0x120>)
 800b224:	6013      	str	r3, [r2, #0]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22a:	4613      	mov	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4413      	add	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4a27      	ldr	r2, [pc, #156]	; (800b2d0 <xTaskResumeAll+0x124>)
 800b234:	441a      	add	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3304      	adds	r3, #4
 800b23a:	4619      	mov	r1, r3
 800b23c:	4610      	mov	r0, r2
 800b23e:	f7fe ff58 	bl	800a0f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b246:	4b23      	ldr	r3, [pc, #140]	; (800b2d4 <xTaskResumeAll+0x128>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d302      	bcc.n	800b256 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b250:	4b21      	ldr	r3, [pc, #132]	; (800b2d8 <xTaskResumeAll+0x12c>)
 800b252:	2201      	movs	r2, #1
 800b254:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b256:	4b1c      	ldr	r3, [pc, #112]	; (800b2c8 <xTaskResumeAll+0x11c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1cb      	bne.n	800b1f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b264:	f000 fb46 	bl	800b8f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b268:	4b1c      	ldr	r3, [pc, #112]	; (800b2dc <xTaskResumeAll+0x130>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d010      	beq.n	800b296 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b274:	f000 f846 	bl	800b304 <xTaskIncrementTick>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d002      	beq.n	800b284 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b27e:	4b16      	ldr	r3, [pc, #88]	; (800b2d8 <xTaskResumeAll+0x12c>)
 800b280:	2201      	movs	r2, #1
 800b282:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	3b01      	subs	r3, #1
 800b288:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1f1      	bne.n	800b274 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b290:	4b12      	ldr	r3, [pc, #72]	; (800b2dc <xTaskResumeAll+0x130>)
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b296:	4b10      	ldr	r3, [pc, #64]	; (800b2d8 <xTaskResumeAll+0x12c>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d009      	beq.n	800b2b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2a2:	4b0f      	ldr	r3, [pc, #60]	; (800b2e0 <xTaskResumeAll+0x134>)
 800b2a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2b2:	f001 f8b9 	bl	800c428 <vPortExitCritical>

	return xAlreadyYielded;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	20000c7c 	.word	0x20000c7c
 800b2c4:	20000c54 	.word	0x20000c54
 800b2c8:	20000c14 	.word	0x20000c14
 800b2cc:	20000c5c 	.word	0x20000c5c
 800b2d0:	20000784 	.word	0x20000784
 800b2d4:	20000780 	.word	0x20000780
 800b2d8:	20000c68 	.word	0x20000c68
 800b2dc:	20000c64 	.word	0x20000c64
 800b2e0:	e000ed04 	.word	0xe000ed04

0800b2e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b2ea:	4b05      	ldr	r3, [pc, #20]	; (800b300 <xTaskGetTickCount+0x1c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b2f0:	687b      	ldr	r3, [r7, #4]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	20000c58 	.word	0x20000c58

0800b304 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b30a:	2300      	movs	r3, #0
 800b30c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b30e:	4b4e      	ldr	r3, [pc, #312]	; (800b448 <xTaskIncrementTick+0x144>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	f040 8088 	bne.w	800b428 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b318:	4b4c      	ldr	r3, [pc, #304]	; (800b44c <xTaskIncrementTick+0x148>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3301      	adds	r3, #1
 800b31e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b320:	4a4a      	ldr	r2, [pc, #296]	; (800b44c <xTaskIncrementTick+0x148>)
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d11f      	bne.n	800b36c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b32c:	4b48      	ldr	r3, [pc, #288]	; (800b450 <xTaskIncrementTick+0x14c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d009      	beq.n	800b34a <xTaskIncrementTick+0x46>
 800b336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33a:	f383 8811 	msr	BASEPRI, r3
 800b33e:	f3bf 8f6f 	isb	sy
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	603b      	str	r3, [r7, #0]
 800b348:	e7fe      	b.n	800b348 <xTaskIncrementTick+0x44>
 800b34a:	4b41      	ldr	r3, [pc, #260]	; (800b450 <xTaskIncrementTick+0x14c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	4b40      	ldr	r3, [pc, #256]	; (800b454 <xTaskIncrementTick+0x150>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a3e      	ldr	r2, [pc, #248]	; (800b450 <xTaskIncrementTick+0x14c>)
 800b356:	6013      	str	r3, [r2, #0]
 800b358:	4a3e      	ldr	r2, [pc, #248]	; (800b454 <xTaskIncrementTick+0x150>)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6013      	str	r3, [r2, #0]
 800b35e:	4b3e      	ldr	r3, [pc, #248]	; (800b458 <xTaskIncrementTick+0x154>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	3301      	adds	r3, #1
 800b364:	4a3c      	ldr	r2, [pc, #240]	; (800b458 <xTaskIncrementTick+0x154>)
 800b366:	6013      	str	r3, [r2, #0]
 800b368:	f000 fac4 	bl	800b8f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b36c:	4b3b      	ldr	r3, [pc, #236]	; (800b45c <xTaskIncrementTick+0x158>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	429a      	cmp	r2, r3
 800b374:	d349      	bcc.n	800b40a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b376:	4b36      	ldr	r3, [pc, #216]	; (800b450 <xTaskIncrementTick+0x14c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d104      	bne.n	800b38a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b380:	4b36      	ldr	r3, [pc, #216]	; (800b45c <xTaskIncrementTick+0x158>)
 800b382:	f04f 32ff 	mov.w	r2, #4294967295
 800b386:	601a      	str	r2, [r3, #0]
					break;
 800b388:	e03f      	b.n	800b40a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b38a:	4b31      	ldr	r3, [pc, #196]	; (800b450 <xTaskIncrementTick+0x14c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b39a:	693a      	ldr	r2, [r7, #16]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d203      	bcs.n	800b3aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3a2:	4a2e      	ldr	r2, [pc, #184]	; (800b45c <xTaskIncrementTick+0x158>)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3a8:	e02f      	b.n	800b40a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fe fefc 	bl	800a1ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d004      	beq.n	800b3c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	3318      	adds	r3, #24
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fe fef3 	bl	800a1ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ca:	4b25      	ldr	r3, [pc, #148]	; (800b460 <xTaskIncrementTick+0x15c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d903      	bls.n	800b3da <xTaskIncrementTick+0xd6>
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d6:	4a22      	ldr	r2, [pc, #136]	; (800b460 <xTaskIncrementTick+0x15c>)
 800b3d8:	6013      	str	r3, [r2, #0]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3de:	4613      	mov	r3, r2
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	4413      	add	r3, r2
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	4a1f      	ldr	r2, [pc, #124]	; (800b464 <xTaskIncrementTick+0x160>)
 800b3e8:	441a      	add	r2, r3
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	f7fe fe7e 	bl	800a0f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fa:	4b1b      	ldr	r3, [pc, #108]	; (800b468 <xTaskIncrementTick+0x164>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	429a      	cmp	r2, r3
 800b402:	d3b8      	bcc.n	800b376 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b404:	2301      	movs	r3, #1
 800b406:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b408:	e7b5      	b.n	800b376 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b40a:	4b17      	ldr	r3, [pc, #92]	; (800b468 <xTaskIncrementTick+0x164>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b410:	4914      	ldr	r1, [pc, #80]	; (800b464 <xTaskIncrementTick+0x160>)
 800b412:	4613      	mov	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	440b      	add	r3, r1
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d907      	bls.n	800b432 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b422:	2301      	movs	r3, #1
 800b424:	617b      	str	r3, [r7, #20]
 800b426:	e004      	b.n	800b432 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b428:	4b10      	ldr	r3, [pc, #64]	; (800b46c <xTaskIncrementTick+0x168>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3301      	adds	r3, #1
 800b42e:	4a0f      	ldr	r2, [pc, #60]	; (800b46c <xTaskIncrementTick+0x168>)
 800b430:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b432:	4b0f      	ldr	r3, [pc, #60]	; (800b470 <xTaskIncrementTick+0x16c>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b43a:	2301      	movs	r3, #1
 800b43c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b43e:	697b      	ldr	r3, [r7, #20]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20000c7c 	.word	0x20000c7c
 800b44c:	20000c58 	.word	0x20000c58
 800b450:	20000c0c 	.word	0x20000c0c
 800b454:	20000c10 	.word	0x20000c10
 800b458:	20000c6c 	.word	0x20000c6c
 800b45c:	20000c74 	.word	0x20000c74
 800b460:	20000c5c 	.word	0x20000c5c
 800b464:	20000784 	.word	0x20000784
 800b468:	20000780 	.word	0x20000780
 800b46c:	20000c64 	.word	0x20000c64
 800b470:	20000c68 	.word	0x20000c68

0800b474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b47a:	4b27      	ldr	r3, [pc, #156]	; (800b518 <vTaskSwitchContext+0xa4>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b482:	4b26      	ldr	r3, [pc, #152]	; (800b51c <vTaskSwitchContext+0xa8>)
 800b484:	2201      	movs	r2, #1
 800b486:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b488:	e040      	b.n	800b50c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b48a:	4b24      	ldr	r3, [pc, #144]	; (800b51c <vTaskSwitchContext+0xa8>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b490:	4b23      	ldr	r3, [pc, #140]	; (800b520 <vTaskSwitchContext+0xac>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	60fb      	str	r3, [r7, #12]
 800b496:	e00f      	b.n	800b4b8 <vTaskSwitchContext+0x44>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d109      	bne.n	800b4b2 <vTaskSwitchContext+0x3e>
 800b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	607b      	str	r3, [r7, #4]
 800b4b0:	e7fe      	b.n	800b4b0 <vTaskSwitchContext+0x3c>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	491a      	ldr	r1, [pc, #104]	; (800b524 <vTaskSwitchContext+0xb0>)
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	440b      	add	r3, r1
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d0e5      	beq.n	800b498 <vTaskSwitchContext+0x24>
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4a13      	ldr	r2, [pc, #76]	; (800b524 <vTaskSwitchContext+0xb0>)
 800b4d8:	4413      	add	r3, r2
 800b4da:	60bb      	str	r3, [r7, #8]
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	685a      	ldr	r2, [r3, #4]
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	605a      	str	r2, [r3, #4]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d104      	bne.n	800b4fc <vTaskSwitchContext+0x88>
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	685a      	ldr	r2, [r3, #4]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	605a      	str	r2, [r3, #4]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	4a09      	ldr	r2, [pc, #36]	; (800b528 <vTaskSwitchContext+0xb4>)
 800b504:	6013      	str	r3, [r2, #0]
 800b506:	4a06      	ldr	r2, [pc, #24]	; (800b520 <vTaskSwitchContext+0xac>)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6013      	str	r3, [r2, #0]
}
 800b50c:	bf00      	nop
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	20000c7c 	.word	0x20000c7c
 800b51c:	20000c68 	.word	0x20000c68
 800b520:	20000c5c 	.word	0x20000c5c
 800b524:	20000784 	.word	0x20000784
 800b528:	20000780 	.word	0x20000780

0800b52c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d109      	bne.n	800b550 <vTaskPlaceOnEventList+0x24>
 800b53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b540:	f383 8811 	msr	BASEPRI, r3
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	60fb      	str	r3, [r7, #12]
 800b54e:	e7fe      	b.n	800b54e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b550:	4b07      	ldr	r3, [pc, #28]	; (800b570 <vTaskPlaceOnEventList+0x44>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3318      	adds	r3, #24
 800b556:	4619      	mov	r1, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7fe fdee 	bl	800a13a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b55e:	2101      	movs	r1, #1
 800b560:	6838      	ldr	r0, [r7, #0]
 800b562:	f000 fa71 	bl	800ba48 <prvAddCurrentTaskToDelayedList>
}
 800b566:	bf00      	nop
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	20000780 	.word	0x20000780

0800b574 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d109      	bne.n	800b59a <vTaskPlaceOnEventListRestricted+0x26>
 800b586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	617b      	str	r3, [r7, #20]
 800b598:	e7fe      	b.n	800b598 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b59a:	4b0a      	ldr	r3, [pc, #40]	; (800b5c4 <vTaskPlaceOnEventListRestricted+0x50>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3318      	adds	r3, #24
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7fe fda5 	bl	800a0f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d002      	beq.n	800b5b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	68b8      	ldr	r0, [r7, #8]
 800b5b8:	f000 fa46 	bl	800ba48 <prvAddCurrentTaskToDelayedList>
	}
 800b5bc:	bf00      	nop
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	20000780 	.word	0x20000780

0800b5c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d109      	bne.n	800b5f2 <xTaskRemoveFromEventList+0x2a>
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	e7fe      	b.n	800b5f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	3318      	adds	r3, #24
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fe fdd8 	bl	800a1ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5fc:	4b1d      	ldr	r3, [pc, #116]	; (800b674 <xTaskRemoveFromEventList+0xac>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d11d      	bne.n	800b640 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	3304      	adds	r3, #4
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fe fdcf 	bl	800a1ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b612:	4b19      	ldr	r3, [pc, #100]	; (800b678 <xTaskRemoveFromEventList+0xb0>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	429a      	cmp	r2, r3
 800b618:	d903      	bls.n	800b622 <xTaskRemoveFromEventList+0x5a>
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61e:	4a16      	ldr	r2, [pc, #88]	; (800b678 <xTaskRemoveFromEventList+0xb0>)
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b626:	4613      	mov	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4a13      	ldr	r2, [pc, #76]	; (800b67c <xTaskRemoveFromEventList+0xb4>)
 800b630:	441a      	add	r2, r3
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	3304      	adds	r3, #4
 800b636:	4619      	mov	r1, r3
 800b638:	4610      	mov	r0, r2
 800b63a:	f7fe fd5a 	bl	800a0f2 <vListInsertEnd>
 800b63e:	e005      	b.n	800b64c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	3318      	adds	r3, #24
 800b644:	4619      	mov	r1, r3
 800b646:	480e      	ldr	r0, [pc, #56]	; (800b680 <xTaskRemoveFromEventList+0xb8>)
 800b648:	f7fe fd53 	bl	800a0f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b650:	4b0c      	ldr	r3, [pc, #48]	; (800b684 <xTaskRemoveFromEventList+0xbc>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b656:	429a      	cmp	r2, r3
 800b658:	d905      	bls.n	800b666 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b65a:	2301      	movs	r3, #1
 800b65c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b65e:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <xTaskRemoveFromEventList+0xc0>)
 800b660:	2201      	movs	r2, #1
 800b662:	601a      	str	r2, [r3, #0]
 800b664:	e001      	b.n	800b66a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b666:	2300      	movs	r3, #0
 800b668:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b66a:	697b      	ldr	r3, [r7, #20]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3718      	adds	r7, #24
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20000c7c 	.word	0x20000c7c
 800b678:	20000c5c 	.word	0x20000c5c
 800b67c:	20000784 	.word	0x20000784
 800b680:	20000c14 	.word	0x20000c14
 800b684:	20000780 	.word	0x20000780
 800b688:	20000c68 	.word	0x20000c68

0800b68c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b694:	4b06      	ldr	r3, [pc, #24]	; (800b6b0 <vTaskInternalSetTimeOutState+0x24>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b69c:	4b05      	ldr	r3, [pc, #20]	; (800b6b4 <vTaskInternalSetTimeOutState+0x28>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	605a      	str	r2, [r3, #4]
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	20000c6c 	.word	0x20000c6c
 800b6b4:	20000c58 	.word	0x20000c58

0800b6b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b088      	sub	sp, #32
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d109      	bne.n	800b6dc <xTaskCheckForTimeOut+0x24>
 800b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	613b      	str	r3, [r7, #16]
 800b6da:	e7fe      	b.n	800b6da <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d109      	bne.n	800b6f6 <xTaskCheckForTimeOut+0x3e>
 800b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	e7fe      	b.n	800b6f4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b6f6:	f000 fe69 	bl	800c3cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6fa:	4b1d      	ldr	r3, [pc, #116]	; (800b770 <xTaskCheckForTimeOut+0xb8>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b712:	d102      	bne.n	800b71a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b714:	2300      	movs	r3, #0
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	e023      	b.n	800b762 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	4b15      	ldr	r3, [pc, #84]	; (800b774 <xTaskCheckForTimeOut+0xbc>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d007      	beq.n	800b736 <xTaskCheckForTimeOut+0x7e>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	69ba      	ldr	r2, [r7, #24]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d302      	bcc.n	800b736 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b730:	2301      	movs	r3, #1
 800b732:	61fb      	str	r3, [r7, #28]
 800b734:	e015      	b.n	800b762 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d20b      	bcs.n	800b758 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	1ad2      	subs	r2, r2, r3
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff ff9d 	bl	800b68c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b752:	2300      	movs	r3, #0
 800b754:	61fb      	str	r3, [r7, #28]
 800b756:	e004      	b.n	800b762 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2200      	movs	r2, #0
 800b75c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b75e:	2301      	movs	r3, #1
 800b760:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b762:	f000 fe61 	bl	800c428 <vPortExitCritical>

	return xReturn;
 800b766:	69fb      	ldr	r3, [r7, #28]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3720      	adds	r7, #32
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20000c58 	.word	0x20000c58
 800b774:	20000c6c 	.word	0x20000c6c

0800b778 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b778:	b480      	push	{r7}
 800b77a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b77c:	4b03      	ldr	r3, [pc, #12]	; (800b78c <vTaskMissedYield+0x14>)
 800b77e:	2201      	movs	r2, #1
 800b780:	601a      	str	r2, [r3, #0]
}
 800b782:	bf00      	nop
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr
 800b78c:	20000c68 	.word	0x20000c68

0800b790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b798:	f000 f852 	bl	800b840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b79c:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <prvIdleTask+0x28>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d9f9      	bls.n	800b798 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7a4:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <prvIdleTask+0x2c>)
 800b7a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7b4:	e7f0      	b.n	800b798 <prvIdleTask+0x8>
 800b7b6:	bf00      	nop
 800b7b8:	20000784 	.word	0x20000784
 800b7bc:	e000ed04 	.word	0xe000ed04

0800b7c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	607b      	str	r3, [r7, #4]
 800b7ca:	e00c      	b.n	800b7e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4a12      	ldr	r2, [pc, #72]	; (800b820 <prvInitialiseTaskLists+0x60>)
 800b7d8:	4413      	add	r3, r2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fe fc5c 	bl	800a098 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	607b      	str	r3, [r7, #4]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b37      	cmp	r3, #55	; 0x37
 800b7ea:	d9ef      	bls.n	800b7cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7ec:	480d      	ldr	r0, [pc, #52]	; (800b824 <prvInitialiseTaskLists+0x64>)
 800b7ee:	f7fe fc53 	bl	800a098 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7f2:	480d      	ldr	r0, [pc, #52]	; (800b828 <prvInitialiseTaskLists+0x68>)
 800b7f4:	f7fe fc50 	bl	800a098 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7f8:	480c      	ldr	r0, [pc, #48]	; (800b82c <prvInitialiseTaskLists+0x6c>)
 800b7fa:	f7fe fc4d 	bl	800a098 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7fe:	480c      	ldr	r0, [pc, #48]	; (800b830 <prvInitialiseTaskLists+0x70>)
 800b800:	f7fe fc4a 	bl	800a098 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b804:	480b      	ldr	r0, [pc, #44]	; (800b834 <prvInitialiseTaskLists+0x74>)
 800b806:	f7fe fc47 	bl	800a098 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b80a:	4b0b      	ldr	r3, [pc, #44]	; (800b838 <prvInitialiseTaskLists+0x78>)
 800b80c:	4a05      	ldr	r2, [pc, #20]	; (800b824 <prvInitialiseTaskLists+0x64>)
 800b80e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b810:	4b0a      	ldr	r3, [pc, #40]	; (800b83c <prvInitialiseTaskLists+0x7c>)
 800b812:	4a05      	ldr	r2, [pc, #20]	; (800b828 <prvInitialiseTaskLists+0x68>)
 800b814:	601a      	str	r2, [r3, #0]
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20000784 	.word	0x20000784
 800b824:	20000be4 	.word	0x20000be4
 800b828:	20000bf8 	.word	0x20000bf8
 800b82c:	20000c14 	.word	0x20000c14
 800b830:	20000c28 	.word	0x20000c28
 800b834:	20000c40 	.word	0x20000c40
 800b838:	20000c0c 	.word	0x20000c0c
 800b83c:	20000c10 	.word	0x20000c10

0800b840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b846:	e019      	b.n	800b87c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b848:	f000 fdc0 	bl	800c3cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b84c:	4b0f      	ldr	r3, [pc, #60]	; (800b88c <prvCheckTasksWaitingTermination+0x4c>)
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3304      	adds	r3, #4
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fe fca7 	bl	800a1ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b85e:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <prvCheckTasksWaitingTermination+0x50>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	3b01      	subs	r3, #1
 800b864:	4a0a      	ldr	r2, [pc, #40]	; (800b890 <prvCheckTasksWaitingTermination+0x50>)
 800b866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <prvCheckTasksWaitingTermination+0x54>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	4a09      	ldr	r2, [pc, #36]	; (800b894 <prvCheckTasksWaitingTermination+0x54>)
 800b870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b872:	f000 fdd9 	bl	800c428 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f80e 	bl	800b898 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b87c:	4b05      	ldr	r3, [pc, #20]	; (800b894 <prvCheckTasksWaitingTermination+0x54>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e1      	bne.n	800b848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20000c28 	.word	0x20000c28
 800b890:	20000c54 	.word	0x20000c54
 800b894:	20000c3c 	.word	0x20000c3c

0800b898 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d108      	bne.n	800b8bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 ff68 	bl	800c784 <vPortFree>
				vPortFree( pxTCB );
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 ff65 	bl	800c784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8ba:	e017      	b.n	800b8ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d103      	bne.n	800b8ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 ff5c 	bl	800c784 <vPortFree>
	}
 800b8cc:	e00e      	b.n	800b8ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d009      	beq.n	800b8ec <prvDeleteTCB+0x54>
 800b8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	e7fe      	b.n	800b8ea <prvDeleteTCB+0x52>
	}
 800b8ec:	bf00      	nop
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8fa:	4b0c      	ldr	r3, [pc, #48]	; (800b92c <prvResetNextTaskUnblockTime+0x38>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d104      	bne.n	800b90e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b904:	4b0a      	ldr	r3, [pc, #40]	; (800b930 <prvResetNextTaskUnblockTime+0x3c>)
 800b906:	f04f 32ff 	mov.w	r2, #4294967295
 800b90a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b90c:	e008      	b.n	800b920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b90e:	4b07      	ldr	r3, [pc, #28]	; (800b92c <prvResetNextTaskUnblockTime+0x38>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	4a04      	ldr	r2, [pc, #16]	; (800b930 <prvResetNextTaskUnblockTime+0x3c>)
 800b91e:	6013      	str	r3, [r2, #0]
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr
 800b92c:	20000c0c 	.word	0x20000c0c
 800b930:	20000c74 	.word	0x20000c74

0800b934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b93a:	4b0b      	ldr	r3, [pc, #44]	; (800b968 <xTaskGetSchedulerState+0x34>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d102      	bne.n	800b948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b942:	2301      	movs	r3, #1
 800b944:	607b      	str	r3, [r7, #4]
 800b946:	e008      	b.n	800b95a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b948:	4b08      	ldr	r3, [pc, #32]	; (800b96c <xTaskGetSchedulerState+0x38>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d102      	bne.n	800b956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b950:	2302      	movs	r3, #2
 800b952:	607b      	str	r3, [r7, #4]
 800b954:	e001      	b.n	800b95a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b956:	2300      	movs	r3, #0
 800b958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b95a:	687b      	ldr	r3, [r7, #4]
	}
 800b95c:	4618      	mov	r0, r3
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	20000c60 	.word	0x20000c60
 800b96c:	20000c7c 	.word	0x20000c7c

0800b970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b97c:	2300      	movs	r3, #0
 800b97e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d054      	beq.n	800ba30 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b986:	4b2d      	ldr	r3, [pc, #180]	; (800ba3c <xTaskPriorityDisinherit+0xcc>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d009      	beq.n	800b9a4 <xTaskPriorityDisinherit+0x34>
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	e7fe      	b.n	800b9a2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d109      	bne.n	800b9c0 <xTaskPriorityDisinherit+0x50>
 800b9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	60bb      	str	r3, [r7, #8]
 800b9be:	e7fe      	b.n	800b9be <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c4:	1e5a      	subs	r2, r3, #1
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d02c      	beq.n	800ba30 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d128      	bne.n	800ba30 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fe fbe2 	bl	800a1ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba00:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <xTaskPriorityDisinherit+0xd0>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d903      	bls.n	800ba10 <xTaskPriorityDisinherit+0xa0>
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0c:	4a0c      	ldr	r2, [pc, #48]	; (800ba40 <xTaskPriorityDisinherit+0xd0>)
 800ba0e:	6013      	str	r3, [r2, #0]
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba14:	4613      	mov	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4413      	add	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4a09      	ldr	r2, [pc, #36]	; (800ba44 <xTaskPriorityDisinherit+0xd4>)
 800ba1e:	441a      	add	r2, r3
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	3304      	adds	r3, #4
 800ba24:	4619      	mov	r1, r3
 800ba26:	4610      	mov	r0, r2
 800ba28:	f7fe fb63 	bl	800a0f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba30:	697b      	ldr	r3, [r7, #20]
	}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3718      	adds	r7, #24
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	20000780 	.word	0x20000780
 800ba40:	20000c5c 	.word	0x20000c5c
 800ba44:	20000784 	.word	0x20000784

0800ba48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba52:	4b21      	ldr	r3, [pc, #132]	; (800bad8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba58:	4b20      	ldr	r3, [pc, #128]	; (800badc <prvAddCurrentTaskToDelayedList+0x94>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fe fba4 	bl	800a1ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6a:	d10a      	bne.n	800ba82 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d007      	beq.n	800ba82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba72:	4b1a      	ldr	r3, [pc, #104]	; (800badc <prvAddCurrentTaskToDelayedList+0x94>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	3304      	adds	r3, #4
 800ba78:	4619      	mov	r1, r3
 800ba7a:	4819      	ldr	r0, [pc, #100]	; (800bae0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba7c:	f7fe fb39 	bl	800a0f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba80:	e026      	b.n	800bad0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4413      	add	r3, r2
 800ba88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba8a:	4b14      	ldr	r3, [pc, #80]	; (800badc <prvAddCurrentTaskToDelayedList+0x94>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d209      	bcs.n	800baae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba9a:	4b12      	ldr	r3, [pc, #72]	; (800bae4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	4b0f      	ldr	r3, [pc, #60]	; (800badc <prvAddCurrentTaskToDelayedList+0x94>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3304      	adds	r3, #4
 800baa4:	4619      	mov	r1, r3
 800baa6:	4610      	mov	r0, r2
 800baa8:	f7fe fb47 	bl	800a13a <vListInsert>
}
 800baac:	e010      	b.n	800bad0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baae:	4b0e      	ldr	r3, [pc, #56]	; (800bae8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	4b0a      	ldr	r3, [pc, #40]	; (800badc <prvAddCurrentTaskToDelayedList+0x94>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	3304      	adds	r3, #4
 800bab8:	4619      	mov	r1, r3
 800baba:	4610      	mov	r0, r2
 800babc:	f7fe fb3d 	bl	800a13a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bac0:	4b0a      	ldr	r3, [pc, #40]	; (800baec <prvAddCurrentTaskToDelayedList+0xa4>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d202      	bcs.n	800bad0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800baca:	4a08      	ldr	r2, [pc, #32]	; (800baec <prvAddCurrentTaskToDelayedList+0xa4>)
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	6013      	str	r3, [r2, #0]
}
 800bad0:	bf00      	nop
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	20000c58 	.word	0x20000c58
 800badc:	20000780 	.word	0x20000780
 800bae0:	20000c40 	.word	0x20000c40
 800bae4:	20000c10 	.word	0x20000c10
 800bae8:	20000c0c 	.word	0x20000c0c
 800baec:	20000c74 	.word	0x20000c74

0800baf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08a      	sub	sp, #40	; 0x28
 800baf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800baf6:	2300      	movs	r3, #0
 800baf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bafa:	f000 faff 	bl	800c0fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bafe:	4b1c      	ldr	r3, [pc, #112]	; (800bb70 <xTimerCreateTimerTask+0x80>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d021      	beq.n	800bb4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb06:	2300      	movs	r3, #0
 800bb08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb0e:	1d3a      	adds	r2, r7, #4
 800bb10:	f107 0108 	add.w	r1, r7, #8
 800bb14:	f107 030c 	add.w	r3, r7, #12
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fe faa3 	bl	800a064 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb1e:	6879      	ldr	r1, [r7, #4]
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	9202      	str	r2, [sp, #8]
 800bb26:	9301      	str	r3, [sp, #4]
 800bb28:	2302      	movs	r3, #2
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	460a      	mov	r2, r1
 800bb30:	4910      	ldr	r1, [pc, #64]	; (800bb74 <xTimerCreateTimerTask+0x84>)
 800bb32:	4811      	ldr	r0, [pc, #68]	; (800bb78 <xTimerCreateTimerTask+0x88>)
 800bb34:	f7ff f8f6 	bl	800ad24 <xTaskCreateStatic>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	4b10      	ldr	r3, [pc, #64]	; (800bb7c <xTimerCreateTimerTask+0x8c>)
 800bb3c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb3e:	4b0f      	ldr	r3, [pc, #60]	; (800bb7c <xTimerCreateTimerTask+0x8c>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb46:	2301      	movs	r3, #1
 800bb48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d109      	bne.n	800bb64 <xTimerCreateTimerTask+0x74>
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	613b      	str	r3, [r7, #16]
 800bb62:	e7fe      	b.n	800bb62 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800bb64:	697b      	ldr	r3, [r7, #20]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20000cb0 	.word	0x20000cb0
 800bb74:	0800d29c 	.word	0x0800d29c
 800bb78:	0800bcb1 	.word	0x0800bcb1
 800bb7c:	20000cb4 	.word	0x20000cb4

0800bb80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08a      	sub	sp, #40	; 0x28
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
 800bb8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d109      	bne.n	800bbac <xTimerGenericCommand+0x2c>
 800bb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	623b      	str	r3, [r7, #32]
 800bbaa:	e7fe      	b.n	800bbaa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bbac:	4b19      	ldr	r3, [pc, #100]	; (800bc14 <xTimerGenericCommand+0x94>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d02a      	beq.n	800bc0a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b05      	cmp	r3, #5
 800bbc4:	dc18      	bgt.n	800bbf8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbc6:	f7ff feb5 	bl	800b934 <xTaskGetSchedulerState>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d109      	bne.n	800bbe4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbd0:	4b10      	ldr	r3, [pc, #64]	; (800bc14 <xTimerGenericCommand+0x94>)
 800bbd2:	6818      	ldr	r0, [r3, #0]
 800bbd4:	f107 0110 	add.w	r1, r7, #16
 800bbd8:	2300      	movs	r3, #0
 800bbda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbdc:	f7fe fc4e 	bl	800a47c <xQueueGenericSend>
 800bbe0:	6278      	str	r0, [r7, #36]	; 0x24
 800bbe2:	e012      	b.n	800bc0a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bbe4:	4b0b      	ldr	r3, [pc, #44]	; (800bc14 <xTimerGenericCommand+0x94>)
 800bbe6:	6818      	ldr	r0, [r3, #0]
 800bbe8:	f107 0110 	add.w	r1, r7, #16
 800bbec:	2300      	movs	r3, #0
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f7fe fc44 	bl	800a47c <xQueueGenericSend>
 800bbf4:	6278      	str	r0, [r7, #36]	; 0x24
 800bbf6:	e008      	b.n	800bc0a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bbf8:	4b06      	ldr	r3, [pc, #24]	; (800bc14 <xTimerGenericCommand+0x94>)
 800bbfa:	6818      	ldr	r0, [r3, #0]
 800bbfc:	f107 0110 	add.w	r1, r7, #16
 800bc00:	2300      	movs	r3, #0
 800bc02:	683a      	ldr	r2, [r7, #0]
 800bc04:	f7fe fd34 	bl	800a670 <xQueueGenericSendFromISR>
 800bc08:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3728      	adds	r7, #40	; 0x28
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	20000cb0 	.word	0x20000cb0

0800bc18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b088      	sub	sp, #32
 800bc1c:	af02      	add	r7, sp, #8
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc22:	4b22      	ldr	r3, [pc, #136]	; (800bcac <prvProcessExpiredTimer+0x94>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7fe fabb 	bl	800a1ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc3c:	f003 0304 	and.w	r3, r3, #4
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d021      	beq.n	800bc88 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	699a      	ldr	r2, [r3, #24]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	18d1      	adds	r1, r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	6978      	ldr	r0, [r7, #20]
 800bc52:	f000 f8d1 	bl	800bdf8 <prvInsertTimerInActiveList>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d01e      	beq.n	800bc9a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	2300      	movs	r3, #0
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	2100      	movs	r1, #0
 800bc66:	6978      	ldr	r0, [r7, #20]
 800bc68:	f7ff ff8a 	bl	800bb80 <xTimerGenericCommand>
 800bc6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d112      	bne.n	800bc9a <prvProcessExpiredTimer+0x82>
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	60fb      	str	r3, [r7, #12]
 800bc86:	e7fe      	b.n	800bc86 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc8e:	f023 0301 	bic.w	r3, r3, #1
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	6978      	ldr	r0, [r7, #20]
 800bca0:	4798      	blx	r3
}
 800bca2:	bf00      	nop
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	20000ca8 	.word	0x20000ca8

0800bcb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcb8:	f107 0308 	add.w	r3, r7, #8
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f000 f857 	bl	800bd70 <prvGetNextExpireTime>
 800bcc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f000 f803 	bl	800bcd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcce:	f000 f8d5 	bl	800be7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcd2:	e7f1      	b.n	800bcb8 <prvTimerTask+0x8>

0800bcd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bcde:	f7ff fa57 	bl	800b190 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bce2:	f107 0308 	add.w	r3, r7, #8
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 f866 	bl	800bdb8 <prvSampleTimeNow>
 800bcec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d130      	bne.n	800bd56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10a      	bne.n	800bd10 <prvProcessTimerOrBlockTask+0x3c>
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d806      	bhi.n	800bd10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd02:	f7ff fa53 	bl	800b1ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd06:	68f9      	ldr	r1, [r7, #12]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f7ff ff85 	bl	800bc18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd0e:	e024      	b.n	800bd5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d008      	beq.n	800bd28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd16:	4b13      	ldr	r3, [pc, #76]	; (800bd64 <prvProcessTimerOrBlockTask+0x90>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <prvProcessTimerOrBlockTask+0x50>
 800bd20:	2301      	movs	r3, #1
 800bd22:	e000      	b.n	800bd26 <prvProcessTimerOrBlockTask+0x52>
 800bd24:	2300      	movs	r3, #0
 800bd26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd28:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <prvProcessTimerOrBlockTask+0x94>)
 800bd2a:	6818      	ldr	r0, [r3, #0]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	4619      	mov	r1, r3
 800bd36:	f7fe ffc1 	bl	800acbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd3a:	f7ff fa37 	bl	800b1ac <xTaskResumeAll>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10a      	bne.n	800bd5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd44:	4b09      	ldr	r3, [pc, #36]	; (800bd6c <prvProcessTimerOrBlockTask+0x98>)
 800bd46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd4a:	601a      	str	r2, [r3, #0]
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	f3bf 8f6f 	isb	sy
}
 800bd54:	e001      	b.n	800bd5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd56:	f7ff fa29 	bl	800b1ac <xTaskResumeAll>
}
 800bd5a:	bf00      	nop
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000cac 	.word	0x20000cac
 800bd68:	20000cb0 	.word	0x20000cb0
 800bd6c:	e000ed04 	.word	0xe000ed04

0800bd70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd78:	4b0e      	ldr	r3, [pc, #56]	; (800bdb4 <prvGetNextExpireTime+0x44>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <prvGetNextExpireTime+0x16>
 800bd82:	2201      	movs	r2, #1
 800bd84:	e000      	b.n	800bd88 <prvGetNextExpireTime+0x18>
 800bd86:	2200      	movs	r2, #0
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d105      	bne.n	800bda0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd94:	4b07      	ldr	r3, [pc, #28]	; (800bdb4 <prvGetNextExpireTime+0x44>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	e001      	b.n	800bda4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bda0:	2300      	movs	r3, #0
 800bda2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bda4:	68fb      	ldr	r3, [r7, #12]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3714      	adds	r7, #20
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	20000ca8 	.word	0x20000ca8

0800bdb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bdc0:	f7ff fa90 	bl	800b2e4 <xTaskGetTickCount>
 800bdc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdc6:	4b0b      	ldr	r3, [pc, #44]	; (800bdf4 <prvSampleTimeNow+0x3c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d205      	bcs.n	800bddc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bdd0:	f000 f930 	bl	800c034 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	e002      	b.n	800bde2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bde2:	4a04      	ldr	r2, [pc, #16]	; (800bdf4 <prvSampleTimeNow+0x3c>)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bde8:	68fb      	ldr	r3, [r7, #12]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20000cb8 	.word	0x20000cb8

0800bdf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
 800be04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be06:	2300      	movs	r3, #0
 800be08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d812      	bhi.n	800be44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	1ad2      	subs	r2, r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d302      	bcc.n	800be32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be2c:	2301      	movs	r3, #1
 800be2e:	617b      	str	r3, [r7, #20]
 800be30:	e01b      	b.n	800be6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be32:	4b10      	ldr	r3, [pc, #64]	; (800be74 <prvInsertTimerInActiveList+0x7c>)
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3304      	adds	r3, #4
 800be3a:	4619      	mov	r1, r3
 800be3c:	4610      	mov	r0, r2
 800be3e:	f7fe f97c 	bl	800a13a <vListInsert>
 800be42:	e012      	b.n	800be6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d206      	bcs.n	800be5a <prvInsertTimerInActiveList+0x62>
 800be4c:	68ba      	ldr	r2, [r7, #8]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	429a      	cmp	r2, r3
 800be52:	d302      	bcc.n	800be5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be54:	2301      	movs	r3, #1
 800be56:	617b      	str	r3, [r7, #20]
 800be58:	e007      	b.n	800be6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be5a:	4b07      	ldr	r3, [pc, #28]	; (800be78 <prvInsertTimerInActiveList+0x80>)
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3304      	adds	r3, #4
 800be62:	4619      	mov	r1, r3
 800be64:	4610      	mov	r0, r2
 800be66:	f7fe f968 	bl	800a13a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be6a:	697b      	ldr	r3, [r7, #20]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	20000cac 	.word	0x20000cac
 800be78:	20000ca8 	.word	0x20000ca8

0800be7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08e      	sub	sp, #56	; 0x38
 800be80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be82:	e0c6      	b.n	800c012 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	da17      	bge.n	800beba <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be8a:	1d3b      	adds	r3, r7, #4
 800be8c:	3304      	adds	r3, #4
 800be8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	2b00      	cmp	r3, #0
 800be94:	d109      	bne.n	800beaa <prvProcessReceivedCommands+0x2e>
 800be96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	61fb      	str	r3, [r7, #28]
 800bea8:	e7fe      	b.n	800bea8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800beaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beb0:	6850      	ldr	r0, [r2, #4]
 800beb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beb4:	6892      	ldr	r2, [r2, #8]
 800beb6:	4611      	mov	r1, r2
 800beb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f2c0 80a7 	blt.w	800c010 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	695b      	ldr	r3, [r3, #20]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d004      	beq.n	800bed8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	3304      	adds	r3, #4
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe f96a 	bl	800a1ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bed8:	463b      	mov	r3, r7
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff ff6c 	bl	800bdb8 <prvSampleTimeNow>
 800bee0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b09      	cmp	r3, #9
 800bee6:	f200 8094 	bhi.w	800c012 <prvProcessReceivedCommands+0x196>
 800beea:	a201      	add	r2, pc, #4	; (adr r2, 800bef0 <prvProcessReceivedCommands+0x74>)
 800beec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef0:	0800bf19 	.word	0x0800bf19
 800bef4:	0800bf19 	.word	0x0800bf19
 800bef8:	0800bf19 	.word	0x0800bf19
 800befc:	0800bf8b 	.word	0x0800bf8b
 800bf00:	0800bf9f 	.word	0x0800bf9f
 800bf04:	0800bfe7 	.word	0x0800bfe7
 800bf08:	0800bf19 	.word	0x0800bf19
 800bf0c:	0800bf19 	.word	0x0800bf19
 800bf10:	0800bf8b 	.word	0x0800bf8b
 800bf14:	0800bf9f 	.word	0x0800bf9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf1e:	f043 0301 	orr.w	r3, r3, #1
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	18d1      	adds	r1, r2, r3
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf38:	f7ff ff5e 	bl	800bdf8 <prvInsertTimerInActiveList>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d067      	beq.n	800c012 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf50:	f003 0304 	and.w	r3, r3, #4
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d05c      	beq.n	800c012 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5c:	699b      	ldr	r3, [r3, #24]
 800bf5e:	441a      	add	r2, r3
 800bf60:	2300      	movs	r3, #0
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	2300      	movs	r3, #0
 800bf66:	2100      	movs	r1, #0
 800bf68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf6a:	f7ff fe09 	bl	800bb80 <xTimerGenericCommand>
 800bf6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf70:	6a3b      	ldr	r3, [r7, #32]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d14d      	bne.n	800c012 <prvProcessReceivedCommands+0x196>
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	61bb      	str	r3, [r7, #24]
 800bf88:	e7fe      	b.n	800bf88 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf90:	f023 0301 	bic.w	r3, r3, #1
 800bf94:	b2da      	uxtb	r2, r3
 800bf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bf9c:	e039      	b.n	800c012 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfa4:	f043 0301 	orr.w	r3, r3, #1
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d109      	bne.n	800bfd2 <prvProcessReceivedCommands+0x156>
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	617b      	str	r3, [r7, #20]
 800bfd0:	e7fe      	b.n	800bfd0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	699a      	ldr	r2, [r3, #24]
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	18d1      	adds	r1, r2, r3
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfe0:	f7ff ff0a 	bl	800bdf8 <prvInsertTimerInActiveList>
					break;
 800bfe4:	e015      	b.n	800c012 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfec:	f003 0302 	and.w	r3, r3, #2
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d103      	bne.n	800bffc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800bff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bff6:	f000 fbc5 	bl	800c784 <vPortFree>
 800bffa:	e00a      	b.n	800c012 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c002:	f023 0301 	bic.w	r3, r3, #1
 800c006:	b2da      	uxtb	r2, r3
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c00e:	e000      	b.n	800c012 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c010:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c012:	4b07      	ldr	r3, [pc, #28]	; (800c030 <prvProcessReceivedCommands+0x1b4>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	1d39      	adds	r1, r7, #4
 800c018:	2200      	movs	r2, #0
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fbbc 	bl	800a798 <xQueueReceive>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	f47f af2e 	bne.w	800be84 <prvProcessReceivedCommands+0x8>
	}
}
 800c028:	bf00      	nop
 800c02a:	3730      	adds	r7, #48	; 0x30
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	20000cb0 	.word	0x20000cb0

0800c034 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b088      	sub	sp, #32
 800c038:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c03a:	e047      	b.n	800c0cc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c03c:	4b2d      	ldr	r3, [pc, #180]	; (800c0f4 <prvSwitchTimerLists+0xc0>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c046:	4b2b      	ldr	r3, [pc, #172]	; (800c0f4 <prvSwitchTimerLists+0xc0>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	3304      	adds	r3, #4
 800c054:	4618      	mov	r0, r3
 800c056:	f7fe f8a9 	bl	800a1ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c068:	f003 0304 	and.w	r3, r3, #4
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d02d      	beq.n	800c0cc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	699b      	ldr	r3, [r3, #24]
 800c074:	693a      	ldr	r2, [r7, #16]
 800c076:	4413      	add	r3, r2
 800c078:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d90e      	bls.n	800c0a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c08e:	4b19      	ldr	r3, [pc, #100]	; (800c0f4 <prvSwitchTimerLists+0xc0>)
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	3304      	adds	r3, #4
 800c096:	4619      	mov	r1, r3
 800c098:	4610      	mov	r0, r2
 800c09a:	f7fe f84e 	bl	800a13a <vListInsert>
 800c09e:	e015      	b.n	800c0cc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f7ff fd68 	bl	800bb80 <xTimerGenericCommand>
 800c0b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d109      	bne.n	800c0cc <prvSwitchTimerLists+0x98>
 800c0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	603b      	str	r3, [r7, #0]
 800c0ca:	e7fe      	b.n	800c0ca <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0cc:	4b09      	ldr	r3, [pc, #36]	; (800c0f4 <prvSwitchTimerLists+0xc0>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1b2      	bne.n	800c03c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c0d6:	4b07      	ldr	r3, [pc, #28]	; (800c0f4 <prvSwitchTimerLists+0xc0>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0dc:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <prvSwitchTimerLists+0xc4>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a04      	ldr	r2, [pc, #16]	; (800c0f4 <prvSwitchTimerLists+0xc0>)
 800c0e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0e4:	4a04      	ldr	r2, [pc, #16]	; (800c0f8 <prvSwitchTimerLists+0xc4>)
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	6013      	str	r3, [r2, #0]
}
 800c0ea:	bf00      	nop
 800c0ec:	3718      	adds	r7, #24
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20000ca8 	.word	0x20000ca8
 800c0f8:	20000cac 	.word	0x20000cac

0800c0fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c102:	f000 f963 	bl	800c3cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c106:	4b15      	ldr	r3, [pc, #84]	; (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d120      	bne.n	800c150 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c10e:	4814      	ldr	r0, [pc, #80]	; (800c160 <prvCheckForValidListAndQueue+0x64>)
 800c110:	f7fd ffc2 	bl	800a098 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c114:	4813      	ldr	r0, [pc, #76]	; (800c164 <prvCheckForValidListAndQueue+0x68>)
 800c116:	f7fd ffbf 	bl	800a098 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c11a:	4b13      	ldr	r3, [pc, #76]	; (800c168 <prvCheckForValidListAndQueue+0x6c>)
 800c11c:	4a10      	ldr	r2, [pc, #64]	; (800c160 <prvCheckForValidListAndQueue+0x64>)
 800c11e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c120:	4b12      	ldr	r3, [pc, #72]	; (800c16c <prvCheckForValidListAndQueue+0x70>)
 800c122:	4a10      	ldr	r2, [pc, #64]	; (800c164 <prvCheckForValidListAndQueue+0x68>)
 800c124:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c126:	2300      	movs	r3, #0
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	4b11      	ldr	r3, [pc, #68]	; (800c170 <prvCheckForValidListAndQueue+0x74>)
 800c12c:	4a11      	ldr	r2, [pc, #68]	; (800c174 <prvCheckForValidListAndQueue+0x78>)
 800c12e:	2110      	movs	r1, #16
 800c130:	200a      	movs	r0, #10
 800c132:	f7fe f8cd 	bl	800a2d0 <xQueueGenericCreateStatic>
 800c136:	4602      	mov	r2, r0
 800c138:	4b08      	ldr	r3, [pc, #32]	; (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c13a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c13c:	4b07      	ldr	r3, [pc, #28]	; (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d005      	beq.n	800c150 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c144:	4b05      	ldr	r3, [pc, #20]	; (800c15c <prvCheckForValidListAndQueue+0x60>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	490b      	ldr	r1, [pc, #44]	; (800c178 <prvCheckForValidListAndQueue+0x7c>)
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe fd8e 	bl	800ac6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c150:	f000 f96a 	bl	800c428 <vPortExitCritical>
}
 800c154:	bf00      	nop
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	20000cb0 	.word	0x20000cb0
 800c160:	20000c80 	.word	0x20000c80
 800c164:	20000c94 	.word	0x20000c94
 800c168:	20000ca8 	.word	0x20000ca8
 800c16c:	20000cac 	.word	0x20000cac
 800c170:	20000d5c 	.word	0x20000d5c
 800c174:	20000cbc 	.word	0x20000cbc
 800c178:	0800d2a4 	.word	0x0800d2a4

0800c17c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3b04      	subs	r3, #4
 800c18c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3b04      	subs	r3, #4
 800c19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	f023 0201 	bic.w	r2, r3, #1
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3b04      	subs	r3, #4
 800c1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1ac:	4a0c      	ldr	r2, [pc, #48]	; (800c1e0 <pxPortInitialiseStack+0x64>)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3b14      	subs	r3, #20
 800c1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3b04      	subs	r3, #4
 800c1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f06f 0202 	mvn.w	r2, #2
 800c1ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3b20      	subs	r3, #32
 800c1d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3714      	adds	r7, #20
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr
 800c1e0:	0800c1e5 	.word	0x0800c1e5

0800c1e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1ee:	4b11      	ldr	r3, [pc, #68]	; (800c234 <prvTaskExitError+0x50>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f6:	d009      	beq.n	800c20c <prvTaskExitError+0x28>
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	60fb      	str	r3, [r7, #12]
 800c20a:	e7fe      	b.n	800c20a <prvTaskExitError+0x26>
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	f383 8811 	msr	BASEPRI, r3
 800c214:	f3bf 8f6f 	isb	sy
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c21e:	bf00      	nop
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0fc      	beq.n	800c220 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c226:	bf00      	nop
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	2000002c 	.word	0x2000002c
	...

0800c240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <pxCurrentTCBConst2>)
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	6808      	ldr	r0, [r1, #0]
 800c246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f380 8809 	msr	PSP, r0
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8811 	msr	BASEPRI, r0
 800c25a:	4770      	bx	lr
 800c25c:	f3af 8000 	nop.w

0800c260 <pxCurrentTCBConst2>:
 800c260:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop

0800c268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c268:	4808      	ldr	r0, [pc, #32]	; (800c28c <prvPortStartFirstTask+0x24>)
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	f380 8808 	msr	MSP, r0
 800c272:	f04f 0000 	mov.w	r0, #0
 800c276:	f380 8814 	msr	CONTROL, r0
 800c27a:	b662      	cpsie	i
 800c27c:	b661      	cpsie	f
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	df00      	svc	0
 800c288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c28a:	bf00      	nop
 800c28c:	e000ed08 	.word	0xe000ed08

0800c290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c296:	4b44      	ldr	r3, [pc, #272]	; (800c3a8 <xPortStartScheduler+0x118>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a44      	ldr	r2, [pc, #272]	; (800c3ac <xPortStartScheduler+0x11c>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d109      	bne.n	800c2b4 <xPortStartScheduler+0x24>
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	613b      	str	r3, [r7, #16]
 800c2b2:	e7fe      	b.n	800c2b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2b4:	4b3c      	ldr	r3, [pc, #240]	; (800c3a8 <xPortStartScheduler+0x118>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a3d      	ldr	r2, [pc, #244]	; (800c3b0 <xPortStartScheduler+0x120>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d109      	bne.n	800c2d2 <xPortStartScheduler+0x42>
 800c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	60fb      	str	r3, [r7, #12]
 800c2d0:	e7fe      	b.n	800c2d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2d2:	4b38      	ldr	r3, [pc, #224]	; (800c3b4 <xPortStartScheduler+0x124>)
 800c2d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	22ff      	movs	r2, #255	; 0xff
 800c2e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2ec:	78fb      	ldrb	r3, [r7, #3]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	4b30      	ldr	r3, [pc, #192]	; (800c3b8 <xPortStartScheduler+0x128>)
 800c2f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2fa:	4b30      	ldr	r3, [pc, #192]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c2fc:	2207      	movs	r2, #7
 800c2fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c300:	e009      	b.n	800c316 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c302:	4b2e      	ldr	r3, [pc, #184]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3b01      	subs	r3, #1
 800c308:	4a2c      	ldr	r2, [pc, #176]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c30a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c30c:	78fb      	ldrb	r3, [r7, #3]
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	b2db      	uxtb	r3, r3
 800c314:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c316:	78fb      	ldrb	r3, [r7, #3]
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c31e:	2b80      	cmp	r3, #128	; 0x80
 800c320:	d0ef      	beq.n	800c302 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c322:	4b26      	ldr	r3, [pc, #152]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f1c3 0307 	rsb	r3, r3, #7
 800c32a:	2b04      	cmp	r3, #4
 800c32c:	d009      	beq.n	800c342 <xPortStartScheduler+0xb2>
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	60bb      	str	r3, [r7, #8]
 800c340:	e7fe      	b.n	800c340 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c342:	4b1e      	ldr	r3, [pc, #120]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	021b      	lsls	r3, r3, #8
 800c348:	4a1c      	ldr	r2, [pc, #112]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c34a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c34c:	4b1b      	ldr	r3, [pc, #108]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c354:	4a19      	ldr	r2, [pc, #100]	; (800c3bc <xPortStartScheduler+0x12c>)
 800c356:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c360:	4b17      	ldr	r3, [pc, #92]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a16      	ldr	r2, [pc, #88]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c36a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c36c:	4b14      	ldr	r3, [pc, #80]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a13      	ldr	r2, [pc, #76]	; (800c3c0 <xPortStartScheduler+0x130>)
 800c372:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c376:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c378:	f000 f8d6 	bl	800c528 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c37c:	4b11      	ldr	r3, [pc, #68]	; (800c3c4 <xPortStartScheduler+0x134>)
 800c37e:	2200      	movs	r2, #0
 800c380:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c382:	f000 f8f5 	bl	800c570 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c386:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a0f      	ldr	r2, [pc, #60]	; (800c3c8 <xPortStartScheduler+0x138>)
 800c38c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c390:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c392:	f7ff ff69 	bl	800c268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c396:	f7ff f86d 	bl	800b474 <vTaskSwitchContext>
	prvTaskExitError();
 800c39a:	f7ff ff23 	bl	800c1e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c39e:	2300      	movs	r3, #0
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3718      	adds	r7, #24
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	e000ed00 	.word	0xe000ed00
 800c3ac:	410fc271 	.word	0x410fc271
 800c3b0:	410fc270 	.word	0x410fc270
 800c3b4:	e000e400 	.word	0xe000e400
 800c3b8:	20000dac 	.word	0x20000dac
 800c3bc:	20000db0 	.word	0x20000db0
 800c3c0:	e000ed20 	.word	0xe000ed20
 800c3c4:	2000002c 	.word	0x2000002c
 800c3c8:	e000ef34 	.word	0xe000ef34

0800c3cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3e4:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <vPortEnterCritical+0x54>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	4a0d      	ldr	r2, [pc, #52]	; (800c420 <vPortEnterCritical+0x54>)
 800c3ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3ee:	4b0c      	ldr	r3, [pc, #48]	; (800c420 <vPortEnterCritical+0x54>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d10e      	bne.n	800c414 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3f6:	4b0b      	ldr	r3, [pc, #44]	; (800c424 <vPortEnterCritical+0x58>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d009      	beq.n	800c414 <vPortEnterCritical+0x48>
 800c400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	603b      	str	r3, [r7, #0]
 800c412:	e7fe      	b.n	800c412 <vPortEnterCritical+0x46>
	}
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	2000002c 	.word	0x2000002c
 800c424:	e000ed04 	.word	0xe000ed04

0800c428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c42e:	4b11      	ldr	r3, [pc, #68]	; (800c474 <vPortExitCritical+0x4c>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d109      	bne.n	800c44a <vPortExitCritical+0x22>
 800c436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	607b      	str	r3, [r7, #4]
 800c448:	e7fe      	b.n	800c448 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c44a:	4b0a      	ldr	r3, [pc, #40]	; (800c474 <vPortExitCritical+0x4c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	3b01      	subs	r3, #1
 800c450:	4a08      	ldr	r2, [pc, #32]	; (800c474 <vPortExitCritical+0x4c>)
 800c452:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c454:	4b07      	ldr	r3, [pc, #28]	; (800c474 <vPortExitCritical+0x4c>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d104      	bne.n	800c466 <vPortExitCritical+0x3e>
 800c45c:	2300      	movs	r3, #0
 800c45e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c466:	bf00      	nop
 800c468:	370c      	adds	r7, #12
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	2000002c 	.word	0x2000002c
	...

0800c480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c480:	f3ef 8009 	mrs	r0, PSP
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <pxCurrentTCBConst>)
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	f01e 0f10 	tst.w	lr, #16
 800c490:	bf08      	it	eq
 800c492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49a:	6010      	str	r0, [r2, #0]
 800c49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4a4:	f380 8811 	msr	BASEPRI, r0
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f7fe ffe0 	bl	800b474 <vTaskSwitchContext>
 800c4b4:	f04f 0000 	mov.w	r0, #0
 800c4b8:	f380 8811 	msr	BASEPRI, r0
 800c4bc:	bc09      	pop	{r0, r3}
 800c4be:	6819      	ldr	r1, [r3, #0]
 800c4c0:	6808      	ldr	r0, [r1, #0]
 800c4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c6:	f01e 0f10 	tst.w	lr, #16
 800c4ca:	bf08      	it	eq
 800c4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4d0:	f380 8809 	msr	PSP, r0
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	f3af 8000 	nop.w

0800c4e0 <pxCurrentTCBConst>:
 800c4e0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4e4:	bf00      	nop
 800c4e6:	bf00      	nop

0800c4e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c500:	f7fe ff00 	bl	800b304 <xTaskIncrementTick>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d003      	beq.n	800c512 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c50a:	4b06      	ldr	r3, [pc, #24]	; (800c524 <SysTick_Handler+0x3c>)
 800c50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	2300      	movs	r3, #0
 800c514:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c51c:	bf00      	nop
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	e000ed04 	.word	0xe000ed04

0800c528 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c528:	b480      	push	{r7}
 800c52a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c52c:	4b0b      	ldr	r3, [pc, #44]	; (800c55c <vPortSetupTimerInterrupt+0x34>)
 800c52e:	2200      	movs	r2, #0
 800c530:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c532:	4b0b      	ldr	r3, [pc, #44]	; (800c560 <vPortSetupTimerInterrupt+0x38>)
 800c534:	2200      	movs	r2, #0
 800c536:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c538:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <vPortSetupTimerInterrupt+0x3c>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a0a      	ldr	r2, [pc, #40]	; (800c568 <vPortSetupTimerInterrupt+0x40>)
 800c53e:	fba2 2303 	umull	r2, r3, r2, r3
 800c542:	099b      	lsrs	r3, r3, #6
 800c544:	4a09      	ldr	r2, [pc, #36]	; (800c56c <vPortSetupTimerInterrupt+0x44>)
 800c546:	3b01      	subs	r3, #1
 800c548:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c54a:	4b04      	ldr	r3, [pc, #16]	; (800c55c <vPortSetupTimerInterrupt+0x34>)
 800c54c:	2207      	movs	r2, #7
 800c54e:	601a      	str	r2, [r3, #0]
}
 800c550:	bf00      	nop
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	e000e010 	.word	0xe000e010
 800c560:	e000e018 	.word	0xe000e018
 800c564:	20000000 	.word	0x20000000
 800c568:	10624dd3 	.word	0x10624dd3
 800c56c:	e000e014 	.word	0xe000e014

0800c570 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c570:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c580 <vPortEnableVFP+0x10>
 800c574:	6801      	ldr	r1, [r0, #0]
 800c576:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c57a:	6001      	str	r1, [r0, #0]
 800c57c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c57e:	bf00      	nop
 800c580:	e000ed88 	.word	0xe000ed88

0800c584 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c58a:	f3ef 8305 	mrs	r3, IPSR
 800c58e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2b0f      	cmp	r3, #15
 800c594:	d913      	bls.n	800c5be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c596:	4a16      	ldr	r2, [pc, #88]	; (800c5f0 <vPortValidateInterruptPriority+0x6c>)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	4413      	add	r3, r2
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5a0:	4b14      	ldr	r3, [pc, #80]	; (800c5f4 <vPortValidateInterruptPriority+0x70>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	7afa      	ldrb	r2, [r7, #11]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d209      	bcs.n	800c5be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ae:	f383 8811 	msr	BASEPRI, r3
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	607b      	str	r3, [r7, #4]
 800c5bc:	e7fe      	b.n	800c5bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5be:	4b0e      	ldr	r3, [pc, #56]	; (800c5f8 <vPortValidateInterruptPriority+0x74>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c5c6:	4b0d      	ldr	r3, [pc, #52]	; (800c5fc <vPortValidateInterruptPriority+0x78>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d909      	bls.n	800c5e2 <vPortValidateInterruptPriority+0x5e>
 800c5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	e7fe      	b.n	800c5e0 <vPortValidateInterruptPriority+0x5c>
	}
 800c5e2:	bf00      	nop
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	e000e3f0 	.word	0xe000e3f0
 800c5f4:	20000dac 	.word	0x20000dac
 800c5f8:	e000ed0c 	.word	0xe000ed0c
 800c5fc:	20000db0 	.word	0x20000db0

0800c600 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b08a      	sub	sp, #40	; 0x28
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c608:	2300      	movs	r3, #0
 800c60a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c60c:	f7fe fdc0 	bl	800b190 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c610:	4b57      	ldr	r3, [pc, #348]	; (800c770 <pvPortMalloc+0x170>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d101      	bne.n	800c61c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c618:	f000 f90c 	bl	800c834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c61c:	4b55      	ldr	r3, [pc, #340]	; (800c774 <pvPortMalloc+0x174>)
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4013      	ands	r3, r2
 800c624:	2b00      	cmp	r3, #0
 800c626:	f040 808c 	bne.w	800c742 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d01c      	beq.n	800c66a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c630:	2208      	movs	r2, #8
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4413      	add	r3, r2
 800c636:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f003 0307 	and.w	r3, r3, #7
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d013      	beq.n	800c66a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f023 0307 	bic.w	r3, r3, #7
 800c648:	3308      	adds	r3, #8
 800c64a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f003 0307 	and.w	r3, r3, #7
 800c652:	2b00      	cmp	r3, #0
 800c654:	d009      	beq.n	800c66a <pvPortMalloc+0x6a>
 800c656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	617b      	str	r3, [r7, #20]
 800c668:	e7fe      	b.n	800c668 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d068      	beq.n	800c742 <pvPortMalloc+0x142>
 800c670:	4b41      	ldr	r3, [pc, #260]	; (800c778 <pvPortMalloc+0x178>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	d863      	bhi.n	800c742 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c67a:	4b40      	ldr	r3, [pc, #256]	; (800c77c <pvPortMalloc+0x17c>)
 800c67c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c67e:	4b3f      	ldr	r3, [pc, #252]	; (800c77c <pvPortMalloc+0x17c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c684:	e004      	b.n	800c690 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	429a      	cmp	r2, r3
 800c698:	d903      	bls.n	800c6a2 <pvPortMalloc+0xa2>
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f1      	bne.n	800c686 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6a2:	4b33      	ldr	r3, [pc, #204]	; (800c770 <pvPortMalloc+0x170>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d04a      	beq.n	800c742 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2208      	movs	r2, #8
 800c6b2:	4413      	add	r3, r2
 800c6b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	1ad2      	subs	r2, r2, r3
 800c6c6:	2308      	movs	r3, #8
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d91e      	bls.n	800c70c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	f003 0307 	and.w	r3, r3, #7
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d009      	beq.n	800c6f4 <pvPortMalloc+0xf4>
 800c6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e4:	f383 8811 	msr	BASEPRI, r3
 800c6e8:	f3bf 8f6f 	isb	sy
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	613b      	str	r3, [r7, #16]
 800c6f2:	e7fe      	b.n	800c6f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	1ad2      	subs	r2, r2, r3
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c706:	69b8      	ldr	r0, [r7, #24]
 800c708:	f000 f8f6 	bl	800c8f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c70c:	4b1a      	ldr	r3, [pc, #104]	; (800c778 <pvPortMalloc+0x178>)
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	4a18      	ldr	r2, [pc, #96]	; (800c778 <pvPortMalloc+0x178>)
 800c718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c71a:	4b17      	ldr	r3, [pc, #92]	; (800c778 <pvPortMalloc+0x178>)
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	4b18      	ldr	r3, [pc, #96]	; (800c780 <pvPortMalloc+0x180>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	429a      	cmp	r2, r3
 800c724:	d203      	bcs.n	800c72e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c726:	4b14      	ldr	r3, [pc, #80]	; (800c778 <pvPortMalloc+0x178>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a15      	ldr	r2, [pc, #84]	; (800c780 <pvPortMalloc+0x180>)
 800c72c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	4b10      	ldr	r3, [pc, #64]	; (800c774 <pvPortMalloc+0x174>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	431a      	orrs	r2, r3
 800c738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73e:	2200      	movs	r2, #0
 800c740:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c742:	f7fe fd33 	bl	800b1ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	f003 0307 	and.w	r3, r3, #7
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d009      	beq.n	800c764 <pvPortMalloc+0x164>
 800c750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	60fb      	str	r3, [r7, #12]
 800c762:	e7fe      	b.n	800c762 <pvPortMalloc+0x162>
	return pvReturn;
 800c764:	69fb      	ldr	r3, [r7, #28]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3728      	adds	r7, #40	; 0x28
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	200049bc 	.word	0x200049bc
 800c774:	200049c8 	.word	0x200049c8
 800c778:	200049c0 	.word	0x200049c0
 800c77c:	200049b4 	.word	0x200049b4
 800c780:	200049c4 	.word	0x200049c4

0800c784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b086      	sub	sp, #24
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d046      	beq.n	800c824 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c796:	2308      	movs	r3, #8
 800c798:	425b      	negs	r3, r3
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	4413      	add	r3, r2
 800c79e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	685a      	ldr	r2, [r3, #4]
 800c7a8:	4b20      	ldr	r3, [pc, #128]	; (800c82c <vPortFree+0xa8>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d109      	bne.n	800c7c6 <vPortFree+0x42>
 800c7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	60fb      	str	r3, [r7, #12]
 800c7c4:	e7fe      	b.n	800c7c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d009      	beq.n	800c7e2 <vPortFree+0x5e>
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	60bb      	str	r3, [r7, #8]
 800c7e0:	e7fe      	b.n	800c7e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	4b11      	ldr	r3, [pc, #68]	; (800c82c <vPortFree+0xa8>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d019      	beq.n	800c824 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d115      	bne.n	800c824 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	685a      	ldr	r2, [r3, #4]
 800c7fc:	4b0b      	ldr	r3, [pc, #44]	; (800c82c <vPortFree+0xa8>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	43db      	mvns	r3, r3
 800c802:	401a      	ands	r2, r3
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c808:	f7fe fcc2 	bl	800b190 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <vPortFree+0xac>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4413      	add	r3, r2
 800c816:	4a06      	ldr	r2, [pc, #24]	; (800c830 <vPortFree+0xac>)
 800c818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c81a:	6938      	ldr	r0, [r7, #16]
 800c81c:	f000 f86c 	bl	800c8f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c820:	f7fe fcc4 	bl	800b1ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c824:	bf00      	nop
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	200049c8 	.word	0x200049c8
 800c830:	200049c0 	.word	0x200049c0

0800c834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c83a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c83e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c840:	4b27      	ldr	r3, [pc, #156]	; (800c8e0 <prvHeapInit+0xac>)
 800c842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00c      	beq.n	800c868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	3307      	adds	r3, #7
 800c852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f023 0307 	bic.w	r3, r3, #7
 800c85a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	4a1f      	ldr	r2, [pc, #124]	; (800c8e0 <prvHeapInit+0xac>)
 800c864:	4413      	add	r3, r2
 800c866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c86c:	4a1d      	ldr	r2, [pc, #116]	; (800c8e4 <prvHeapInit+0xb0>)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c872:	4b1c      	ldr	r3, [pc, #112]	; (800c8e4 <prvHeapInit+0xb0>)
 800c874:	2200      	movs	r2, #0
 800c876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	4413      	add	r3, r2
 800c87e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c880:	2208      	movs	r2, #8
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	1a9b      	subs	r3, r3, r2
 800c886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f023 0307 	bic.w	r3, r3, #7
 800c88e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	4a15      	ldr	r2, [pc, #84]	; (800c8e8 <prvHeapInit+0xb4>)
 800c894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c896:	4b14      	ldr	r3, [pc, #80]	; (800c8e8 <prvHeapInit+0xb4>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2200      	movs	r2, #0
 800c89c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c89e:	4b12      	ldr	r3, [pc, #72]	; (800c8e8 <prvHeapInit+0xb4>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	1ad2      	subs	r2, r2, r3
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8b4:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <prvHeapInit+0xb4>)
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	4a0a      	ldr	r2, [pc, #40]	; (800c8ec <prvHeapInit+0xb8>)
 800c8c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	4a09      	ldr	r2, [pc, #36]	; (800c8f0 <prvHeapInit+0xbc>)
 800c8ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8cc:	4b09      	ldr	r3, [pc, #36]	; (800c8f4 <prvHeapInit+0xc0>)
 800c8ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8d2:	601a      	str	r2, [r3, #0]
}
 800c8d4:	bf00      	nop
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	20000db4 	.word	0x20000db4
 800c8e4:	200049b4 	.word	0x200049b4
 800c8e8:	200049bc 	.word	0x200049bc
 800c8ec:	200049c4 	.word	0x200049c4
 800c8f0:	200049c0 	.word	0x200049c0
 800c8f4:	200049c8 	.word	0x200049c8

0800c8f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c900:	4b28      	ldr	r3, [pc, #160]	; (800c9a4 <prvInsertBlockIntoFreeList+0xac>)
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e002      	b.n	800c90c <prvInsertBlockIntoFreeList+0x14>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	60fb      	str	r3, [r7, #12]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	429a      	cmp	r2, r3
 800c914:	d8f7      	bhi.n	800c906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	4413      	add	r3, r2
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	429a      	cmp	r2, r3
 800c926:	d108      	bne.n	800c93a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	441a      	add	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	441a      	add	r2, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d118      	bne.n	800c980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	4b15      	ldr	r3, [pc, #84]	; (800c9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	429a      	cmp	r2, r3
 800c958:	d00d      	beq.n	800c976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	441a      	add	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	e008      	b.n	800c988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c976:	4b0c      	ldr	r3, [pc, #48]	; (800c9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	e003      	b.n	800c988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d002      	beq.n	800c996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c996:	bf00      	nop
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	200049b4 	.word	0x200049b4
 800c9a8:	200049bc 	.word	0x200049bc

0800c9ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	490e      	ldr	r1, [pc, #56]	; (800c9ec <MX_USB_HOST_Init+0x40>)
 800c9b4:	480e      	ldr	r0, [pc, #56]	; (800c9f0 <MX_USB_HOST_Init+0x44>)
 800c9b6:	f7fb faa5 	bl	8007f04 <USBH_Init>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d001      	beq.n	800c9c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c9c0:	f7f4 f890 	bl	8000ae4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c9c4:	490b      	ldr	r1, [pc, #44]	; (800c9f4 <MX_USB_HOST_Init+0x48>)
 800c9c6:	480a      	ldr	r0, [pc, #40]	; (800c9f0 <MX_USB_HOST_Init+0x44>)
 800c9c8:	f7fb fb4c 	bl	8008064 <USBH_RegisterClass>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d001      	beq.n	800c9d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c9d2:	f7f4 f887 	bl	8000ae4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c9d6:	4806      	ldr	r0, [pc, #24]	; (800c9f0 <MX_USB_HOST_Init+0x44>)
 800c9d8:	f7fb fbd0 	bl	800817c <USBH_Start>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c9e2:	f7f4 f87f 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c9e6:	bf00      	nop
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	0800c9f9 	.word	0x0800c9f9
 800c9f0:	20005034 	.word	0x20005034
 800c9f4:	2000000c 	.word	0x2000000c

0800c9f8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	460b      	mov	r3, r1
 800ca02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ca04:	78fb      	ldrb	r3, [r7, #3]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	2b04      	cmp	r3, #4
 800ca0a:	d819      	bhi.n	800ca40 <USBH_UserProcess+0x48>
 800ca0c:	a201      	add	r2, pc, #4	; (adr r2, 800ca14 <USBH_UserProcess+0x1c>)
 800ca0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca12:	bf00      	nop
 800ca14:	0800ca41 	.word	0x0800ca41
 800ca18:	0800ca31 	.word	0x0800ca31
 800ca1c:	0800ca41 	.word	0x0800ca41
 800ca20:	0800ca39 	.word	0x0800ca39
 800ca24:	0800ca29 	.word	0x0800ca29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ca28:	4b09      	ldr	r3, [pc, #36]	; (800ca50 <USBH_UserProcess+0x58>)
 800ca2a:	2203      	movs	r2, #3
 800ca2c:	701a      	strb	r2, [r3, #0]
  break;
 800ca2e:	e008      	b.n	800ca42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ca30:	4b07      	ldr	r3, [pc, #28]	; (800ca50 <USBH_UserProcess+0x58>)
 800ca32:	2202      	movs	r2, #2
 800ca34:	701a      	strb	r2, [r3, #0]
  break;
 800ca36:	e004      	b.n	800ca42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ca38:	4b05      	ldr	r3, [pc, #20]	; (800ca50 <USBH_UserProcess+0x58>)
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	701a      	strb	r2, [r3, #0]
  break;
 800ca3e:	e000      	b.n	800ca42 <USBH_UserProcess+0x4a>

  default:
  break;
 800ca40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ca42:	bf00      	nop
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	200049cc 	.word	0x200049cc

0800ca54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08a      	sub	sp, #40	; 0x28
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca5c:	f107 0314 	add.w	r3, r7, #20
 800ca60:	2200      	movs	r2, #0
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	605a      	str	r2, [r3, #4]
 800ca66:	609a      	str	r2, [r3, #8]
 800ca68:	60da      	str	r2, [r3, #12]
 800ca6a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca74:	d147      	bne.n	800cb06 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca76:	2300      	movs	r3, #0
 800ca78:	613b      	str	r3, [r7, #16]
 800ca7a:	4b25      	ldr	r3, [pc, #148]	; (800cb10 <HAL_HCD_MspInit+0xbc>)
 800ca7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7e:	4a24      	ldr	r2, [pc, #144]	; (800cb10 <HAL_HCD_MspInit+0xbc>)
 800ca80:	f043 0301 	orr.w	r3, r3, #1
 800ca84:	6313      	str	r3, [r2, #48]	; 0x30
 800ca86:	4b22      	ldr	r3, [pc, #136]	; (800cb10 <HAL_HCD_MspInit+0xbc>)
 800ca88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	613b      	str	r3, [r7, #16]
 800ca90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ca92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800caa0:	f107 0314 	add.w	r3, r7, #20
 800caa4:	4619      	mov	r1, r3
 800caa6:	481b      	ldr	r0, [pc, #108]	; (800cb14 <HAL_HCD_MspInit+0xc0>)
 800caa8:	f7f4 fbcc 	bl	8001244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800caac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800cab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cab2:	2302      	movs	r3, #2
 800cab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800caba:	2300      	movs	r3, #0
 800cabc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cabe:	230a      	movs	r3, #10
 800cac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cac2:	f107 0314 	add.w	r3, r7, #20
 800cac6:	4619      	mov	r1, r3
 800cac8:	4812      	ldr	r0, [pc, #72]	; (800cb14 <HAL_HCD_MspInit+0xc0>)
 800caca:	f7f4 fbbb 	bl	8001244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cace:	4b10      	ldr	r3, [pc, #64]	; (800cb10 <HAL_HCD_MspInit+0xbc>)
 800cad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad2:	4a0f      	ldr	r2, [pc, #60]	; (800cb10 <HAL_HCD_MspInit+0xbc>)
 800cad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cad8:	6353      	str	r3, [r2, #52]	; 0x34
 800cada:	2300      	movs	r3, #0
 800cadc:	60fb      	str	r3, [r7, #12]
 800cade:	4b0c      	ldr	r3, [pc, #48]	; (800cb10 <HAL_HCD_MspInit+0xbc>)
 800cae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cae2:	4a0b      	ldr	r2, [pc, #44]	; (800cb10 <HAL_HCD_MspInit+0xbc>)
 800cae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cae8:	6453      	str	r3, [r2, #68]	; 0x44
 800caea:	4b09      	ldr	r3, [pc, #36]	; (800cb10 <HAL_HCD_MspInit+0xbc>)
 800caec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800caf6:	2200      	movs	r2, #0
 800caf8:	2105      	movs	r1, #5
 800cafa:	2043      	movs	r0, #67	; 0x43
 800cafc:	f7f4 fb78 	bl	80011f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cb00:	2043      	movs	r0, #67	; 0x43
 800cb02:	f7f4 fb91 	bl	8001228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cb06:	bf00      	nop
 800cb08:	3728      	adds	r7, #40	; 0x28
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	40023800 	.word	0x40023800
 800cb14:	40020000 	.word	0x40020000

0800cb18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fb ffd5 	bl	8008ad6 <USBH_LL_IncTimer>
}
 800cb2c:	bf00      	nop
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fc f819 	bl	8008b7a <USBH_LL_Connect>
}
 800cb48:	bf00      	nop
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fc f82e 	bl	8008bc0 <USBH_LL_Disconnect>
}
 800cb64:	bf00      	nop
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	460b      	mov	r3, r1
 800cb76:	70fb      	strb	r3, [r7, #3]
 800cb78:	4613      	mov	r3, r2
 800cb7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fc f865 	bl	8008c52 <USBH_LL_NotifyURBChange>
#endif
}
 800cb88:	bf00      	nop
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fb ffc3 	bl	8008b2a <USBH_LL_PortEnabled>
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fb ffcf 	bl	8008b5e <USBH_LL_PortDisabled>
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d12a      	bne.n	800cc30 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cbda:	4a18      	ldr	r2, [pc, #96]	; (800cc3c <USBH_LL_Init+0x74>)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a15      	ldr	r2, [pc, #84]	; (800cc3c <USBH_LL_Init+0x74>)
 800cbe6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cbea:	4b14      	ldr	r3, [pc, #80]	; (800cc3c <USBH_LL_Init+0x74>)
 800cbec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cbf0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cbf2:	4b12      	ldr	r3, [pc, #72]	; (800cc3c <USBH_LL_Init+0x74>)
 800cbf4:	2208      	movs	r2, #8
 800cbf6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cbf8:	4b10      	ldr	r3, [pc, #64]	; (800cc3c <USBH_LL_Init+0x74>)
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <USBH_LL_Init+0x74>)
 800cc00:	2200      	movs	r2, #0
 800cc02:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cc04:	4b0d      	ldr	r3, [pc, #52]	; (800cc3c <USBH_LL_Init+0x74>)
 800cc06:	2202      	movs	r2, #2
 800cc08:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cc0a:	4b0c      	ldr	r3, [pc, #48]	; (800cc3c <USBH_LL_Init+0x74>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cc10:	480a      	ldr	r0, [pc, #40]	; (800cc3c <USBH_LL_Init+0x74>)
 800cc12:	f7f4 fcca 	bl	80015aa <HAL_HCD_Init>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d001      	beq.n	800cc20 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cc1c:	f7f3 ff62 	bl	8000ae4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cc20:	4806      	ldr	r0, [pc, #24]	; (800cc3c <USBH_LL_Init+0x74>)
 800cc22:	f7f5 f8cd 	bl	8001dc0 <HAL_HCD_GetCurrentFrame>
 800cc26:	4603      	mov	r3, r0
 800cc28:	4619      	mov	r1, r3
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7fb ff44 	bl	8008ab8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20005418 	.word	0x20005418

0800cc40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7f5 f83a 	bl	8001cd0 <HAL_HCD_Start>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 f990 	bl	800cf88 <USBH_Get_USB_Status>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7f5 f842 	bl	8001d16 <HAL_HCD_Stop>
 800cc92:	4603      	mov	r3, r0
 800cc94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 f975 	bl	800cf88 <USBH_Get_USB_Status>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cca2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7f5 f88c 	bl	8001ddc <HAL_HCD_GetCurrentSpeed>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d007      	beq.n	800ccda <USBH_LL_GetSpeed+0x2e>
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d302      	bcc.n	800ccd4 <USBH_LL_GetSpeed+0x28>
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d006      	beq.n	800cce0 <USBH_LL_GetSpeed+0x34>
 800ccd2:	e008      	b.n	800cce6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccd8:	e008      	b.n	800ccec <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	73fb      	strb	r3, [r7, #15]
    break;
 800ccde:	e005      	b.n	800ccec <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cce0:	2302      	movs	r3, #2
 800cce2:	73fb      	strb	r3, [r7, #15]
    break;
 800cce4:	e002      	b.n	800ccec <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800cce6:	2301      	movs	r3, #1
 800cce8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccea:	bf00      	nop
  }
  return  speed;
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd02:	2300      	movs	r3, #0
 800cd04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7f5 f81f 	bl	8001d50 <HAL_HCD_ResetPort>
 800cd12:	4603      	mov	r3, r0
 800cd14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f000 f935 	bl	800cf88 <USBH_Get_USB_Status>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd22:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	460b      	mov	r3, r1
 800cd36:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd3e:	78fa      	ldrb	r2, [r7, #3]
 800cd40:	4611      	mov	r1, r2
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7f5 f827 	bl	8001d96 <HAL_HCD_HC_GetXferCount>
 800cd48:	4603      	mov	r3, r0
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3708      	adds	r7, #8
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd52:	b590      	push	{r4, r7, lr}
 800cd54:	b089      	sub	sp, #36	; 0x24
 800cd56:	af04      	add	r7, sp, #16
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	4608      	mov	r0, r1
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	461a      	mov	r2, r3
 800cd60:	4603      	mov	r3, r0
 800cd62:	70fb      	strb	r3, [r7, #3]
 800cd64:	460b      	mov	r3, r1
 800cd66:	70bb      	strb	r3, [r7, #2]
 800cd68:	4613      	mov	r3, r2
 800cd6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cd7a:	787c      	ldrb	r4, [r7, #1]
 800cd7c:	78ba      	ldrb	r2, [r7, #2]
 800cd7e:	78f9      	ldrb	r1, [r7, #3]
 800cd80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd82:	9302      	str	r3, [sp, #8]
 800cd84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd88:	9301      	str	r3, [sp, #4]
 800cd8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	4623      	mov	r3, r4
 800cd92:	f7f4 fc6c 	bl	800166e <HAL_HCD_HC_Init>
 800cd96:	4603      	mov	r3, r0
 800cd98:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd9a:	7bfb      	ldrb	r3, [r7, #15]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 f8f3 	bl	800cf88 <USBH_Get_USB_Status>
 800cda2:	4603      	mov	r3, r0
 800cda4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cda6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd90      	pop	{r4, r7, pc}

0800cdb0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdca:	78fa      	ldrb	r2, [r7, #3]
 800cdcc:	4611      	mov	r1, r2
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7f4 fce5 	bl	800179e <HAL_HCD_HC_Halt>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdd8:	7bfb      	ldrb	r3, [r7, #15]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 f8d4 	bl	800cf88 <USBH_Get_USB_Status>
 800cde0:	4603      	mov	r3, r0
 800cde2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cde4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cdee:	b590      	push	{r4, r7, lr}
 800cdf0:	b089      	sub	sp, #36	; 0x24
 800cdf2:	af04      	add	r7, sp, #16
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	4608      	mov	r0, r1
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	70fb      	strb	r3, [r7, #3]
 800ce00:	460b      	mov	r3, r1
 800ce02:	70bb      	strb	r3, [r7, #2]
 800ce04:	4613      	mov	r3, r2
 800ce06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ce16:	787c      	ldrb	r4, [r7, #1]
 800ce18:	78ba      	ldrb	r2, [r7, #2]
 800ce1a:	78f9      	ldrb	r1, [r7, #3]
 800ce1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce20:	9303      	str	r3, [sp, #12]
 800ce22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ce24:	9302      	str	r3, [sp, #8]
 800ce26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce28:	9301      	str	r3, [sp, #4]
 800ce2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce2e:	9300      	str	r3, [sp, #0]
 800ce30:	4623      	mov	r3, r4
 800ce32:	f7f4 fcd7 	bl	80017e4 <HAL_HCD_HC_SubmitRequest>
 800ce36:	4603      	mov	r3, r0
 800ce38:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 f8a3 	bl	800cf88 <USBH_Get_USB_Status>
 800ce42:	4603      	mov	r3, r0
 800ce44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd90      	pop	{r4, r7, pc}

0800ce50 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce62:	78fa      	ldrb	r2, [r7, #3]
 800ce64:	4611      	mov	r1, r2
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7f4 ff80 	bl	8001d6c <HAL_HCD_HC_GetURBState>
 800ce6c:	4603      	mov	r3, r0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	460b      	mov	r3, r1
 800ce80:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d103      	bne.n	800ce94 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ce8c:	78fb      	ldrb	r3, [r7, #3]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f000 f8a6 	bl	800cfe0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ce94:	20c8      	movs	r0, #200	; 0xc8
 800ce96:	f7f4 f8d1 	bl	800103c <HAL_Delay>
  return USBH_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	70fb      	strb	r3, [r7, #3]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ceba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cebc:	78fa      	ldrb	r2, [r7, #3]
 800cebe:	68f9      	ldr	r1, [r7, #12]
 800cec0:	4613      	mov	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	00db      	lsls	r3, r3, #3
 800cec8:	440b      	add	r3, r1
 800ceca:	333b      	adds	r3, #59	; 0x3b
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00a      	beq.n	800cee8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ced2:	78fa      	ldrb	r2, [r7, #3]
 800ced4:	68f9      	ldr	r1, [r7, #12]
 800ced6:	4613      	mov	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	4413      	add	r3, r2
 800cedc:	00db      	lsls	r3, r3, #3
 800cede:	440b      	add	r3, r1
 800cee0:	3350      	adds	r3, #80	; 0x50
 800cee2:	78ba      	ldrb	r2, [r7, #2]
 800cee4:	701a      	strb	r2, [r3, #0]
 800cee6:	e009      	b.n	800cefc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cee8:	78fa      	ldrb	r2, [r7, #3]
 800ceea:	68f9      	ldr	r1, [r7, #12]
 800ceec:	4613      	mov	r3, r2
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	4413      	add	r3, r2
 800cef2:	00db      	lsls	r3, r3, #3
 800cef4:	440b      	add	r3, r1
 800cef6:	3351      	adds	r3, #81	; 0x51
 800cef8:	78ba      	ldrb	r2, [r7, #2]
 800cefa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3714      	adds	r7, #20
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr

0800cf0a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf0a:	b480      	push	{r7}
 800cf0c:	b085      	sub	sp, #20
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
 800cf12:	460b      	mov	r3, r1
 800cf14:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf20:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800cf22:	78fa      	ldrb	r2, [r7, #3]
 800cf24:	68b9      	ldr	r1, [r7, #8]
 800cf26:	4613      	mov	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	4413      	add	r3, r2
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	440b      	add	r3, r1
 800cf30:	333b      	adds	r3, #59	; 0x3b
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00a      	beq.n	800cf4e <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800cf38:	78fa      	ldrb	r2, [r7, #3]
 800cf3a:	68b9      	ldr	r1, [r7, #8]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4413      	add	r3, r2
 800cf42:	00db      	lsls	r3, r3, #3
 800cf44:	440b      	add	r3, r1
 800cf46:	3350      	adds	r3, #80	; 0x50
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	73fb      	strb	r3, [r7, #15]
 800cf4c:	e009      	b.n	800cf62 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800cf4e:	78fa      	ldrb	r2, [r7, #3]
 800cf50:	68b9      	ldr	r1, [r7, #8]
 800cf52:	4613      	mov	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	00db      	lsls	r3, r3, #3
 800cf5a:	440b      	add	r3, r1
 800cf5c:	3351      	adds	r3, #81	; 0x51
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7f4 f85f 	bl	800103c <HAL_Delay>
}
 800cf7e:	bf00      	nop
 800cf80:	3708      	adds	r7, #8
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
	...

0800cf88 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b085      	sub	sp, #20
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	4603      	mov	r3, r0
 800cf90:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf92:	2300      	movs	r3, #0
 800cf94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf96:	79fb      	ldrb	r3, [r7, #7]
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	d817      	bhi.n	800cfcc <USBH_Get_USB_Status+0x44>
 800cf9c:	a201      	add	r2, pc, #4	; (adr r2, 800cfa4 <USBH_Get_USB_Status+0x1c>)
 800cf9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa2:	bf00      	nop
 800cfa4:	0800cfb5 	.word	0x0800cfb5
 800cfa8:	0800cfbb 	.word	0x0800cfbb
 800cfac:	0800cfc1 	.word	0x0800cfc1
 800cfb0:	0800cfc7 	.word	0x0800cfc7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	73fb      	strb	r3, [r7, #15]
    break;
 800cfb8:	e00b      	b.n	800cfd2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cfba:	2302      	movs	r3, #2
 800cfbc:	73fb      	strb	r3, [r7, #15]
    break;
 800cfbe:	e008      	b.n	800cfd2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	73fb      	strb	r3, [r7, #15]
    break;
 800cfc4:	e005      	b.n	800cfd2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cfc6:	2302      	movs	r3, #2
 800cfc8:	73fb      	strb	r3, [r7, #15]
    break;
 800cfca:	e002      	b.n	800cfd2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cfcc:	2302      	movs	r3, #2
 800cfce:	73fb      	strb	r3, [r7, #15]
    break;
 800cfd0:	bf00      	nop
  }
  return usb_status;
 800cfd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3714      	adds	r7, #20
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cfea:	79fb      	ldrb	r3, [r7, #7]
 800cfec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cfee:	79fb      	ldrb	r3, [r7, #7]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d102      	bne.n	800cffa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cff4:	2301      	movs	r3, #1
 800cff6:	73fb      	strb	r3, [r7, #15]
 800cff8:	e001      	b.n	800cffe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cffa:	2300      	movs	r3, #0
 800cffc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
 800d000:	461a      	mov	r2, r3
 800d002:	2101      	movs	r1, #1
 800d004:	4803      	ldr	r0, [pc, #12]	; (800d014 <MX_DriverVbusFS+0x34>)
 800d006:	f7f4 fab7 	bl	8001578 <HAL_GPIO_WritePin>
}
 800d00a:	bf00      	nop
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	40020800 	.word	0x40020800

0800d018 <__errno>:
 800d018:	4b01      	ldr	r3, [pc, #4]	; (800d020 <__errno+0x8>)
 800d01a:	6818      	ldr	r0, [r3, #0]
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	20000030 	.word	0x20000030

0800d024 <__libc_init_array>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	4e0d      	ldr	r6, [pc, #52]	; (800d05c <__libc_init_array+0x38>)
 800d028:	4c0d      	ldr	r4, [pc, #52]	; (800d060 <__libc_init_array+0x3c>)
 800d02a:	1ba4      	subs	r4, r4, r6
 800d02c:	10a4      	asrs	r4, r4, #2
 800d02e:	2500      	movs	r5, #0
 800d030:	42a5      	cmp	r5, r4
 800d032:	d109      	bne.n	800d048 <__libc_init_array+0x24>
 800d034:	4e0b      	ldr	r6, [pc, #44]	; (800d064 <__libc_init_array+0x40>)
 800d036:	4c0c      	ldr	r4, [pc, #48]	; (800d068 <__libc_init_array+0x44>)
 800d038:	f000 f8f6 	bl	800d228 <_init>
 800d03c:	1ba4      	subs	r4, r4, r6
 800d03e:	10a4      	asrs	r4, r4, #2
 800d040:	2500      	movs	r5, #0
 800d042:	42a5      	cmp	r5, r4
 800d044:	d105      	bne.n	800d052 <__libc_init_array+0x2e>
 800d046:	bd70      	pop	{r4, r5, r6, pc}
 800d048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d04c:	4798      	blx	r3
 800d04e:	3501      	adds	r5, #1
 800d050:	e7ee      	b.n	800d030 <__libc_init_array+0xc>
 800d052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d056:	4798      	blx	r3
 800d058:	3501      	adds	r5, #1
 800d05a:	e7f2      	b.n	800d042 <__libc_init_array+0x1e>
 800d05c:	0800d37c 	.word	0x0800d37c
 800d060:	0800d37c 	.word	0x0800d37c
 800d064:	0800d37c 	.word	0x0800d37c
 800d068:	0800d380 	.word	0x0800d380

0800d06c <malloc>:
 800d06c:	4b02      	ldr	r3, [pc, #8]	; (800d078 <malloc+0xc>)
 800d06e:	4601      	mov	r1, r0
 800d070:	6818      	ldr	r0, [r3, #0]
 800d072:	f000 b86d 	b.w	800d150 <_malloc_r>
 800d076:	bf00      	nop
 800d078:	20000030 	.word	0x20000030

0800d07c <free>:
 800d07c:	4b02      	ldr	r3, [pc, #8]	; (800d088 <free+0xc>)
 800d07e:	4601      	mov	r1, r0
 800d080:	6818      	ldr	r0, [r3, #0]
 800d082:	f000 b817 	b.w	800d0b4 <_free_r>
 800d086:	bf00      	nop
 800d088:	20000030 	.word	0x20000030

0800d08c <memcpy>:
 800d08c:	b510      	push	{r4, lr}
 800d08e:	1e43      	subs	r3, r0, #1
 800d090:	440a      	add	r2, r1
 800d092:	4291      	cmp	r1, r2
 800d094:	d100      	bne.n	800d098 <memcpy+0xc>
 800d096:	bd10      	pop	{r4, pc}
 800d098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d09c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0a0:	e7f7      	b.n	800d092 <memcpy+0x6>

0800d0a2 <memset>:
 800d0a2:	4402      	add	r2, r0
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d100      	bne.n	800d0ac <memset+0xa>
 800d0aa:	4770      	bx	lr
 800d0ac:	f803 1b01 	strb.w	r1, [r3], #1
 800d0b0:	e7f9      	b.n	800d0a6 <memset+0x4>
	...

0800d0b4 <_free_r>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	2900      	cmp	r1, #0
 800d0ba:	d045      	beq.n	800d148 <_free_r+0x94>
 800d0bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0c0:	1f0c      	subs	r4, r1, #4
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	bfb8      	it	lt
 800d0c6:	18e4      	addlt	r4, r4, r3
 800d0c8:	f000 f8ac 	bl	800d224 <__malloc_lock>
 800d0cc:	4a1f      	ldr	r2, [pc, #124]	; (800d14c <_free_r+0x98>)
 800d0ce:	6813      	ldr	r3, [r2, #0]
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	b933      	cbnz	r3, 800d0e2 <_free_r+0x2e>
 800d0d4:	6063      	str	r3, [r4, #4]
 800d0d6:	6014      	str	r4, [r2, #0]
 800d0d8:	4628      	mov	r0, r5
 800d0da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0de:	f000 b8a2 	b.w	800d226 <__malloc_unlock>
 800d0e2:	42a3      	cmp	r3, r4
 800d0e4:	d90c      	bls.n	800d100 <_free_r+0x4c>
 800d0e6:	6821      	ldr	r1, [r4, #0]
 800d0e8:	1862      	adds	r2, r4, r1
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	bf04      	itt	eq
 800d0ee:	681a      	ldreq	r2, [r3, #0]
 800d0f0:	685b      	ldreq	r3, [r3, #4]
 800d0f2:	6063      	str	r3, [r4, #4]
 800d0f4:	bf04      	itt	eq
 800d0f6:	1852      	addeq	r2, r2, r1
 800d0f8:	6022      	streq	r2, [r4, #0]
 800d0fa:	6004      	str	r4, [r0, #0]
 800d0fc:	e7ec      	b.n	800d0d8 <_free_r+0x24>
 800d0fe:	4613      	mov	r3, r2
 800d100:	685a      	ldr	r2, [r3, #4]
 800d102:	b10a      	cbz	r2, 800d108 <_free_r+0x54>
 800d104:	42a2      	cmp	r2, r4
 800d106:	d9fa      	bls.n	800d0fe <_free_r+0x4a>
 800d108:	6819      	ldr	r1, [r3, #0]
 800d10a:	1858      	adds	r0, r3, r1
 800d10c:	42a0      	cmp	r0, r4
 800d10e:	d10b      	bne.n	800d128 <_free_r+0x74>
 800d110:	6820      	ldr	r0, [r4, #0]
 800d112:	4401      	add	r1, r0
 800d114:	1858      	adds	r0, r3, r1
 800d116:	4282      	cmp	r2, r0
 800d118:	6019      	str	r1, [r3, #0]
 800d11a:	d1dd      	bne.n	800d0d8 <_free_r+0x24>
 800d11c:	6810      	ldr	r0, [r2, #0]
 800d11e:	6852      	ldr	r2, [r2, #4]
 800d120:	605a      	str	r2, [r3, #4]
 800d122:	4401      	add	r1, r0
 800d124:	6019      	str	r1, [r3, #0]
 800d126:	e7d7      	b.n	800d0d8 <_free_r+0x24>
 800d128:	d902      	bls.n	800d130 <_free_r+0x7c>
 800d12a:	230c      	movs	r3, #12
 800d12c:	602b      	str	r3, [r5, #0]
 800d12e:	e7d3      	b.n	800d0d8 <_free_r+0x24>
 800d130:	6820      	ldr	r0, [r4, #0]
 800d132:	1821      	adds	r1, r4, r0
 800d134:	428a      	cmp	r2, r1
 800d136:	bf04      	itt	eq
 800d138:	6811      	ldreq	r1, [r2, #0]
 800d13a:	6852      	ldreq	r2, [r2, #4]
 800d13c:	6062      	str	r2, [r4, #4]
 800d13e:	bf04      	itt	eq
 800d140:	1809      	addeq	r1, r1, r0
 800d142:	6021      	streq	r1, [r4, #0]
 800d144:	605c      	str	r4, [r3, #4]
 800d146:	e7c7      	b.n	800d0d8 <_free_r+0x24>
 800d148:	bd38      	pop	{r3, r4, r5, pc}
 800d14a:	bf00      	nop
 800d14c:	200049d0 	.word	0x200049d0

0800d150 <_malloc_r>:
 800d150:	b570      	push	{r4, r5, r6, lr}
 800d152:	1ccd      	adds	r5, r1, #3
 800d154:	f025 0503 	bic.w	r5, r5, #3
 800d158:	3508      	adds	r5, #8
 800d15a:	2d0c      	cmp	r5, #12
 800d15c:	bf38      	it	cc
 800d15e:	250c      	movcc	r5, #12
 800d160:	2d00      	cmp	r5, #0
 800d162:	4606      	mov	r6, r0
 800d164:	db01      	blt.n	800d16a <_malloc_r+0x1a>
 800d166:	42a9      	cmp	r1, r5
 800d168:	d903      	bls.n	800d172 <_malloc_r+0x22>
 800d16a:	230c      	movs	r3, #12
 800d16c:	6033      	str	r3, [r6, #0]
 800d16e:	2000      	movs	r0, #0
 800d170:	bd70      	pop	{r4, r5, r6, pc}
 800d172:	f000 f857 	bl	800d224 <__malloc_lock>
 800d176:	4a21      	ldr	r2, [pc, #132]	; (800d1fc <_malloc_r+0xac>)
 800d178:	6814      	ldr	r4, [r2, #0]
 800d17a:	4621      	mov	r1, r4
 800d17c:	b991      	cbnz	r1, 800d1a4 <_malloc_r+0x54>
 800d17e:	4c20      	ldr	r4, [pc, #128]	; (800d200 <_malloc_r+0xb0>)
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	b91b      	cbnz	r3, 800d18c <_malloc_r+0x3c>
 800d184:	4630      	mov	r0, r6
 800d186:	f000 f83d 	bl	800d204 <_sbrk_r>
 800d18a:	6020      	str	r0, [r4, #0]
 800d18c:	4629      	mov	r1, r5
 800d18e:	4630      	mov	r0, r6
 800d190:	f000 f838 	bl	800d204 <_sbrk_r>
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	d124      	bne.n	800d1e2 <_malloc_r+0x92>
 800d198:	230c      	movs	r3, #12
 800d19a:	6033      	str	r3, [r6, #0]
 800d19c:	4630      	mov	r0, r6
 800d19e:	f000 f842 	bl	800d226 <__malloc_unlock>
 800d1a2:	e7e4      	b.n	800d16e <_malloc_r+0x1e>
 800d1a4:	680b      	ldr	r3, [r1, #0]
 800d1a6:	1b5b      	subs	r3, r3, r5
 800d1a8:	d418      	bmi.n	800d1dc <_malloc_r+0x8c>
 800d1aa:	2b0b      	cmp	r3, #11
 800d1ac:	d90f      	bls.n	800d1ce <_malloc_r+0x7e>
 800d1ae:	600b      	str	r3, [r1, #0]
 800d1b0:	50cd      	str	r5, [r1, r3]
 800d1b2:	18cc      	adds	r4, r1, r3
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	f000 f836 	bl	800d226 <__malloc_unlock>
 800d1ba:	f104 000b 	add.w	r0, r4, #11
 800d1be:	1d23      	adds	r3, r4, #4
 800d1c0:	f020 0007 	bic.w	r0, r0, #7
 800d1c4:	1ac3      	subs	r3, r0, r3
 800d1c6:	d0d3      	beq.n	800d170 <_malloc_r+0x20>
 800d1c8:	425a      	negs	r2, r3
 800d1ca:	50e2      	str	r2, [r4, r3]
 800d1cc:	e7d0      	b.n	800d170 <_malloc_r+0x20>
 800d1ce:	428c      	cmp	r4, r1
 800d1d0:	684b      	ldr	r3, [r1, #4]
 800d1d2:	bf16      	itet	ne
 800d1d4:	6063      	strne	r3, [r4, #4]
 800d1d6:	6013      	streq	r3, [r2, #0]
 800d1d8:	460c      	movne	r4, r1
 800d1da:	e7eb      	b.n	800d1b4 <_malloc_r+0x64>
 800d1dc:	460c      	mov	r4, r1
 800d1de:	6849      	ldr	r1, [r1, #4]
 800d1e0:	e7cc      	b.n	800d17c <_malloc_r+0x2c>
 800d1e2:	1cc4      	adds	r4, r0, #3
 800d1e4:	f024 0403 	bic.w	r4, r4, #3
 800d1e8:	42a0      	cmp	r0, r4
 800d1ea:	d005      	beq.n	800d1f8 <_malloc_r+0xa8>
 800d1ec:	1a21      	subs	r1, r4, r0
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f000 f808 	bl	800d204 <_sbrk_r>
 800d1f4:	3001      	adds	r0, #1
 800d1f6:	d0cf      	beq.n	800d198 <_malloc_r+0x48>
 800d1f8:	6025      	str	r5, [r4, #0]
 800d1fa:	e7db      	b.n	800d1b4 <_malloc_r+0x64>
 800d1fc:	200049d0 	.word	0x200049d0
 800d200:	200049d4 	.word	0x200049d4

0800d204 <_sbrk_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4c06      	ldr	r4, [pc, #24]	; (800d220 <_sbrk_r+0x1c>)
 800d208:	2300      	movs	r3, #0
 800d20a:	4605      	mov	r5, r0
 800d20c:	4608      	mov	r0, r1
 800d20e:	6023      	str	r3, [r4, #0]
 800d210:	f7f3 fe5c 	bl	8000ecc <_sbrk>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_sbrk_r+0x1a>
 800d218:	6823      	ldr	r3, [r4, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_sbrk_r+0x1a>
 800d21c:	602b      	str	r3, [r5, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	200056dc 	.word	0x200056dc

0800d224 <__malloc_lock>:
 800d224:	4770      	bx	lr

0800d226 <__malloc_unlock>:
 800d226:	4770      	bx	lr

0800d228 <_init>:
 800d228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22a:	bf00      	nop
 800d22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d22e:	bc08      	pop	{r3}
 800d230:	469e      	mov	lr, r3
 800d232:	4770      	bx	lr

0800d234 <_fini>:
 800d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d236:	bf00      	nop
 800d238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d23a:	bc08      	pop	{r3}
 800d23c:	469e      	mov	lr, r3
 800d23e:	4770      	bx	lr
