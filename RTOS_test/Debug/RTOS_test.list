
RTOS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08009fa8  08009fa8  00019fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d0  0800a0d0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d0  0800a0d0  0001a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d8  0800a0d8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d8  0800a0d8  0001a0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a0e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005340  200001e8  0800a2c8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005528  0800a2c8  00025528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002480d  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047de  00000000  00000000  00044a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f8  00000000  00000000  00049208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f0  00000000  00000000  0004aa00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000265d9  00000000  00000000  0004bff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016a3c  00000000  00000000  000725c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5c87  00000000  00000000  00089005  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015ec8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006628  00000000  00000000  0015ed08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f90 	.word	0x08009f90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009f90 	.word	0x08009f90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <MX_FREERTOS_Init+0x28>)
 8000576:	2100      	movs	r1, #0
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <MX_FREERTOS_Init+0x2c>)
 800057a:	f005 feab 	bl	80062d4 <osThreadNew>
 800057e:	4602      	mov	r2, r0
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <MX_FREERTOS_Init+0x30>)
 8000582:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <MX_FREERTOS_Init+0x34>)
 8000586:	2100      	movs	r1, #0
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <MX_FREERTOS_Init+0x38>)
 800058a:	f005 fea3 	bl	80062d4 <osThreadNew>
 800058e:	4602      	mov	r2, r0
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_FREERTOS_Init+0x3c>)
 8000592:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	0800a03c 	.word	0x0800a03c
 800059c:	080005b1 	.word	0x080005b1
 80005a0:	20004b70 	.word	0x20004b70
 80005a4:	0800a060 	.word	0x0800a060
 80005a8:	08000661 	.word	0x08000661
 80005ac:	20004b74 	.word	0x20004b74

080005b0 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005b8:	f008 fb60 	bl	8008c7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartBlink01 */
  /* Infinite loop */
  for(;;)
  {
	  if(ReceivedDataFlag == 1){
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <StartBlink01+0x90>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d112      	bne.n	80005ea <StartBlink01+0x3a>
	  	ReceivedDataFlag = 0;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <StartBlink01+0x90>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]

	  	MessageLength = sprintf(DataToSend, "Odebrano: %s\n\r", ReceivedData);
 80005ca:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <StartBlink01+0x94>)
 80005cc:	491e      	ldr	r1, [pc, #120]	; (8000648 <StartBlink01+0x98>)
 80005ce:	481f      	ldr	r0, [pc, #124]	; (800064c <StartBlink01+0x9c>)
 80005d0:	f009 f984 	bl	80098dc <siprintf>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <StartBlink01+0xa0>)
 80005da:	701a      	strb	r2, [r3, #0]
	  	CDC_Transmit_FS(DataToSend, MessageLength);
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <StartBlink01+0xa0>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	4819      	ldr	r0, [pc, #100]	; (800064c <StartBlink01+0x9c>)
 80005e6:	f008 fc23 	bl	8008e30 <CDC_Transmit_FS>
	  }
	  if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_SET) {
 80005ea:	2101      	movs	r1, #1
 80005ec:	4819      	ldr	r0, [pc, #100]	; (8000654 <StartBlink01+0xa4>)
 80005ee:	f000 fe43 	bl	8001278 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d1e1      	bne.n	80005bc <StartBlink01+0xc>
	  		osDelay(100);
 80005f8:	2064      	movs	r0, #100	; 0x64
 80005fa:	f005 ff11 	bl	8006420 <osDelay>
	  		if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin)	== GPIO_PIN_SET) {
 80005fe:	2101      	movs	r1, #1
 8000600:	4814      	ldr	r0, [pc, #80]	; (8000654 <StartBlink01+0xa4>)
 8000602:	f000 fe39 	bl	8001278 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b01      	cmp	r3, #1
 800060a:	d1d7      	bne.n	80005bc <StartBlink01+0xc>

	  			++MessageCounter;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <StartBlink01+0xa8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <StartBlink01+0xa8>)
 8000616:	701a      	strb	r2, [r3, #0]
	  			MessageLength = sprintf(DataToSend, "Wiadomosc nr %d\n\r", MessageCounter);
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <StartBlink01+0xa8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	490f      	ldr	r1, [pc, #60]	; (800065c <StartBlink01+0xac>)
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <StartBlink01+0x9c>)
 8000622:	f009 f95b 	bl	80098dc <siprintf>
 8000626:	4603      	mov	r3, r0
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <StartBlink01+0xa0>)
 800062c:	701a      	strb	r2, [r3, #0]
	  			CDC_Transmit_FS(DataToSend, MessageLength);
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <StartBlink01+0xa0>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b29b      	uxth	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <StartBlink01+0x9c>)
 8000638:	f008 fbfa 	bl	8008e30 <CDC_Transmit_FS>
	  if(ReceivedDataFlag == 1){
 800063c:	e7be      	b.n	80005bc <StartBlink01+0xc>
 800063e:	bf00      	nop
 8000640:	20000206 	.word	0x20000206
 8000644:	20004b48 	.word	0x20004b48
 8000648:	08009fb8 	.word	0x08009fb8
 800064c:	20004b20 	.word	0x20004b20
 8000650:	20000205 	.word	0x20000205
 8000654:	40020000 	.word	0x40020000
 8000658:	20000204 	.word	0x20000204
 800065c:	08009fc8 	.word	0x08009fc8

08000660 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
 8000668:	e7fe      	b.n	8000668 <StartBlink02+0x8>
	...

0800066c <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
 8000686:	4b96      	ldr	r3, [pc, #600]	; (80008e0 <MX_GPIO_Init+0x274>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a95      	ldr	r2, [pc, #596]	; (80008e0 <MX_GPIO_Init+0x274>)
 800068c:	f043 0310 	orr.w	r3, r3, #16
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b93      	ldr	r3, [pc, #588]	; (80008e0 <MX_GPIO_Init+0x274>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	4b8f      	ldr	r3, [pc, #572]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a8e      	ldr	r2, [pc, #568]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b8c      	ldr	r3, [pc, #560]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b88      	ldr	r3, [pc, #544]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a87      	ldr	r2, [pc, #540]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b85      	ldr	r3, [pc, #532]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b81      	ldr	r3, [pc, #516]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a80      	ldr	r2, [pc, #512]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b7e      	ldr	r3, [pc, #504]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b7a      	ldr	r3, [pc, #488]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a79      	ldr	r2, [pc, #484]	; (80008e0 <MX_GPIO_Init+0x274>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b77      	ldr	r3, [pc, #476]	; (80008e0 <MX_GPIO_Init+0x274>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b73      	ldr	r3, [pc, #460]	; (80008e0 <MX_GPIO_Init+0x274>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a72      	ldr	r2, [pc, #456]	; (80008e0 <MX_GPIO_Init+0x274>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b70      	ldr	r3, [pc, #448]	; (80008e0 <MX_GPIO_Init+0x274>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2118      	movs	r1, #24
 800072e:	486d      	ldr	r0, [pc, #436]	; (80008e4 <MX_GPIO_Init+0x278>)
 8000730:	f000 fdba 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2101      	movs	r1, #1
 8000738:	486b      	ldr	r0, [pc, #428]	; (80008e8 <MX_GPIO_Init+0x27c>)
 800073a:	f000 fdb5 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800073e:	2200      	movs	r2, #0
 8000740:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000744:	4869      	ldr	r0, [pc, #420]	; (80008ec <MX_GPIO_Init+0x280>)
 8000746:	f000 fdaf 	bl	80012a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4;
 800074a:	2318      	movs	r3, #24
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	4860      	ldr	r0, [pc, #384]	; (80008e4 <MX_GPIO_Init+0x278>)
 8000762:	f000 fbef 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000766:	2301      	movs	r3, #1
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	485a      	ldr	r0, [pc, #360]	; (80008e8 <MX_GPIO_Init+0x27c>)
 800077e:	f000 fbe1 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000782:	2308      	movs	r3, #8
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000792:	2305      	movs	r3, #5
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4852      	ldr	r0, [pc, #328]	; (80008e8 <MX_GPIO_Init+0x27c>)
 800079e:	f000 fbd1 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007a6:	4b52      	ldr	r3, [pc, #328]	; (80008f0 <MX_GPIO_Init+0x284>)
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	484f      	ldr	r0, [pc, #316]	; (80008f4 <MX_GPIO_Init+0x288>)
 80007b6:	f000 fbc5 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007ba:	2310      	movs	r3, #16
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007ca:	2306      	movs	r3, #6
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4847      	ldr	r0, [pc, #284]	; (80008f4 <MX_GPIO_Init+0x288>)
 80007d6:	f000 fbb5 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007da:	23e0      	movs	r3, #224	; 0xe0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ea:	2305      	movs	r3, #5
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	483f      	ldr	r0, [pc, #252]	; (80008f4 <MX_GPIO_Init+0x288>)
 80007f6:	f000 fba5 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007fa:	2304      	movs	r3, #4
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	483a      	ldr	r0, [pc, #232]	; (80008f8 <MX_GPIO_Init+0x28c>)
 800080e:	f000 fb99 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000824:	2305      	movs	r3, #5
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	4832      	ldr	r0, [pc, #200]	; (80008f8 <MX_GPIO_Init+0x28c>)
 8000830:	f000 fb88 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000834:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000838:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4827      	ldr	r0, [pc, #156]	; (80008ec <MX_GPIO_Init+0x280>)
 800084e:	f000 fb79 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000852:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000864:	2306      	movs	r3, #6
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	481e      	ldr	r0, [pc, #120]	; (80008e8 <MX_GPIO_Init+0x27c>)
 8000870:	f000 fb68 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000874:	2320      	movs	r3, #32
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4819      	ldr	r0, [pc, #100]	; (80008ec <MX_GPIO_Init+0x280>)
 8000888:	f000 fb5c 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800088c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000892:	2312      	movs	r3, #18
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800089e:	2304      	movs	r3, #4
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_GPIO_Init+0x28c>)
 80008aa:	f000 fb4b 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_GPIO_Init+0x290>)
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MX_GPIO_Init+0x278>)
 80008c2:	f000 fb3f 	bl	8000f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2006      	movs	r0, #6
 80008cc:	f000 fb10 	bl	8000ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008d0:	2006      	movs	r0, #6
 80008d2:	f000 fb29 	bl	8000f28 <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3730      	adds	r7, #48	; 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	10310000 	.word	0x10310000
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	10120000 	.word	0x10120000

08000900 <HAL_GPIO_EXTI_Callback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d10a      	bne.n	8000926 <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin));
 8000910:	2101      	movs	r1, #1
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <HAL_GPIO_EXTI_Callback+0x30>)
 8000914:	f000 fcb0 	bl	8001278 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <HAL_GPIO_EXTI_Callback+0x34>)
 8000922:	f000 fcc1 	bl	80012a8 <HAL_GPIO_WritePin>
	}
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020000 	.word	0x40020000
 8000934:	40020c00 	.word	0x40020c00

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 f9bc 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f80a 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f7ff fe92 	bl	800066c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000948:	f005 fc5a 	bl	8006200 <osKernelInitialize>
  MX_FREERTOS_Init();
 800094c:	f7ff fe10 	bl	8000570 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000950:	f005 fc8a 	bl	8006268 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000954:	e7fe      	b.n	8000954 <main+0x1c>
	...

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2230      	movs	r2, #48	; 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f008 fef7 	bl	800975a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <SystemClock_Config+0xc8>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <SystemClock_Config+0xc8>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <SystemClock_Config+0xc8>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <SystemClock_Config+0xcc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <SystemClock_Config+0xcc>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <SystemClock_Config+0xcc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009be:	2302      	movs	r3, #2
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009c8:	2304      	movs	r3, #4
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009cc:	2348      	movs	r3, #72	; 0x48
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009d4:	2303      	movs	r3, #3
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fe19 	bl	8002614 <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e8:	f000 f830 	bl	8000a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2302      	movs	r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2102      	movs	r1, #2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 f873 	bl	8002af4 <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a14:	f000 f81a 	bl	8000a4c <Error_Handler>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3750      	adds	r7, #80	; 0x50
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d101      	bne.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3a:	f000 f95f 	bl	8000cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40001000 	.word	0x40001000

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	2036      	movs	r0, #54	; 0x36
 8000ac2:	f000 fa15 	bl	8000ef0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ac6:	2036      	movs	r0, #54	; 0x36
 8000ac8:	f000 fa2e 	bl	8000f28 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_InitTick+0xa4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <HAL_InitTick+0xa4>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_InitTick+0xa4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae8:	f107 0210 	add.w	r2, r7, #16
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 f9dc 	bl	8002eb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000af8:	f002 f9c6 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 8000afc:	4603      	mov	r3, r0
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <HAL_InitTick+0xa8>)
 8000b06:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0a:	0c9b      	lsrs	r3, r3, #18
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_InitTick+0xac>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <HAL_InitTick+0xb0>)
 8000b14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_InitTick+0xac>)
 8000b18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_InitTick+0xac>)
 8000b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_InitTick+0xac>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_InitTick+0xac>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <HAL_InitTick+0xac>)
 8000b32:	f002 f9ef 	bl	8002f14 <HAL_TIM_Base_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d104      	bne.n	8000b46 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <HAL_InitTick+0xac>)
 8000b3e:	f002 fa1e 	bl	8002f7e <HAL_TIM_Base_Start_IT>
 8000b42:	4603      	mov	r3, r0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3730      	adds	r7, #48	; 0x30
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	431bde83 	.word	0x431bde83
 8000b58:	20004b78 	.word	0x20004b78
 8000b5c:	40001000 	.word	0x40001000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f000 fb9f 	bl	80012dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM6_DAC_IRQHandler+0x10>)
 8000baa:	f002 fa0c 	bl	8002fc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20004b78 	.word	0x20004b78

08000bb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <OTG_FS_IRQHandler+0x10>)
 8000bbe:	f000 fcf5 	bl	80015ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000511c 	.word	0x2000511c

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f008 fd68 	bl	80096d0 <__errno>
 8000c00:	4602      	mov	r2, r0
 8000c02:	230c      	movs	r3, #12
 8000c04:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20020000 	.word	0x20020000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	20000208 	.word	0x20000208
 8000c34:	20005528 	.word	0x20005528

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <SystemInit+0x28>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <SystemInit+0x28>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SystemInit+0x28>)
 8000c4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c52:	609a      	str	r2, [r3, #8]
#endif
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c6a:	e003      	b.n	8000c74 <LoopCopyDataInit>

08000c6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c72:	3104      	adds	r1, #4

08000c74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c7c:	d3f6      	bcc.n	8000c6c <CopyDataInit>
  ldr  r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c80:	e002      	b.n	8000c88 <LoopFillZerobss>

08000c82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c84:	f842 3b04 	str.w	r3, [r2], #4

08000c88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c8c:	d3f9      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd3 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f008 fd23 	bl	80096dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fe4f 	bl	8000938 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ca0:	0800a0e0 	.word	0x0800a0e0
  ldr  r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ca8:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8000cac:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8000cb0:	20005528 	.word	0x20005528

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f8fa 	bl	8000eda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fee0 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff feb6 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20004bb8 	.word	0x20004bb8

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20004bb8 	.word	0x20004bb8

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff ffee 	bl	8000d24 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_Delay+0x40>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffde 	bl	8000d24 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff4c 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f02:	f7ff ff61 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	6978      	ldr	r0, [r7, #20]
 8000f0e:	f7ff ffb1 	bl	8000e74 <NVIC_EncodePriority>
 8000f12:	4602      	mov	r2, r0
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff80 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff54 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e16b      	b.n	8001238 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 815a 	bne.w	8001232 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d00b      	beq.n	8000f9e <HAL_GPIO_Init+0x5a>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f92:	2b11      	cmp	r3, #17
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b12      	cmp	r3, #18
 8000f9c:	d130      	bne.n	8001000 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 0201 	and.w	r2, r3, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0xfc>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b12      	cmp	r3, #18
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80b4 	beq.w	8001232 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b5f      	ldr	r3, [pc, #380]	; (800124c <HAL_GPIO_Init+0x308>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a5e      	ldr	r2, [pc, #376]	; (800124c <HAL_GPIO_Init+0x308>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b5c      	ldr	r3, [pc, #368]	; (800124c <HAL_GPIO_Init+0x308>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e6:	4a5a      	ldr	r2, [pc, #360]	; (8001250 <HAL_GPIO_Init+0x30c>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a51      	ldr	r2, [pc, #324]	; (8001254 <HAL_GPIO_Init+0x310>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d02b      	beq.n	800116a <HAL_GPIO_Init+0x226>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a50      	ldr	r2, [pc, #320]	; (8001258 <HAL_GPIO_Init+0x314>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d025      	beq.n	8001166 <HAL_GPIO_Init+0x222>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4f      	ldr	r2, [pc, #316]	; (800125c <HAL_GPIO_Init+0x318>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d01f      	beq.n	8001162 <HAL_GPIO_Init+0x21e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4e      	ldr	r2, [pc, #312]	; (8001260 <HAL_GPIO_Init+0x31c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d019      	beq.n	800115e <HAL_GPIO_Init+0x21a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4d      	ldr	r2, [pc, #308]	; (8001264 <HAL_GPIO_Init+0x320>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x216>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4c      	ldr	r2, [pc, #304]	; (8001268 <HAL_GPIO_Init+0x324>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x212>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4b      	ldr	r2, [pc, #300]	; (800126c <HAL_GPIO_Init+0x328>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x20e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4a      	ldr	r2, [pc, #296]	; (8001270 <HAL_GPIO_Init+0x32c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x20a>
 800114a:	2307      	movs	r3, #7
 800114c:	e00e      	b.n	800116c <HAL_GPIO_Init+0x228>
 800114e:	2308      	movs	r3, #8
 8001150:	e00c      	b.n	800116c <HAL_GPIO_Init+0x228>
 8001152:	2306      	movs	r3, #6
 8001154:	e00a      	b.n	800116c <HAL_GPIO_Init+0x228>
 8001156:	2305      	movs	r3, #5
 8001158:	e008      	b.n	800116c <HAL_GPIO_Init+0x228>
 800115a:	2304      	movs	r3, #4
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x228>
 800115e:	2303      	movs	r3, #3
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x228>
 8001162:	2302      	movs	r3, #2
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x228>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x228>
 800116a:	2300      	movs	r3, #0
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	f002 0203 	and.w	r2, r2, #3
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117c:	4934      	ldr	r1, [pc, #208]	; (8001250 <HAL_GPIO_Init+0x30c>)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <HAL_GPIO_Init+0x330>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ae:	4a31      	ldr	r2, [pc, #196]	; (8001274 <HAL_GPIO_Init+0x330>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <HAL_GPIO_Init+0x330>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d8:	4a26      	ldr	r2, [pc, #152]	; (8001274 <HAL_GPIO_Init+0x330>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <HAL_GPIO_Init+0x330>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <HAL_GPIO_Init+0x330>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_GPIO_Init+0x330>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a11      	ldr	r2, [pc, #68]	; (8001274 <HAL_GPIO_Init+0x330>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	f67f ae90 	bls.w	8000f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001240:	bf00      	nop
 8001242:	3724      	adds	r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40021400 	.word	0x40021400
 800126c:	40021800 	.word	0x40021800
 8001270:	40021c00 	.word	0x40021c00
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e001      	b.n	800129a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c4:	e003      	b.n	80012ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	619a      	str	r2, [r3, #24]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fb00 	bl	8000900 <HAL_GPIO_EXTI_Callback>
  }
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130e:	b08f      	sub	sp, #60	; 0x3c
 8001310:	af0a      	add	r7, sp, #40	; 0x28
 8001312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e10f      	b.n	800153e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d106      	bne.n	800133e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f007 febf 	bl	80090bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f002 f92c 	bl	80035ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	687e      	ldr	r6, [r7, #4]
 800136a:	466d      	mov	r5, sp
 800136c:	f106 0410 	add.w	r4, r6, #16
 8001370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001378:	e894 0003 	ldmia.w	r4, {r0, r1}
 800137c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001380:	1d33      	adds	r3, r6, #4
 8001382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001384:	6838      	ldr	r0, [r7, #0]
 8001386:	f002 f803 	bl	8003390 <USB_CoreInit>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0d0      	b.n	800153e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 f91a 	bl	80035dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e04a      	b.n	8001444 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	1a9b      	subs	r3, r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	333d      	adds	r3, #61	; 0x3d
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	333c      	adds	r3, #60	; 0x3c
 80013d2:	7bfa      	ldrb	r2, [r7, #15]
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	b298      	uxth	r0, r3
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	3342      	adds	r3, #66	; 0x42
 80013ea:	4602      	mov	r2, r0
 80013ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	333f      	adds	r3, #63	; 0x3f
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	3344      	adds	r3, #68	; 0x44
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3348      	adds	r3, #72	; 0x48
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3350      	adds	r3, #80	; 0x50
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3301      	adds	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3af      	bcc.n	80013ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e044      	b.n	80014de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	1a9b      	subs	r3, r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	3301      	adds	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3b5      	bcc.n	8001454 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	687e      	ldr	r6, [r7, #4]
 80014f0:	466d      	mov	r5, sp
 80014f2:	f106 0410 	add.w	r4, r6, #16
 80014f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001502:	e885 0003 	stmia.w	r5, {r0, r1}
 8001506:	1d33      	adds	r3, r6, #4
 8001508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800150a:	6838      	ldr	r0, [r7, #0]
 800150c:	f002 f890 	bl	8003630 <USB_DevInit>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2202      	movs	r2, #2
 800151a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00d      	b.n	800153e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f003 f8d8 	bl	80046ec <USB_DevDisconnect>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001546 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_PCD_Start+0x1c>
 800155e:	2302      	movs	r3, #2
 8001560:	e020      	b.n	80015a4 <HAL_PCD_Start+0x5e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	2b01      	cmp	r3, #1
 8001570:	d109      	bne.n	8001586 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001576:	2b01      	cmp	r3, #1
 8001578:	d005      	beq.n	8001586 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 f804 	bl	8003598 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f003 f888 	bl	80046aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b08d      	sub	sp, #52	; 0x34
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 f946 	bl	8004854 <USB_GetMode>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 839d 	bne.w	8001d0a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 f8aa 	bl	800472e <USB_ReadInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8393 	beq.w	8001d08 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f8a1 	bl	800472e <USB_ReadInterrupts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d107      	bne.n	8001606 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f002 0202 	and.w	r2, r2, #2
 8001604:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f003 f88f 	bl	800472e <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b10      	cmp	r3, #16
 8001618:	d161      	bne.n	80016de <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0210 	bic.w	r2, r2, #16
 8001628:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	f003 020f 	and.w	r2, r3, #15
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	3304      	adds	r3, #4
 8001648:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	0c5b      	lsrs	r3, r3, #17
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	2b02      	cmp	r3, #2
 8001654:	d124      	bne.n	80016a0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d035      	beq.n	80016ce <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800166c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001670:	b29b      	uxth	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	6a38      	ldr	r0, [r7, #32]
 8001676:	f002 fef5 	bl	8004464 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001686:	441a      	add	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001698:	441a      	add	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	619a      	str	r2, [r3, #24]
 800169e:	e016      	b.n	80016ce <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	0c5b      	lsrs	r3, r3, #17
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	d110      	bne.n	80016ce <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016b2:	2208      	movs	r2, #8
 80016b4:	4619      	mov	r1, r3
 80016b6:	6a38      	ldr	r0, [r7, #32]
 80016b8:	f002 fed4 	bl	8004464 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	699a      	ldr	r2, [r3, #24]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016c8:	441a      	add	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0210 	orr.w	r2, r2, #16
 80016dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f823 	bl	800472e <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016f2:	d16e      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 f829 	bl	8004754 <USB_ReadDevAllOutEpInterrupt>
 8001702:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001704:	e062      	b.n	80017cc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d057      	beq.n	80017c0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f003 f84e 	bl	80047bc <USB_ReadDevOutEPInterrupt>
 8001720:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00c      	beq.n	8001746 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	015a      	lsls	r2, r3, #5
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001738:	461a      	mov	r2, r3
 800173a:	2301      	movs	r3, #1
 800173c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800173e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fdb1 	bl	80022a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175c:	461a      	mov	r2, r3
 800175e:	2308      	movs	r3, #8
 8001760:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 feab 	bl	80024c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
 800177c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001780:	461a      	mov	r2, r3
 8001782:	2310      	movs	r3, #16
 8001784:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	015a      	lsls	r2, r3, #5
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	4413      	add	r3, r2
 8001798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179c:	461a      	mov	r2, r3
 800179e:	2320      	movs	r3, #32
 80017a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	015a      	lsls	r2, r3, #5
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b8:	461a      	mov	r2, r3
 80017ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3301      	adds	r3, #1
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c8:	085b      	lsrs	r3, r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d199      	bne.n	8001706 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 ffa9 	bl	800472e <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017e6:	f040 80c0 	bne.w	800196a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 ffca 	bl	8004788 <USB_ReadDevAllInEpInterrupt>
 80017f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017fa:	e0b2      	b.n	8001962 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80a7 	beq.w	8001956 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fff0 	bl	80047f8 <USB_ReadDevInEPInterrupt>
 8001818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d057      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	2201      	movs	r2, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	69f9      	ldr	r1, [r7, #28]
 8001840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001844:	4013      	ands	r3, r2
 8001846:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	4413      	add	r3, r2
 8001850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001854:	461a      	mov	r2, r3
 8001856:	2301      	movs	r3, #1
 8001858:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d132      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3348      	adds	r3, #72	; 0x48
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4403      	add	r3, r0
 8001882:	3344      	adds	r3, #68	; 0x44
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4419      	add	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4403      	add	r3, r0
 8001896:	3348      	adds	r3, #72	; 0x48
 8001898:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	2b00      	cmp	r3, #0
 800189e:	d113      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x31c>
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	3350      	adds	r3, #80	; 0x50
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d108      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018c0:	461a      	mov	r2, r3
 80018c2:	2101      	movs	r1, #1
 80018c4:	f002 fff8 	bl	80048b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f007 fc83 	bl	80091da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ea:	461a      	mov	r2, r3
 80018ec:	2308      	movs	r3, #8
 80018ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001906:	461a      	mov	r2, r3
 8001908:	2310      	movs	r3, #16
 800190a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001922:	461a      	mov	r2, r3
 8001924:	2340      	movs	r3, #64	; 0x40
 8001926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800193e:	461a      	mov	r2, r3
 8001940:	2302      	movs	r3, #2
 8001942:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800194e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fc1b 	bl	800218c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	f47f af49 	bne.w	80017fc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fedd 	bl	800472e <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800197a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800197e:	d122      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800199a:	2b01      	cmp	r3, #1
 800199c:	d108      	bne.n	80019b0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019a6:	2100      	movs	r1, #0
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fe27 	bl	80025fc <HAL_PCDEx_LPM_Callback>
 80019ae:	e002      	b.n	80019b6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f007 fc89 	bl	80092c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 feaf 	bl	800472e <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019da:	d112      	bne.n	8001a02 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f007 fc45 	bl	800927c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a00:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fe91 	bl	800472e <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a16:	f040 80c7 	bne.w	8001ba8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2110      	movs	r1, #16
 8001a34:	4618      	mov	r0, r3
 8001a36:	f001 ff5f 	bl	80038f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3e:	e056      	b.n	8001aee <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a42:	015a      	lsls	r2, r3, #5
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a64:	0151      	lsls	r1, r2, #5
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	440a      	add	r2, r1
 8001a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a72:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a84:	0151      	lsls	r1, r2, #5
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	440a      	add	r2, r1
 8001a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001aa6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab8:	0151      	lsls	r1, r2, #5
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	440a      	add	r2, r1
 8001abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ac6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad8:	0151      	lsls	r1, r2, #5
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	440a      	add	r2, r1
 8001ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ae6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aea:	3301      	adds	r3, #1
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3a3      	bcc.n	8001a40 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b06:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d016      	beq.n	8001b42 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b24:	f043 030b 	orr.w	r3, r3, #11
 8001b28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3a:	f043 030b 	orr.w	r3, r3, #11
 8001b3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b40:	e015      	b.n	8001b6e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b54:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b58:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b68:	f043 030b 	orr.w	r3, r3, #11
 8001b6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b92:	461a      	mov	r2, r3
 8001b94:	f002 fe90 	bl	80048b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fdbe 	bl	800472e <USB_ReadInterrupts>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bbc:	d124      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 fe54 	bl	8004870 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 fef4 	bl	80039ba <USB_GetDevSpeed>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681c      	ldr	r4, [r3, #0]
 8001bde:	f001 f947 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8001be2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	4620      	mov	r0, r4
 8001bee:	f001 fc31 	bl	8003454 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f007 fb19 	bl	800922a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fd8e 	bl	800472e <USB_ReadInterrupts>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d10a      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f007 faf6 	bl	800920e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f002 0208 	and.w	r2, r2, #8
 8001c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 fd79 	bl	800472e <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c46:	d10f      	bne.n	8001c68 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f007 fb58 	bl	8009308 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fd5e 	bl	800472e <USB_ReadInterrupts>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c7c:	d10f      	bne.n	8001c9e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	4619      	mov	r1, r3
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f007 fb2b 	bl	80092e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 fd43 	bl	800472e <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb2:	d10a      	bne.n	8001cca <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f007 fb39 	bl	800932c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fd2d 	bl	800472e <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d115      	bne.n	8001d0a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f007 fb29 	bl	8009348 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	e000      	b.n	8001d0a <HAL_PCD_IRQHandler+0x75e>
      return;
 8001d08:	bf00      	nop
    }
  }
}
 8001d0a:	3734      	adds	r7, #52	; 0x34
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}

08001d10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_PCD_SetAddress+0x1a>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e013      	b.n	8001d52 <HAL_PCD_SetAddress+0x42>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 fc8b 	bl	800465e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	4608      	mov	r0, r1
 8001d64:	4611      	mov	r1, r2
 8001d66:	461a      	mov	r2, r3
 8001d68:	4603      	mov	r3, r0
 8001d6a:	70fb      	strb	r3, [r7, #3]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	803b      	strh	r3, [r7, #0]
 8001d70:	4613      	mov	r3, r2
 8001d72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da0f      	bge.n	8001da0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	3338      	adds	r3, #56	; 0x38
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	705a      	strb	r2, [r3, #1]
 8001d9e:	e00f      	b.n	8001dc0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 020f 	and.w	r2, r3, #15
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dcc:	883a      	ldrh	r2, [r7, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	78ba      	ldrb	r2, [r7, #2]
 8001dd6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	785b      	ldrb	r3, [r3, #1]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dea:	78bb      	ldrb	r3, [r7, #2]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d102      	bne.n	8001df6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_PCD_EP_Open+0xaa>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e00e      	b.n	8001e22 <HAL_PCD_EP_Open+0xc8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68f9      	ldr	r1, [r7, #12]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 fdf6 	bl	8003a04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e20:	7afb      	ldrb	r3, [r7, #11]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da0f      	bge.n	8001e5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 020f 	and.w	r2, r3, #15
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	3338      	adds	r3, #56	; 0x38
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	3304      	adds	r3, #4
 8001e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	705a      	strb	r2, [r3, #1]
 8001e5c:	e00f      	b.n	8001e7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 020f 	and.w	r2, r3, #15
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_PCD_EP_Close+0x6e>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e00e      	b.n	8001eb6 <HAL_PCD_EP_Close+0x8c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68f9      	ldr	r1, [r7, #12]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fe34 	bl	8003b14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2200      	movs	r2, #0
 8001efe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f00:	7afb      	ldrb	r3, [r7, #11]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d102      	bne.n	8001f1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	6979      	ldr	r1, [r7, #20]
 8001f32:	f002 f90f 	bl	8004154 <USB_EP0StartXfer>
 8001f36:	e008      	b.n	8001f4a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	6979      	ldr	r1, [r7, #20]
 8001f46:	f001 fec1 	bl	8003ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 020f 	and.w	r2, r3, #15
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	460b      	mov	r3, r1
 8001f92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f94:	7afb      	ldrb	r3, [r7, #11]
 8001f96:	f003 020f 	and.w	r2, r3, #15
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	3338      	adds	r3, #56	; 0x38
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3304      	adds	r3, #4
 8001faa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d102      	bne.n	8001fde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	6979      	ldr	r1, [r7, #20]
 8001ff6:	f002 f8ad 	bl	8004154 <USB_EP0StartXfer>
 8001ffa:	e008      	b.n	800200e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	6979      	ldr	r1, [r7, #20]
 800200a:	f001 fe5f 	bl	8003ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 020f 	and.w	r2, r3, #15
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	d901      	bls.n	8002036 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e050      	b.n	80020d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203a:	2b00      	cmp	r3, #0
 800203c:	da0f      	bge.n	800205e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	f003 020f 	and.w	r2, r3, #15
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	3338      	adds	r3, #56	; 0x38
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	3304      	adds	r3, #4
 8002054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	705a      	strb	r2, [r3, #1]
 800205c:	e00d      	b.n	800207a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	3304      	adds	r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	b2da      	uxtb	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_PCD_EP_SetStall+0x82>
 8002096:	2302      	movs	r3, #2
 8002098:	e01e      	b.n	80020d8 <HAL_PCD_EP_SetStall+0xc0>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 fa04 	bl	80044b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	b2d9      	uxtb	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020c8:	461a      	mov	r2, r3
 80020ca:	f002 fbf5 	bl	80048b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	f003 020f 	and.w	r2, r3, #15
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d901      	bls.n	80020fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e042      	b.n	8002184 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002102:	2b00      	cmp	r3, #0
 8002104:	da0f      	bge.n	8002126 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 020f 	and.w	r2, r3, #15
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	3338      	adds	r3, #56	; 0x38
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	3304      	adds	r3, #4
 800211c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	705a      	strb	r2, [r3, #1]
 8002124:	e00f      	b.n	8002146 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	b2da      	uxtb	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_PCD_EP_ClrStall+0x86>
 8002162:	2302      	movs	r3, #2
 8002164:	e00e      	b.n	8002184 <HAL_PCD_EP_ClrStall+0xa4>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68f9      	ldr	r1, [r7, #12]
 8002174:	4618      	mov	r0, r3
 8002176:	f002 fa0c 	bl	8004592 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af02      	add	r7, sp, #8
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	3338      	adds	r3, #56	; 0x38
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	3304      	adds	r3, #4
 80021b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d901      	bls.n	80021c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e06c      	b.n	800229e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d902      	bls.n	80021e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	3303      	adds	r3, #3
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e8:	e02b      	b.n	8002242 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d902      	bls.n	8002206 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3303      	adds	r3, #3
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	68d9      	ldr	r1, [r3, #12]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800221e:	b2db      	uxtb	r3, r3
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4603      	mov	r3, r0
 8002224:	6978      	ldr	r0, [r7, #20]
 8002226:	f002 f8e8 	bl	80043fa <USB_WritePacket>

    ep->xfer_buff  += len;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	441a      	add	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	441a      	add	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	b29b      	uxth	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	429a      	cmp	r2, r3
 8002256:	d809      	bhi.n	800226c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002260:	429a      	cmp	r2, r3
 8002262:	d203      	bcs.n	800226c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1be      	bne.n	80021ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	429a      	cmp	r2, r3
 8002276:	d811      	bhi.n	800229c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	2201      	movs	r2, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	43db      	mvns	r3, r3
 8002292:	6939      	ldr	r1, [r7, #16]
 8002294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002298:	4013      	ands	r3, r2
 800229a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	333c      	adds	r3, #60	; 0x3c
 80022c0:	3304      	adds	r3, #4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	f040 80a0 	bne.w	8002420 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a72      	ldr	r2, [pc, #456]	; (80024b8 <PCD_EP_OutXfrComplete_int+0x210>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	f240 80dd 	bls.w	80024ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80d7 	beq.w	80024ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230c:	461a      	mov	r2, r3
 800230e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002312:	6093      	str	r3, [r2, #8]
 8002314:	e0cb      	b.n	80024ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d009      	beq.n	8002334 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232c:	461a      	mov	r2, r3
 800232e:	2320      	movs	r3, #32
 8002330:	6093      	str	r3, [r2, #8]
 8002332:	e0bc      	b.n	80024ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 80b7 	bne.w	80024ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a5d      	ldr	r2, [pc, #372]	; (80024b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d90f      	bls.n	8002368 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235e:	461a      	mov	r2, r3
 8002360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002364:	6093      	str	r3, [r2, #8]
 8002366:	e0a2      	b.n	80024ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800237a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	0159      	lsls	r1, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	440b      	add	r3, r1
 8002384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800238e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4403      	add	r3, r0
 800239e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023b6:	6819      	ldr	r1, [r3, #0]
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4403      	add	r3, r0
 80023c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4419      	add	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4403      	add	r3, r0
 80023dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d114      	bne.n	8002412 <PCD_EP_OutXfrComplete_int+0x16a>
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d108      	bne.n	8002412 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800240a:	461a      	mov	r2, r3
 800240c:	2101      	movs	r1, #1
 800240e:	f002 fa53 	bl	80048b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f006 fec3 	bl	80091a4 <HAL_PCD_DataOutStageCallback>
 800241e:	e046      	b.n	80024ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a26      	ldr	r2, [pc, #152]	; (80024bc <PCD_EP_OutXfrComplete_int+0x214>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d124      	bne.n	8002472 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243e:	461a      	mov	r2, r3
 8002440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002444:	6093      	str	r3, [r2, #8]
 8002446:	e032      	b.n	80024ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245e:	461a      	mov	r2, r3
 8002460:	2320      	movs	r3, #32
 8002462:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f006 fe9a 	bl	80091a4 <HAL_PCD_DataOutStageCallback>
 8002470:	e01d      	b.n	80024ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d114      	bne.n	80024a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d108      	bne.n	80024a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800249a:	461a      	mov	r2, r3
 800249c:	2100      	movs	r1, #0
 800249e:	f002 fa0b 	bl	80048b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	4619      	mov	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f006 fe7b 	bl	80091a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	4f54300a 	.word	0x4f54300a
 80024bc:	4f54310a 	.word	0x4f54310a

080024c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	333c      	adds	r3, #60	; 0x3c
 80024d8:	3304      	adds	r3, #4
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a15      	ldr	r2, [pc, #84]	; (8002548 <PCD_EP_OutSetupPacket_int+0x88>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d90e      	bls.n	8002514 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250c:	461a      	mov	r2, r3
 800250e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002512:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f006 fe33 	bl	8009180 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <PCD_EP_OutSetupPacket_int+0x88>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d90c      	bls.n	800253c <PCD_EP_OutSetupPacket_int+0x7c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d108      	bne.n	800253c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002534:	461a      	mov	r2, r3
 8002536:	2101      	movs	r1, #1
 8002538:	f002 f9be 	bl	80048b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	4f54300a 	.word	0x4f54300a

0800254c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
 8002558:	4613      	mov	r3, r2
 800255a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d107      	bne.n	800257a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800256a:	883b      	ldrh	r3, [r7, #0]
 800256c:	0419      	lsls	r1, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	430a      	orrs	r2, r1
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
 8002578:	e028      	b.n	80025cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4413      	add	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e00d      	b.n	80025aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	3340      	adds	r3, #64	; 0x40
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4413      	add	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	3301      	adds	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d3ec      	bcc.n	800258e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025b4:	883b      	ldrh	r3, [r7, #0]
 80025b6:	0418      	lsls	r0, r3, #16
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	3b01      	subs	r3, #1
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	4302      	orrs	r2, r0
 80025c4:	3340      	adds	r3, #64	; 0x40
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e25b      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d075      	beq.n	800271e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002632:	4ba3      	ldr	r3, [pc, #652]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d00c      	beq.n	8002658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263e:	4ba0      	ldr	r3, [pc, #640]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002646:	2b08      	cmp	r3, #8
 8002648:	d112      	bne.n	8002670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264a:	4b9d      	ldr	r3, [pc, #628]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002656:	d10b      	bne.n	8002670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	4b99      	ldr	r3, [pc, #612]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d05b      	beq.n	800271c <HAL_RCC_OscConfig+0x108>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d157      	bne.n	800271c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e236      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d106      	bne.n	8002688 <HAL_RCC_OscConfig+0x74>
 800267a:	4b91      	ldr	r3, [pc, #580]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a90      	ldr	r2, [pc, #576]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e01d      	b.n	80026c4 <HAL_RCC_OscConfig+0xb0>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x98>
 8002692:	4b8b      	ldr	r3, [pc, #556]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a8a      	ldr	r2, [pc, #552]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b88      	ldr	r3, [pc, #544]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a87      	ldr	r2, [pc, #540]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0xb0>
 80026ac:	4b84      	ldr	r3, [pc, #528]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a83      	ldr	r2, [pc, #524]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a80      	ldr	r2, [pc, #512]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fb2a 	bl	8000d24 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe fb26 	bl	8000d24 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1fb      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0xc0>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fb16 	bl	8000d24 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe fb12 	bl	8000d24 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e1e7      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	4b6c      	ldr	r3, [pc, #432]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0xe8>
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d063      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272a:	4b65      	ldr	r3, [pc, #404]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002736:	4b62      	ldr	r3, [pc, #392]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273e:	2b08      	cmp	r3, #8
 8002740:	d11c      	bne.n	800277c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002742:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d116      	bne.n	800277c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	4b5c      	ldr	r3, [pc, #368]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_RCC_OscConfig+0x152>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d001      	beq.n	8002766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e1bb      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002766:	4b56      	ldr	r3, [pc, #344]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4952      	ldr	r1, [pc, #328]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277a:	e03a      	b.n	80027f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d020      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <HAL_RCC_OscConfig+0x2b0>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe facb 	bl	8000d24 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002792:	f7fe fac7 	bl	8000d24 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e19c      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4940      	ldr	r1, [pc, #256]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
 80027c4:	e015      	b.n	80027f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c6:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <HAL_RCC_OscConfig+0x2b0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe faaa 	bl	8000d24 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d4:	f7fe faa6 	bl	8000d24 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e17b      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d030      	beq.n	8002860 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_OscConfig+0x2b4>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7fe fa8a 	bl	8000d24 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002814:	f7fe fa86 	bl	8000d24 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e15b      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x200>
 8002832:	e015      	b.n	8002860 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x2b4>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fe fa73 	bl	8000d24 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002842:	f7fe fa6f 	bl	8000d24 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e144      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a0 	beq.w	80029ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_OscConfig+0x2b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d121      	bne.n	80028ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_RCC_OscConfig+0x2b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_RCC_OscConfig+0x2b8>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fa35 	bl	8000d24 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e011      	b.n	80028e2 <HAL_RCC_OscConfig+0x2ce>
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470000 	.word	0x42470000
 80028c8:	42470e80 	.word	0x42470e80
 80028cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d0:	f7fe fa28 	bl	8000d24 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e0fd      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4b81      	ldr	r3, [pc, #516]	; (8002ae8 <HAL_RCC_OscConfig+0x4d4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d106      	bne.n	8002904 <HAL_RCC_OscConfig+0x2f0>
 80028f6:	4b7d      	ldr	r3, [pc, #500]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a7c      	ldr	r2, [pc, #496]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	e01c      	b.n	800293e <HAL_RCC_OscConfig+0x32a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0x312>
 800290c:	4b77      	ldr	r3, [pc, #476]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a76      	ldr	r2, [pc, #472]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
 8002918:	4b74      	ldr	r3, [pc, #464]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a73      	ldr	r2, [pc, #460]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	e00b      	b.n	800293e <HAL_RCC_OscConfig+0x32a>
 8002926:	4b71      	ldr	r3, [pc, #452]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a70      	ldr	r2, [pc, #448]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
 8002932:	4b6e      	ldr	r3, [pc, #440]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a6d      	ldr	r2, [pc, #436]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d015      	beq.n	8002972 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe f9ed 	bl	8000d24 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe f9e9 	bl	8000d24 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0bc      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	4b61      	ldr	r3, [pc, #388]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ee      	beq.n	800294e <HAL_RCC_OscConfig+0x33a>
 8002970:	e014      	b.n	800299c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7fe f9d7 	bl	8000d24 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	e00a      	b.n	8002990 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe f9d3 	bl	8000d24 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e0a6      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	4b56      	ldr	r3, [pc, #344]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ee      	bne.n	800297a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a2:	4b52      	ldr	r3, [pc, #328]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a51      	ldr	r2, [pc, #324]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80029a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8092 	beq.w	8002adc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b8:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d05c      	beq.n	8002a7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d141      	bne.n	8002a50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <HAL_RCC_OscConfig+0x4dc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe f9a7 	bl	8000d24 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe f9a3 	bl	8000d24 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e078      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ec:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	019b      	lsls	r3, r3, #6
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	061b      	lsls	r3, r3, #24
 8002a1c:	4933      	ldr	r1, [pc, #204]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a22:	4b33      	ldr	r3, [pc, #204]	; (8002af0 <HAL_RCC_OscConfig+0x4dc>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe f97c 	bl	8000d24 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe f978 	bl	8000d24 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e04d      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x41c>
 8002a4e:	e045      	b.n	8002adc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x4dc>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe f965 	bl	8000d24 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe f961 	bl	8000d24 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e036      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f0      	bne.n	8002a5e <HAL_RCC_OscConfig+0x44a>
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e029      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_RCC_OscConfig+0x4d8>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d115      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	40023800 	.word	0x40023800
 8002af0:	42470060 	.word	0x42470060

08002af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0cc      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b08:	4b68      	ldr	r3, [pc, #416]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d90c      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b65      	ldr	r3, [pc, #404]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b63      	ldr	r3, [pc, #396]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0b8      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6c:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	494d      	ldr	r1, [pc, #308]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d044      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d119      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e07f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e067      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd2:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f023 0203 	bic.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4934      	ldr	r1, [pc, #208]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be4:	f7fe f89e 	bl	8000d24 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bec:	f7fe f89a 	bl	8000d24 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e04f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 020c 	and.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d1eb      	bne.n	8002bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d20c      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b22      	ldr	r3, [pc, #136]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e032      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c7a:	f000 f821 	bl	8002cc0 <HAL_RCC_GetSysClockFreq>
 8002c7e:	4601      	mov	r1, r0
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	5cd3      	ldrb	r3, [r2, r3]
 8002c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd ff06 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023c00 	.word	0x40023c00
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	0800a084 	.word	0x0800a084
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d007      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x32>
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x38>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 80b4 	bne.w	8002e54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cee:	60bb      	str	r3, [r7, #8]
       break;
 8002cf0:	e0b3      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf2:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002cf4:	60bb      	str	r3, [r7, #8]
      break;
 8002cf6:	e0b0      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4b5a      	ldr	r3, [pc, #360]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d02:	4b58      	ldr	r3, [pc, #352]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d04a      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0e:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	ea03 0501 	and.w	r5, r3, r1
 8002d24:	ea04 0602 	and.w	r6, r4, r2
 8002d28:	4629      	mov	r1, r5
 8002d2a:	4632      	mov	r2, r6
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	f04f 0400 	mov.w	r4, #0
 8002d34:	0154      	lsls	r4, r2, #5
 8002d36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d3a:	014b      	lsls	r3, r1, #5
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4622      	mov	r2, r4
 8002d40:	1b49      	subs	r1, r1, r5
 8002d42:	eb62 0206 	sbc.w	r2, r2, r6
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	f04f 0400 	mov.w	r4, #0
 8002d4e:	0194      	lsls	r4, r2, #6
 8002d50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d54:	018b      	lsls	r3, r1, #6
 8002d56:	1a5b      	subs	r3, r3, r1
 8002d58:	eb64 0402 	sbc.w	r4, r4, r2
 8002d5c:	f04f 0100 	mov.w	r1, #0
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	00e2      	lsls	r2, r4, #3
 8002d66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d6a:	00d9      	lsls	r1, r3, #3
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4614      	mov	r4, r2
 8002d70:	195b      	adds	r3, r3, r5
 8002d72:	eb44 0406 	adc.w	r4, r4, r6
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	0262      	lsls	r2, r4, #9
 8002d80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d84:	0259      	lsls	r1, r3, #9
 8002d86:	460b      	mov	r3, r1
 8002d88:	4614      	mov	r4, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f04f 0400 	mov.w	r4, #0
 8002d94:	461a      	mov	r2, r3
 8002d96:	4623      	mov	r3, r4
 8002d98:	f7fd fa6a 	bl	8000270 <__aeabi_uldivmod>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	460c      	mov	r4, r1
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e049      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da4:	4b2f      	ldr	r3, [pc, #188]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	f04f 0400 	mov.w	r4, #0
 8002dae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	ea03 0501 	and.w	r5, r3, r1
 8002dba:	ea04 0602 	and.w	r6, r4, r2
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	4632      	mov	r2, r6
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	f04f 0400 	mov.w	r4, #0
 8002dca:	0154      	lsls	r4, r2, #5
 8002dcc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dd0:	014b      	lsls	r3, r1, #5
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4622      	mov	r2, r4
 8002dd6:	1b49      	subs	r1, r1, r5
 8002dd8:	eb62 0206 	sbc.w	r2, r2, r6
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	f04f 0400 	mov.w	r4, #0
 8002de4:	0194      	lsls	r4, r2, #6
 8002de6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dea:	018b      	lsls	r3, r1, #6
 8002dec:	1a5b      	subs	r3, r3, r1
 8002dee:	eb64 0402 	sbc.w	r4, r4, r2
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	00e2      	lsls	r2, r4, #3
 8002dfc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e00:	00d9      	lsls	r1, r3, #3
 8002e02:	460b      	mov	r3, r1
 8002e04:	4614      	mov	r4, r2
 8002e06:	195b      	adds	r3, r3, r5
 8002e08:	eb44 0406 	adc.w	r4, r4, r6
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	02a2      	lsls	r2, r4, #10
 8002e16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e1a:	0299      	lsls	r1, r3, #10
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4614      	mov	r4, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	4621      	mov	r1, r4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f04f 0400 	mov.w	r4, #0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4623      	mov	r3, r4
 8002e2e:	f7fd fa1f 	bl	8000270 <__aeabi_uldivmod>
 8002e32:	4603      	mov	r3, r0
 8002e34:	460c      	mov	r4, r1
 8002e36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	3301      	adds	r3, #1
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	60bb      	str	r3, [r7, #8]
      break;
 8002e52:	e002      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e56:	60bb      	str	r3, [r7, #8]
      break;
 8002e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000

08002e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e8c:	f7ff fff0 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002e90:	4601      	mov	r1, r0
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0a9b      	lsrs	r3, r3, #10
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4a03      	ldr	r2, [pc, #12]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	0800a094 	.word	0x0800a094

08002eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0203 	and.w	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ef2:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <HAL_RCC_GetClockConfig+0x60>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	601a      	str	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e01d      	b.n	8002f62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f815 	bl	8002f6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f000 f968 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b06      	cmp	r3, #6
 8002fa6:	d007      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d122      	bne.n	8003022 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d11b      	bne.n	8003022 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f06f 0202 	mvn.w	r2, #2
 8002ff2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f8ee 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 800300e:	e005      	b.n	800301c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f8e0 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8f1 	bl	80031fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d122      	bne.n	8003076 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	d11b      	bne.n	8003076 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f06f 0204 	mvn.w	r2, #4
 8003046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8c4 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 8003062:	e005      	b.n	8003070 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f8b6 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8c7 	bl	80031fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d122      	bne.n	80030ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b08      	cmp	r3, #8
 8003090:	d11b      	bne.n	80030ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f06f 0208 	mvn.w	r2, #8
 800309a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2204      	movs	r2, #4
 80030a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f89a 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 80030b6:	e005      	b.n	80030c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f88c 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f89d 	bl	80031fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d122      	bne.n	800311e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d11b      	bne.n	800311e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f06f 0210 	mvn.w	r2, #16
 80030ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2208      	movs	r2, #8
 80030f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f870 	bl	80031ea <HAL_TIM_IC_CaptureCallback>
 800310a:	e005      	b.n	8003118 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f862 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f873 	bl	80031fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d10e      	bne.n	800314a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d107      	bne.n	800314a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f06f 0201 	mvn.w	r2, #1
 8003142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fd fc6f 	bl	8000a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d10e      	bne.n	8003176 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b80      	cmp	r3, #128	; 0x80
 8003164:	d107      	bne.n	8003176 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800316e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f903 	bl	800337c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d10e      	bne.n	80031a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d107      	bne.n	80031a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800319a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f838 	bl	8003212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d10e      	bne.n	80031ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d107      	bne.n	80031ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f06f 0220 	mvn.w	r2, #32
 80031c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8cd 	bl	8003368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a40      	ldr	r2, [pc, #256]	; (800333c <TIM_Base_SetConfig+0x114>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d00f      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3d      	ldr	r2, [pc, #244]	; (8003340 <TIM_Base_SetConfig+0x118>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3c      	ldr	r2, [pc, #240]	; (8003344 <TIM_Base_SetConfig+0x11c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3b      	ldr	r2, [pc, #236]	; (8003348 <TIM_Base_SetConfig+0x120>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3a      	ldr	r2, [pc, #232]	; (800334c <TIM_Base_SetConfig+0x124>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2f      	ldr	r2, [pc, #188]	; (800333c <TIM_Base_SetConfig+0x114>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d027      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2c      	ldr	r2, [pc, #176]	; (8003340 <TIM_Base_SetConfig+0x118>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d023      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2b      	ldr	r2, [pc, #172]	; (8003344 <TIM_Base_SetConfig+0x11c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01f      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2a      	ldr	r2, [pc, #168]	; (8003348 <TIM_Base_SetConfig+0x120>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a29      	ldr	r2, [pc, #164]	; (800334c <TIM_Base_SetConfig+0x124>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d017      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a28      	ldr	r2, [pc, #160]	; (8003350 <TIM_Base_SetConfig+0x128>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <TIM_Base_SetConfig+0x12c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a26      	ldr	r2, [pc, #152]	; (8003358 <TIM_Base_SetConfig+0x130>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a25      	ldr	r2, [pc, #148]	; (800335c <TIM_Base_SetConfig+0x134>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a24      	ldr	r2, [pc, #144]	; (8003360 <TIM_Base_SetConfig+0x138>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a23      	ldr	r2, [pc, #140]	; (8003364 <TIM_Base_SetConfig+0x13c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <TIM_Base_SetConfig+0x114>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0xf8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a0c      	ldr	r2, [pc, #48]	; (800334c <TIM_Base_SetConfig+0x124>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d103      	bne.n	8003328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	615a      	str	r2, [r3, #20]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40010400 	.word	0x40010400
 8003350:	40014000 	.word	0x40014000
 8003354:	40014400 	.word	0x40014400
 8003358:	40014800 	.word	0x40014800
 800335c:	40001800 	.word	0x40001800
 8003360:	40001c00 	.word	0x40001c00
 8003364:	40002000 	.word	0x40002000

08003368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003390:	b084      	sub	sp, #16
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	f107 001c 	add.w	r0, r7, #28
 800339e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d122      	bne.n	80033ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f001 fac6 	bl	8004974 <USB_CoreReset>
 80033e8:	4603      	mov	r3, r0
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e01a      	b.n	8003424 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f001 faba 	bl	8004974 <USB_CoreReset>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38
 8003416:	e005      	b.n	8003424 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	2b01      	cmp	r3, #1
 8003428:	d10b      	bne.n	8003442 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f043 0206 	orr.w	r2, r3, #6
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800344e:	b004      	add	sp, #16
 8003450:	4770      	bx	lr
	...

08003454 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d165      	bne.n	8003534 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4a41      	ldr	r2, [pc, #260]	; (8003570 <USB_SetTurnaroundTime+0x11c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d906      	bls.n	800347e <USB_SetTurnaroundTime+0x2a>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4a40      	ldr	r2, [pc, #256]	; (8003574 <USB_SetTurnaroundTime+0x120>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d802      	bhi.n	800347e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003478:	230f      	movs	r3, #15
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	e062      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4a3c      	ldr	r2, [pc, #240]	; (8003574 <USB_SetTurnaroundTime+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d906      	bls.n	8003494 <USB_SetTurnaroundTime+0x40>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4a3b      	ldr	r2, [pc, #236]	; (8003578 <USB_SetTurnaroundTime+0x124>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d802      	bhi.n	8003494 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800348e:	230e      	movs	r3, #14
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e057      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4a38      	ldr	r2, [pc, #224]	; (8003578 <USB_SetTurnaroundTime+0x124>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d906      	bls.n	80034aa <USB_SetTurnaroundTime+0x56>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a37      	ldr	r2, [pc, #220]	; (800357c <USB_SetTurnaroundTime+0x128>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d802      	bhi.n	80034aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034a4:	230d      	movs	r3, #13
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e04c      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4a33      	ldr	r2, [pc, #204]	; (800357c <USB_SetTurnaroundTime+0x128>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d906      	bls.n	80034c0 <USB_SetTurnaroundTime+0x6c>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4a32      	ldr	r2, [pc, #200]	; (8003580 <USB_SetTurnaroundTime+0x12c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d802      	bhi.n	80034c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034ba:	230c      	movs	r3, #12
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	e041      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4a2f      	ldr	r2, [pc, #188]	; (8003580 <USB_SetTurnaroundTime+0x12c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d906      	bls.n	80034d6 <USB_SetTurnaroundTime+0x82>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <USB_SetTurnaroundTime+0x130>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d802      	bhi.n	80034d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80034d0:	230b      	movs	r3, #11
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	e036      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4a2a      	ldr	r2, [pc, #168]	; (8003584 <USB_SetTurnaroundTime+0x130>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d906      	bls.n	80034ec <USB_SetTurnaroundTime+0x98>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4a29      	ldr	r2, [pc, #164]	; (8003588 <USB_SetTurnaroundTime+0x134>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d802      	bhi.n	80034ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034e6:	230a      	movs	r3, #10
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	e02b      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4a26      	ldr	r2, [pc, #152]	; (8003588 <USB_SetTurnaroundTime+0x134>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d906      	bls.n	8003502 <USB_SetTurnaroundTime+0xae>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4a25      	ldr	r2, [pc, #148]	; (800358c <USB_SetTurnaroundTime+0x138>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d802      	bhi.n	8003502 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034fc:	2309      	movs	r3, #9
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e020      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4a21      	ldr	r2, [pc, #132]	; (800358c <USB_SetTurnaroundTime+0x138>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d906      	bls.n	8003518 <USB_SetTurnaroundTime+0xc4>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <USB_SetTurnaroundTime+0x13c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d802      	bhi.n	8003518 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003512:	2308      	movs	r3, #8
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e015      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <USB_SetTurnaroundTime+0x13c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d906      	bls.n	800352e <USB_SetTurnaroundTime+0xda>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <USB_SetTurnaroundTime+0x140>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d802      	bhi.n	800352e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003528:	2307      	movs	r3, #7
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	e00a      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800352e:	2306      	movs	r3, #6
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	e007      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800353a:	2309      	movs	r3, #9
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e001      	b.n	8003544 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003540:	2309      	movs	r3, #9
 8003542:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	029b      	lsls	r3, r3, #10
 8003558:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	00d8acbf 	.word	0x00d8acbf
 8003574:	00e4e1bf 	.word	0x00e4e1bf
 8003578:	00f423ff 	.word	0x00f423ff
 800357c:	0106737f 	.word	0x0106737f
 8003580:	011a499f 	.word	0x011a499f
 8003584:	01312cff 	.word	0x01312cff
 8003588:	014ca43f 	.word	0x014ca43f
 800358c:	016e35ff 	.word	0x016e35ff
 8003590:	01a6ab1f 	.word	0x01a6ab1f
 8003594:	01e847ff 	.word	0x01e847ff

08003598 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f043 0201 	orr.w	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 0201 	bic.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d106      	bne.n	8003608 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	e00b      	b.n	8003620 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	e001      	b.n	8003620 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e003      	b.n	8003628 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003620:	2032      	movs	r0, #50	; 0x32
 8003622:	f7fd fb8b 	bl	8000d3c <HAL_Delay>

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003630:	b084      	sub	sp, #16
 8003632:	b580      	push	{r7, lr}
 8003634:	b086      	sub	sp, #24
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800363e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	e009      	b.n	8003664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	3340      	adds	r3, #64	; 0x40
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	2200      	movs	r2, #0
 800365c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3301      	adds	r3, #1
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b0e      	cmp	r3, #14
 8003668:	d9f2      	bls.n	8003650 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800366a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d11c      	bne.n	80036aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367e:	f043 0302 	orr.w	r3, r3, #2
 8003682:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
 80036a8:	e00b      	b.n	80036c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036c8:	461a      	mov	r2, r3
 80036ca:	2300      	movs	r3, #0
 80036cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d4:	4619      	mov	r1, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036dc:	461a      	mov	r2, r3
 80036de:	680b      	ldr	r3, [r1, #0]
 80036e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10c      	bne.n	8003702 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036ee:	2100      	movs	r1, #0
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f949 	bl	8003988 <USB_SetDevSpeed>
 80036f6:	e008      	b.n	800370a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036f8:	2101      	movs	r1, #1
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f944 	bl	8003988 <USB_SetDevSpeed>
 8003700:	e003      	b.n	800370a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003702:	2103      	movs	r1, #3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f93f 	bl	8003988 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800370a:	2110      	movs	r1, #16
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f8f3 	bl	80038f8 <USB_FlushTxFifo>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f911 	bl	8003944 <USB_FlushRxFifo>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003732:	461a      	mov	r2, r3
 8003734:	2300      	movs	r3, #0
 8003736:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	461a      	mov	r2, r3
 8003740:	2300      	movs	r3, #0
 8003742:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374a:	461a      	mov	r2, r3
 800374c:	2300      	movs	r3, #0
 800374e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e043      	b.n	80037de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800376c:	d118      	bne.n	80037a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003780:	461a      	mov	r2, r3
 8003782:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	e013      	b.n	80037b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003796:	461a      	mov	r2, r3
 8003798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e008      	b.n	80037b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ac:	461a      	mov	r2, r3
 80037ae:	2300      	movs	r3, #0
 80037b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037be:	461a      	mov	r2, r3
 80037c0:	2300      	movs	r3, #0
 80037c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d0:	461a      	mov	r2, r3
 80037d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	3301      	adds	r3, #1
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3b7      	bcc.n	8003756 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	e043      	b.n	8003874 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003802:	d118      	bne.n	8003836 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003816:	461a      	mov	r2, r3
 8003818:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e013      	b.n	8003848 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382c:	461a      	mov	r2, r3
 800382e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	e008      	b.n	8003848 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003842:	461a      	mov	r2, r3
 8003844:	2300      	movs	r3, #0
 8003846:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003854:	461a      	mov	r2, r3
 8003856:	2300      	movs	r3, #0
 8003858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003866:	461a      	mov	r2, r3
 8003868:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800386c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	3301      	adds	r3, #1
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	429a      	cmp	r2, r3
 800387a:	d3b7      	bcc.n	80037ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800388a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800388e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800389c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f043 0210 	orr.w	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <USB_DevInit+0x2c4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f043 0208 	orr.w	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d107      	bne.n	80038e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038dc:	f043 0304 	orr.w	r3, r3, #4
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038f0:	b004      	add	sp, #16
 80038f2:	4770      	bx	lr
 80038f4:	803c3800 	.word	0x803c3800

080038f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	f043 0220 	orr.w	r2, r3, #32
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3301      	adds	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <USB_FlushTxFifo+0x48>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e006      	b.n	8003932 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b20      	cmp	r3, #32
 800392e:	d0f0      	beq.n	8003912 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	00030d40 	.word	0x00030d40

08003944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2210      	movs	r2, #16
 8003954:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3301      	adds	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a09      	ldr	r2, [pc, #36]	; (8003984 <USB_FlushRxFifo+0x40>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e006      	b.n	8003976 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b10      	cmp	r3, #16
 8003972:	d0f0      	beq.n	8003956 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	00030d40 	.word	0x00030d40

08003988 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b087      	sub	sp, #28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0306 	and.w	r3, r3, #6
 80039d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
 80039de:	e00a      	b.n	80039f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d002      	beq.n	80039ec <USB_GetDevSpeed+0x32>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b06      	cmp	r3, #6
 80039ea:	d102      	bne.n	80039f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039ec:	2302      	movs	r3, #2
 80039ee:	75fb      	strb	r3, [r7, #23]
 80039f0:	e001      	b.n	80039f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039f2:	230f      	movs	r3, #15
 80039f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	785b      	ldrb	r3, [r3, #1]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d13a      	bne.n	8003a96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d155      	bne.n	8003b04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	78db      	ldrb	r3, [r3, #3]
 8003a72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	059b      	lsls	r3, r3, #22
 8003a7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	0151      	lsls	r1, r2, #5
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	440a      	add	r2, r1
 8003a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e036      	b.n	8003b04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	041b      	lsls	r3, r3, #16
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11a      	bne.n	8003b04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	78db      	ldrb	r3, [r3, #3]
 8003ae8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003aea:	430b      	orrs	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	0151      	lsls	r1, r2, #5
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	440a      	add	r2, r1
 8003af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d161      	bne.n	8003bf4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b46:	d11f      	bne.n	8003b88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	0151      	lsls	r1, r2, #5
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	68f9      	ldr	r1, [r7, #12]
 8003ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba8:	4013      	ands	r3, r2
 8003baa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	0159      	lsls	r1, r3, #5
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	440b      	add	r3, r1
 8003be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bea:	4619      	mov	r1, r3
 8003bec:	4b35      	ldr	r3, [pc, #212]	; (8003cc4 <USB_DeactivateEndpoint+0x1b0>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
 8003bf2:	e060      	b.n	8003cb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c0a:	d11f      	bne.n	8003c4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	0151      	lsls	r1, r2, #5
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	440a      	add	r2, r1
 8003c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	0151      	lsls	r1, r2, #5
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	440a      	add	r2, r1
 8003c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	43db      	mvns	r3, r3
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c90:	4013      	ands	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	0159      	lsls	r1, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	440b      	add	r3, r1
 8003caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <USB_DeactivateEndpoint+0x1b4>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	ec337800 	.word	0xec337800
 8003cc8:	eff37800 	.word	0xeff37800

08003ccc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	785b      	ldrb	r3, [r3, #1]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f040 815c 	bne.w	8003fa6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d132      	bne.n	8003d5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d54:	0cdb      	lsrs	r3, r3, #19
 8003d56:	04db      	lsls	r3, r3, #19
 8003d58:	6113      	str	r3, [r2, #16]
 8003d5a:	e074      	b.n	8003e46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d76:	0cdb      	lsrs	r3, r3, #19
 8003d78:	04db      	lsls	r3, r3, #19
 8003d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	0151      	lsls	r1, r2, #5
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	440a      	add	r2, r1
 8003d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6959      	ldr	r1, [r3, #20]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	440b      	add	r3, r1
 8003db8:	1e59      	subs	r1, r3, #1
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc2:	04d9      	lsls	r1, r3, #19
 8003dc4:	4b9d      	ldr	r3, [pc, #628]	; (800403c <USB_EPStartXfer+0x370>)
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	69b9      	ldr	r1, [r7, #24]
 8003dca:	0148      	lsls	r0, r1, #5
 8003dcc:	69f9      	ldr	r1, [r7, #28]
 8003dce:	4401      	add	r1, r0
 8003dd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dee:	69b9      	ldr	r1, [r7, #24]
 8003df0:	0148      	lsls	r0, r1, #5
 8003df2:	69f9      	ldr	r1, [r7, #28]
 8003df4:	4401      	add	r1, r0
 8003df6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	78db      	ldrb	r3, [r3, #3]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d11f      	bne.n	8003e46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	0151      	lsls	r1, r2, #5
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d14b      	bne.n	8003ee4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	78db      	ldrb	r3, [r3, #3]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d128      	bne.n	8003ec2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d110      	bne.n	8003ea2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	e00f      	b.n	8003ec2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	0151      	lsls	r1, r2, #5
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	440a      	add	r2, r1
 8003eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003edc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e12f      	b.n	8004144 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	78db      	ldrb	r3, [r3, #3]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d015      	beq.n	8003f38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8117 	beq.w	8004144 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	2101      	movs	r1, #1
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	69f9      	ldr	r1, [r7, #28]
 8003f2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f32:	4313      	orrs	r3, r2
 8003f34:	634b      	str	r3, [r1, #52]	; 0x34
 8003f36:	e105      	b.n	8004144 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d110      	bne.n	8003f6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	0151      	lsls	r1, r2, #5
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	440a      	add	r2, r1
 8003f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	e00f      	b.n	8003f8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	68d9      	ldr	r1, [r3, #12]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781a      	ldrb	r2, [r3, #0]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	b298      	uxth	r0, r3
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fa2b 	bl	80043fa <USB_WritePacket>
 8003fa4:	e0ce      	b.n	8004144 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc0:	0cdb      	lsrs	r3, r3, #19
 8003fc2:	04db      	lsls	r3, r3, #19
 8003fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fe4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fe8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d126      	bne.n	8004040 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004008:	69b9      	ldr	r1, [r7, #24]
 800400a:	0148      	lsls	r0, r1, #5
 800400c:	69f9      	ldr	r1, [r7, #28]
 800400e:	4401      	add	r1, r0
 8004010:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004014:	4313      	orrs	r3, r2
 8004016:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	440a      	add	r2, r1
 800402e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004036:	6113      	str	r3, [r2, #16]
 8004038:	e036      	b.n	80040a8 <USB_EPStartXfer+0x3dc>
 800403a:	bf00      	nop
 800403c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4413      	add	r3, r2
 800404a:	1e5a      	subs	r2, r3, #1
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	8afb      	ldrh	r3, [r7, #22]
 8004066:	04d9      	lsls	r1, r3, #19
 8004068:	4b39      	ldr	r3, [pc, #228]	; (8004150 <USB_EPStartXfer+0x484>)
 800406a:	400b      	ands	r3, r1
 800406c:	69b9      	ldr	r1, [r7, #24]
 800406e:	0148      	lsls	r0, r1, #5
 8004070:	69f9      	ldr	r1, [r7, #28]
 8004072:	4401      	add	r1, r0
 8004074:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004078:	4313      	orrs	r3, r2
 800407a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	8af9      	ldrh	r1, [r7, #22]
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	0148      	lsls	r0, r1, #5
 800409c:	69f9      	ldr	r1, [r7, #28]
 800409e:	4401      	add	r1, r0
 80040a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040a4:	4313      	orrs	r3, r2
 80040a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d10d      	bne.n	80040ca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	68d9      	ldr	r1, [r3, #12]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	460a      	mov	r2, r1
 80040c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	78db      	ldrb	r3, [r3, #3]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d128      	bne.n	8004124 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d110      	bne.n	8004104 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e00f      	b.n	8004124 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	440a      	add	r2, r1
 800411a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800411e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004122:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800413e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004142:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	1ff80000 	.word	0x1ff80000

08004154 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	2b01      	cmp	r3, #1
 8004172:	f040 80cd 	bne.w	8004310 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d132      	bne.n	80041e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	440a      	add	r2, r1
 8004194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004198:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800419c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041dc:	0cdb      	lsrs	r3, r3, #19
 80041de:	04db      	lsls	r3, r3, #19
 80041e0:	6113      	str	r3, [r2, #16]
 80041e2:	e04e      	b.n	8004282 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fe:	0cdb      	lsrs	r3, r3, #19
 8004200:	04db      	lsls	r3, r3, #19
 8004202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004222:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004226:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	d903      	bls.n	800423c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800425a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	0148      	lsls	r0, r1, #5
 8004276:	6979      	ldr	r1, [r7, #20]
 8004278:	4401      	add	r1, r0
 800427a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800427e:	4313      	orrs	r3, r2
 8004280:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d11e      	bne.n	80042c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429c:	461a      	mov	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	0151      	lsls	r1, r2, #5
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	440a      	add	r2, r1
 80042ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e092      	b.n	80043ec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	0151      	lsls	r1, r2, #5
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	440a      	add	r2, r1
 80042dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d07e      	beq.n	80043ec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	2101      	movs	r1, #1
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800430a:	4313      	orrs	r3, r2
 800430c:	634b      	str	r3, [r1, #52]	; 0x34
 800430e:	e06d      	b.n	80043ec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	0151      	lsls	r1, r2, #5
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	440a      	add	r2, r1
 8004326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800432a:	0cdb      	lsrs	r3, r3, #19
 800432c:	04db      	lsls	r3, r3, #19
 800432e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800434e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004352:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	440a      	add	r2, r1
 800437a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004382:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439a:	6939      	ldr	r1, [r7, #16]
 800439c:	0148      	lsls	r0, r1, #5
 800439e:	6979      	ldr	r1, [r7, #20]
 80043a0:	4401      	add	r1, r0
 80043a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043a6:	4313      	orrs	r3, r2
 80043a8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10d      	bne.n	80043cc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	68d9      	ldr	r1, [r3, #12]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	460a      	mov	r2, r1
 80043ca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b089      	sub	sp, #36	; 0x24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	4611      	mov	r1, r2
 8004406:	461a      	mov	r2, r3
 8004408:	460b      	mov	r3, r1
 800440a:	71fb      	strb	r3, [r7, #7]
 800440c:	4613      	mov	r3, r2
 800440e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004418:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800441c:	2b00      	cmp	r3, #0
 800441e:	d11a      	bne.n	8004456 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004420:	88bb      	ldrh	r3, [r7, #4]
 8004422:	3303      	adds	r3, #3
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004428:	2300      	movs	r3, #0
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	e00f      	b.n	800444e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	031a      	lsls	r2, r3, #12
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	4413      	add	r3, r2
 8004436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443a:	461a      	mov	r2, r3
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3304      	adds	r3, #4
 8004446:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	3301      	adds	r3, #1
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d3eb      	bcc.n	800442e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3724      	adds	r7, #36	; 0x24
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	3303      	adds	r3, #3
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e00b      	b.n	80044a0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	601a      	str	r2, [r3, #0]
    pDest++;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	3304      	adds	r3, #4
 8004498:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	3301      	adds	r3, #1
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d3ef      	bcc.n	8004488 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80044a8:	69fb      	ldr	r3, [r7, #28]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	; 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	785b      	ldrb	r3, [r3, #1]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d12c      	bne.n	800452c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	db12      	blt.n	800450a <USB_EPSetStall+0x54>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00f      	beq.n	800450a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004504:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004508:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	0151      	lsls	r1, r2, #5
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	440a      	add	r2, r1
 8004520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e02b      	b.n	8004584 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	db12      	blt.n	8004564 <USB_EPSetStall+0xae>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00f      	beq.n	8004564 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	0151      	lsls	r1, r2, #5
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	440a      	add	r2, r1
 800455a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800455e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004562:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	0151      	lsls	r1, r2, #5
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	440a      	add	r2, r1
 800457a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800457e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004582:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	785b      	ldrb	r3, [r3, #1]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d128      	bne.n	8004600 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	78db      	ldrb	r3, [r3, #3]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d003      	beq.n	80045de <USB_EPClearStall+0x4c>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	78db      	ldrb	r3, [r3, #3]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d138      	bne.n	8004650 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	0151      	lsls	r1, r2, #5
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	440a      	add	r2, r1
 80045f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e027      	b.n	8004650 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800461e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	78db      	ldrb	r3, [r3, #3]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d003      	beq.n	8004630 <USB_EPClearStall+0x9e>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	78db      	ldrb	r3, [r3, #3]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d10f      	bne.n	8004650 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	460b      	mov	r3, r1
 8004668:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800467c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004680:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004698:	4313      	orrs	r3, r2
 800469a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046c4:	f023 0303 	bic.w	r3, r3, #3
 80046c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d8:	f023 0302 	bic.w	r3, r3, #2
 80046dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800471a:	f043 0302 	orr.w	r3, r3, #2
 800471e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4013      	ands	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004746:	68fb      	ldr	r3, [r7, #12]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	4013      	ands	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	0c1b      	lsrs	r3, r3, #16
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	b29b      	uxth	r3, r3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	4013      	ands	r3, r2
 80047e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80047ea:	68bb      	ldr	r3, [r7, #8]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
 8004828:	01db      	lsls	r3, r3, #7
 800482a:	b2db      	uxtb	r3, r3
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4013      	ands	r3, r2
 8004844:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004846:	68bb      	ldr	r3, [r7, #8]
}
 8004848:	4618      	mov	r0, r3
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f003 0301 	and.w	r3, r3, #1
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800488e:	f023 0307 	bic.w	r3, r3, #7
 8004892:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	460b      	mov	r3, r1
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	333c      	adds	r3, #60	; 0x3c
 80048ce:	3304      	adds	r3, #4
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4a26      	ldr	r2, [pc, #152]	; (8004970 <USB_EP0_OutStart+0xb8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d90a      	bls.n	80048f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ec:	d101      	bne.n	80048f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e037      	b.n	8004962 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	461a      	mov	r2, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800490c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004910:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004920:	f043 0318 	orr.w	r3, r3, #24
 8004924:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004934:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004938:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800493a:	7afb      	ldrb	r3, [r7, #11]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d10f      	bne.n	8004960 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004946:	461a      	mov	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800495a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800495e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	4f54300a 	.word	0x4f54300a

08004974 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3301      	adds	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <USB_CoreReset+0x64>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e01b      	b.n	80049ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	daf2      	bge.n	8004980 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f043 0201 	orr.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3301      	adds	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <USB_CoreReset+0x64>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d901      	bls.n	80049bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e006      	b.n	80049ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d0f0      	beq.n	80049aa <USB_CoreReset+0x36>

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	00030d40 	.word	0x00030d40

080049dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80049e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80049ec:	f004 fe9a 	bl	8009724 <malloc>
 80049f0:	4603      	mov	r3, r0
 80049f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d105      	bne.n	8004a06 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004a02:	2302      	movs	r3, #2
 8004a04:	e066      	b.n	8004ad4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7c1b      	ldrb	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d119      	bne.n	8004a4a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	2181      	movs	r1, #129	; 0x81
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f004 fd07 	bl	8009432 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a2e:	2202      	movs	r2, #2
 8004a30:	2101      	movs	r1, #1
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f004 fcfd 	bl	8009432 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2210      	movs	r2, #16
 8004a44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004a48:	e016      	b.n	8004a78 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a4a:	2340      	movs	r3, #64	; 0x40
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	2181      	movs	r1, #129	; 0x81
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f004 fcee 	bl	8009432 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a5c:	2340      	movs	r3, #64	; 0x40
 8004a5e:	2202      	movs	r2, #2
 8004a60:	2101      	movs	r1, #1
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f004 fce5 	bl	8009432 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2210      	movs	r2, #16
 8004a74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004a78:	2308      	movs	r3, #8
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	2182      	movs	r1, #130	; 0x82
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f004 fcd7 	bl	8009432 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	7c1b      	ldrb	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ab8:	2101      	movs	r1, #1
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f004 fda8 	bl	8009610 <USBD_LL_PrepareReceive>
 8004ac0:	e007      	b.n	8004ad2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ac8:	2340      	movs	r3, #64	; 0x40
 8004aca:	2101      	movs	r1, #1
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f004 fd9f 	bl	8009610 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004aec:	2181      	movs	r1, #129	; 0x81
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f004 fcc5 	bl	800947e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004afa:	2101      	movs	r1, #1
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f004 fcbe 	bl	800947e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004b0a:	2182      	movs	r1, #130	; 0x82
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f004 fcb6 	bl	800947e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f004 fdf9 	bl	8009734 <free>
    pdev->pClassData = NULL;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b64:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d03a      	beq.n	8004bf4 <USBD_CDC_Setup+0xa0>
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	f040 8097 	bne.w	8004cb2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	88db      	ldrh	r3, [r3, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d029      	beq.n	8004be0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b25b      	sxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da11      	bge.n	8004bba <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004ba2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	88d2      	ldrh	r2, [r2, #6]
 8004ba8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004baa:	6939      	ldr	r1, [r7, #16]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	88db      	ldrh	r3, [r3, #6]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f001 fa9d 	bl	80060f2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004bb8:	e082      	b.n	8004cc0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	785a      	ldrb	r2, [r3, #1]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	88db      	ldrh	r3, [r3, #6]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004bd0:	6939      	ldr	r1, [r7, #16]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	88db      	ldrh	r3, [r3, #6]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f001 fab6 	bl	800614a <USBD_CtlPrepareRx>
    break;
 8004bde:	e06f      	b.n	8004cc0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	7850      	ldrb	r0, [r2, #1]
 8004bec:	2200      	movs	r2, #0
 8004bee:	6839      	ldr	r1, [r7, #0]
 8004bf0:	4798      	blx	r3
    break;
 8004bf2:	e065      	b.n	8004cc0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	785b      	ldrb	r3, [r3, #1]
 8004bf8:	2b0b      	cmp	r3, #11
 8004bfa:	d84f      	bhi.n	8004c9c <USBD_CDC_Setup+0x148>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <USBD_CDC_Setup+0xb0>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c35 	.word	0x08004c35
 8004c08:	08004cab 	.word	0x08004cab
 8004c0c:	08004c9d 	.word	0x08004c9d
 8004c10:	08004c9d 	.word	0x08004c9d
 8004c14:	08004c9d 	.word	0x08004c9d
 8004c18:	08004c9d 	.word	0x08004c9d
 8004c1c:	08004c9d 	.word	0x08004c9d
 8004c20:	08004c9d 	.word	0x08004c9d
 8004c24:	08004c9d 	.word	0x08004c9d
 8004c28:	08004c9d 	.word	0x08004c9d
 8004c2c:	08004c5d 	.word	0x08004c5d
 8004c30:	08004c85 	.word	0x08004c85
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d107      	bne.n	8004c4e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	2202      	movs	r2, #2
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f001 fa53 	bl	80060f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004c4c:	e030      	b.n	8004cb0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004c4e:	6839      	ldr	r1, [r7, #0]
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f001 f9dd 	bl	8006010 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c56:	2303      	movs	r3, #3
 8004c58:	75fb      	strb	r3, [r7, #23]
      break;
 8004c5a:	e029      	b.n	8004cb0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d107      	bne.n	8004c76 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c66:	f107 030f 	add.w	r3, r7, #15
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f001 fa3f 	bl	80060f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004c74:	e01c      	b.n	8004cb0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 f9c9 	bl	8006010 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	75fb      	strb	r3, [r7, #23]
      break;
 8004c82:	e015      	b.n	8004cb0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d00f      	beq.n	8004cae <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004c8e:	6839      	ldr	r1, [r7, #0]
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f001 f9bd 	bl	8006010 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c96:	2303      	movs	r3, #3
 8004c98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c9a:	e008      	b.n	8004cae <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f001 f9b6 	bl	8006010 <USBD_CtlError>
      ret = USBD_FAIL;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca8:	e002      	b.n	8004cb0 <USBD_CDC_Setup+0x15c>
      break;
 8004caa:	bf00      	nop
 8004cac:	e008      	b.n	8004cc0 <USBD_CDC_Setup+0x16c>
      break;
 8004cae:	bf00      	nop
    }
    break;
 8004cb0:	e006      	b.n	8004cc0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004cb2:	6839      	ldr	r1, [r7, #0]
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 f9ab 	bl	8006010 <USBD_CtlError>
    ret = USBD_FAIL;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	75fb      	strb	r3, [r7, #23]
    break;
 8004cbe:	bf00      	nop
  }

  return (uint8_t)ret;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop

08004ccc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004cde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e049      	b.n	8004d82 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3318      	adds	r3, #24
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d029      	beq.n	8004d60 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	3318      	adds	r3, #24
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	78f9      	ldrb	r1, [r7, #3]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	460b      	mov	r3, r1
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	1a5b      	subs	r3, r3, r1
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4403      	add	r3, r0
 8004d2c:	3344      	adds	r3, #68	; 0x44
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d34:	fb03 f301 	mul.w	r3, r3, r1
 8004d38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d110      	bne.n	8004d60 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3318      	adds	r3, #24
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d52:	78f9      	ldrb	r1, [r7, #3]
 8004d54:	2300      	movs	r3, #0
 8004d56:	2200      	movs	r2, #0
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f004 fc38 	bl	80095ce <USBD_LL_Transmit>
 8004d5e:	e00f      	b.n	8004d80 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e015      	b.n	8004dd8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f004 fc4e 	bl	8009652 <USBD_LL_GetRxDataSize>
 8004db6:	4602      	mov	r2, r0
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d015      	beq.n	8004e26 <USBD_CDC_EP0_RxReady+0x46>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e00:	2bff      	cmp	r3, #255	; 0xff
 8004e02:	d010      	beq.n	8004e26 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004e12:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e1a:	b292      	uxth	r2, r2
 8004e1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	22ff      	movs	r2, #255	; 0xff
 8004e22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2243      	movs	r2, #67	; 0x43
 8004e3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004e3e:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	20000094 	.word	0x20000094

08004e50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2243      	movs	r2, #67	; 0x43
 8004e5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004e5e:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	20000050 	.word	0x20000050

08004e70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2243      	movs	r2, #67	; 0x43
 8004e7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004e7e:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	200000d8 	.word	0x200000d8

08004e90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	220a      	movs	r2, #10
 8004e9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004e9e:	4b03      	ldr	r3, [pc, #12]	; (8004eac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	2000000c 	.word	0x2000000c

08004eb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e004      	b.n	8004ece <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b087      	sub	sp, #28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f1c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f42:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e01a      	b.n	8004f8c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d114      	bne.n	8004f8a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f7e:	2181      	movs	r1, #129	; 0x81
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f004 fb24 	bl	80095ce <USBD_LL_Transmit>

    ret = USBD_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e016      	b.n	8004fe0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	7c1b      	ldrb	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f004 fb22 	bl	8009610 <USBD_LL_PrepareReceive>
 8004fcc:	e007      	b.n	8004fde <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fd4:	2340      	movs	r3, #64	; 0x40
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f004 fb19 	bl	8009610 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e025      	b.n	800504c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	79fa      	ldrb	r2, [r7, #7]
 800503e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f004 f98f 	bl	8009364 <USBD_LL_Init>
 8005046:	4603      	mov	r3, r0
 8005048:	75fb      	strb	r3, [r7, #23]

  return ret;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005068:	2303      	movs	r3, #3
 800506a:	e010      	b.n	800508e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	f107 020e 	add.w	r2, r7, #14
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
 8005084:	4602      	mov	r2, r0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f004 f9ac 	bl	80093fc <USBD_LL_Start>
 80050a4:	4603      	mov	r3, r0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80050d0:	2303      	movs	r3, #3
 80050d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	78fa      	ldrb	r2, [r7, #3]
 80050e8:	4611      	mov	r1, r2
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	4611      	mov	r1, r2
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
  }

  return USBD_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 ff2c 	bl	8005f9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005152:	461a      	mov	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	2b01      	cmp	r3, #1
 8005166:	d00e      	beq.n	8005186 <USBD_LL_SetupStage+0x5a>
 8005168:	2b01      	cmp	r3, #1
 800516a:	d302      	bcc.n	8005172 <USBD_LL_SetupStage+0x46>
 800516c:	2b02      	cmp	r3, #2
 800516e:	d014      	beq.n	800519a <USBD_LL_SetupStage+0x6e>
 8005170:	e01d      	b.n	80051ae <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fa18 	bl	80055b0 <USBD_StdDevReq>
 8005180:	4603      	mov	r3, r0
 8005182:	73fb      	strb	r3, [r7, #15]
      break;
 8005184:	e020      	b.n	80051c8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa7c 	bl	800568c <USBD_StdItfReq>
 8005194:	4603      	mov	r3, r0
 8005196:	73fb      	strb	r3, [r7, #15]
      break;
 8005198:	e016      	b.n	80051c8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fab8 	bl	8005718 <USBD_StdEPReq>
 80051a8:	4603      	mov	r3, r0
 80051aa:	73fb      	strb	r3, [r7, #15]
      break;
 80051ac:	e00c      	b.n	80051c8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80051b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	4619      	mov	r1, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f004 f97d 	bl	80094bc <USBD_LL_StallEP>
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]
      break;
 80051c6:	bf00      	nop
  }

  return ret;
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	460b      	mov	r3, r1
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80051e0:	7afb      	ldrb	r3, [r7, #11]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d137      	bne.n	8005256 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80051ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d14a      	bne.n	800528e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	429a      	cmp	r2, r3
 8005202:	d913      	bls.n	800522c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	1ad2      	subs	r2, r2, r3
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	4293      	cmp	r3, r2
 800521c:	bf28      	it	cs
 800521e:	4613      	movcs	r3, r2
 8005220:	461a      	mov	r2, r3
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 ffad 	bl	8006184 <USBD_CtlContinueRx>
 800522a:	e030      	b.n	800528e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800523e:	2b03      	cmp	r3, #3
 8005240:	d105      	bne.n	800524e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 ffa9 	bl	80061a6 <USBD_CtlSendStatus>
 8005254:	e01b      	b.n	800528e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d013      	beq.n	800528a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005268:	2b03      	cmp	r3, #3
 800526a:	d10e      	bne.n	800528a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	7afa      	ldrb	r2, [r7, #11]
 8005276:	4611      	mov	r1, r2
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	4798      	blx	r3
 800527c:	4603      	mov	r3, r0
 800527e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
 8005288:	e002      	b.n	8005290 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800528a:	2303      	movs	r3, #3
 800528c:	e000      	b.n	8005290 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	460b      	mov	r3, r1
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80052a6:	7afb      	ldrb	r3, [r7, #11]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d16a      	bne.n	8005382 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3314      	adds	r3, #20
 80052b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d155      	bne.n	8005368 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d914      	bls.n	80052f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	1ad2      	subs	r2, r2, r3
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	461a      	mov	r2, r3
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 ff22 	bl	8006128 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052e4:	2300      	movs	r3, #0
 80052e6:	2200      	movs	r2, #0
 80052e8:	2100      	movs	r1, #0
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f004 f990 	bl	8009610 <USBD_LL_PrepareReceive>
 80052f0:	e03a      	b.n	8005368 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d11c      	bne.n	8005338 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005306:	429a      	cmp	r2, r3
 8005308:	d316      	bcc.n	8005338 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005314:	429a      	cmp	r2, r3
 8005316:	d20f      	bcs.n	8005338 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005318:	2200      	movs	r2, #0
 800531a:	2100      	movs	r1, #0
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 ff03 	bl	8006128 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800532a:	2300      	movs	r3, #0
 800532c:	2200      	movs	r2, #0
 800532e:	2100      	movs	r1, #0
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f004 f96d 	bl	8009610 <USBD_LL_PrepareReceive>
 8005336:	e017      	b.n	8005368 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800534a:	2b03      	cmp	r3, #3
 800534c:	d105      	bne.n	800535a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800535a:	2180      	movs	r1, #128	; 0x80
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f004 f8ad 	bl	80094bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 ff32 	bl	80061cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800536e:	2b01      	cmp	r3, #1
 8005370:	d123      	bne.n	80053ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff fe9b 	bl	80050ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005380:	e01b      	b.n	80053ba <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d013      	beq.n	80053b6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005394:	2b03      	cmp	r3, #3
 8005396:	d10e      	bne.n	80053b6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	7afa      	ldrb	r2, [r7, #11]
 80053a2:	4611      	mov	r1, r2
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	4798      	blx	r3
 80053a8:	4603      	mov	r3, r0
 80053aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
 80053b4:	e002      	b.n	80053bc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e000      	b.n	80053bc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d009      	beq.n	8005408 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6852      	ldr	r2, [r2, #4]
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	4611      	mov	r1, r2
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005408:	2340      	movs	r3, #64	; 0x40
 800540a:	2200      	movs	r2, #0
 800540c:	2100      	movs	r1, #0
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f004 f80f 	bl	8009432 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2240      	movs	r2, #64	; 0x40
 8005420:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	2200      	movs	r2, #0
 8005428:	2180      	movs	r1, #128	; 0x80
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f004 f801 	bl	8009432 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2240      	movs	r2, #64	; 0x40
 800543a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2204      	movs	r2, #4
 800547e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d105      	bne.n	80054ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d10b      	bne.n	80054e6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6852      	ldr	r2, [r2, #4]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	4611      	mov	r1, r2
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	4798      	blx	r3
  }

  return USBD_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005572:	b480      	push	{r7}
 8005574:	b087      	sub	sp, #28
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	3301      	adds	r3, #1
 8005588:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005590:	8a3b      	ldrh	r3, [r7, #16]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	b21a      	sxth	r2, r3
 8005596:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800559a:	4313      	orrs	r3, r2
 800559c:	b21b      	sxth	r3, r3
 800559e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80055a0:	89fb      	ldrh	r3, [r7, #14]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	d004      	beq.n	80055d4 <USBD_StdDevReq+0x24>
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d002      	beq.n	80055d4 <USBD_StdDevReq+0x24>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <USBD_StdDevReq+0x38>
 80055d2:	e050      	b.n	8005676 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	73fb      	strb	r3, [r7, #15]
    break;
 80055e6:	e04b      	b.n	8005680 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	2b09      	cmp	r3, #9
 80055ee:	d83c      	bhi.n	800566a <USBD_StdDevReq+0xba>
 80055f0:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <USBD_StdDevReq+0x48>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	0800564d 	.word	0x0800564d
 80055fc:	08005661 	.word	0x08005661
 8005600:	0800566b 	.word	0x0800566b
 8005604:	08005657 	.word	0x08005657
 8005608:	0800566b 	.word	0x0800566b
 800560c:	0800562b 	.word	0x0800562b
 8005610:	08005621 	.word	0x08005621
 8005614:	0800566b 	.word	0x0800566b
 8005618:	08005643 	.word	0x08005643
 800561c:	08005635 	.word	0x08005635
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9ce 	bl	80059c4 <USBD_GetDescriptor>
      break;
 8005628:	e024      	b.n	8005674 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fb33 	bl	8005c98 <USBD_SetAddress>
      break;
 8005632:	e01f      	b.n	8005674 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005634:	6839      	ldr	r1, [r7, #0]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fb70 	bl	8005d1c <USBD_SetConfig>
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]
      break;
 8005640:	e018      	b.n	8005674 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fc0d 	bl	8005e64 <USBD_GetConfig>
      break;
 800564a:	e013      	b.n	8005674 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fc3c 	bl	8005ecc <USBD_GetStatus>
      break;
 8005654:	e00e      	b.n	8005674 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fc6a 	bl	8005f32 <USBD_SetFeature>
      break;
 800565e:	e009      	b.n	8005674 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fc79 	bl	8005f5a <USBD_ClrFeature>
      break;
 8005668:	e004      	b.n	8005674 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fccf 	bl	8006010 <USBD_CtlError>
      break;
 8005672:	bf00      	nop
    }
    break;
 8005674:	e004      	b.n	8005680 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fcc9 	bl	8006010 <USBD_CtlError>
    break;
 800567e:	bf00      	nop
  }

  return ret;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop

0800568c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d003      	beq.n	80056ae <USBD_StdItfReq+0x22>
 80056a6:	2b40      	cmp	r3, #64	; 0x40
 80056a8:	d001      	beq.n	80056ae <USBD_StdItfReq+0x22>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d12a      	bne.n	8005704 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b4:	3b01      	subs	r3, #1
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d81d      	bhi.n	80056f6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	889b      	ldrh	r3, [r3, #4]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d813      	bhi.n	80056ec <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	88db      	ldrh	r3, [r3, #6]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d110      	bne.n	8005700 <USBD_StdItfReq+0x74>
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10d      	bne.n	8005700 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fd5e 	bl	80061a6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80056ea:	e009      	b.n	8005700 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fc8e 	bl	8006010 <USBD_CtlError>
      break;
 80056f4:	e004      	b.n	8005700 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80056f6:	6839      	ldr	r1, [r7, #0]
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fc89 	bl	8006010 <USBD_CtlError>
      break;
 80056fe:	e000      	b.n	8005702 <USBD_StdItfReq+0x76>
      break;
 8005700:	bf00      	nop
    }
    break;
 8005702:	e004      	b.n	800570e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fc82 	bl	8006010 <USBD_CtlError>
    break;
 800570c:	bf00      	nop
  }

  return ret;
 800570e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	889b      	ldrh	r3, [r3, #4]
 800572a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005734:	2b20      	cmp	r3, #32
 8005736:	d004      	beq.n	8005742 <USBD_StdEPReq+0x2a>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d002      	beq.n	8005742 <USBD_StdEPReq+0x2a>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <USBD_StdEPReq+0x3e>
 8005740:	e135      	b.n	80059ae <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	4798      	blx	r3
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
    break;
 8005754:	e130      	b.n	80059b8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d03e      	beq.n	80057dc <USBD_StdEPReq+0xc4>
 800575e:	2b03      	cmp	r3, #3
 8005760:	d002      	beq.n	8005768 <USBD_StdEPReq+0x50>
 8005762:	2b00      	cmp	r3, #0
 8005764:	d077      	beq.n	8005856 <USBD_StdEPReq+0x13e>
 8005766:	e11c      	b.n	80059a2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800576e:	2b02      	cmp	r3, #2
 8005770:	d002      	beq.n	8005778 <USBD_StdEPReq+0x60>
 8005772:	2b03      	cmp	r3, #3
 8005774:	d015      	beq.n	80057a2 <USBD_StdEPReq+0x8a>
 8005776:	e02b      	b.n	80057d0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005778:	7bbb      	ldrb	r3, [r7, #14]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00c      	beq.n	8005798 <USBD_StdEPReq+0x80>
 800577e:	7bbb      	ldrb	r3, [r7, #14]
 8005780:	2b80      	cmp	r3, #128	; 0x80
 8005782:	d009      	beq.n	8005798 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005784:	7bbb      	ldrb	r3, [r7, #14]
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f003 fe97 	bl	80094bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800578e:	2180      	movs	r1, #128	; 0x80
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f003 fe93 	bl	80094bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005796:	e020      	b.n	80057da <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fc38 	bl	8006010 <USBD_CtlError>
        break;
 80057a0:	e01b      	b.n	80057da <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	885b      	ldrh	r3, [r3, #2]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10e      	bne.n	80057c8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <USBD_StdEPReq+0xb0>
 80057b0:	7bbb      	ldrb	r3, [r7, #14]
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d008      	beq.n	80057c8 <USBD_StdEPReq+0xb0>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	88db      	ldrh	r3, [r3, #6]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80057be:	7bbb      	ldrb	r3, [r7, #14]
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f003 fe7a 	bl	80094bc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fcec 	bl	80061a6 <USBD_CtlSendStatus>

        break;
 80057ce:	e004      	b.n	80057da <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fc1c 	bl	8006010 <USBD_CtlError>
        break;
 80057d8:	bf00      	nop
      }
      break;
 80057da:	e0e7      	b.n	80059ac <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d002      	beq.n	80057ec <USBD_StdEPReq+0xd4>
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d015      	beq.n	8005816 <USBD_StdEPReq+0xfe>
 80057ea:	e02d      	b.n	8005848 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00c      	beq.n	800580c <USBD_StdEPReq+0xf4>
 80057f2:	7bbb      	ldrb	r3, [r7, #14]
 80057f4:	2b80      	cmp	r3, #128	; 0x80
 80057f6:	d009      	beq.n	800580c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80057f8:	7bbb      	ldrb	r3, [r7, #14]
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f003 fe5d 	bl	80094bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005802:	2180      	movs	r1, #128	; 0x80
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f003 fe59 	bl	80094bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800580a:	e023      	b.n	8005854 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fbfe 	bl	8006010 <USBD_CtlError>
        break;
 8005814:	e01e      	b.n	8005854 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	885b      	ldrh	r3, [r3, #2]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d119      	bne.n	8005852 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800581e:	7bbb      	ldrb	r3, [r7, #14]
 8005820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005828:	7bbb      	ldrb	r3, [r7, #14]
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f003 fe64 	bl	80094fa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fcb7 	bl	80061a6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
        }
        break;
 8005846:	e004      	b.n	8005852 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fbe0 	bl	8006010 <USBD_CtlError>
        break;
 8005850:	e000      	b.n	8005854 <USBD_StdEPReq+0x13c>
        break;
 8005852:	bf00      	nop
      }
      break;
 8005854:	e0aa      	b.n	80059ac <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800585c:	2b02      	cmp	r3, #2
 800585e:	d002      	beq.n	8005866 <USBD_StdEPReq+0x14e>
 8005860:	2b03      	cmp	r3, #3
 8005862:	d032      	beq.n	80058ca <USBD_StdEPReq+0x1b2>
 8005864:	e097      	b.n	8005996 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005866:	7bbb      	ldrb	r3, [r7, #14]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <USBD_StdEPReq+0x164>
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	2b80      	cmp	r3, #128	; 0x80
 8005870:	d004      	beq.n	800587c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005872:	6839      	ldr	r1, [r7, #0]
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fbcb 	bl	8006010 <USBD_CtlError>
          break;
 800587a:	e091      	b.n	80059a0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800587c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005880:	2b00      	cmp	r3, #0
 8005882:	da0b      	bge.n	800589c <USBD_StdEPReq+0x184>
 8005884:	7bbb      	ldrb	r3, [r7, #14]
 8005886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	3310      	adds	r3, #16
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	3304      	adds	r3, #4
 800589a:	e00b      	b.n	80058b4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800589c:	7bbb      	ldrb	r3, [r7, #14]
 800589e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	3304      	adds	r3, #4
 80058b4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2202      	movs	r2, #2
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fc15 	bl	80060f2 <USBD_CtlSendData>
        break;
 80058c8:	e06a      	b.n	80059a0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80058ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	da11      	bge.n	80058f6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058d2:	7bbb      	ldrb	r3, [r7, #14]
 80058d4:	f003 020f 	and.w	r2, r3, #15
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	3324      	adds	r3, #36	; 0x24
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d117      	bne.n	800591c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fb8e 	bl	8006010 <USBD_CtlError>
            break;
 80058f4:	e054      	b.n	80059a0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	f003 020f 	and.w	r2, r3, #15
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fb7b 	bl	8006010 <USBD_CtlError>
            break;
 800591a:	e041      	b.n	80059a0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800591c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005920:	2b00      	cmp	r3, #0
 8005922:	da0b      	bge.n	800593c <USBD_StdEPReq+0x224>
 8005924:	7bbb      	ldrb	r3, [r7, #14]
 8005926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	3310      	adds	r3, #16
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	4413      	add	r3, r2
 8005938:	3304      	adds	r3, #4
 800593a:	e00b      	b.n	8005954 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	4413      	add	r3, r2
 8005952:	3304      	adds	r3, #4
 8005954:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <USBD_StdEPReq+0x24a>
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	2b80      	cmp	r3, #128	; 0x80
 8005960:	d103      	bne.n	800596a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e00e      	b.n	8005988 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f003 fde2 	bl	8009538 <USBD_LL_IsStallEP>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e002      	b.n	8005988 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2202      	movs	r2, #2
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fbaf 	bl	80060f2 <USBD_CtlSendData>
          break;
 8005994:	e004      	b.n	80059a0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fb39 	bl	8006010 <USBD_CtlError>
        break;
 800599e:	bf00      	nop
      }
      break;
 80059a0:	e004      	b.n	80059ac <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fb33 	bl	8006010 <USBD_CtlError>
      break;
 80059aa:	bf00      	nop
    }
    break;
 80059ac:	e004      	b.n	80059b8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fb2d 	bl	8006010 <USBD_CtlError>
    break;
 80059b6:	bf00      	nop
  }

  return ret;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	885b      	ldrh	r3, [r3, #2]
 80059de:	0a1b      	lsrs	r3, r3, #8
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	f200 8128 	bhi.w	8005c3a <USBD_GetDescriptor+0x276>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <USBD_GetDescriptor+0x2c>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a0d 	.word	0x08005a0d
 80059f4:	08005a25 	.word	0x08005a25
 80059f8:	08005a65 	.word	0x08005a65
 80059fc:	08005c3b 	.word	0x08005c3b
 8005a00:	08005c3b 	.word	0x08005c3b
 8005a04:	08005bdb 	.word	0x08005bdb
 8005a08:	08005c07 	.word	0x08005c07
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	7c12      	ldrb	r2, [r2, #16]
 8005a18:	f107 0108 	add.w	r1, r7, #8
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4798      	blx	r3
 8005a20:	60f8      	str	r0, [r7, #12]
    break;
 8005a22:	e112      	b.n	8005c4a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	7c1b      	ldrb	r3, [r3, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10d      	bne.n	8005a48 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	f107 0208 	add.w	r2, r7, #8
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4798      	blx	r3
 8005a3c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3301      	adds	r3, #1
 8005a42:	2202      	movs	r2, #2
 8005a44:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005a46:	e100      	b.n	8005c4a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	f107 0208 	add.w	r2, r7, #8
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
 8005a58:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	2202      	movs	r2, #2
 8005a60:	701a      	strb	r2, [r3, #0]
    break;
 8005a62:	e0f2      	b.n	8005c4a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	885b      	ldrh	r3, [r3, #2]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b05      	cmp	r3, #5
 8005a6c:	f200 80ac 	bhi.w	8005bc8 <USBD_GetDescriptor+0x204>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <USBD_GetDescriptor+0xb4>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005a91 	.word	0x08005a91
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005af9 	.word	0x08005af9
 8005a84:	08005b2d 	.word	0x08005b2d
 8005a88:	08005b61 	.word	0x08005b61
 8005a8c:	08005b95 	.word	0x08005b95
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	7c12      	ldrb	r2, [r2, #16]
 8005aa8:	f107 0108 	add.w	r1, r7, #8
 8005aac:	4610      	mov	r0, r2
 8005aae:	4798      	blx	r3
 8005ab0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ab2:	e091      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 faaa 	bl	8006010 <USBD_CtlError>
        err++;
 8005abc:	7afb      	ldrb	r3, [r7, #11]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	72fb      	strb	r3, [r7, #11]
      break;
 8005ac2:	e089      	b.n	8005bd8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	7c12      	ldrb	r2, [r2, #16]
 8005adc:	f107 0108 	add.w	r1, r7, #8
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3
 8005ae4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ae6:	e077      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa90 	bl	8006010 <USBD_CtlError>
        err++;
 8005af0:	7afb      	ldrb	r3, [r7, #11]
 8005af2:	3301      	adds	r3, #1
 8005af4:	72fb      	strb	r3, [r7, #11]
      break;
 8005af6:	e06f      	b.n	8005bd8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00b      	beq.n	8005b1c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	7c12      	ldrb	r2, [r2, #16]
 8005b10:	f107 0108 	add.w	r1, r7, #8
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
 8005b18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b1a:	e05d      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa76 	bl	8006010 <USBD_CtlError>
        err++;
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	3301      	adds	r3, #1
 8005b28:	72fb      	strb	r3, [r7, #11]
      break;
 8005b2a:	e055      	b.n	8005bd8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	7c12      	ldrb	r2, [r2, #16]
 8005b44:	f107 0108 	add.w	r1, r7, #8
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
 8005b4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b4e:	e043      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa5c 	bl	8006010 <USBD_CtlError>
        err++;
 8005b58:	7afb      	ldrb	r3, [r7, #11]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	72fb      	strb	r3, [r7, #11]
      break;
 8005b5e:	e03b      	b.n	8005bd8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	7c12      	ldrb	r2, [r2, #16]
 8005b78:	f107 0108 	add.w	r1, r7, #8
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b82:	e029      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa42 	bl	8006010 <USBD_CtlError>
        err++;
 8005b8c:	7afb      	ldrb	r3, [r7, #11]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	72fb      	strb	r3, [r7, #11]
      break;
 8005b92:	e021      	b.n	8005bd8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	7c12      	ldrb	r2, [r2, #16]
 8005bac:	f107 0108 	add.w	r1, r7, #8
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4798      	blx	r3
 8005bb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bb6:	e00f      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa28 	bl	8006010 <USBD_CtlError>
        err++;
 8005bc0:	7afb      	ldrb	r3, [r7, #11]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	72fb      	strb	r3, [r7, #11]
      break;
 8005bc6:	e007      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa20 	bl	8006010 <USBD_CtlError>
      err++;
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005bd6:	bf00      	nop
    }
    break;
 8005bd8:	e037      	b.n	8005c4a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	7c1b      	ldrb	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	f107 0208 	add.w	r2, r7, #8
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4798      	blx	r3
 8005bf2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005bf4:	e029      	b.n	8005c4a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fa09 	bl	8006010 <USBD_CtlError>
      err++;
 8005bfe:	7afb      	ldrb	r3, [r7, #11]
 8005c00:	3301      	adds	r3, #1
 8005c02:	72fb      	strb	r3, [r7, #11]
    break;
 8005c04:	e021      	b.n	8005c4a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7c1b      	ldrb	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	f107 0208 	add.w	r2, r7, #8
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4798      	blx	r3
 8005c1e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3301      	adds	r3, #1
 8005c24:	2207      	movs	r2, #7
 8005c26:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005c28:	e00f      	b.n	8005c4a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f9ef 	bl	8006010 <USBD_CtlError>
      err++;
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	3301      	adds	r3, #1
 8005c36:	72fb      	strb	r3, [r7, #11]
    break;
 8005c38:	e007      	b.n	8005c4a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f9e7 	bl	8006010 <USBD_CtlError>
    err++;
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	3301      	adds	r3, #1
 8005c46:	72fb      	strb	r3, [r7, #11]
    break;
 8005c48:	bf00      	nop
  }

  if (err != 0U)
 8005c4a:	7afb      	ldrb	r3, [r7, #11]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d11e      	bne.n	8005c8e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	88db      	ldrh	r3, [r3, #6]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d016      	beq.n	8005c86 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005c58:	893b      	ldrh	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00e      	beq.n	8005c7c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	88da      	ldrh	r2, [r3, #6]
 8005c62:	893b      	ldrh	r3, [r7, #8]
 8005c64:	4293      	cmp	r3, r2
 8005c66:	bf28      	it	cs
 8005c68:	4613      	movcs	r3, r2
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c6e:	893b      	ldrh	r3, [r7, #8]
 8005c70:	461a      	mov	r2, r3
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fa3c 	bl	80060f2 <USBD_CtlSendData>
 8005c7a:	e009      	b.n	8005c90 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f9c6 	bl	8006010 <USBD_CtlError>
 8005c84:	e004      	b.n	8005c90 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa8d 	bl	80061a6 <USBD_CtlSendStatus>
 8005c8c:	e000      	b.n	8005c90 <USBD_GetDescriptor+0x2cc>
    return;
 8005c8e:	bf00      	nop
    }
  }
}
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop

08005c98 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	889b      	ldrh	r3, [r3, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d130      	bne.n	8005d0c <USBD_SetAddress+0x74>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	88db      	ldrh	r3, [r3, #6]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d12c      	bne.n	8005d0c <USBD_SetAddress+0x74>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	885b      	ldrh	r3, [r3, #2]
 8005cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb8:	d828      	bhi.n	8005d0c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	885b      	ldrh	r3, [r3, #2]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d104      	bne.n	8005cda <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f99c 	bl	8006010 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd8:	e01c      	b.n	8005d14 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	7bfa      	ldrb	r2, [r7, #15]
 8005cde:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f003 fc52 	bl	8009590 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fa5a 	bl	80061a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d00:	e008      	b.n	8005d14 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0a:	e003      	b.n	8005d14 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f97e 	bl	8006010 <USBD_CtlError>
  }
}
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	885b      	ldrh	r3, [r3, #2]
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	4b4b      	ldr	r3, [pc, #300]	; (8005e60 <USBD_SetConfig+0x144>)
 8005d32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d34:	4b4a      	ldr	r3, [pc, #296]	; (8005e60 <USBD_SetConfig+0x144>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d905      	bls.n	8005d48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f966 	bl	8006010 <USBD_CtlError>
    return USBD_FAIL;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e087      	b.n	8005e58 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d002      	beq.n	8005d58 <USBD_SetConfig+0x3c>
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d025      	beq.n	8005da2 <USBD_SetConfig+0x86>
 8005d56:	e071      	b.n	8005e3c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005d58:	4b41      	ldr	r3, [pc, #260]	; (8005e60 <USBD_SetConfig+0x144>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01c      	beq.n	8005d9a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005d60:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <USBD_SetConfig+0x144>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d6a:	4b3d      	ldr	r3, [pc, #244]	; (8005e60 <USBD_SetConfig+0x144>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff f9a7 	bl	80050c4 <USBD_SetClassConfig>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f944 	bl	8006010 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005d88:	e065      	b.n	8005e56 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa0b 	bl	80061a6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2203      	movs	r2, #3
 8005d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005d98:	e05d      	b.n	8005e56 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa03 	bl	80061a6 <USBD_CtlSendStatus>
    break;
 8005da0:	e059      	b.n	8005e56 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005da2:	4b2f      	ldr	r3, [pc, #188]	; (8005e60 <USBD_SetConfig+0x144>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d112      	bne.n	8005dd0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2202      	movs	r2, #2
 8005dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005db2:	4b2b      	ldr	r3, [pc, #172]	; (8005e60 <USBD_SetConfig+0x144>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dbc:	4b28      	ldr	r3, [pc, #160]	; (8005e60 <USBD_SetConfig+0x144>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff f99a 	bl	80050fc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f9ec 	bl	80061a6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005dce:	e042      	b.n	8005e56 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005dd0:	4b23      	ldr	r3, [pc, #140]	; (8005e60 <USBD_SetConfig+0x144>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d02a      	beq.n	8005e34 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff f988 	bl	80050fc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005dec:	4b1c      	ldr	r3, [pc, #112]	; (8005e60 <USBD_SetConfig+0x144>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005df6:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <USBD_SetConfig+0x144>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff f961 	bl	80050c4 <USBD_SetClassConfig>
 8005e02:	4603      	mov	r3, r0
 8005e04:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00f      	beq.n	8005e2c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f8fe 	bl	8006010 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff f96d 	bl	80050fc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005e2a:	e014      	b.n	8005e56 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f9ba 	bl	80061a6 <USBD_CtlSendStatus>
    break;
 8005e32:	e010      	b.n	8005e56 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f9b6 	bl	80061a6 <USBD_CtlSendStatus>
    break;
 8005e3a:	e00c      	b.n	8005e56 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8e6 	bl	8006010 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e44:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <USBD_SetConfig+0x144>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff f956 	bl	80050fc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005e50:	2303      	movs	r3, #3
 8005e52:	73fb      	strb	r3, [r7, #15]
    break;
 8005e54:	bf00      	nop
  }

  return ret;
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	2000020c 	.word	0x2000020c

08005e64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	88db      	ldrh	r3, [r3, #6]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d004      	beq.n	8005e80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8c9 	bl	8006010 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005e7e:	e021      	b.n	8005ec4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	db17      	blt.n	8005eba <USBD_GetConfig+0x56>
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	dd02      	ble.n	8005e94 <USBD_GetConfig+0x30>
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d00b      	beq.n	8005eaa <USBD_GetConfig+0x46>
 8005e92:	e012      	b.n	8005eba <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f925 	bl	80060f2 <USBD_CtlSendData>
      break;
 8005ea8:	e00c      	b.n	8005ec4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3304      	adds	r3, #4
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f91d 	bl	80060f2 <USBD_CtlSendData>
      break;
 8005eb8:	e004      	b.n	8005ec4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f8a7 	bl	8006010 <USBD_CtlError>
      break;
 8005ec2:	bf00      	nop
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005edc:	3b01      	subs	r3, #1
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d81e      	bhi.n	8005f20 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	88db      	ldrh	r3, [r3, #6]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d004      	beq.n	8005ef4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f88f 	bl	8006010 <USBD_CtlError>
      break;
 8005ef2:	e01a      	b.n	8005f2a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f043 0202 	orr.w	r2, r3, #2
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	330c      	adds	r3, #12
 8005f14:	2202      	movs	r2, #2
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8ea 	bl	80060f2 <USBD_CtlSendData>
    break;
 8005f1e:	e004      	b.n	8005f2a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f874 	bl	8006010 <USBD_CtlError>
    break;
 8005f28:	bf00      	nop
  }
}
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	885b      	ldrh	r3, [r3, #2]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d106      	bne.n	8005f52 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f92a 	bl	80061a6 <USBD_CtlSendStatus>
  }
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d80b      	bhi.n	8005f88 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	885b      	ldrh	r3, [r3, #2]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d10c      	bne.n	8005f92 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f910 	bl	80061a6 <USBD_CtlSendStatus>
      }
      break;
 8005f86:	e004      	b.n	8005f92 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f840 	bl	8006010 <USBD_CtlError>
      break;
 8005f90:	e000      	b.n	8005f94 <USBD_ClrFeature+0x3a>
      break;
 8005f92:	bf00      	nop
  }
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7ff fad3 	bl	8005572 <SWAPBYTE>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff fac6 	bl	8005572 <SWAPBYTE>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff fab9 	bl	8005572 <SWAPBYTE>
 8006000:	4603      	mov	r3, r0
 8006002:	461a      	mov	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	80da      	strh	r2, [r3, #6]
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800601a:	2180      	movs	r1, #128	; 0x80
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f003 fa4d 	bl	80094bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006022:	2100      	movs	r1, #0
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f003 fa49 	bl	80094bc <USBD_LL_StallEP>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d036      	beq.n	80060b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800604c:	6938      	ldr	r0, [r7, #16]
 800604e:	f000 f836 	bl	80060be <USBD_GetLen>
 8006052:	4603      	mov	r3, r0
 8006054:	3301      	adds	r3, #1
 8006056:	b29b      	uxth	r3, r3
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	4413      	add	r3, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	701a      	strb	r2, [r3, #0]
  idx++;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	3301      	adds	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	4413      	add	r3, r2
 8006078:	2203      	movs	r2, #3
 800607a:	701a      	strb	r2, [r3, #0]
  idx++;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	3301      	adds	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006082:	e013      	b.n	80060ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	4413      	add	r3, r2
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	7812      	ldrb	r2, [r2, #0]
 800608e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	3301      	adds	r3, #1
 8006094:	613b      	str	r3, [r7, #16]
    idx++;
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	3301      	adds	r3, #1
 800609a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	4413      	add	r3, r2
 80060a2:	2200      	movs	r2, #0
 80060a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	3301      	adds	r3, #1
 80060aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e7      	bne.n	8006084 <USBD_GetString+0x52>
 80060b4:	e000      	b.n	80060b8 <USBD_GetString+0x86>
    return;
 80060b6:	bf00      	nop
  }
}
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80060ce:	e005      	b.n	80060dc <USBD_GetLen+0x1e>
  {
    len++;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	3301      	adds	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	3301      	adds	r3, #1
 80060da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f5      	bne.n	80060d0 <USBD_GetLen+0x12>
  }

  return len;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2202      	movs	r2, #2
 8006102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	2100      	movs	r1, #0
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f003 fa58 	bl	80095ce <USBD_LL_Transmit>

  return USBD_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	2100      	movs	r1, #0
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f003 fa47 	bl	80095ce <USBD_LL_Transmit>

  return USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2203      	movs	r2, #3
 800615a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	2100      	movs	r1, #0
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f003 fa4b 	bl	8009610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	2100      	movs	r1, #0
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f003 fa3a 	bl	8009610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2204      	movs	r2, #4
 80061b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80061b6:	2300      	movs	r3, #0
 80061b8:	2200      	movs	r2, #0
 80061ba:	2100      	movs	r1, #0
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f003 fa06 	bl	80095ce <USBD_LL_Transmit>

  return USBD_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2205      	movs	r2, #5
 80061d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061dc:	2300      	movs	r3, #0
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f003 fa14 	bl	8009610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80061f2:	b480      	push	{r7}
 80061f4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80061f6:	bf00      	nop
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006206:	f3ef 8305 	mrs	r3, IPSR
 800620a:	60bb      	str	r3, [r7, #8]
  return(result);
 800620c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10f      	bne.n	8006232 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006212:	f3ef 8310 	mrs	r3, PRIMASK
 8006216:	607b      	str	r3, [r7, #4]
  return(result);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800621e:	f3ef 8311 	mrs	r3, BASEPRI
 8006222:	603b      	str	r3, [r7, #0]
  return(result);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <osKernelInitialize+0x3a>
 800622a:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <osKernelInitialize+0x64>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d103      	bne.n	800623a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006232:	f06f 0305 	mvn.w	r3, #5
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	e00c      	b.n	8006254 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <osKernelInitialize+0x64>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d105      	bne.n	800624e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <osKernelInitialize+0x64>)
 8006244:	2201      	movs	r2, #1
 8006246:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	e002      	b.n	8006254 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006254:	68fb      	ldr	r3, [r7, #12]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000210 	.word	0x20000210

08006268 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626e:	f3ef 8305 	mrs	r3, IPSR
 8006272:	60bb      	str	r3, [r7, #8]
  return(result);
 8006274:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10f      	bne.n	800629a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627a:	f3ef 8310 	mrs	r3, PRIMASK
 800627e:	607b      	str	r3, [r7, #4]
  return(result);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006286:	f3ef 8311 	mrs	r3, BASEPRI
 800628a:	603b      	str	r3, [r7, #0]
  return(result);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <osKernelStart+0x3a>
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <osKernelStart+0x68>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d103      	bne.n	80062a2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800629a:	f06f 0305 	mvn.w	r3, #5
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	e010      	b.n	80062c4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062a2:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <osKernelStart+0x68>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d109      	bne.n	80062be <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062aa:	f7ff ffa2 	bl	80061f2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062ae:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <osKernelStart+0x68>)
 80062b0:	2202      	movs	r2, #2
 80062b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062b4:	f001 f870 	bl	8007398 <vTaskStartScheduler>
      stat = osOK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e002      	b.n	80062c4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80062be:	f04f 33ff 	mov.w	r3, #4294967295
 80062c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062c4:	68fb      	ldr	r3, [r7, #12]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000210 	.word	0x20000210

080062d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b090      	sub	sp, #64	; 0x40
 80062d8:	af04      	add	r7, sp, #16
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e4:	f3ef 8305 	mrs	r3, IPSR
 80062e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80062ea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f040 808f 	bne.w	8006410 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062f2:	f3ef 8310 	mrs	r3, PRIMASK
 80062f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d105      	bne.n	800630a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006302:	617b      	str	r3, [r7, #20]
  return(result);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <osThreadNew+0x3e>
 800630a:	4b44      	ldr	r3, [pc, #272]	; (800641c <osThreadNew+0x148>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d07e      	beq.n	8006410 <osThreadNew+0x13c>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d07b      	beq.n	8006410 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006318:	2380      	movs	r3, #128	; 0x80
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800631c:	2318      	movs	r3, #24
 800631e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006320:	2300      	movs	r3, #0
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006324:	f04f 33ff 	mov.w	r3, #4294967295
 8006328:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d045      	beq.n	80063bc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <osThreadNew+0x6a>
        name = attr->name;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	2b00      	cmp	r3, #0
 8006350:	d008      	beq.n	8006364 <osThreadNew+0x90>
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	2b38      	cmp	r3, #56	; 0x38
 8006356:	d805      	bhi.n	8006364 <osThreadNew+0x90>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <osThreadNew+0x94>
        return (NULL);
 8006364:	2300      	movs	r3, #0
 8006366:	e054      	b.n	8006412 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	089b      	lsrs	r3, r3, #2
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00e      	beq.n	800639e <osThreadNew+0xca>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b5b      	cmp	r3, #91	; 0x5b
 8006386:	d90a      	bls.n	800639e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800638c:	2b00      	cmp	r3, #0
 800638e:	d006      	beq.n	800639e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <osThreadNew+0xca>
        mem = 1;
 8006398:	2301      	movs	r3, #1
 800639a:	623b      	str	r3, [r7, #32]
 800639c:	e010      	b.n	80063c0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10c      	bne.n	80063c0 <osThreadNew+0xec>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d108      	bne.n	80063c0 <osThreadNew+0xec>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <osThreadNew+0xec>
          mem = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	623b      	str	r3, [r7, #32]
 80063ba:	e001      	b.n	80063c0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d110      	bne.n	80063e8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063ce:	9202      	str	r2, [sp, #8]
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fe09 	bl	8006ff4 <xTaskCreateStatic>
 80063e2:	4603      	mov	r3, r0
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	e013      	b.n	8006410 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d110      	bne.n	8006410 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	f107 0310 	add.w	r3, r7, #16
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 fe51 	bl	80070a8 <xTaskCreate>
 8006406:	4603      	mov	r3, r0
 8006408:	2b01      	cmp	r3, #1
 800640a:	d001      	beq.n	8006410 <osThreadNew+0x13c>
          hTask = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006410:	693b      	ldr	r3, [r7, #16]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3730      	adds	r7, #48	; 0x30
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000210 	.word	0x20000210

08006420 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006428:	f3ef 8305 	mrs	r3, IPSR
 800642c:	613b      	str	r3, [r7, #16]
  return(result);
 800642e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10f      	bne.n	8006454 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006434:	f3ef 8310 	mrs	r3, PRIMASK
 8006438:	60fb      	str	r3, [r7, #12]
  return(result);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d105      	bne.n	800644c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006440:	f3ef 8311 	mrs	r3, BASEPRI
 8006444:	60bb      	str	r3, [r7, #8]
  return(result);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d007      	beq.n	800645c <osDelay+0x3c>
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <osDelay+0x58>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d103      	bne.n	800645c <osDelay+0x3c>
    stat = osErrorISR;
 8006454:	f06f 0305 	mvn.w	r3, #5
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	e007      	b.n	800646c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 ff62 	bl	8007330 <vTaskDelay>
    }
  }

  return (stat);
 800646c:	697b      	ldr	r3, [r7, #20]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000210 	.word	0x20000210

0800647c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800648c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4a06      	ldr	r2, [pc, #24]	; (80064ac <vApplicationGetIdleTaskMemory+0x30>)
 8006492:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2280      	movs	r2, #128	; 0x80
 8006498:	601a      	str	r2, [r3, #0]
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000214 	.word	0x20000214
 80064ac:	20000270 	.word	0x20000270

080064b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a07      	ldr	r2, [pc, #28]	; (80064dc <vApplicationGetTimerTaskMemory+0x2c>)
 80064c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4a06      	ldr	r2, [pc, #24]	; (80064e0 <vApplicationGetTimerTaskMemory+0x30>)
 80064c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064ce:	601a      	str	r2, [r3, #0]
}
 80064d0:	bf00      	nop
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	20000470 	.word	0x20000470
 80064e0:	200004cc 	.word	0x200004cc

080064e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f103 0208 	add.w	r2, r3, #8
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f04f 32ff 	mov.w	r2, #4294967295
 80064fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f103 0208 	add.w	r2, r3, #8
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f103 0208 	add.w	r2, r3, #8
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d103      	bne.n	80065a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e00c      	b.n	80065c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3308      	adds	r3, #8
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e002      	b.n	80065b4 <vListInsert+0x2e>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d2f6      	bcs.n	80065ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
}
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6892      	ldr	r2, [r2, #8]
 800660e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6852      	ldr	r2, [r2, #4]
 8006618:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	429a      	cmp	r2, r3
 8006622:	d103      	bne.n	800662c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	1e5a      	subs	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d109      	bne.n	8006674 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	e7fe      	b.n	8006672 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006674:	f002 f812 	bl	800869c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	68f9      	ldr	r1, [r7, #12]
 8006682:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006684:	fb01 f303 	mul.w	r3, r1, r3
 8006688:	441a      	add	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a4:	3b01      	subs	r3, #1
 80066a6:	68f9      	ldr	r1, [r7, #12]
 80066a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	441a      	add	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	22ff      	movs	r2, #255	; 0xff
 80066b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	22ff      	movs	r2, #255	; 0xff
 80066c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d114      	bne.n	80066f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01a      	beq.n	8006708 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3310      	adds	r3, #16
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 f8de 	bl	8007898 <xTaskRemoveFromEventList>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d012      	beq.n	8006708 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066e2:	4b0d      	ldr	r3, [pc, #52]	; (8006718 <xQueueGenericReset+0xcc>)
 80066e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	e009      	b.n	8006708 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3310      	adds	r3, #16
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff fef3 	bl	80064e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3324      	adds	r3, #36	; 0x24
 8006702:	4618      	mov	r0, r3
 8006704:	f7ff feee 	bl	80064e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006708:	f001 fff6 	bl	80086f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800670c:	2301      	movs	r3, #1
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08e      	sub	sp, #56	; 0x38
 8006720:	af02      	add	r7, sp, #8
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d109      	bne.n	8006744 <xQueueGenericCreateStatic+0x28>
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
 8006742:	e7fe      	b.n	8006742 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d109      	bne.n	800675e <xQueueGenericCreateStatic+0x42>
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
 800675c:	e7fe      	b.n	800675c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <xQueueGenericCreateStatic+0x4e>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <xQueueGenericCreateStatic+0x52>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <xQueueGenericCreateStatic+0x54>
 800676e:	2300      	movs	r3, #0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d109      	bne.n	8006788 <xQueueGenericCreateStatic+0x6c>
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	623b      	str	r3, [r7, #32]
 8006786:	e7fe      	b.n	8006786 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d102      	bne.n	8006794 <xQueueGenericCreateStatic+0x78>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <xQueueGenericCreateStatic+0x7c>
 8006794:	2301      	movs	r3, #1
 8006796:	e000      	b.n	800679a <xQueueGenericCreateStatic+0x7e>
 8006798:	2300      	movs	r3, #0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <xQueueGenericCreateStatic+0x96>
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	e7fe      	b.n	80067b0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067b2:	2350      	movs	r3, #80	; 0x50
 80067b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b50      	cmp	r3, #80	; 0x50
 80067ba:	d009      	beq.n	80067d0 <xQueueGenericCreateStatic+0xb4>
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	e7fe      	b.n	80067ce <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00d      	beq.n	80067f8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f805 	bl	8006802 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3730      	adds	r7, #48	; 0x30
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e002      	b.n	8006824 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006830:	2101      	movs	r1, #1
 8006832:	69b8      	ldr	r0, [r7, #24]
 8006834:	f7ff ff0a 	bl	800664c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08e      	sub	sp, #56	; 0x38
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006856:	2300      	movs	r3, #0
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <xQueueGenericSend+0x30>
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	62bb      	str	r3, [r7, #40]	; 0x28
 8006876:	e7fe      	b.n	8006876 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <xQueueGenericSend+0x3e>
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <xQueueGenericSend+0x42>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <xQueueGenericSend+0x44>
 800688a:	2300      	movs	r3, #0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <xQueueGenericSend+0x5c>
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
 80068a2:	e7fe      	b.n	80068a2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d103      	bne.n	80068b2 <xQueueGenericSend+0x6a>
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <xQueueGenericSend+0x6e>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e000      	b.n	80068b8 <xQueueGenericSend+0x70>
 80068b6:	2300      	movs	r3, #0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d109      	bne.n	80068d0 <xQueueGenericSend+0x88>
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	623b      	str	r3, [r7, #32]
 80068ce:	e7fe      	b.n	80068ce <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068d0:	f001 f998 	bl	8007c04 <xTaskGetSchedulerState>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <xQueueGenericSend+0x98>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <xQueueGenericSend+0x9c>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e000      	b.n	80068e6 <xQueueGenericSend+0x9e>
 80068e4:	2300      	movs	r3, #0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <xQueueGenericSend+0xb6>
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068fe:	f001 fecd 	bl	800869c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	429a      	cmp	r2, r3
 800690c:	d302      	bcc.n	8006914 <xQueueGenericSend+0xcc>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d129      	bne.n	8006968 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800691a:	f000 f9ff 	bl	8006d1c <prvCopyDataToQueue>
 800691e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d010      	beq.n	800694a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	3324      	adds	r3, #36	; 0x24
 800692c:	4618      	mov	r0, r3
 800692e:	f000 ffb3 	bl	8007898 <xTaskRemoveFromEventList>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d013      	beq.n	8006960 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006938:	4b3f      	ldr	r3, [pc, #252]	; (8006a38 <xQueueGenericSend+0x1f0>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	e00a      	b.n	8006960 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006950:	4b39      	ldr	r3, [pc, #228]	; (8006a38 <xQueueGenericSend+0x1f0>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006960:	f001 feca 	bl	80086f8 <vPortExitCritical>
				return pdPASS;
 8006964:	2301      	movs	r3, #1
 8006966:	e063      	b.n	8006a30 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800696e:	f001 fec3 	bl	80086f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006972:	2300      	movs	r3, #0
 8006974:	e05c      	b.n	8006a30 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	2b00      	cmp	r3, #0
 800697a:	d106      	bne.n	800698a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800697c:	f107 0314 	add.w	r3, r7, #20
 8006980:	4618      	mov	r0, r3
 8006982:	f000 ffeb 	bl	800795c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006986:	2301      	movs	r3, #1
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800698a:	f001 feb5 	bl	80086f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800698e:	f000 fd67 	bl	8007460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006992:	f001 fe83 	bl	800869c <vPortEnterCritical>
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800699c:	b25b      	sxtb	r3, r3
 800699e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a2:	d103      	bne.n	80069ac <xQueueGenericSend+0x164>
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b8:	d103      	bne.n	80069c2 <xQueueGenericSend+0x17a>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069c2:	f001 fe99 	bl	80086f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069c6:	1d3a      	adds	r2, r7, #4
 80069c8:	f107 0314 	add.w	r3, r7, #20
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 ffda 	bl	8007988 <xTaskCheckForTimeOut>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d124      	bne.n	8006a24 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069dc:	f000 fa96 	bl	8006f0c <prvIsQueueFull>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d018      	beq.n	8006a18 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	3310      	adds	r3, #16
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4611      	mov	r1, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 ff04 	bl	80077fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069f6:	f000 fa21 	bl	8006e3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069fa:	f000 fd3f 	bl	800747c <xTaskResumeAll>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f47f af7c 	bne.w	80068fe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006a06:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <xQueueGenericSend+0x1f0>)
 8006a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	e772      	b.n	80068fe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a1a:	f000 fa0f 	bl	8006e3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a1e:	f000 fd2d 	bl	800747c <xTaskResumeAll>
 8006a22:	e76c      	b.n	80068fe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a26:	f000 fa09 	bl	8006e3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a2a:	f000 fd27 	bl	800747c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3738      	adds	r7, #56	; 0x38
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08e      	sub	sp, #56	; 0x38
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <xQueueGenericSendFromISR+0x2c>
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
 8006a66:	e7fe      	b.n	8006a66 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d103      	bne.n	8006a76 <xQueueGenericSendFromISR+0x3a>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <xQueueGenericSendFromISR+0x3e>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <xQueueGenericSendFromISR+0x40>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <xQueueGenericSendFromISR+0x58>
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	623b      	str	r3, [r7, #32]
 8006a92:	e7fe      	b.n	8006a92 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d103      	bne.n	8006aa2 <xQueueGenericSendFromISR+0x66>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <xQueueGenericSendFromISR+0x6a>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <xQueueGenericSendFromISR+0x6c>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d109      	bne.n	8006ac0 <xQueueGenericSendFromISR+0x84>
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	61fb      	str	r3, [r7, #28]
 8006abe:	e7fe      	b.n	8006abe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ac0:	f001 fec8 	bl	8008854 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ac4:	f3ef 8211 	mrs	r2, BASEPRI
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	61ba      	str	r2, [r7, #24]
 8006ada:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006adc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d302      	bcc.n	8006af2 <xQueueGenericSendFromISR+0xb6>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d12c      	bne.n	8006b4c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b02:	f000 f90b 	bl	8006d1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b06:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0e:	d112      	bne.n	8006b36 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d016      	beq.n	8006b46 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	3324      	adds	r3, #36	; 0x24
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 febb 	bl	8007898 <xTaskRemoveFromEventList>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00b      	beq.n	8006b46 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e007      	b.n	8006b46 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	b25a      	sxtb	r2, r3
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b46:	2301      	movs	r3, #1
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006b4a:	e001      	b.n	8006b50 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3738      	adds	r7, #56	; 0x38
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	; 0x30
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <xQueueReceive+0x2e>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	623b      	str	r3, [r7, #32]
 8006b90:	e7fe      	b.n	8006b90 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d103      	bne.n	8006ba0 <xQueueReceive+0x3c>
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <xQueueReceive+0x40>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <xQueueReceive+0x42>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d109      	bne.n	8006bbe <xQueueReceive+0x5a>
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	e7fe      	b.n	8006bbc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bbe:	f001 f821 	bl	8007c04 <xTaskGetSchedulerState>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d102      	bne.n	8006bce <xQueueReceive+0x6a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <xQueueReceive+0x6e>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <xQueueReceive+0x70>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <xQueueReceive+0x88>
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e7fe      	b.n	8006bea <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bec:	f001 fd56 	bl	800869c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01f      	beq.n	8006c3c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c00:	f000 f8f6 	bl	8006df0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	1e5a      	subs	r2, r3, #1
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00f      	beq.n	8006c34 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	3310      	adds	r3, #16
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fe3d 	bl	8007898 <xTaskRemoveFromEventList>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c24:	4b3c      	ldr	r3, [pc, #240]	; (8006d18 <xQueueReceive+0x1b4>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c34:	f001 fd60 	bl	80086f8 <vPortExitCritical>
				return pdPASS;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e069      	b.n	8006d10 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c42:	f001 fd59 	bl	80086f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e062      	b.n	8006d10 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c50:	f107 0310 	add.w	r3, r7, #16
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fe81 	bl	800795c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c5e:	f001 fd4b 	bl	80086f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c62:	f000 fbfd 	bl	8007460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c66:	f001 fd19 	bl	800869c <vPortEnterCritical>
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c70:	b25b      	sxtb	r3, r3
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d103      	bne.n	8006c80 <xQueueReceive+0x11c>
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c86:	b25b      	sxtb	r3, r3
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d103      	bne.n	8006c96 <xQueueReceive+0x132>
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c96:	f001 fd2f 	bl	80086f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c9a:	1d3a      	adds	r2, r7, #4
 8006c9c:	f107 0310 	add.w	r3, r7, #16
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fe70 	bl	8007988 <xTaskCheckForTimeOut>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d123      	bne.n	8006cf6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb0:	f000 f916 	bl	8006ee0 <prvIsQueueEmpty>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d017      	beq.n	8006cea <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	3324      	adds	r3, #36	; 0x24
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fd9a 	bl	80077fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cca:	f000 f8b7 	bl	8006e3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cce:	f000 fbd5 	bl	800747c <xTaskResumeAll>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d189      	bne.n	8006bec <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <xQueueReceive+0x1b4>)
 8006cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	e780      	b.n	8006bec <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cec:	f000 f8a6 	bl	8006e3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cf0:	f000 fbc4 	bl	800747c <xTaskResumeAll>
 8006cf4:	e77a      	b.n	8006bec <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf8:	f000 f8a0 	bl	8006e3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cfc:	f000 fbbe 	bl	800747c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d02:	f000 f8ed 	bl	8006ee0 <prvIsQueueEmpty>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f43f af6f 	beq.w	8006bec <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3730      	adds	r7, #48	; 0x30
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10d      	bne.n	8006d56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d14d      	bne.n	8006dde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 ff7a 	bl	8007c40 <xTaskPriorityDisinherit>
 8006d4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	e043      	b.n	8006dde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d119      	bne.n	8006d90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6858      	ldr	r0, [r3, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	461a      	mov	r2, r3
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	f002 fcec 	bl	8009744 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	441a      	add	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d32b      	bcc.n	8006dde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	605a      	str	r2, [r3, #4]
 8006d8e:	e026      	b.n	8006dde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68d8      	ldr	r0, [r3, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	f002 fcd2 	bl	8009744 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	425b      	negs	r3, r3
 8006daa:	441a      	add	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d207      	bcs.n	8006dcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	425b      	negs	r3, r3
 8006dc6:	441a      	add	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d105      	bne.n	8006dde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006de6:	697b      	ldr	r3, [r7, #20]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d018      	beq.n	8006e34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	441a      	add	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d303      	bcc.n	8006e24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68d9      	ldr	r1, [r3, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6838      	ldr	r0, [r7, #0]
 8006e30:	f002 fc88 	bl	8009744 <memcpy>
	}
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e44:	f001 fc2a 	bl	800869c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e50:	e011      	b.n	8006e76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d012      	beq.n	8006e80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3324      	adds	r3, #36	; 0x24
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fd1a 	bl	8007898 <xTaskRemoveFromEventList>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e6a:	f000 fded 	bl	8007a48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	dce9      	bgt.n	8006e52 <prvUnlockQueue+0x16>
 8006e7e:	e000      	b.n	8006e82 <prvUnlockQueue+0x46>
					break;
 8006e80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	22ff      	movs	r2, #255	; 0xff
 8006e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e8a:	f001 fc35 	bl	80086f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e8e:	f001 fc05 	bl	800869c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e9a:	e011      	b.n	8006ec0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d012      	beq.n	8006eca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3310      	adds	r3, #16
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fcf5 	bl	8007898 <xTaskRemoveFromEventList>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006eb4:	f000 fdc8 	bl	8007a48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dce9      	bgt.n	8006e9c <prvUnlockQueue+0x60>
 8006ec8:	e000      	b.n	8006ecc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006eca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	22ff      	movs	r2, #255	; 0xff
 8006ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ed4:	f001 fc10 	bl	80086f8 <vPortExitCritical>
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ee8:	f001 fbd8 	bl	800869c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e001      	b.n	8006efe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006efe:	f001 fbfb 	bl	80086f8 <vPortExitCritical>

	return xReturn;
 8006f02:	68fb      	ldr	r3, [r7, #12]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f14:	f001 fbc2 	bl	800869c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d102      	bne.n	8006f2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	e001      	b.n	8006f2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f2e:	f001 fbe3 	bl	80086f8 <vPortExitCritical>

	return xReturn;
 8006f32:	68fb      	ldr	r3, [r7, #12]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	e014      	b.n	8006f76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f4c:	4a0e      	ldr	r2, [pc, #56]	; (8006f88 <vQueueAddToRegistry+0x4c>)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10b      	bne.n	8006f70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f58:	490b      	ldr	r1, [pc, #44]	; (8006f88 <vQueueAddToRegistry+0x4c>)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f62:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <vQueueAddToRegistry+0x4c>)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4413      	add	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f6e:	e005      	b.n	8006f7c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b07      	cmp	r3, #7
 8006f7a:	d9e7      	bls.n	8006f4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	20004bbc 	.word	0x20004bbc

08006f8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f9c:	f001 fb7e 	bl	800869c <vPortEnterCritical>
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fa6:	b25b      	sxtb	r3, r3
 8006fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fac:	d103      	bne.n	8006fb6 <vQueueWaitForMessageRestricted+0x2a>
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fbc:	b25b      	sxtb	r3, r3
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	d103      	bne.n	8006fcc <vQueueWaitForMessageRestricted+0x40>
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fcc:	f001 fb94 	bl	80086f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d106      	bne.n	8006fe6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	3324      	adds	r3, #36	; 0x24
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fc2f 	bl	8007844 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fe6:	6978      	ldr	r0, [r7, #20]
 8006fe8:	f7ff ff28 	bl	8006e3c <prvUnlockQueue>
	}
 8006fec:	bf00      	nop
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08e      	sub	sp, #56	; 0x38
 8006ff8:	af04      	add	r7, sp, #16
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007004:	2b00      	cmp	r3, #0
 8007006:	d109      	bne.n	800701c <xTaskCreateStatic+0x28>
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	623b      	str	r3, [r7, #32]
 800701a:	e7fe      	b.n	800701a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <xTaskCreateStatic+0x42>
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	61fb      	str	r3, [r7, #28]
 8007034:	e7fe      	b.n	8007034 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007036:	235c      	movs	r3, #92	; 0x5c
 8007038:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	2b5c      	cmp	r3, #92	; 0x5c
 800703e:	d009      	beq.n	8007054 <xTaskCreateStatic+0x60>
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	e7fe      	b.n	8007052 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007054:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01e      	beq.n	800709a <xTaskCreateStatic+0xa6>
 800705c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705e:	2b00      	cmp	r3, #0
 8007060:	d01b      	beq.n	800709a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800706a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	2202      	movs	r2, #2
 8007070:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007074:	2300      	movs	r3, #0
 8007076:	9303      	str	r3, [sp, #12]
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	9302      	str	r3, [sp, #8]
 800707c:	f107 0314 	add.w	r3, r7, #20
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f850 	bl	8007132 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007094:	f000 f8dc 	bl	8007250 <prvAddNewTaskToReadyList>
 8007098:	e001      	b.n	800709e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800709e:	697b      	ldr	r3, [r7, #20]
	}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3728      	adds	r7, #40	; 0x28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08c      	sub	sp, #48	; 0x30
 80070ac:	af04      	add	r7, sp, #16
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	603b      	str	r3, [r7, #0]
 80070b4:	4613      	mov	r3, r2
 80070b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070b8:	88fb      	ldrh	r3, [r7, #6]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4618      	mov	r0, r3
 80070be:	f001 fc07 	bl	80088d0 <pvPortMalloc>
 80070c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00e      	beq.n	80070e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070ca:	205c      	movs	r0, #92	; 0x5c
 80070cc:	f001 fc00 	bl	80088d0 <pvPortMalloc>
 80070d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	631a      	str	r2, [r3, #48]	; 0x30
 80070de:	e005      	b.n	80070ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070e0:	6978      	ldr	r0, [r7, #20]
 80070e2:	f001 fcb7 	bl	8008a54 <vPortFree>
 80070e6:	e001      	b.n	80070ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070e8:	2300      	movs	r3, #0
 80070ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d017      	beq.n	8007122 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070fa:	88fa      	ldrh	r2, [r7, #6]
 80070fc:	2300      	movs	r3, #0
 80070fe:	9303      	str	r3, [sp, #12]
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	9302      	str	r3, [sp, #8]
 8007104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 f80e 	bl	8007132 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007116:	69f8      	ldr	r0, [r7, #28]
 8007118:	f000 f89a 	bl	8007250 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800711c:	2301      	movs	r3, #1
 800711e:	61bb      	str	r3, [r7, #24]
 8007120:	e002      	b.n	8007128 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007122:	f04f 33ff 	mov.w	r3, #4294967295
 8007126:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007128:	69bb      	ldr	r3, [r7, #24]
	}
 800712a:	4618      	mov	r0, r3
 800712c:	3720      	adds	r7, #32
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b088      	sub	sp, #32
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	607a      	str	r2, [r7, #4]
 800713e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	461a      	mov	r2, r3
 800714a:	21a5      	movs	r1, #165	; 0xa5
 800714c:	f002 fb05 	bl	800975a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800715a:	3b01      	subs	r3, #1
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	f023 0307 	bic.w	r3, r3, #7
 8007168:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	2b00      	cmp	r3, #0
 8007172:	d009      	beq.n	8007188 <prvInitialiseNewTask+0x56>
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	e7fe      	b.n	8007186 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d01f      	beq.n	80071ce <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	e012      	b.n	80071ba <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	4413      	add	r3, r2
 800719a:	7819      	ldrb	r1, [r3, #0]
 800719c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	4413      	add	r3, r2
 80071a2:	3334      	adds	r3, #52	; 0x34
 80071a4:	460a      	mov	r2, r1
 80071a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	4413      	add	r3, r2
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	3301      	adds	r3, #1
 80071b8:	61fb      	str	r3, [r7, #28]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	2b0f      	cmp	r3, #15
 80071be:	d9e9      	bls.n	8007194 <prvInitialiseNewTask+0x62>
 80071c0:	e000      	b.n	80071c4 <prvInitialiseNewTask+0x92>
			{
				break;
 80071c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071cc:	e003      	b.n	80071d6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	2b37      	cmp	r3, #55	; 0x37
 80071da:	d901      	bls.n	80071e0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071dc:	2337      	movs	r3, #55	; 0x37
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	2200      	movs	r2, #0
 80071f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	3304      	adds	r3, #4
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff f994 	bl	8006524 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	3318      	adds	r3, #24
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff f98f 	bl	8006524 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800720a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	2200      	movs	r2, #0
 8007220:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	68f9      	ldr	r1, [r7, #12]
 800722e:	69b8      	ldr	r0, [r7, #24]
 8007230:	f001 f90c 	bl	800844c <pxPortInitialiseStack>
 8007234:	4602      	mov	r2, r0
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007246:	bf00      	nop
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007258:	f001 fa20 	bl	800869c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800725c:	4b2d      	ldr	r3, [pc, #180]	; (8007314 <prvAddNewTaskToReadyList+0xc4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3301      	adds	r3, #1
 8007262:	4a2c      	ldr	r2, [pc, #176]	; (8007314 <prvAddNewTaskToReadyList+0xc4>)
 8007264:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007266:	4b2c      	ldr	r3, [pc, #176]	; (8007318 <prvAddNewTaskToReadyList+0xc8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800726e:	4a2a      	ldr	r2, [pc, #168]	; (8007318 <prvAddNewTaskToReadyList+0xc8>)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007274:	4b27      	ldr	r3, [pc, #156]	; (8007314 <prvAddNewTaskToReadyList+0xc4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d110      	bne.n	800729e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800727c:	f000 fc08 	bl	8007a90 <prvInitialiseTaskLists>
 8007280:	e00d      	b.n	800729e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007282:	4b26      	ldr	r3, [pc, #152]	; (800731c <prvAddNewTaskToReadyList+0xcc>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d109      	bne.n	800729e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800728a:	4b23      	ldr	r3, [pc, #140]	; (8007318 <prvAddNewTaskToReadyList+0xc8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	429a      	cmp	r2, r3
 8007296:	d802      	bhi.n	800729e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007298:	4a1f      	ldr	r2, [pc, #124]	; (8007318 <prvAddNewTaskToReadyList+0xc8>)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800729e:	4b20      	ldr	r3, [pc, #128]	; (8007320 <prvAddNewTaskToReadyList+0xd0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3301      	adds	r3, #1
 80072a4:	4a1e      	ldr	r2, [pc, #120]	; (8007320 <prvAddNewTaskToReadyList+0xd0>)
 80072a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072a8:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <prvAddNewTaskToReadyList+0xd0>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4b1b      	ldr	r3, [pc, #108]	; (8007324 <prvAddNewTaskToReadyList+0xd4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d903      	bls.n	80072c4 <prvAddNewTaskToReadyList+0x74>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4a18      	ldr	r2, [pc, #96]	; (8007324 <prvAddNewTaskToReadyList+0xd4>)
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4a15      	ldr	r2, [pc, #84]	; (8007328 <prvAddNewTaskToReadyList+0xd8>)
 80072d2:	441a      	add	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7ff f92f 	bl	800653e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072e0:	f001 fa0a 	bl	80086f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072e4:	4b0d      	ldr	r3, [pc, #52]	; (800731c <prvAddNewTaskToReadyList+0xcc>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00e      	beq.n	800730a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072ec:	4b0a      	ldr	r3, [pc, #40]	; (8007318 <prvAddNewTaskToReadyList+0xc8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d207      	bcs.n	800730a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072fa:	4b0c      	ldr	r3, [pc, #48]	; (800732c <prvAddNewTaskToReadyList+0xdc>)
 80072fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000da0 	.word	0x20000da0
 8007318:	200008cc 	.word	0x200008cc
 800731c:	20000dac 	.word	0x20000dac
 8007320:	20000dbc 	.word	0x20000dbc
 8007324:	20000da8 	.word	0x20000da8
 8007328:	200008d0 	.word	0x200008d0
 800732c:	e000ed04 	.word	0xe000ed04

08007330 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d016      	beq.n	8007370 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007342:	4b13      	ldr	r3, [pc, #76]	; (8007390 <vTaskDelay+0x60>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <vTaskDelay+0x2e>
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	60bb      	str	r3, [r7, #8]
 800735c:	e7fe      	b.n	800735c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800735e:	f000 f87f 	bl	8007460 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007362:	2100      	movs	r1, #0
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fcd7 	bl	8007d18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800736a:	f000 f887 	bl	800747c <xTaskResumeAll>
 800736e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d107      	bne.n	8007386 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <vTaskDelay+0x64>)
 8007378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000dc8 	.word	0x20000dc8
 8007394:	e000ed04 	.word	0xe000ed04

08007398 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073a6:	463a      	mov	r2, r7
 80073a8:	1d39      	adds	r1, r7, #4
 80073aa:	f107 0308 	add.w	r3, r7, #8
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff f864 	bl	800647c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	9202      	str	r2, [sp, #8]
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	2300      	movs	r3, #0
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	2300      	movs	r3, #0
 80073c4:	460a      	mov	r2, r1
 80073c6:	4920      	ldr	r1, [pc, #128]	; (8007448 <vTaskStartScheduler+0xb0>)
 80073c8:	4820      	ldr	r0, [pc, #128]	; (800744c <vTaskStartScheduler+0xb4>)
 80073ca:	f7ff fe13 	bl	8006ff4 <xTaskCreateStatic>
 80073ce:	4602      	mov	r2, r0
 80073d0:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <vTaskStartScheduler+0xb8>)
 80073d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073d4:	4b1e      	ldr	r3, [pc, #120]	; (8007450 <vTaskStartScheduler+0xb8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073dc:	2301      	movs	r3, #1
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e001      	b.n	80073e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d102      	bne.n	80073f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073ec:	f000 fce8 	bl	8007dc0 <xTimerCreateTimerTask>
 80073f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d115      	bne.n	8007424 <vTaskStartScheduler+0x8c>
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <vTaskStartScheduler+0xbc>)
 800740c:	f04f 32ff 	mov.w	r2, #4294967295
 8007410:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007412:	4b11      	ldr	r3, [pc, #68]	; (8007458 <vTaskStartScheduler+0xc0>)
 8007414:	2201      	movs	r2, #1
 8007416:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007418:	4b10      	ldr	r3, [pc, #64]	; (800745c <vTaskStartScheduler+0xc4>)
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800741e:	f001 f89f 	bl	8008560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007422:	e00d      	b.n	8007440 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742a:	d109      	bne.n	8007440 <vTaskStartScheduler+0xa8>
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	e7fe      	b.n	800743e <vTaskStartScheduler+0xa6>
}
 8007440:	bf00      	nop
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	08009fdc 	.word	0x08009fdc
 800744c:	08007a61 	.word	0x08007a61
 8007450:	20000dc4 	.word	0x20000dc4
 8007454:	20000dc0 	.word	0x20000dc0
 8007458:	20000dac 	.word	0x20000dac
 800745c:	20000da4 	.word	0x20000da4

08007460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007464:	4b04      	ldr	r3, [pc, #16]	; (8007478 <vTaskSuspendAll+0x18>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3301      	adds	r3, #1
 800746a:	4a03      	ldr	r2, [pc, #12]	; (8007478 <vTaskSuspendAll+0x18>)
 800746c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800746e:	bf00      	nop
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	20000dc8 	.word	0x20000dc8

0800747c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007486:	2300      	movs	r3, #0
 8007488:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800748a:	4b41      	ldr	r3, [pc, #260]	; (8007590 <xTaskResumeAll+0x114>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d109      	bne.n	80074a6 <xTaskResumeAll+0x2a>
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	e7fe      	b.n	80074a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074a6:	f001 f8f9 	bl	800869c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074aa:	4b39      	ldr	r3, [pc, #228]	; (8007590 <xTaskResumeAll+0x114>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	4a37      	ldr	r2, [pc, #220]	; (8007590 <xTaskResumeAll+0x114>)
 80074b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074b4:	4b36      	ldr	r3, [pc, #216]	; (8007590 <xTaskResumeAll+0x114>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d162      	bne.n	8007582 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074bc:	4b35      	ldr	r3, [pc, #212]	; (8007594 <xTaskResumeAll+0x118>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d05e      	beq.n	8007582 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074c4:	e02f      	b.n	8007526 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c6:	4b34      	ldr	r3, [pc, #208]	; (8007598 <xTaskResumeAll+0x11c>)
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3318      	adds	r3, #24
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff f890 	bl	80065f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3304      	adds	r3, #4
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff f88b 	bl	80065f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e6:	4b2d      	ldr	r3, [pc, #180]	; (800759c <xTaskResumeAll+0x120>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d903      	bls.n	80074f6 <xTaskResumeAll+0x7a>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	4a2a      	ldr	r2, [pc, #168]	; (800759c <xTaskResumeAll+0x120>)
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4a27      	ldr	r2, [pc, #156]	; (80075a0 <xTaskResumeAll+0x124>)
 8007504:	441a      	add	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3304      	adds	r3, #4
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f7ff f816 	bl	800653e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007516:	4b23      	ldr	r3, [pc, #140]	; (80075a4 <xTaskResumeAll+0x128>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	429a      	cmp	r2, r3
 800751e:	d302      	bcc.n	8007526 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007520:	4b21      	ldr	r3, [pc, #132]	; (80075a8 <xTaskResumeAll+0x12c>)
 8007522:	2201      	movs	r2, #1
 8007524:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007526:	4b1c      	ldr	r3, [pc, #112]	; (8007598 <xTaskResumeAll+0x11c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1cb      	bne.n	80074c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007534:	f000 fb46 	bl	8007bc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007538:	4b1c      	ldr	r3, [pc, #112]	; (80075ac <xTaskResumeAll+0x130>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d010      	beq.n	8007566 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007544:	f000 f846 	bl	80075d4 <xTaskIncrementTick>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800754e:	4b16      	ldr	r3, [pc, #88]	; (80075a8 <xTaskResumeAll+0x12c>)
 8007550:	2201      	movs	r2, #1
 8007552:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3b01      	subs	r3, #1
 8007558:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1f1      	bne.n	8007544 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007560:	4b12      	ldr	r3, [pc, #72]	; (80075ac <xTaskResumeAll+0x130>)
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007566:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <xTaskResumeAll+0x12c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800756e:	2301      	movs	r3, #1
 8007570:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007572:	4b0f      	ldr	r3, [pc, #60]	; (80075b0 <xTaskResumeAll+0x134>)
 8007574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007582:	f001 f8b9 	bl	80086f8 <vPortExitCritical>

	return xAlreadyYielded;
 8007586:	68bb      	ldr	r3, [r7, #8]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000dc8 	.word	0x20000dc8
 8007594:	20000da0 	.word	0x20000da0
 8007598:	20000d60 	.word	0x20000d60
 800759c:	20000da8 	.word	0x20000da8
 80075a0:	200008d0 	.word	0x200008d0
 80075a4:	200008cc 	.word	0x200008cc
 80075a8:	20000db4 	.word	0x20000db4
 80075ac:	20000db0 	.word	0x20000db0
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075ba:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <xTaskGetTickCount+0x1c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075c0:	687b      	ldr	r3, [r7, #4]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20000da4 	.word	0x20000da4

080075d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075de:	4b4e      	ldr	r3, [pc, #312]	; (8007718 <xTaskIncrementTick+0x144>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 8088 	bne.w	80076f8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075e8:	4b4c      	ldr	r3, [pc, #304]	; (800771c <xTaskIncrementTick+0x148>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3301      	adds	r3, #1
 80075ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075f0:	4a4a      	ldr	r2, [pc, #296]	; (800771c <xTaskIncrementTick+0x148>)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d11f      	bne.n	800763c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80075fc:	4b48      	ldr	r3, [pc, #288]	; (8007720 <xTaskIncrementTick+0x14c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d009      	beq.n	800761a <xTaskIncrementTick+0x46>
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	e7fe      	b.n	8007618 <xTaskIncrementTick+0x44>
 800761a:	4b41      	ldr	r3, [pc, #260]	; (8007720 <xTaskIncrementTick+0x14c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	4b40      	ldr	r3, [pc, #256]	; (8007724 <xTaskIncrementTick+0x150>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a3e      	ldr	r2, [pc, #248]	; (8007720 <xTaskIncrementTick+0x14c>)
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	4a3e      	ldr	r2, [pc, #248]	; (8007724 <xTaskIncrementTick+0x150>)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	4b3e      	ldr	r3, [pc, #248]	; (8007728 <xTaskIncrementTick+0x154>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3301      	adds	r3, #1
 8007634:	4a3c      	ldr	r2, [pc, #240]	; (8007728 <xTaskIncrementTick+0x154>)
 8007636:	6013      	str	r3, [r2, #0]
 8007638:	f000 fac4 	bl	8007bc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800763c:	4b3b      	ldr	r3, [pc, #236]	; (800772c <xTaskIncrementTick+0x158>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	429a      	cmp	r2, r3
 8007644:	d349      	bcc.n	80076da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007646:	4b36      	ldr	r3, [pc, #216]	; (8007720 <xTaskIncrementTick+0x14c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007650:	4b36      	ldr	r3, [pc, #216]	; (800772c <xTaskIncrementTick+0x158>)
 8007652:	f04f 32ff 	mov.w	r2, #4294967295
 8007656:	601a      	str	r2, [r3, #0]
					break;
 8007658:	e03f      	b.n	80076da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765a:	4b31      	ldr	r3, [pc, #196]	; (8007720 <xTaskIncrementTick+0x14c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d203      	bcs.n	800767a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007672:	4a2e      	ldr	r2, [pc, #184]	; (800772c <xTaskIncrementTick+0x158>)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007678:	e02f      	b.n	80076da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3304      	adds	r3, #4
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe ffba 	bl	80065f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	3318      	adds	r3, #24
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe ffb1 	bl	80065f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	4b25      	ldr	r3, [pc, #148]	; (8007730 <xTaskIncrementTick+0x15c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d903      	bls.n	80076aa <xTaskIncrementTick+0xd6>
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	4a22      	ldr	r2, [pc, #136]	; (8007730 <xTaskIncrementTick+0x15c>)
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4a1f      	ldr	r2, [pc, #124]	; (8007734 <xTaskIncrementTick+0x160>)
 80076b8:	441a      	add	r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	3304      	adds	r3, #4
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f7fe ff3c 	bl	800653e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ca:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <xTaskIncrementTick+0x164>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d3b8      	bcc.n	8007646 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d8:	e7b5      	b.n	8007646 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076da:	4b17      	ldr	r3, [pc, #92]	; (8007738 <xTaskIncrementTick+0x164>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e0:	4914      	ldr	r1, [pc, #80]	; (8007734 <xTaskIncrementTick+0x160>)
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d907      	bls.n	8007702 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80076f2:	2301      	movs	r3, #1
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e004      	b.n	8007702 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076f8:	4b10      	ldr	r3, [pc, #64]	; (800773c <xTaskIncrementTick+0x168>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	4a0f      	ldr	r2, [pc, #60]	; (800773c <xTaskIncrementTick+0x168>)
 8007700:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <xTaskIncrementTick+0x16c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800770e:	697b      	ldr	r3, [r7, #20]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20000dc8 	.word	0x20000dc8
 800771c:	20000da4 	.word	0x20000da4
 8007720:	20000d58 	.word	0x20000d58
 8007724:	20000d5c 	.word	0x20000d5c
 8007728:	20000db8 	.word	0x20000db8
 800772c:	20000dc0 	.word	0x20000dc0
 8007730:	20000da8 	.word	0x20000da8
 8007734:	200008d0 	.word	0x200008d0
 8007738:	200008cc 	.word	0x200008cc
 800773c:	20000db0 	.word	0x20000db0
 8007740:	20000db4 	.word	0x20000db4

08007744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800774a:	4b27      	ldr	r3, [pc, #156]	; (80077e8 <vTaskSwitchContext+0xa4>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007752:	4b26      	ldr	r3, [pc, #152]	; (80077ec <vTaskSwitchContext+0xa8>)
 8007754:	2201      	movs	r2, #1
 8007756:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007758:	e040      	b.n	80077dc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800775a:	4b24      	ldr	r3, [pc, #144]	; (80077ec <vTaskSwitchContext+0xa8>)
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007760:	4b23      	ldr	r3, [pc, #140]	; (80077f0 <vTaskSwitchContext+0xac>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	e00f      	b.n	8007788 <vTaskSwitchContext+0x44>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d109      	bne.n	8007782 <vTaskSwitchContext+0x3e>
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
 8007780:	e7fe      	b.n	8007780 <vTaskSwitchContext+0x3c>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3b01      	subs	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	491a      	ldr	r1, [pc, #104]	; (80077f4 <vTaskSwitchContext+0xb0>)
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0e5      	beq.n	8007768 <vTaskSwitchContext+0x24>
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4a13      	ldr	r2, [pc, #76]	; (80077f4 <vTaskSwitchContext+0xb0>)
 80077a8:	4413      	add	r3, r2
 80077aa:	60bb      	str	r3, [r7, #8]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	605a      	str	r2, [r3, #4]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	3308      	adds	r3, #8
 80077be:	429a      	cmp	r2, r3
 80077c0:	d104      	bne.n	80077cc <vTaskSwitchContext+0x88>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	605a      	str	r2, [r3, #4]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	4a09      	ldr	r2, [pc, #36]	; (80077f8 <vTaskSwitchContext+0xb4>)
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	4a06      	ldr	r2, [pc, #24]	; (80077f0 <vTaskSwitchContext+0xac>)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6013      	str	r3, [r2, #0]
}
 80077dc:	bf00      	nop
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	20000dc8 	.word	0x20000dc8
 80077ec:	20000db4 	.word	0x20000db4
 80077f0:	20000da8 	.word	0x20000da8
 80077f4:	200008d0 	.word	0x200008d0
 80077f8:	200008cc 	.word	0x200008cc

080077fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d109      	bne.n	8007820 <vTaskPlaceOnEventList+0x24>
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	e7fe      	b.n	800781e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007820:	4b07      	ldr	r3, [pc, #28]	; (8007840 <vTaskPlaceOnEventList+0x44>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3318      	adds	r3, #24
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7fe feac 	bl	8006586 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800782e:	2101      	movs	r1, #1
 8007830:	6838      	ldr	r0, [r7, #0]
 8007832:	f000 fa71 	bl	8007d18 <prvAddCurrentTaskToDelayedList>
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	200008cc 	.word	0x200008cc

08007844 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d109      	bne.n	800786a <vTaskPlaceOnEventListRestricted+0x26>
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	e7fe      	b.n	8007868 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800786a:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <vTaskPlaceOnEventListRestricted+0x50>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3318      	adds	r3, #24
 8007870:	4619      	mov	r1, r3
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7fe fe63 	bl	800653e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800787e:	f04f 33ff 	mov.w	r3, #4294967295
 8007882:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	68b8      	ldr	r0, [r7, #8]
 8007888:	f000 fa46 	bl	8007d18 <prvAddCurrentTaskToDelayedList>
	}
 800788c:	bf00      	nop
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	200008cc 	.word	0x200008cc

08007898 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <xTaskRemoveFromEventList+0x2a>
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e7fe      	b.n	80078c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	3318      	adds	r3, #24
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe fe96 	bl	80065f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078cc:	4b1d      	ldr	r3, [pc, #116]	; (8007944 <xTaskRemoveFromEventList+0xac>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d11d      	bne.n	8007910 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fe8d 	bl	80065f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e2:	4b19      	ldr	r3, [pc, #100]	; (8007948 <xTaskRemoveFromEventList+0xb0>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d903      	bls.n	80078f2 <xTaskRemoveFromEventList+0x5a>
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	4a16      	ldr	r2, [pc, #88]	; (8007948 <xTaskRemoveFromEventList+0xb0>)
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4a13      	ldr	r2, [pc, #76]	; (800794c <xTaskRemoveFromEventList+0xb4>)
 8007900:	441a      	add	r2, r3
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	3304      	adds	r3, #4
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f7fe fe18 	bl	800653e <vListInsertEnd>
 800790e:	e005      	b.n	800791c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	3318      	adds	r3, #24
 8007914:	4619      	mov	r1, r3
 8007916:	480e      	ldr	r0, [pc, #56]	; (8007950 <xTaskRemoveFromEventList+0xb8>)
 8007918:	f7fe fe11 	bl	800653e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007920:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <xTaskRemoveFromEventList+0xbc>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	429a      	cmp	r2, r3
 8007928:	d905      	bls.n	8007936 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800792a:	2301      	movs	r3, #1
 800792c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800792e:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <xTaskRemoveFromEventList+0xc0>)
 8007930:	2201      	movs	r2, #1
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	e001      	b.n	800793a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800793a:	697b      	ldr	r3, [r7, #20]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20000dc8 	.word	0x20000dc8
 8007948:	20000da8 	.word	0x20000da8
 800794c:	200008d0 	.word	0x200008d0
 8007950:	20000d60 	.word	0x20000d60
 8007954:	200008cc 	.word	0x200008cc
 8007958:	20000db4 	.word	0x20000db4

0800795c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007964:	4b06      	ldr	r3, [pc, #24]	; (8007980 <vTaskInternalSetTimeOutState+0x24>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <vTaskInternalSetTimeOutState+0x28>)
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	605a      	str	r2, [r3, #4]
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	20000db8 	.word	0x20000db8
 8007984:	20000da4 	.word	0x20000da4

08007988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <xTaskCheckForTimeOut+0x24>
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	e7fe      	b.n	80079aa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <xTaskCheckForTimeOut+0x3e>
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	e7fe      	b.n	80079c4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80079c6:	f000 fe69 	bl	800869c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079ca:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <xTaskCheckForTimeOut+0xb8>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e2:	d102      	bne.n	80079ea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	e023      	b.n	8007a32 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <xTaskCheckForTimeOut+0xbc>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d007      	beq.n	8007a06 <xTaskCheckForTimeOut+0x7e>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d302      	bcc.n	8007a06 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	61fb      	str	r3, [r7, #28]
 8007a04:	e015      	b.n	8007a32 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d20b      	bcs.n	8007a28 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff ff9d 	bl	800795c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	e004      	b.n	8007a32 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a32:	f000 fe61 	bl	80086f8 <vPortExitCritical>

	return xReturn;
 8007a36:	69fb      	ldr	r3, [r7, #28]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3720      	adds	r7, #32
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000da4 	.word	0x20000da4
 8007a44:	20000db8 	.word	0x20000db8

08007a48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a4c:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <vTaskMissedYield+0x14>)
 8007a4e:	2201      	movs	r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
}
 8007a52:	bf00      	nop
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	20000db4 	.word	0x20000db4

08007a60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a68:	f000 f852 	bl	8007b10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a6c:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <prvIdleTask+0x28>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d9f9      	bls.n	8007a68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a74:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <prvIdleTask+0x2c>)
 8007a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a84:	e7f0      	b.n	8007a68 <prvIdleTask+0x8>
 8007a86:	bf00      	nop
 8007a88:	200008d0 	.word	0x200008d0
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a96:	2300      	movs	r3, #0
 8007a98:	607b      	str	r3, [r7, #4]
 8007a9a:	e00c      	b.n	8007ab6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4a12      	ldr	r2, [pc, #72]	; (8007af0 <prvInitialiseTaskLists+0x60>)
 8007aa8:	4413      	add	r3, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fd1a 	bl	80064e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b37      	cmp	r3, #55	; 0x37
 8007aba:	d9ef      	bls.n	8007a9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007abc:	480d      	ldr	r0, [pc, #52]	; (8007af4 <prvInitialiseTaskLists+0x64>)
 8007abe:	f7fe fd11 	bl	80064e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ac2:	480d      	ldr	r0, [pc, #52]	; (8007af8 <prvInitialiseTaskLists+0x68>)
 8007ac4:	f7fe fd0e 	bl	80064e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ac8:	480c      	ldr	r0, [pc, #48]	; (8007afc <prvInitialiseTaskLists+0x6c>)
 8007aca:	f7fe fd0b 	bl	80064e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ace:	480c      	ldr	r0, [pc, #48]	; (8007b00 <prvInitialiseTaskLists+0x70>)
 8007ad0:	f7fe fd08 	bl	80064e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ad4:	480b      	ldr	r0, [pc, #44]	; (8007b04 <prvInitialiseTaskLists+0x74>)
 8007ad6:	f7fe fd05 	bl	80064e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ada:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <prvInitialiseTaskLists+0x78>)
 8007adc:	4a05      	ldr	r2, [pc, #20]	; (8007af4 <prvInitialiseTaskLists+0x64>)
 8007ade:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <prvInitialiseTaskLists+0x7c>)
 8007ae2:	4a05      	ldr	r2, [pc, #20]	; (8007af8 <prvInitialiseTaskLists+0x68>)
 8007ae4:	601a      	str	r2, [r3, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	200008d0 	.word	0x200008d0
 8007af4:	20000d30 	.word	0x20000d30
 8007af8:	20000d44 	.word	0x20000d44
 8007afc:	20000d60 	.word	0x20000d60
 8007b00:	20000d74 	.word	0x20000d74
 8007b04:	20000d8c 	.word	0x20000d8c
 8007b08:	20000d58 	.word	0x20000d58
 8007b0c:	20000d5c 	.word	0x20000d5c

08007b10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b16:	e019      	b.n	8007b4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b18:	f000 fdc0 	bl	800869c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b1c:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <prvCheckTasksWaitingTermination+0x4c>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3304      	adds	r3, #4
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fd65 	bl	80065f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <prvCheckTasksWaitingTermination+0x50>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	4a0a      	ldr	r2, [pc, #40]	; (8007b60 <prvCheckTasksWaitingTermination+0x50>)
 8007b36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b38:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <prvCheckTasksWaitingTermination+0x54>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <prvCheckTasksWaitingTermination+0x54>)
 8007b40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b42:	f000 fdd9 	bl	80086f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f80e 	bl	8007b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <prvCheckTasksWaitingTermination+0x54>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e1      	bne.n	8007b18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	20000d74 	.word	0x20000d74
 8007b60:	20000da0 	.word	0x20000da0
 8007b64:	20000d88 	.word	0x20000d88

08007b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d108      	bne.n	8007b8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 ff68 	bl	8008a54 <vPortFree>
				vPortFree( pxTCB );
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 ff65 	bl	8008a54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b8a:	e017      	b.n	8007bbc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d103      	bne.n	8007b9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 ff5c 	bl	8008a54 <vPortFree>
	}
 8007b9c:	e00e      	b.n	8007bbc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d009      	beq.n	8007bbc <prvDeleteTCB+0x54>
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	e7fe      	b.n	8007bba <prvDeleteTCB+0x52>
	}
 8007bbc:	bf00      	nop
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bca:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <prvResetNextTaskUnblockTime+0x38>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d104      	bne.n	8007bde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <prvResetNextTaskUnblockTime+0x3c>)
 8007bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bdc:	e008      	b.n	8007bf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bde:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <prvResetNextTaskUnblockTime+0x38>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	4a04      	ldr	r2, [pc, #16]	; (8007c00 <prvResetNextTaskUnblockTime+0x3c>)
 8007bee:	6013      	str	r3, [r2, #0]
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	20000d58 	.word	0x20000d58
 8007c00:	20000dc0 	.word	0x20000dc0

08007c04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c0a:	4b0b      	ldr	r3, [pc, #44]	; (8007c38 <xTaskGetSchedulerState+0x34>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d102      	bne.n	8007c18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c12:	2301      	movs	r3, #1
 8007c14:	607b      	str	r3, [r7, #4]
 8007c16:	e008      	b.n	8007c2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c18:	4b08      	ldr	r3, [pc, #32]	; (8007c3c <xTaskGetSchedulerState+0x38>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d102      	bne.n	8007c26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c20:	2302      	movs	r3, #2
 8007c22:	607b      	str	r3, [r7, #4]
 8007c24:	e001      	b.n	8007c2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c26:	2300      	movs	r3, #0
 8007c28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c2a:	687b      	ldr	r3, [r7, #4]
	}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	20000dac 	.word	0x20000dac
 8007c3c:	20000dc8 	.word	0x20000dc8

08007c40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d054      	beq.n	8007d00 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c56:	4b2d      	ldr	r3, [pc, #180]	; (8007d0c <xTaskPriorityDisinherit+0xcc>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d009      	beq.n	8007c74 <xTaskPriorityDisinherit+0x34>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e7fe      	b.n	8007c72 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d109      	bne.n	8007c90 <xTaskPriorityDisinherit+0x50>
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	e7fe      	b.n	8007c8e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c94:	1e5a      	subs	r2, r3, #1
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d02c      	beq.n	8007d00 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d128      	bne.n	8007d00 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fca0 	bl	80065f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <xTaskPriorityDisinherit+0xd0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d903      	bls.n	8007ce0 <xTaskPriorityDisinherit+0xa0>
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	4a0c      	ldr	r2, [pc, #48]	; (8007d10 <xTaskPriorityDisinherit+0xd0>)
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4a09      	ldr	r2, [pc, #36]	; (8007d14 <xTaskPriorityDisinherit+0xd4>)
 8007cee:	441a      	add	r2, r3
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7fe fc21 	bl	800653e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d00:	697b      	ldr	r3, [r7, #20]
	}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	200008cc 	.word	0x200008cc
 8007d10:	20000da8 	.word	0x20000da8
 8007d14:	200008d0 	.word	0x200008d0

08007d18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d22:	4b21      	ldr	r3, [pc, #132]	; (8007da8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d28:	4b20      	ldr	r3, [pc, #128]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fc62 	bl	80065f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d10a      	bne.n	8007d52 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d42:	4b1a      	ldr	r3, [pc, #104]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4819      	ldr	r0, [pc, #100]	; (8007db0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d4c:	f7fe fbf7 	bl	800653e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d50:	e026      	b.n	8007da0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4413      	add	r3, r2
 8007d58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d5a:	4b14      	ldr	r3, [pc, #80]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d209      	bcs.n	8007d7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d6a:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f7fe fc05 	bl	8006586 <vListInsert>
}
 8007d7c:	e010      	b.n	8007da0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f7fe fbfb 	bl	8006586 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d202      	bcs.n	8007da0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d9a:	4a08      	ldr	r2, [pc, #32]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	6013      	str	r3, [r2, #0]
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000da4 	.word	0x20000da4
 8007dac:	200008cc 	.word	0x200008cc
 8007db0:	20000d8c 	.word	0x20000d8c
 8007db4:	20000d5c 	.word	0x20000d5c
 8007db8:	20000d58 	.word	0x20000d58
 8007dbc:	20000dc0 	.word	0x20000dc0

08007dc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	; 0x28
 8007dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dca:	f000 faff 	bl	80083cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dce:	4b1c      	ldr	r3, [pc, #112]	; (8007e40 <xTimerCreateTimerTask+0x80>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d021      	beq.n	8007e1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dde:	1d3a      	adds	r2, r7, #4
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	f107 030c 	add.w	r3, r7, #12
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fb61 	bl	80064b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	9202      	str	r2, [sp, #8]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	2302      	movs	r3, #2
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	460a      	mov	r2, r1
 8007e00:	4910      	ldr	r1, [pc, #64]	; (8007e44 <xTimerCreateTimerTask+0x84>)
 8007e02:	4811      	ldr	r0, [pc, #68]	; (8007e48 <xTimerCreateTimerTask+0x88>)
 8007e04:	f7ff f8f6 	bl	8006ff4 <xTaskCreateStatic>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <xTimerCreateTimerTask+0x8c>)
 8007e0c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <xTimerCreateTimerTask+0x8c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e16:	2301      	movs	r3, #1
 8007e18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d109      	bne.n	8007e34 <xTimerCreateTimerTask+0x74>
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	e7fe      	b.n	8007e32 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007e34:	697b      	ldr	r3, [r7, #20]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20000dfc 	.word	0x20000dfc
 8007e44:	08009fe4 	.word	0x08009fe4
 8007e48:	08007f81 	.word	0x08007f81
 8007e4c:	20000e00 	.word	0x20000e00

08007e50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	; 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <xTimerGenericCommand+0x2c>
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	623b      	str	r3, [r7, #32]
 8007e7a:	e7fe      	b.n	8007e7a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e7c:	4b19      	ldr	r3, [pc, #100]	; (8007ee4 <xTimerGenericCommand+0x94>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d02a      	beq.n	8007eda <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	dc18      	bgt.n	8007ec8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e96:	f7ff feb5 	bl	8007c04 <xTaskGetSchedulerState>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d109      	bne.n	8007eb4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ea0:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <xTimerGenericCommand+0x94>)
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	f107 0110 	add.w	r1, r7, #16
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eac:	f7fe fccc 	bl	8006848 <xQueueGenericSend>
 8007eb0:	6278      	str	r0, [r7, #36]	; 0x24
 8007eb2:	e012      	b.n	8007eda <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <xTimerGenericCommand+0x94>)
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	f107 0110 	add.w	r1, r7, #16
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f7fe fcc2 	bl	8006848 <xQueueGenericSend>
 8007ec4:	6278      	str	r0, [r7, #36]	; 0x24
 8007ec6:	e008      	b.n	8007eda <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <xTimerGenericCommand+0x94>)
 8007eca:	6818      	ldr	r0, [r3, #0]
 8007ecc:	f107 0110 	add.w	r1, r7, #16
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	f7fe fdb2 	bl	8006a3c <xQueueGenericSendFromISR>
 8007ed8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3728      	adds	r7, #40	; 0x28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20000dfc 	.word	0x20000dfc

08007ee8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af02      	add	r7, sp, #8
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef2:	4b22      	ldr	r3, [pc, #136]	; (8007f7c <prvProcessExpiredTimer+0x94>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	3304      	adds	r3, #4
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe fb79 	bl	80065f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d021      	beq.n	8007f58 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	699a      	ldr	r2, [r3, #24]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	18d1      	adds	r1, r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	6978      	ldr	r0, [r7, #20]
 8007f22:	f000 f8d1 	bl	80080c8 <prvInsertTimerInActiveList>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01e      	beq.n	8007f6a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	2300      	movs	r3, #0
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	2100      	movs	r1, #0
 8007f36:	6978      	ldr	r0, [r7, #20]
 8007f38:	f7ff ff8a 	bl	8007e50 <xTimerGenericCommand>
 8007f3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d112      	bne.n	8007f6a <prvProcessExpiredTimer+0x82>
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	e7fe      	b.n	8007f56 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f5e:	f023 0301 	bic.w	r3, r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	6978      	ldr	r0, [r7, #20]
 8007f70:	4798      	blx	r3
}
 8007f72:	bf00      	nop
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000df4 	.word	0x20000df4

08007f80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f88:	f107 0308 	add.w	r3, r7, #8
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 f857 	bl	8008040 <prvGetNextExpireTime>
 8007f92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4619      	mov	r1, r3
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 f803 	bl	8007fa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f9e:	f000 f8d5 	bl	800814c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fa2:	e7f1      	b.n	8007f88 <prvTimerTask+0x8>

08007fa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fae:	f7ff fa57 	bl	8007460 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fb2:	f107 0308 	add.w	r3, r7, #8
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 f866 	bl	8008088 <prvSampleTimeNow>
 8007fbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d130      	bne.n	8008026 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <prvProcessTimerOrBlockTask+0x3c>
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d806      	bhi.n	8007fe0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fd2:	f7ff fa53 	bl	800747c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fd6:	68f9      	ldr	r1, [r7, #12]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff ff85 	bl	8007ee8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fde:	e024      	b.n	800802a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d008      	beq.n	8007ff8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fe6:	4b13      	ldr	r3, [pc, #76]	; (8008034 <prvProcessTimerOrBlockTask+0x90>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <prvProcessTimerOrBlockTask+0x50>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <prvProcessTimerOrBlockTask+0x52>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ff8:	4b0f      	ldr	r3, [pc, #60]	; (8008038 <prvProcessTimerOrBlockTask+0x94>)
 8007ffa:	6818      	ldr	r0, [r3, #0]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	4619      	mov	r1, r3
 8008006:	f7fe ffc1 	bl	8006f8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800800a:	f7ff fa37 	bl	800747c <xTaskResumeAll>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008014:	4b09      	ldr	r3, [pc, #36]	; (800803c <prvProcessTimerOrBlockTask+0x98>)
 8008016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	f3bf 8f6f 	isb	sy
}
 8008024:	e001      	b.n	800802a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008026:	f7ff fa29 	bl	800747c <xTaskResumeAll>
}
 800802a:	bf00      	nop
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000df8 	.word	0x20000df8
 8008038:	20000dfc 	.word	0x20000dfc
 800803c:	e000ed04 	.word	0xe000ed04

08008040 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008048:	4b0e      	ldr	r3, [pc, #56]	; (8008084 <prvGetNextExpireTime+0x44>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <prvGetNextExpireTime+0x16>
 8008052:	2201      	movs	r2, #1
 8008054:	e000      	b.n	8008058 <prvGetNextExpireTime+0x18>
 8008056:	2200      	movs	r2, #0
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d105      	bne.n	8008070 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008064:	4b07      	ldr	r3, [pc, #28]	; (8008084 <prvGetNextExpireTime+0x44>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	e001      	b.n	8008074 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008074:	68fb      	ldr	r3, [r7, #12]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000df4 	.word	0x20000df4

08008088 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008090:	f7ff fa90 	bl	80075b4 <xTaskGetTickCount>
 8008094:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <prvSampleTimeNow+0x3c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	429a      	cmp	r2, r3
 800809e:	d205      	bcs.n	80080ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080a0:	f000 f930 	bl	8008304 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	e002      	b.n	80080b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080b2:	4a04      	ldr	r2, [pc, #16]	; (80080c4 <prvSampleTimeNow+0x3c>)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080b8:	68fb      	ldr	r3, [r7, #12]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20000e04 	.word	0x20000e04

080080c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d812      	bhi.n	8008114 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	1ad2      	subs	r2, r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d302      	bcc.n	8008102 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080fc:	2301      	movs	r3, #1
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	e01b      	b.n	800813a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008102:	4b10      	ldr	r3, [pc, #64]	; (8008144 <prvInsertTimerInActiveList+0x7c>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3304      	adds	r3, #4
 800810a:	4619      	mov	r1, r3
 800810c:	4610      	mov	r0, r2
 800810e:	f7fe fa3a 	bl	8006586 <vListInsert>
 8008112:	e012      	b.n	800813a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d206      	bcs.n	800812a <prvInsertTimerInActiveList+0x62>
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	429a      	cmp	r2, r3
 8008122:	d302      	bcc.n	800812a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008124:	2301      	movs	r3, #1
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e007      	b.n	800813a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800812a:	4b07      	ldr	r3, [pc, #28]	; (8008148 <prvInsertTimerInActiveList+0x80>)
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3304      	adds	r3, #4
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f7fe fa26 	bl	8006586 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800813a:	697b      	ldr	r3, [r7, #20]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	20000df8 	.word	0x20000df8
 8008148:	20000df4 	.word	0x20000df4

0800814c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08e      	sub	sp, #56	; 0x38
 8008150:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008152:	e0c6      	b.n	80082e2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	da17      	bge.n	800818a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800815a:	1d3b      	adds	r3, r7, #4
 800815c:	3304      	adds	r3, #4
 800815e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d109      	bne.n	800817a <prvProcessReceivedCommands+0x2e>
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	e7fe      	b.n	8008178 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008180:	6850      	ldr	r0, [r2, #4]
 8008182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008184:	6892      	ldr	r2, [r2, #8]
 8008186:	4611      	mov	r1, r2
 8008188:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f2c0 80a7 	blt.w	80082e0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	3304      	adds	r3, #4
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe fa28 	bl	80065f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081a8:	463b      	mov	r3, r7
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff ff6c 	bl	8008088 <prvSampleTimeNow>
 80081b0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b09      	cmp	r3, #9
 80081b6:	f200 8094 	bhi.w	80082e2 <prvProcessReceivedCommands+0x196>
 80081ba:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <prvProcessReceivedCommands+0x74>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081e9 	.word	0x080081e9
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	080081e9 	.word	0x080081e9
 80081cc:	0800825b 	.word	0x0800825b
 80081d0:	0800826f 	.word	0x0800826f
 80081d4:	080082b7 	.word	0x080082b7
 80081d8:	080081e9 	.word	0x080081e9
 80081dc:	080081e9 	.word	0x080081e9
 80081e0:	0800825b 	.word	0x0800825b
 80081e4:	0800826f 	.word	0x0800826f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081ee:	f043 0301 	orr.w	r3, r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	18d1      	adds	r1, r2, r3
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008208:	f7ff ff5e 	bl	80080c8 <prvInsertTimerInActiveList>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d067      	beq.n	80082e2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008218:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	d05c      	beq.n	80082e2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	441a      	add	r2, r3
 8008230:	2300      	movs	r3, #0
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	2100      	movs	r1, #0
 8008238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800823a:	f7ff fe09 	bl	8007e50 <xTimerGenericCommand>
 800823e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d14d      	bne.n	80082e2 <prvProcessReceivedCommands+0x196>
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	61bb      	str	r3, [r7, #24]
 8008258:	e7fe      	b.n	8008258 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008260:	f023 0301 	bic.w	r3, r3, #1
 8008264:	b2da      	uxtb	r2, r3
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800826c:	e039      	b.n	80082e2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008274:	f043 0301 	orr.w	r3, r3, #1
 8008278:	b2da      	uxtb	r2, r3
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <prvProcessReceivedCommands+0x156>
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	e7fe      	b.n	80082a0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	18d1      	adds	r1, r2, r3
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b0:	f7ff ff0a 	bl	80080c8 <prvInsertTimerInActiveList>
					break;
 80082b4:	e015      	b.n	80082e2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d103      	bne.n	80082cc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80082c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c6:	f000 fbc5 	bl	8008a54 <vPortFree>
 80082ca:	e00a      	b.n	80082e2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082d2:	f023 0301 	bic.w	r3, r3, #1
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082de:	e000      	b.n	80082e2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082e2:	4b07      	ldr	r3, [pc, #28]	; (8008300 <prvProcessReceivedCommands+0x1b4>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	1d39      	adds	r1, r7, #4
 80082e8:	2200      	movs	r2, #0
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fc3a 	bl	8006b64 <xQueueReceive>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f47f af2e 	bne.w	8008154 <prvProcessReceivedCommands+0x8>
	}
}
 80082f8:	bf00      	nop
 80082fa:	3730      	adds	r7, #48	; 0x30
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000dfc 	.word	0x20000dfc

08008304 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800830a:	e047      	b.n	800839c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800830c:	4b2d      	ldr	r3, [pc, #180]	; (80083c4 <prvSwitchTimerLists+0xc0>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008316:	4b2b      	ldr	r3, [pc, #172]	; (80083c4 <prvSwitchTimerLists+0xc0>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3304      	adds	r3, #4
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe f967 	bl	80065f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008338:	f003 0304 	and.w	r3, r3, #4
 800833c:	2b00      	cmp	r3, #0
 800833e:	d02d      	beq.n	800839c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	4413      	add	r3, r2
 8008348:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	429a      	cmp	r2, r3
 8008350:	d90e      	bls.n	8008370 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800835e:	4b19      	ldr	r3, [pc, #100]	; (80083c4 <prvSwitchTimerLists+0xc0>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3304      	adds	r3, #4
 8008366:	4619      	mov	r1, r3
 8008368:	4610      	mov	r0, r2
 800836a:	f7fe f90c 	bl	8006586 <vListInsert>
 800836e:	e015      	b.n	800839c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	2100      	movs	r1, #0
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f7ff fd68 	bl	8007e50 <xTimerGenericCommand>
 8008380:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <prvSwitchTimerLists+0x98>
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	603b      	str	r3, [r7, #0]
 800839a:	e7fe      	b.n	800839a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <prvSwitchTimerLists+0xc0>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1b2      	bne.n	800830c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083a6:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <prvSwitchTimerLists+0xc0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083ac:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <prvSwitchTimerLists+0xc4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a04      	ldr	r2, [pc, #16]	; (80083c4 <prvSwitchTimerLists+0xc0>)
 80083b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083b4:	4a04      	ldr	r2, [pc, #16]	; (80083c8 <prvSwitchTimerLists+0xc4>)
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	6013      	str	r3, [r2, #0]
}
 80083ba:	bf00      	nop
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000df4 	.word	0x20000df4
 80083c8:	20000df8 	.word	0x20000df8

080083cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083d2:	f000 f963 	bl	800869c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083d6:	4b15      	ldr	r3, [pc, #84]	; (800842c <prvCheckForValidListAndQueue+0x60>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d120      	bne.n	8008420 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083de:	4814      	ldr	r0, [pc, #80]	; (8008430 <prvCheckForValidListAndQueue+0x64>)
 80083e0:	f7fe f880 	bl	80064e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083e4:	4813      	ldr	r0, [pc, #76]	; (8008434 <prvCheckForValidListAndQueue+0x68>)
 80083e6:	f7fe f87d 	bl	80064e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083ea:	4b13      	ldr	r3, [pc, #76]	; (8008438 <prvCheckForValidListAndQueue+0x6c>)
 80083ec:	4a10      	ldr	r2, [pc, #64]	; (8008430 <prvCheckForValidListAndQueue+0x64>)
 80083ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083f0:	4b12      	ldr	r3, [pc, #72]	; (800843c <prvCheckForValidListAndQueue+0x70>)
 80083f2:	4a10      	ldr	r2, [pc, #64]	; (8008434 <prvCheckForValidListAndQueue+0x68>)
 80083f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083f6:	2300      	movs	r3, #0
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	4b11      	ldr	r3, [pc, #68]	; (8008440 <prvCheckForValidListAndQueue+0x74>)
 80083fc:	4a11      	ldr	r2, [pc, #68]	; (8008444 <prvCheckForValidListAndQueue+0x78>)
 80083fe:	2110      	movs	r1, #16
 8008400:	200a      	movs	r0, #10
 8008402:	f7fe f98b 	bl	800671c <xQueueGenericCreateStatic>
 8008406:	4602      	mov	r2, r0
 8008408:	4b08      	ldr	r3, [pc, #32]	; (800842c <prvCheckForValidListAndQueue+0x60>)
 800840a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800840c:	4b07      	ldr	r3, [pc, #28]	; (800842c <prvCheckForValidListAndQueue+0x60>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <prvCheckForValidListAndQueue+0x60>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	490b      	ldr	r1, [pc, #44]	; (8008448 <prvCheckForValidListAndQueue+0x7c>)
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fd8e 	bl	8006f3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008420:	f000 f96a 	bl	80086f8 <vPortExitCritical>
}
 8008424:	bf00      	nop
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000dfc 	.word	0x20000dfc
 8008430:	20000dcc 	.word	0x20000dcc
 8008434:	20000de0 	.word	0x20000de0
 8008438:	20000df4 	.word	0x20000df4
 800843c:	20000df8 	.word	0x20000df8
 8008440:	20000ea8 	.word	0x20000ea8
 8008444:	20000e08 	.word	0x20000e08
 8008448:	08009fec 	.word	0x08009fec

0800844c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3b04      	subs	r3, #4
 800845c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3b04      	subs	r3, #4
 800846a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f023 0201 	bic.w	r2, r3, #1
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3b04      	subs	r3, #4
 800847a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800847c:	4a0c      	ldr	r2, [pc, #48]	; (80084b0 <pxPortInitialiseStack+0x64>)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3b14      	subs	r3, #20
 8008486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3b04      	subs	r3, #4
 8008492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f06f 0202 	mvn.w	r2, #2
 800849a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3b20      	subs	r3, #32
 80084a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084a2:	68fb      	ldr	r3, [r7, #12]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	080084b5 	.word	0x080084b5

080084b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084be:	4b11      	ldr	r3, [pc, #68]	; (8008504 <prvTaskExitError+0x50>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c6:	d009      	beq.n	80084dc <prvTaskExitError+0x28>
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	e7fe      	b.n	80084da <prvTaskExitError+0x26>
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084ee:	bf00      	nop
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0fc      	beq.n	80084f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	2000011c 	.word	0x2000011c
	...

08008510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <pxCurrentTCBConst2>)
 8008512:	6819      	ldr	r1, [r3, #0]
 8008514:	6808      	ldr	r0, [r1, #0]
 8008516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851a:	f380 8809 	msr	PSP, r0
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f04f 0000 	mov.w	r0, #0
 8008526:	f380 8811 	msr	BASEPRI, r0
 800852a:	4770      	bx	lr
 800852c:	f3af 8000 	nop.w

08008530 <pxCurrentTCBConst2>:
 8008530:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop

08008538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008538:	4808      	ldr	r0, [pc, #32]	; (800855c <prvPortStartFirstTask+0x24>)
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	6800      	ldr	r0, [r0, #0]
 800853e:	f380 8808 	msr	MSP, r0
 8008542:	f04f 0000 	mov.w	r0, #0
 8008546:	f380 8814 	msr	CONTROL, r0
 800854a:	b662      	cpsie	i
 800854c:	b661      	cpsie	f
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	df00      	svc	0
 8008558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800855a:	bf00      	nop
 800855c:	e000ed08 	.word	0xe000ed08

08008560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008566:	4b44      	ldr	r3, [pc, #272]	; (8008678 <xPortStartScheduler+0x118>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a44      	ldr	r2, [pc, #272]	; (800867c <xPortStartScheduler+0x11c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d109      	bne.n	8008584 <xPortStartScheduler+0x24>
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	613b      	str	r3, [r7, #16]
 8008582:	e7fe      	b.n	8008582 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008584:	4b3c      	ldr	r3, [pc, #240]	; (8008678 <xPortStartScheduler+0x118>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a3d      	ldr	r2, [pc, #244]	; (8008680 <xPortStartScheduler+0x120>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d109      	bne.n	80085a2 <xPortStartScheduler+0x42>
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	e7fe      	b.n	80085a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085a2:	4b38      	ldr	r3, [pc, #224]	; (8008684 <xPortStartScheduler+0x124>)
 80085a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	22ff      	movs	r2, #255	; 0xff
 80085b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	4b30      	ldr	r3, [pc, #192]	; (8008688 <xPortStartScheduler+0x128>)
 80085c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085ca:	4b30      	ldr	r3, [pc, #192]	; (800868c <xPortStartScheduler+0x12c>)
 80085cc:	2207      	movs	r2, #7
 80085ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085d0:	e009      	b.n	80085e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80085d2:	4b2e      	ldr	r3, [pc, #184]	; (800868c <xPortStartScheduler+0x12c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	4a2c      	ldr	r2, [pc, #176]	; (800868c <xPortStartScheduler+0x12c>)
 80085da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085dc:	78fb      	ldrb	r3, [r7, #3]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ee:	2b80      	cmp	r3, #128	; 0x80
 80085f0:	d0ef      	beq.n	80085d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085f2:	4b26      	ldr	r3, [pc, #152]	; (800868c <xPortStartScheduler+0x12c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f1c3 0307 	rsb	r3, r3, #7
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d009      	beq.n	8008612 <xPortStartScheduler+0xb2>
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	60bb      	str	r3, [r7, #8]
 8008610:	e7fe      	b.n	8008610 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008612:	4b1e      	ldr	r3, [pc, #120]	; (800868c <xPortStartScheduler+0x12c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	4a1c      	ldr	r2, [pc, #112]	; (800868c <xPortStartScheduler+0x12c>)
 800861a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800861c:	4b1b      	ldr	r3, [pc, #108]	; (800868c <xPortStartScheduler+0x12c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008624:	4a19      	ldr	r2, [pc, #100]	; (800868c <xPortStartScheduler+0x12c>)
 8008626:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	b2da      	uxtb	r2, r3
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008630:	4b17      	ldr	r3, [pc, #92]	; (8008690 <xPortStartScheduler+0x130>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a16      	ldr	r2, [pc, #88]	; (8008690 <xPortStartScheduler+0x130>)
 8008636:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800863a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800863c:	4b14      	ldr	r3, [pc, #80]	; (8008690 <xPortStartScheduler+0x130>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a13      	ldr	r2, [pc, #76]	; (8008690 <xPortStartScheduler+0x130>)
 8008642:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008646:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008648:	f000 f8d6 	bl	80087f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800864c:	4b11      	ldr	r3, [pc, #68]	; (8008694 <xPortStartScheduler+0x134>)
 800864e:	2200      	movs	r2, #0
 8008650:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008652:	f000 f8f5 	bl	8008840 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008656:	4b10      	ldr	r3, [pc, #64]	; (8008698 <xPortStartScheduler+0x138>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a0f      	ldr	r2, [pc, #60]	; (8008698 <xPortStartScheduler+0x138>)
 800865c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008660:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008662:	f7ff ff69 	bl	8008538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008666:	f7ff f86d 	bl	8007744 <vTaskSwitchContext>
	prvTaskExitError();
 800866a:	f7ff ff23 	bl	80084b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	e000ed00 	.word	0xe000ed00
 800867c:	410fc271 	.word	0x410fc271
 8008680:	410fc270 	.word	0x410fc270
 8008684:	e000e400 	.word	0xe000e400
 8008688:	20000ef8 	.word	0x20000ef8
 800868c:	20000efc 	.word	0x20000efc
 8008690:	e000ed20 	.word	0xe000ed20
 8008694:	2000011c 	.word	0x2000011c
 8008698:	e000ef34 	.word	0xe000ef34

0800869c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086b4:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <vPortEnterCritical+0x54>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3301      	adds	r3, #1
 80086ba:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <vPortEnterCritical+0x54>)
 80086bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086be:	4b0c      	ldr	r3, [pc, #48]	; (80086f0 <vPortEnterCritical+0x54>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d10e      	bne.n	80086e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086c6:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <vPortEnterCritical+0x58>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d009      	beq.n	80086e4 <vPortEnterCritical+0x48>
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	603b      	str	r3, [r7, #0]
 80086e2:	e7fe      	b.n	80086e2 <vPortEnterCritical+0x46>
	}
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	2000011c 	.word	0x2000011c
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086fe:	4b11      	ldr	r3, [pc, #68]	; (8008744 <vPortExitCritical+0x4c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d109      	bne.n	800871a <vPortExitCritical+0x22>
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	607b      	str	r3, [r7, #4]
 8008718:	e7fe      	b.n	8008718 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800871a:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <vPortExitCritical+0x4c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3b01      	subs	r3, #1
 8008720:	4a08      	ldr	r2, [pc, #32]	; (8008744 <vPortExitCritical+0x4c>)
 8008722:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008724:	4b07      	ldr	r3, [pc, #28]	; (8008744 <vPortExitCritical+0x4c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d104      	bne.n	8008736 <vPortExitCritical+0x3e>
 800872c:	2300      	movs	r3, #0
 800872e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	2000011c 	.word	0x2000011c
	...

08008750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008750:	f3ef 8009 	mrs	r0, PSP
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <pxCurrentTCBConst>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	f01e 0f10 	tst.w	lr, #16
 8008760:	bf08      	it	eq
 8008762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	6010      	str	r0, [r2, #0]
 800876c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008774:	f380 8811 	msr	BASEPRI, r0
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f7fe ffe0 	bl	8007744 <vTaskSwitchContext>
 8008784:	f04f 0000 	mov.w	r0, #0
 8008788:	f380 8811 	msr	BASEPRI, r0
 800878c:	bc09      	pop	{r0, r3}
 800878e:	6819      	ldr	r1, [r3, #0]
 8008790:	6808      	ldr	r0, [r1, #0]
 8008792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008796:	f01e 0f10 	tst.w	lr, #16
 800879a:	bf08      	it	eq
 800879c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087a0:	f380 8809 	msr	PSP, r0
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	f3af 8000 	nop.w

080087b0 <pxCurrentTCBConst>:
 80087b0:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop

080087b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087d0:	f7fe ff00 	bl	80075d4 <xTaskIncrementTick>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087da:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <SysTick_Handler+0x3c>)
 80087dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	2300      	movs	r3, #0
 80087e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	e000ed04 	.word	0xe000ed04

080087f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087fc:	4b0b      	ldr	r3, [pc, #44]	; (800882c <vPortSetupTimerInterrupt+0x34>)
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008802:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <vPortSetupTimerInterrupt+0x38>)
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <vPortSetupTimerInterrupt+0x3c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a0a      	ldr	r2, [pc, #40]	; (8008838 <vPortSetupTimerInterrupt+0x40>)
 800880e:	fba2 2303 	umull	r2, r3, r2, r3
 8008812:	099b      	lsrs	r3, r3, #6
 8008814:	4a09      	ldr	r2, [pc, #36]	; (800883c <vPortSetupTimerInterrupt+0x44>)
 8008816:	3b01      	subs	r3, #1
 8008818:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800881a:	4b04      	ldr	r3, [pc, #16]	; (800882c <vPortSetupTimerInterrupt+0x34>)
 800881c:	2207      	movs	r2, #7
 800881e:	601a      	str	r2, [r3, #0]
}
 8008820:	bf00      	nop
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	e000e010 	.word	0xe000e010
 8008830:	e000e018 	.word	0xe000e018
 8008834:	20000000 	.word	0x20000000
 8008838:	10624dd3 	.word	0x10624dd3
 800883c:	e000e014 	.word	0xe000e014

08008840 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008840:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008850 <vPortEnableVFP+0x10>
 8008844:	6801      	ldr	r1, [r0, #0]
 8008846:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800884a:	6001      	str	r1, [r0, #0]
 800884c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800884e:	bf00      	nop
 8008850:	e000ed88 	.word	0xe000ed88

08008854 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800885a:	f3ef 8305 	mrs	r3, IPSR
 800885e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b0f      	cmp	r3, #15
 8008864:	d913      	bls.n	800888e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008866:	4a16      	ldr	r2, [pc, #88]	; (80088c0 <vPortValidateInterruptPriority+0x6c>)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008870:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <vPortValidateInterruptPriority+0x70>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	7afa      	ldrb	r2, [r7, #11]
 8008876:	429a      	cmp	r2, r3
 8008878:	d209      	bcs.n	800888e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	607b      	str	r3, [r7, #4]
 800888c:	e7fe      	b.n	800888c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800888e:	4b0e      	ldr	r3, [pc, #56]	; (80088c8 <vPortValidateInterruptPriority+0x74>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008896:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <vPortValidateInterruptPriority+0x78>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	429a      	cmp	r2, r3
 800889c:	d909      	bls.n	80088b2 <vPortValidateInterruptPriority+0x5e>
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	e7fe      	b.n	80088b0 <vPortValidateInterruptPriority+0x5c>
	}
 80088b2:	bf00      	nop
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	e000e3f0 	.word	0xe000e3f0
 80088c4:	20000ef8 	.word	0x20000ef8
 80088c8:	e000ed0c 	.word	0xe000ed0c
 80088cc:	20000efc 	.word	0x20000efc

080088d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b08a      	sub	sp, #40	; 0x28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088d8:	2300      	movs	r3, #0
 80088da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088dc:	f7fe fdc0 	bl	8007460 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088e0:	4b57      	ldr	r3, [pc, #348]	; (8008a40 <pvPortMalloc+0x170>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088e8:	f000 f90c 	bl	8008b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088ec:	4b55      	ldr	r3, [pc, #340]	; (8008a44 <pvPortMalloc+0x174>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4013      	ands	r3, r2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f040 808c 	bne.w	8008a12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01c      	beq.n	800893a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008900:	2208      	movs	r2, #8
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	2b00      	cmp	r3, #0
 8008910:	d013      	beq.n	800893a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f023 0307 	bic.w	r3, r3, #7
 8008918:	3308      	adds	r3, #8
 800891a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <pvPortMalloc+0x6a>
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	e7fe      	b.n	8008938 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d068      	beq.n	8008a12 <pvPortMalloc+0x142>
 8008940:	4b41      	ldr	r3, [pc, #260]	; (8008a48 <pvPortMalloc+0x178>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	429a      	cmp	r2, r3
 8008948:	d863      	bhi.n	8008a12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800894a:	4b40      	ldr	r3, [pc, #256]	; (8008a4c <pvPortMalloc+0x17c>)
 800894c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800894e:	4b3f      	ldr	r3, [pc, #252]	; (8008a4c <pvPortMalloc+0x17c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008954:	e004      	b.n	8008960 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	429a      	cmp	r2, r3
 8008968:	d903      	bls.n	8008972 <pvPortMalloc+0xa2>
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f1      	bne.n	8008956 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008972:	4b33      	ldr	r3, [pc, #204]	; (8008a40 <pvPortMalloc+0x170>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008978:	429a      	cmp	r2, r3
 800897a:	d04a      	beq.n	8008a12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2208      	movs	r2, #8
 8008982:	4413      	add	r3, r2
 8008984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	1ad2      	subs	r2, r2, r3
 8008996:	2308      	movs	r3, #8
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	429a      	cmp	r2, r3
 800899c:	d91e      	bls.n	80089dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800899e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4413      	add	r3, r2
 80089a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d009      	beq.n	80089c4 <pvPortMalloc+0xf4>
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	e7fe      	b.n	80089c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	1ad2      	subs	r2, r2, r3
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089d6:	69b8      	ldr	r0, [r7, #24]
 80089d8:	f000 f8f6 	bl	8008bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089dc:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <pvPortMalloc+0x178>)
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	4a18      	ldr	r2, [pc, #96]	; (8008a48 <pvPortMalloc+0x178>)
 80089e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089ea:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <pvPortMalloc+0x178>)
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	4b18      	ldr	r3, [pc, #96]	; (8008a50 <pvPortMalloc+0x180>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d203      	bcs.n	80089fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089f6:	4b14      	ldr	r3, [pc, #80]	; (8008a48 <pvPortMalloc+0x178>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a15      	ldr	r2, [pc, #84]	; (8008a50 <pvPortMalloc+0x180>)
 80089fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <pvPortMalloc+0x174>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	431a      	orrs	r2, r3
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a12:	f7fe fd33 	bl	800747c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	f003 0307 	and.w	r3, r3, #7
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d009      	beq.n	8008a34 <pvPortMalloc+0x164>
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	e7fe      	b.n	8008a32 <pvPortMalloc+0x162>
	return pvReturn;
 8008a34:	69fb      	ldr	r3, [r7, #28]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3728      	adds	r7, #40	; 0x28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20004b08 	.word	0x20004b08
 8008a44:	20004b14 	.word	0x20004b14
 8008a48:	20004b0c 	.word	0x20004b0c
 8008a4c:	20004b00 	.word	0x20004b00
 8008a50:	20004b10 	.word	0x20004b10

08008a54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d046      	beq.n	8008af4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a66:	2308      	movs	r3, #8
 8008a68:	425b      	negs	r3, r3
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	4b20      	ldr	r3, [pc, #128]	; (8008afc <vPortFree+0xa8>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d109      	bne.n	8008a96 <vPortFree+0x42>
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	e7fe      	b.n	8008a94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d009      	beq.n	8008ab2 <vPortFree+0x5e>
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	60bb      	str	r3, [r7, #8]
 8008ab0:	e7fe      	b.n	8008ab0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	4b11      	ldr	r3, [pc, #68]	; (8008afc <vPortFree+0xa8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d019      	beq.n	8008af4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d115      	bne.n	8008af4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	4b0b      	ldr	r3, [pc, #44]	; (8008afc <vPortFree+0xa8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	401a      	ands	r2, r3
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ad8:	f7fe fcc2 	bl	8007460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <vPortFree+0xac>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	4a06      	ldr	r2, [pc, #24]	; (8008b00 <vPortFree+0xac>)
 8008ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008aea:	6938      	ldr	r0, [r7, #16]
 8008aec:	f000 f86c 	bl	8008bc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008af0:	f7fe fcc4 	bl	800747c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008af4:	bf00      	nop
 8008af6:	3718      	adds	r7, #24
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	20004b14 	.word	0x20004b14
 8008b00:	20004b0c 	.word	0x20004b0c

08008b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b10:	4b27      	ldr	r3, [pc, #156]	; (8008bb0 <prvHeapInit+0xac>)
 8008b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00c      	beq.n	8008b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3307      	adds	r3, #7
 8008b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0307 	bic.w	r3, r3, #7
 8008b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	4a1f      	ldr	r2, [pc, #124]	; (8008bb0 <prvHeapInit+0xac>)
 8008b34:	4413      	add	r3, r2
 8008b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b3c:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <prvHeapInit+0xb0>)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b42:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <prvHeapInit+0xb0>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b50:	2208      	movs	r2, #8
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0307 	bic.w	r3, r3, #7
 8008b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4a15      	ldr	r2, [pc, #84]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b66:	4b14      	ldr	r3, [pc, #80]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b6e:	4b12      	ldr	r3, [pc, #72]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	1ad2      	subs	r2, r2, r3
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b84:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <prvHeapInit+0xb4>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	4a0a      	ldr	r2, [pc, #40]	; (8008bbc <prvHeapInit+0xb8>)
 8008b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	4a09      	ldr	r2, [pc, #36]	; (8008bc0 <prvHeapInit+0xbc>)
 8008b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b9c:	4b09      	ldr	r3, [pc, #36]	; (8008bc4 <prvHeapInit+0xc0>)
 8008b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ba2:	601a      	str	r2, [r3, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20000f00 	.word	0x20000f00
 8008bb4:	20004b00 	.word	0x20004b00
 8008bb8:	20004b08 	.word	0x20004b08
 8008bbc:	20004b10 	.word	0x20004b10
 8008bc0:	20004b0c 	.word	0x20004b0c
 8008bc4:	20004b14 	.word	0x20004b14

08008bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bd0:	4b28      	ldr	r3, [pc, #160]	; (8008c74 <prvInsertBlockIntoFreeList+0xac>)
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e002      	b.n	8008bdc <prvInsertBlockIntoFreeList+0x14>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d8f7      	bhi.n	8008bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d108      	bne.n	8008c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	441a      	add	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	441a      	add	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d118      	bne.n	8008c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <prvInsertBlockIntoFreeList+0xb0>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d00d      	beq.n	8008c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	441a      	add	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	e008      	b.n	8008c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c46:	4b0c      	ldr	r3, [pc, #48]	; (8008c78 <prvInsertBlockIntoFreeList+0xb0>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	e003      	b.n	8008c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d002      	beq.n	8008c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20004b00 	.word	0x20004b00
 8008c78:	20004b08 	.word	0x20004b08

08008c7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c80:	2200      	movs	r2, #0
 8008c82:	4912      	ldr	r1, [pc, #72]	; (8008ccc <MX_USB_DEVICE_Init+0x50>)
 8008c84:	4812      	ldr	r0, [pc, #72]	; (8008cd0 <MX_USB_DEVICE_Init+0x54>)
 8008c86:	f7fc f9af 	bl	8004fe8 <USBD_Init>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c90:	f7f7 fedc 	bl	8000a4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c94:	490f      	ldr	r1, [pc, #60]	; (8008cd4 <MX_USB_DEVICE_Init+0x58>)
 8008c96:	480e      	ldr	r0, [pc, #56]	; (8008cd0 <MX_USB_DEVICE_Init+0x54>)
 8008c98:	f7fc f9dc 	bl	8005054 <USBD_RegisterClass>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ca2:	f7f7 fed3 	bl	8000a4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ca6:	490c      	ldr	r1, [pc, #48]	; (8008cd8 <MX_USB_DEVICE_Init+0x5c>)
 8008ca8:	4809      	ldr	r0, [pc, #36]	; (8008cd0 <MX_USB_DEVICE_Init+0x54>)
 8008caa:	f7fc f901 	bl	8004eb0 <USBD_CDC_RegisterInterface>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cb4:	f7f7 feca 	bl	8000a4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cb8:	4805      	ldr	r0, [pc, #20]	; (8008cd0 <MX_USB_DEVICE_Init+0x54>)
 8008cba:	f7fc f9ec 	bl	8005096 <USBD_Start>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cc4:	f7f7 fec2 	bl	8000a4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cc8:	bf00      	nop
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	20000134 	.word	0x20000134
 8008cd0:	20004bfc 	.word	0x20004bfc
 8008cd4:	20000018 	.word	0x20000018
 8008cd8:	20000120 	.word	0x20000120

08008cdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	4905      	ldr	r1, [pc, #20]	; (8008cf8 <CDC_Init_FS+0x1c>)
 8008ce4:	4805      	ldr	r0, [pc, #20]	; (8008cfc <CDC_Init_FS+0x20>)
 8008ce6:	f7fc f8f8 	bl	8004eda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008cea:	4905      	ldr	r1, [pc, #20]	; (8008d00 <CDC_Init_FS+0x24>)
 8008cec:	4803      	ldr	r0, [pc, #12]	; (8008cfc <CDC_Init_FS+0x20>)
 8008cee:	f7fc f90d 	bl	8004f0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008cf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20004ef4 	.word	0x20004ef4
 8008cfc:	20004bfc 	.word	0x20004bfc
 8008d00:	20004ecc 	.word	0x20004ecc

08008d04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
 8008d20:	4613      	mov	r3, r2
 8008d22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b23      	cmp	r3, #35	; 0x23
 8008d28:	d84a      	bhi.n	8008dc0 <CDC_Control_FS+0xac>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <CDC_Control_FS+0x1c>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008dc1 	.word	0x08008dc1
 8008d34:	08008dc1 	.word	0x08008dc1
 8008d38:	08008dc1 	.word	0x08008dc1
 8008d3c:	08008dc1 	.word	0x08008dc1
 8008d40:	08008dc1 	.word	0x08008dc1
 8008d44:	08008dc1 	.word	0x08008dc1
 8008d48:	08008dc1 	.word	0x08008dc1
 8008d4c:	08008dc1 	.word	0x08008dc1
 8008d50:	08008dc1 	.word	0x08008dc1
 8008d54:	08008dc1 	.word	0x08008dc1
 8008d58:	08008dc1 	.word	0x08008dc1
 8008d5c:	08008dc1 	.word	0x08008dc1
 8008d60:	08008dc1 	.word	0x08008dc1
 8008d64:	08008dc1 	.word	0x08008dc1
 8008d68:	08008dc1 	.word	0x08008dc1
 8008d6c:	08008dc1 	.word	0x08008dc1
 8008d70:	08008dc1 	.word	0x08008dc1
 8008d74:	08008dc1 	.word	0x08008dc1
 8008d78:	08008dc1 	.word	0x08008dc1
 8008d7c:	08008dc1 	.word	0x08008dc1
 8008d80:	08008dc1 	.word	0x08008dc1
 8008d84:	08008dc1 	.word	0x08008dc1
 8008d88:	08008dc1 	.word	0x08008dc1
 8008d8c:	08008dc1 	.word	0x08008dc1
 8008d90:	08008dc1 	.word	0x08008dc1
 8008d94:	08008dc1 	.word	0x08008dc1
 8008d98:	08008dc1 	.word	0x08008dc1
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008dc1 	.word	0x08008dc1
 8008da4:	08008dc1 	.word	0x08008dc1
 8008da8:	08008dc1 	.word	0x08008dc1
 8008dac:	08008dc1 	.word	0x08008dc1
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008dc1 	.word	0x08008dc1
 8008db8:	08008dc1 	.word	0x08008dc1
 8008dbc:	08008dc1 	.word	0x08008dc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008dc0:	bf00      	nop
  }

  return (USBD_OK);
 8008dc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	4811      	ldr	r0, [pc, #68]	; (8008e24 <CDC_Receive_FS+0x54>)
 8008dde:	f7fc f895 	bl	8004f0c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008de2:	4810      	ldr	r0, [pc, #64]	; (8008e24 <CDC_Receive_FS+0x54>)
 8008de4:	f7fc f8d6 	bl	8004f94 <USBD_CDC_ReceivePacket>
    extern uint8_t ReceivedData[4]; // Tablica przechowujaca odebrane dane
    extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

    // Wyczyszczenie tablicy odebranych danych
    uint8_t iter;
    for(iter = 0; iter<40; ++iter){
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
 8008dec:	e006      	b.n	8008dfc <CDC_Receive_FS+0x2c>
  	  ReceivedData[iter] = 0;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	4a0d      	ldr	r2, [pc, #52]	; (8008e28 <CDC_Receive_FS+0x58>)
 8008df2:	2100      	movs	r1, #0
 8008df4:	54d1      	strb	r1, [r2, r3]
    for(iter = 0; iter<40; ++iter){
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	73fb      	strb	r3, [r7, #15]
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	2b27      	cmp	r3, #39	; 0x27
 8008e00:	d9f5      	bls.n	8008dee <CDC_Receive_FS+0x1e>
    }

    strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3301      	adds	r3, #1
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	4806      	ldr	r0, [pc, #24]	; (8008e28 <CDC_Receive_FS+0x58>)
 8008e0e:	f000 fd85 	bl	800991c <strlcpy>
    ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8008e12:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <CDC_Receive_FS+0x5c>)
 8008e14:	2201      	movs	r2, #1
 8008e16:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8008e18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20004bfc 	.word	0x20004bfc
 8008e28:	20004b48 	.word	0x20004b48
 8008e2c:	20000206 	.word	0x20000206

08008e30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e40:	4b0d      	ldr	r3, [pc, #52]	; (8008e78 <CDC_Transmit_FS+0x48>)
 8008e42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e00b      	b.n	8008e6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e56:	887b      	ldrh	r3, [r7, #2]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	4806      	ldr	r0, [pc, #24]	; (8008e78 <CDC_Transmit_FS+0x48>)
 8008e5e:	f7fc f83c 	bl	8004eda <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e62:	4805      	ldr	r0, [pc, #20]	; (8008e78 <CDC_Transmit_FS+0x48>)
 8008e64:	f7fc f866 	bl	8004f34 <USBD_CDC_TransmitPacket>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20004bfc 	.word	0x20004bfc

08008e7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4613      	mov	r3, r2
 8008e88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	371c      	adds	r7, #28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
	...

08008ea0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	6039      	str	r1, [r7, #0]
 8008eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2212      	movs	r2, #18
 8008eb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008eb2:	4b03      	ldr	r3, [pc, #12]	; (8008ec0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	20000150 	.word	0x20000150

08008ec4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	6039      	str	r1, [r7, #0]
 8008ece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ed6:	4b03      	ldr	r3, [pc, #12]	; (8008ee4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	20000164 	.word	0x20000164

08008ee8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	6039      	str	r1, [r7, #0]
 8008ef2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d105      	bne.n	8008f06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	4907      	ldr	r1, [pc, #28]	; (8008f1c <USBD_FS_ProductStrDescriptor+0x34>)
 8008efe:	4808      	ldr	r0, [pc, #32]	; (8008f20 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f00:	f7fd f897 	bl	8006032 <USBD_GetString>
 8008f04:	e004      	b.n	8008f10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	4904      	ldr	r1, [pc, #16]	; (8008f1c <USBD_FS_ProductStrDescriptor+0x34>)
 8008f0a:	4805      	ldr	r0, [pc, #20]	; (8008f20 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f0c:	f7fd f891 	bl	8006032 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f10:	4b02      	ldr	r3, [pc, #8]	; (8008f1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20004f1c 	.word	0x20004f1c
 8008f20:	08009ff4 	.word	0x08009ff4

08008f24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	6039      	str	r1, [r7, #0]
 8008f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	4904      	ldr	r1, [pc, #16]	; (8008f44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f34:	4804      	ldr	r0, [pc, #16]	; (8008f48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f36:	f7fd f87c 	bl	8006032 <USBD_GetString>
  return USBD_StrDesc;
 8008f3a:	4b02      	ldr	r3, [pc, #8]	; (8008f44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	20004f1c 	.word	0x20004f1c
 8008f48:	0800a00c 	.word	0x0800a00c

08008f4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	6039      	str	r1, [r7, #0]
 8008f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	221a      	movs	r2, #26
 8008f5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f5e:	f000 f843 	bl	8008fe8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f62:	4b02      	ldr	r3, [pc, #8]	; (8008f6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	20000168 	.word	0x20000168

08008f70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	6039      	str	r1, [r7, #0]
 8008f7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d105      	bne.n	8008f8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	4907      	ldr	r1, [pc, #28]	; (8008fa4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f86:	4808      	ldr	r0, [pc, #32]	; (8008fa8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f88:	f7fd f853 	bl	8006032 <USBD_GetString>
 8008f8c:	e004      	b.n	8008f98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	4904      	ldr	r1, [pc, #16]	; (8008fa4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f92:	4805      	ldr	r0, [pc, #20]	; (8008fa8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f94:	f7fd f84d 	bl	8006032 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20004f1c 	.word	0x20004f1c
 8008fa8:	0800a020 	.word	0x0800a020

08008fac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	6039      	str	r1, [r7, #0]
 8008fb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fb8:	79fb      	ldrb	r3, [r7, #7]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d105      	bne.n	8008fca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	4907      	ldr	r1, [pc, #28]	; (8008fe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fc2:	4808      	ldr	r0, [pc, #32]	; (8008fe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fc4:	f7fd f835 	bl	8006032 <USBD_GetString>
 8008fc8:	e004      	b.n	8008fd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	4904      	ldr	r1, [pc, #16]	; (8008fe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fce:	4805      	ldr	r0, [pc, #20]	; (8008fe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fd0:	f7fd f82f 	bl	8006032 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fd4:	4b02      	ldr	r3, [pc, #8]	; (8008fe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20004f1c 	.word	0x20004f1c
 8008fe4:	0800a02c 	.word	0x0800a02c

08008fe8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fee:	4b0f      	ldr	r3, [pc, #60]	; (800902c <Get_SerialNum+0x44>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ff4:	4b0e      	ldr	r3, [pc, #56]	; (8009030 <Get_SerialNum+0x48>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ffa:	4b0e      	ldr	r3, [pc, #56]	; (8009034 <Get_SerialNum+0x4c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4413      	add	r3, r2
 8009006:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d009      	beq.n	8009022 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800900e:	2208      	movs	r2, #8
 8009010:	4909      	ldr	r1, [pc, #36]	; (8009038 <Get_SerialNum+0x50>)
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 f814 	bl	8009040 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009018:	2204      	movs	r2, #4
 800901a:	4908      	ldr	r1, [pc, #32]	; (800903c <Get_SerialNum+0x54>)
 800901c:	68b8      	ldr	r0, [r7, #8]
 800901e:	f000 f80f 	bl	8009040 <IntToUnicode>
  }
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	1fff7a10 	.word	0x1fff7a10
 8009030:	1fff7a14 	.word	0x1fff7a14
 8009034:	1fff7a18 	.word	0x1fff7a18
 8009038:	2000016a 	.word	0x2000016a
 800903c:	2000017a 	.word	0x2000017a

08009040 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	4613      	mov	r3, r2
 800904c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009052:	2300      	movs	r3, #0
 8009054:	75fb      	strb	r3, [r7, #23]
 8009056:	e027      	b.n	80090a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	0f1b      	lsrs	r3, r3, #28
 800905c:	2b09      	cmp	r3, #9
 800905e:	d80b      	bhi.n	8009078 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	0f1b      	lsrs	r3, r3, #28
 8009064:	b2da      	uxtb	r2, r3
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	4619      	mov	r1, r3
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	440b      	add	r3, r1
 8009070:	3230      	adds	r2, #48	; 0x30
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	701a      	strb	r2, [r3, #0]
 8009076:	e00a      	b.n	800908e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	0f1b      	lsrs	r3, r3, #28
 800907c:	b2da      	uxtb	r2, r3
 800907e:	7dfb      	ldrb	r3, [r7, #23]
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	4619      	mov	r1, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	440b      	add	r3, r1
 8009088:	3237      	adds	r2, #55	; 0x37
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	011b      	lsls	r3, r3, #4
 8009092:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	3301      	adds	r3, #1
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	4413      	add	r3, r2
 800909e:	2200      	movs	r2, #0
 80090a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	3301      	adds	r3, #1
 80090a6:	75fb      	strb	r3, [r7, #23]
 80090a8:	7dfa      	ldrb	r2, [r7, #23]
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d3d3      	bcc.n	8009058 <IntToUnicode+0x18>
  }
}
 80090b0:	bf00      	nop
 80090b2:	371c      	adds	r7, #28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08a      	sub	sp, #40	; 0x28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090c4:	f107 0314 	add.w	r3, r7, #20
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	605a      	str	r2, [r3, #4]
 80090ce:	609a      	str	r2, [r3, #8]
 80090d0:	60da      	str	r2, [r3, #12]
 80090d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090dc:	d147      	bne.n	800916e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090de:	2300      	movs	r3, #0
 80090e0:	613b      	str	r3, [r7, #16]
 80090e2:	4b25      	ldr	r3, [pc, #148]	; (8009178 <HAL_PCD_MspInit+0xbc>)
 80090e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e6:	4a24      	ldr	r2, [pc, #144]	; (8009178 <HAL_PCD_MspInit+0xbc>)
 80090e8:	f043 0301 	orr.w	r3, r3, #1
 80090ec:	6313      	str	r3, [r2, #48]	; 0x30
 80090ee:	4b22      	ldr	r3, [pc, #136]	; (8009178 <HAL_PCD_MspInit+0xbc>)
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	613b      	str	r3, [r7, #16]
 80090f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80090fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009100:	2300      	movs	r3, #0
 8009102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009104:	2300      	movs	r3, #0
 8009106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009108:	f107 0314 	add.w	r3, r7, #20
 800910c:	4619      	mov	r1, r3
 800910e:	481b      	ldr	r0, [pc, #108]	; (800917c <HAL_PCD_MspInit+0xc0>)
 8009110:	f7f7 ff18 	bl	8000f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009114:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800911a:	2302      	movs	r3, #2
 800911c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800911e:	2300      	movs	r3, #0
 8009120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009122:	2300      	movs	r3, #0
 8009124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009126:	230a      	movs	r3, #10
 8009128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800912a:	f107 0314 	add.w	r3, r7, #20
 800912e:	4619      	mov	r1, r3
 8009130:	4812      	ldr	r0, [pc, #72]	; (800917c <HAL_PCD_MspInit+0xc0>)
 8009132:	f7f7 ff07 	bl	8000f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009136:	4b10      	ldr	r3, [pc, #64]	; (8009178 <HAL_PCD_MspInit+0xbc>)
 8009138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913a:	4a0f      	ldr	r2, [pc, #60]	; (8009178 <HAL_PCD_MspInit+0xbc>)
 800913c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009140:	6353      	str	r3, [r2, #52]	; 0x34
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <HAL_PCD_MspInit+0xbc>)
 8009148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914a:	4a0b      	ldr	r2, [pc, #44]	; (8009178 <HAL_PCD_MspInit+0xbc>)
 800914c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009150:	6453      	str	r3, [r2, #68]	; 0x44
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <HAL_PCD_MspInit+0xbc>)
 8009154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800915e:	2200      	movs	r2, #0
 8009160:	2100      	movs	r1, #0
 8009162:	2043      	movs	r0, #67	; 0x43
 8009164:	f7f7 fec4 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009168:	2043      	movs	r0, #67	; 0x43
 800916a:	f7f7 fedd 	bl	8000f28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800916e:	bf00      	nop
 8009170:	3728      	adds	r7, #40	; 0x28
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	40023800 	.word	0x40023800
 800917c:	40020000 	.word	0x40020000

08009180 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009194:	4619      	mov	r1, r3
 8009196:	4610      	mov	r0, r2
 8009198:	f7fb ffc8 	bl	800512c <USBD_LL_SetupStage>
}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80091b6:	78fa      	ldrb	r2, [r7, #3]
 80091b8:	6879      	ldr	r1, [r7, #4]
 80091ba:	4613      	mov	r3, r2
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	1a9b      	subs	r3, r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	440b      	add	r3, r1
 80091c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	4619      	mov	r1, r3
 80091ce:	f7fc f800 	bl	80051d2 <USBD_LL_DataOutStage>
}
 80091d2:	bf00      	nop
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	460b      	mov	r3, r1
 80091e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80091ec:	78fa      	ldrb	r2, [r7, #3]
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4613      	mov	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	3348      	adds	r3, #72	; 0x48
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	4619      	mov	r1, r3
 8009202:	f7fc f849 	bl	8005298 <USBD_LL_DataInStage>
}
 8009206:	bf00      	nop
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800921c:	4618      	mov	r0, r3
 800921e:	f7fc f94d 	bl	80054bc <USBD_LL_SOF>
}
 8009222:	bf00      	nop
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009232:	2301      	movs	r3, #1
 8009234:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
 8009242:	e008      	b.n	8009256 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	2b02      	cmp	r3, #2
 800924a:	d102      	bne.n	8009252 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800924c:	2301      	movs	r3, #1
 800924e:	73fb      	strb	r3, [r7, #15]
 8009250:	e001      	b.n	8009256 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009252:	f7f7 fbfb 	bl	8000a4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800925c:	7bfa      	ldrb	r2, [r7, #15]
 800925e:	4611      	mov	r1, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f7fc f8f0 	bl	8005446 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800926c:	4618      	mov	r0, r3
 800926e:	f7fc f8a9 	bl	80053c4 <USBD_LL_Reset>
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800928a:	4618      	mov	r0, r3
 800928c:	f7fc f8eb 	bl	8005466 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	6812      	ldr	r2, [r2, #0]
 800929e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092a2:	f043 0301 	orr.w	r3, r3, #1
 80092a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d005      	beq.n	80092bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092b0:	4b04      	ldr	r3, [pc, #16]	; (80092c4 <HAL_PCD_SuspendCallback+0x48>)
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	4a03      	ldr	r2, [pc, #12]	; (80092c4 <HAL_PCD_SuspendCallback+0x48>)
 80092b6:	f043 0306 	orr.w	r3, r3, #6
 80092ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	e000ed00 	.word	0xe000ed00

080092c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fc f8da 	bl	8005490 <USBD_LL_Resume>
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092f6:	78fa      	ldrb	r2, [r7, #3]
 80092f8:	4611      	mov	r1, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fc f905 	bl	800550a <USBD_LL_IsoOUTIncomplete>
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800931a:	78fa      	ldrb	r2, [r7, #3]
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f7fc f8e6 	bl	80054f0 <USBD_LL_IsoINIncomplete>
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800933a:	4618      	mov	r0, r3
 800933c:	f7fc f8f2 	bl	8005524 <USBD_LL_DevConnected>
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009356:	4618      	mov	r0, r3
 8009358:	f7fc f8ef 	bl	800553a <USBD_LL_DevDisconnected>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d13c      	bne.n	80093ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009374:	4a20      	ldr	r2, [pc, #128]	; (80093f8 <USBD_LL_Init+0x94>)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a1e      	ldr	r2, [pc, #120]	; (80093f8 <USBD_LL_Init+0x94>)
 8009380:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009384:	4b1c      	ldr	r3, [pc, #112]	; (80093f8 <USBD_LL_Init+0x94>)
 8009386:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800938a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800938c:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <USBD_LL_Init+0x94>)
 800938e:	2204      	movs	r2, #4
 8009390:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009392:	4b19      	ldr	r3, [pc, #100]	; (80093f8 <USBD_LL_Init+0x94>)
 8009394:	2202      	movs	r2, #2
 8009396:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009398:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <USBD_LL_Init+0x94>)
 800939a:	2200      	movs	r2, #0
 800939c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800939e:	4b16      	ldr	r3, [pc, #88]	; (80093f8 <USBD_LL_Init+0x94>)
 80093a0:	2202      	movs	r2, #2
 80093a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093a4:	4b14      	ldr	r3, [pc, #80]	; (80093f8 <USBD_LL_Init+0x94>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093aa:	4b13      	ldr	r3, [pc, #76]	; (80093f8 <USBD_LL_Init+0x94>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093b0:	4b11      	ldr	r3, [pc, #68]	; (80093f8 <USBD_LL_Init+0x94>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80093b6:	4b10      	ldr	r3, [pc, #64]	; (80093f8 <USBD_LL_Init+0x94>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80093bc:	4b0e      	ldr	r3, [pc, #56]	; (80093f8 <USBD_LL_Init+0x94>)
 80093be:	2200      	movs	r2, #0
 80093c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80093c2:	480d      	ldr	r0, [pc, #52]	; (80093f8 <USBD_LL_Init+0x94>)
 80093c4:	f7f7 ffa2 	bl	800130c <HAL_PCD_Init>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80093ce:	f7f7 fb3d 	bl	8000a4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80093d2:	2180      	movs	r1, #128	; 0x80
 80093d4:	4808      	ldr	r0, [pc, #32]	; (80093f8 <USBD_LL_Init+0x94>)
 80093d6:	f7f9 f900 	bl	80025da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80093da:	2240      	movs	r2, #64	; 0x40
 80093dc:	2100      	movs	r1, #0
 80093de:	4806      	ldr	r0, [pc, #24]	; (80093f8 <USBD_LL_Init+0x94>)
 80093e0:	f7f9 f8b4 	bl	800254c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80093e4:	2280      	movs	r2, #128	; 0x80
 80093e6:	2101      	movs	r1, #1
 80093e8:	4803      	ldr	r0, [pc, #12]	; (80093f8 <USBD_LL_Init+0x94>)
 80093ea:	f7f9 f8af 	bl	800254c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	2000511c 	.word	0x2000511c

080093fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009412:	4618      	mov	r0, r3
 8009414:	f7f8 f897 	bl	8001546 <HAL_PCD_Start>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f92a 	bl	8009678 <USBD_Get_USB_Status>
 8009424:	4603      	mov	r3, r0
 8009426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009428:	7bbb      	ldrb	r3, [r7, #14]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	4608      	mov	r0, r1
 800943c:	4611      	mov	r1, r2
 800943e:	461a      	mov	r2, r3
 8009440:	4603      	mov	r3, r0
 8009442:	70fb      	strb	r3, [r7, #3]
 8009444:	460b      	mov	r3, r1
 8009446:	70bb      	strb	r3, [r7, #2]
 8009448:	4613      	mov	r3, r2
 800944a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800945a:	78bb      	ldrb	r3, [r7, #2]
 800945c:	883a      	ldrh	r2, [r7, #0]
 800945e:	78f9      	ldrb	r1, [r7, #3]
 8009460:	f7f8 fc7b 	bl	8001d5a <HAL_PCD_EP_Open>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f904 	bl	8009678 <USBD_Get_USB_Status>
 8009470:	4603      	mov	r3, r0
 8009472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009474:	7bbb      	ldrb	r3, [r7, #14]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	460b      	mov	r3, r1
 8009488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009498:	78fa      	ldrb	r2, [r7, #3]
 800949a:	4611      	mov	r1, r2
 800949c:	4618      	mov	r0, r3
 800949e:	f7f8 fcc4 	bl	8001e2a <HAL_PCD_EP_Close>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 f8e5 	bl	8009678 <USBD_Get_USB_Status>
 80094ae:	4603      	mov	r3, r0
 80094b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f8 fd9c 	bl	8002018 <HAL_PCD_EP_SetStall>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 f8c6 	bl	8009678 <USBD_Get_USB_Status>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f7f8 fde1 	bl	80020e0 <HAL_PCD_EP_ClrStall>
 800951e:	4603      	mov	r3, r0
 8009520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	4618      	mov	r0, r3
 8009526:	f000 f8a7 	bl	8009678 <USBD_Get_USB_Status>
 800952a:	4603      	mov	r3, r0
 800952c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800954a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800954c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009550:	2b00      	cmp	r3, #0
 8009552:	da0b      	bge.n	800956c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800955a:	68f9      	ldr	r1, [r7, #12]
 800955c:	4613      	mov	r3, r2
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	1a9b      	subs	r3, r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	440b      	add	r3, r1
 8009566:	333e      	adds	r3, #62	; 0x3e
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	e00b      	b.n	8009584 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009572:	68f9      	ldr	r1, [r7, #12]
 8009574:	4613      	mov	r3, r2
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	1a9b      	subs	r3, r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	440b      	add	r3, r1
 800957e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009582:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	4611      	mov	r1, r2
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7f8 fbae 	bl	8001d10 <HAL_PCD_SetAddress>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f85c 	bl	8009678 <USBD_Get_USB_Status>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b086      	sub	sp, #24
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
 80095da:	460b      	mov	r3, r1
 80095dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095ec:	7af9      	ldrb	r1, [r7, #11]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	f7f8 fcc7 	bl	8001f84 <HAL_PCD_EP_Transmit>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f83b 	bl	8009678 <USBD_Get_USB_Status>
 8009602:	4603      	mov	r3, r0
 8009604:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009606:	7dbb      	ldrb	r3, [r7, #22]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	607a      	str	r2, [r7, #4]
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	460b      	mov	r3, r1
 800961e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800962e:	7af9      	ldrb	r1, [r7, #11]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	f7f8 fc43 	bl	8001ebe <HAL_PCD_EP_Receive>
 8009638:	4603      	mov	r3, r0
 800963a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	4618      	mov	r0, r3
 8009640:	f000 f81a 	bl	8009678 <USBD_Get_USB_Status>
 8009644:	4603      	mov	r3, r0
 8009646:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009648:	7dbb      	ldrb	r3, [r7, #22]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	460b      	mov	r3, r1
 800965c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009664:	78fa      	ldrb	r2, [r7, #3]
 8009666:	4611      	mov	r1, r2
 8009668:	4618      	mov	r0, r3
 800966a:	f7f8 fc73 	bl	8001f54 <HAL_PCD_EP_GetRxCount>
 800966e:	4603      	mov	r3, r0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	4603      	mov	r3, r0
 8009680:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	2b03      	cmp	r3, #3
 800968a:	d817      	bhi.n	80096bc <USBD_Get_USB_Status+0x44>
 800968c:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <USBD_Get_USB_Status+0x1c>)
 800968e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009692:	bf00      	nop
 8009694:	080096a5 	.word	0x080096a5
 8009698:	080096ab 	.word	0x080096ab
 800969c:	080096b1 	.word	0x080096b1
 80096a0:	080096b7 	.word	0x080096b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73fb      	strb	r3, [r7, #15]
    break;
 80096a8:	e00b      	b.n	80096c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096aa:	2303      	movs	r3, #3
 80096ac:	73fb      	strb	r3, [r7, #15]
    break;
 80096ae:	e008      	b.n	80096c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096b0:	2301      	movs	r3, #1
 80096b2:	73fb      	strb	r3, [r7, #15]
    break;
 80096b4:	e005      	b.n	80096c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096b6:	2303      	movs	r3, #3
 80096b8:	73fb      	strb	r3, [r7, #15]
    break;
 80096ba:	e002      	b.n	80096c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80096bc:	2303      	movs	r3, #3
 80096be:	73fb      	strb	r3, [r7, #15]
    break;
 80096c0:	bf00      	nop
  }
  return usb_status;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <__errno>:
 80096d0:	4b01      	ldr	r3, [pc, #4]	; (80096d8 <__errno+0x8>)
 80096d2:	6818      	ldr	r0, [r3, #0]
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20000184 	.word	0x20000184

080096dc <__libc_init_array>:
 80096dc:	b570      	push	{r4, r5, r6, lr}
 80096de:	4e0d      	ldr	r6, [pc, #52]	; (8009714 <__libc_init_array+0x38>)
 80096e0:	4c0d      	ldr	r4, [pc, #52]	; (8009718 <__libc_init_array+0x3c>)
 80096e2:	1ba4      	subs	r4, r4, r6
 80096e4:	10a4      	asrs	r4, r4, #2
 80096e6:	2500      	movs	r5, #0
 80096e8:	42a5      	cmp	r5, r4
 80096ea:	d109      	bne.n	8009700 <__libc_init_array+0x24>
 80096ec:	4e0b      	ldr	r6, [pc, #44]	; (800971c <__libc_init_array+0x40>)
 80096ee:	4c0c      	ldr	r4, [pc, #48]	; (8009720 <__libc_init_array+0x44>)
 80096f0:	f000 fc4e 	bl	8009f90 <_init>
 80096f4:	1ba4      	subs	r4, r4, r6
 80096f6:	10a4      	asrs	r4, r4, #2
 80096f8:	2500      	movs	r5, #0
 80096fa:	42a5      	cmp	r5, r4
 80096fc:	d105      	bne.n	800970a <__libc_init_array+0x2e>
 80096fe:	bd70      	pop	{r4, r5, r6, pc}
 8009700:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009704:	4798      	blx	r3
 8009706:	3501      	adds	r5, #1
 8009708:	e7ee      	b.n	80096e8 <__libc_init_array+0xc>
 800970a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800970e:	4798      	blx	r3
 8009710:	3501      	adds	r5, #1
 8009712:	e7f2      	b.n	80096fa <__libc_init_array+0x1e>
 8009714:	0800a0d8 	.word	0x0800a0d8
 8009718:	0800a0d8 	.word	0x0800a0d8
 800971c:	0800a0d8 	.word	0x0800a0d8
 8009720:	0800a0dc 	.word	0x0800a0dc

08009724 <malloc>:
 8009724:	4b02      	ldr	r3, [pc, #8]	; (8009730 <malloc+0xc>)
 8009726:	4601      	mov	r1, r0
 8009728:	6818      	ldr	r0, [r3, #0]
 800972a:	f000 b86d 	b.w	8009808 <_malloc_r>
 800972e:	bf00      	nop
 8009730:	20000184 	.word	0x20000184

08009734 <free>:
 8009734:	4b02      	ldr	r3, [pc, #8]	; (8009740 <free+0xc>)
 8009736:	4601      	mov	r1, r0
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	f000 b817 	b.w	800976c <_free_r>
 800973e:	bf00      	nop
 8009740:	20000184 	.word	0x20000184

08009744 <memcpy>:
 8009744:	b510      	push	{r4, lr}
 8009746:	1e43      	subs	r3, r0, #1
 8009748:	440a      	add	r2, r1
 800974a:	4291      	cmp	r1, r2
 800974c:	d100      	bne.n	8009750 <memcpy+0xc>
 800974e:	bd10      	pop	{r4, pc}
 8009750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009758:	e7f7      	b.n	800974a <memcpy+0x6>

0800975a <memset>:
 800975a:	4402      	add	r2, r0
 800975c:	4603      	mov	r3, r0
 800975e:	4293      	cmp	r3, r2
 8009760:	d100      	bne.n	8009764 <memset+0xa>
 8009762:	4770      	bx	lr
 8009764:	f803 1b01 	strb.w	r1, [r3], #1
 8009768:	e7f9      	b.n	800975e <memset+0x4>
	...

0800976c <_free_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4605      	mov	r5, r0
 8009770:	2900      	cmp	r1, #0
 8009772:	d045      	beq.n	8009800 <_free_r+0x94>
 8009774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009778:	1f0c      	subs	r4, r1, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfb8      	it	lt
 800977e:	18e4      	addlt	r4, r4, r3
 8009780:	f000 f8e1 	bl	8009946 <__malloc_lock>
 8009784:	4a1f      	ldr	r2, [pc, #124]	; (8009804 <_free_r+0x98>)
 8009786:	6813      	ldr	r3, [r2, #0]
 8009788:	4610      	mov	r0, r2
 800978a:	b933      	cbnz	r3, 800979a <_free_r+0x2e>
 800978c:	6063      	str	r3, [r4, #4]
 800978e:	6014      	str	r4, [r2, #0]
 8009790:	4628      	mov	r0, r5
 8009792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009796:	f000 b8d7 	b.w	8009948 <__malloc_unlock>
 800979a:	42a3      	cmp	r3, r4
 800979c:	d90c      	bls.n	80097b8 <_free_r+0x4c>
 800979e:	6821      	ldr	r1, [r4, #0]
 80097a0:	1862      	adds	r2, r4, r1
 80097a2:	4293      	cmp	r3, r2
 80097a4:	bf04      	itt	eq
 80097a6:	681a      	ldreq	r2, [r3, #0]
 80097a8:	685b      	ldreq	r3, [r3, #4]
 80097aa:	6063      	str	r3, [r4, #4]
 80097ac:	bf04      	itt	eq
 80097ae:	1852      	addeq	r2, r2, r1
 80097b0:	6022      	streq	r2, [r4, #0]
 80097b2:	6004      	str	r4, [r0, #0]
 80097b4:	e7ec      	b.n	8009790 <_free_r+0x24>
 80097b6:	4613      	mov	r3, r2
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	b10a      	cbz	r2, 80097c0 <_free_r+0x54>
 80097bc:	42a2      	cmp	r2, r4
 80097be:	d9fa      	bls.n	80097b6 <_free_r+0x4a>
 80097c0:	6819      	ldr	r1, [r3, #0]
 80097c2:	1858      	adds	r0, r3, r1
 80097c4:	42a0      	cmp	r0, r4
 80097c6:	d10b      	bne.n	80097e0 <_free_r+0x74>
 80097c8:	6820      	ldr	r0, [r4, #0]
 80097ca:	4401      	add	r1, r0
 80097cc:	1858      	adds	r0, r3, r1
 80097ce:	4282      	cmp	r2, r0
 80097d0:	6019      	str	r1, [r3, #0]
 80097d2:	d1dd      	bne.n	8009790 <_free_r+0x24>
 80097d4:	6810      	ldr	r0, [r2, #0]
 80097d6:	6852      	ldr	r2, [r2, #4]
 80097d8:	605a      	str	r2, [r3, #4]
 80097da:	4401      	add	r1, r0
 80097dc:	6019      	str	r1, [r3, #0]
 80097de:	e7d7      	b.n	8009790 <_free_r+0x24>
 80097e0:	d902      	bls.n	80097e8 <_free_r+0x7c>
 80097e2:	230c      	movs	r3, #12
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	e7d3      	b.n	8009790 <_free_r+0x24>
 80097e8:	6820      	ldr	r0, [r4, #0]
 80097ea:	1821      	adds	r1, r4, r0
 80097ec:	428a      	cmp	r2, r1
 80097ee:	bf04      	itt	eq
 80097f0:	6811      	ldreq	r1, [r2, #0]
 80097f2:	6852      	ldreq	r2, [r2, #4]
 80097f4:	6062      	str	r2, [r4, #4]
 80097f6:	bf04      	itt	eq
 80097f8:	1809      	addeq	r1, r1, r0
 80097fa:	6021      	streq	r1, [r4, #0]
 80097fc:	605c      	str	r4, [r3, #4]
 80097fe:	e7c7      	b.n	8009790 <_free_r+0x24>
 8009800:	bd38      	pop	{r3, r4, r5, pc}
 8009802:	bf00      	nop
 8009804:	20004b18 	.word	0x20004b18

08009808 <_malloc_r>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	1ccd      	adds	r5, r1, #3
 800980c:	f025 0503 	bic.w	r5, r5, #3
 8009810:	3508      	adds	r5, #8
 8009812:	2d0c      	cmp	r5, #12
 8009814:	bf38      	it	cc
 8009816:	250c      	movcc	r5, #12
 8009818:	2d00      	cmp	r5, #0
 800981a:	4606      	mov	r6, r0
 800981c:	db01      	blt.n	8009822 <_malloc_r+0x1a>
 800981e:	42a9      	cmp	r1, r5
 8009820:	d903      	bls.n	800982a <_malloc_r+0x22>
 8009822:	230c      	movs	r3, #12
 8009824:	6033      	str	r3, [r6, #0]
 8009826:	2000      	movs	r0, #0
 8009828:	bd70      	pop	{r4, r5, r6, pc}
 800982a:	f000 f88c 	bl	8009946 <__malloc_lock>
 800982e:	4a21      	ldr	r2, [pc, #132]	; (80098b4 <_malloc_r+0xac>)
 8009830:	6814      	ldr	r4, [r2, #0]
 8009832:	4621      	mov	r1, r4
 8009834:	b991      	cbnz	r1, 800985c <_malloc_r+0x54>
 8009836:	4c20      	ldr	r4, [pc, #128]	; (80098b8 <_malloc_r+0xb0>)
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	b91b      	cbnz	r3, 8009844 <_malloc_r+0x3c>
 800983c:	4630      	mov	r0, r6
 800983e:	f000 f83d 	bl	80098bc <_sbrk_r>
 8009842:	6020      	str	r0, [r4, #0]
 8009844:	4629      	mov	r1, r5
 8009846:	4630      	mov	r0, r6
 8009848:	f000 f838 	bl	80098bc <_sbrk_r>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	d124      	bne.n	800989a <_malloc_r+0x92>
 8009850:	230c      	movs	r3, #12
 8009852:	6033      	str	r3, [r6, #0]
 8009854:	4630      	mov	r0, r6
 8009856:	f000 f877 	bl	8009948 <__malloc_unlock>
 800985a:	e7e4      	b.n	8009826 <_malloc_r+0x1e>
 800985c:	680b      	ldr	r3, [r1, #0]
 800985e:	1b5b      	subs	r3, r3, r5
 8009860:	d418      	bmi.n	8009894 <_malloc_r+0x8c>
 8009862:	2b0b      	cmp	r3, #11
 8009864:	d90f      	bls.n	8009886 <_malloc_r+0x7e>
 8009866:	600b      	str	r3, [r1, #0]
 8009868:	50cd      	str	r5, [r1, r3]
 800986a:	18cc      	adds	r4, r1, r3
 800986c:	4630      	mov	r0, r6
 800986e:	f000 f86b 	bl	8009948 <__malloc_unlock>
 8009872:	f104 000b 	add.w	r0, r4, #11
 8009876:	1d23      	adds	r3, r4, #4
 8009878:	f020 0007 	bic.w	r0, r0, #7
 800987c:	1ac3      	subs	r3, r0, r3
 800987e:	d0d3      	beq.n	8009828 <_malloc_r+0x20>
 8009880:	425a      	negs	r2, r3
 8009882:	50e2      	str	r2, [r4, r3]
 8009884:	e7d0      	b.n	8009828 <_malloc_r+0x20>
 8009886:	428c      	cmp	r4, r1
 8009888:	684b      	ldr	r3, [r1, #4]
 800988a:	bf16      	itet	ne
 800988c:	6063      	strne	r3, [r4, #4]
 800988e:	6013      	streq	r3, [r2, #0]
 8009890:	460c      	movne	r4, r1
 8009892:	e7eb      	b.n	800986c <_malloc_r+0x64>
 8009894:	460c      	mov	r4, r1
 8009896:	6849      	ldr	r1, [r1, #4]
 8009898:	e7cc      	b.n	8009834 <_malloc_r+0x2c>
 800989a:	1cc4      	adds	r4, r0, #3
 800989c:	f024 0403 	bic.w	r4, r4, #3
 80098a0:	42a0      	cmp	r0, r4
 80098a2:	d005      	beq.n	80098b0 <_malloc_r+0xa8>
 80098a4:	1a21      	subs	r1, r4, r0
 80098a6:	4630      	mov	r0, r6
 80098a8:	f000 f808 	bl	80098bc <_sbrk_r>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d0cf      	beq.n	8009850 <_malloc_r+0x48>
 80098b0:	6025      	str	r5, [r4, #0]
 80098b2:	e7db      	b.n	800986c <_malloc_r+0x64>
 80098b4:	20004b18 	.word	0x20004b18
 80098b8:	20004b1c 	.word	0x20004b1c

080098bc <_sbrk_r>:
 80098bc:	b538      	push	{r3, r4, r5, lr}
 80098be:	4c06      	ldr	r4, [pc, #24]	; (80098d8 <_sbrk_r+0x1c>)
 80098c0:	2300      	movs	r3, #0
 80098c2:	4605      	mov	r5, r0
 80098c4:	4608      	mov	r0, r1
 80098c6:	6023      	str	r3, [r4, #0]
 80098c8:	f7f7 f980 	bl	8000bcc <_sbrk>
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	d102      	bne.n	80098d6 <_sbrk_r+0x1a>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	b103      	cbz	r3, 80098d6 <_sbrk_r+0x1a>
 80098d4:	602b      	str	r3, [r5, #0]
 80098d6:	bd38      	pop	{r3, r4, r5, pc}
 80098d8:	20005524 	.word	0x20005524

080098dc <siprintf>:
 80098dc:	b40e      	push	{r1, r2, r3}
 80098de:	b500      	push	{lr}
 80098e0:	b09c      	sub	sp, #112	; 0x70
 80098e2:	ab1d      	add	r3, sp, #116	; 0x74
 80098e4:	9002      	str	r0, [sp, #8]
 80098e6:	9006      	str	r0, [sp, #24]
 80098e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098ec:	4809      	ldr	r0, [pc, #36]	; (8009914 <siprintf+0x38>)
 80098ee:	9107      	str	r1, [sp, #28]
 80098f0:	9104      	str	r1, [sp, #16]
 80098f2:	4909      	ldr	r1, [pc, #36]	; (8009918 <siprintf+0x3c>)
 80098f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f8:	9105      	str	r1, [sp, #20]
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	a902      	add	r1, sp, #8
 8009900:	f000 f87e 	bl	8009a00 <_svfiprintf_r>
 8009904:	9b02      	ldr	r3, [sp, #8]
 8009906:	2200      	movs	r2, #0
 8009908:	701a      	strb	r2, [r3, #0]
 800990a:	b01c      	add	sp, #112	; 0x70
 800990c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009910:	b003      	add	sp, #12
 8009912:	4770      	bx	lr
 8009914:	20000184 	.word	0x20000184
 8009918:	ffff0208 	.word	0xffff0208

0800991c <strlcpy>:
 800991c:	b510      	push	{r4, lr}
 800991e:	460b      	mov	r3, r1
 8009920:	b162      	cbz	r2, 800993c <strlcpy+0x20>
 8009922:	3a01      	subs	r2, #1
 8009924:	d008      	beq.n	8009938 <strlcpy+0x1c>
 8009926:	f813 4b01 	ldrb.w	r4, [r3], #1
 800992a:	f800 4b01 	strb.w	r4, [r0], #1
 800992e:	2c00      	cmp	r4, #0
 8009930:	d1f7      	bne.n	8009922 <strlcpy+0x6>
 8009932:	1a58      	subs	r0, r3, r1
 8009934:	3801      	subs	r0, #1
 8009936:	bd10      	pop	{r4, pc}
 8009938:	2200      	movs	r2, #0
 800993a:	7002      	strb	r2, [r0, #0]
 800993c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009940:	2a00      	cmp	r2, #0
 8009942:	d1fb      	bne.n	800993c <strlcpy+0x20>
 8009944:	e7f5      	b.n	8009932 <strlcpy+0x16>

08009946 <__malloc_lock>:
 8009946:	4770      	bx	lr

08009948 <__malloc_unlock>:
 8009948:	4770      	bx	lr

0800994a <__ssputs_r>:
 800994a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800994e:	688e      	ldr	r6, [r1, #8]
 8009950:	429e      	cmp	r6, r3
 8009952:	4682      	mov	sl, r0
 8009954:	460c      	mov	r4, r1
 8009956:	4690      	mov	r8, r2
 8009958:	4699      	mov	r9, r3
 800995a:	d837      	bhi.n	80099cc <__ssputs_r+0x82>
 800995c:	898a      	ldrh	r2, [r1, #12]
 800995e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009962:	d031      	beq.n	80099c8 <__ssputs_r+0x7e>
 8009964:	6825      	ldr	r5, [r4, #0]
 8009966:	6909      	ldr	r1, [r1, #16]
 8009968:	1a6f      	subs	r7, r5, r1
 800996a:	6965      	ldr	r5, [r4, #20]
 800996c:	2302      	movs	r3, #2
 800996e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009972:	fb95 f5f3 	sdiv	r5, r5, r3
 8009976:	f109 0301 	add.w	r3, r9, #1
 800997a:	443b      	add	r3, r7
 800997c:	429d      	cmp	r5, r3
 800997e:	bf38      	it	cc
 8009980:	461d      	movcc	r5, r3
 8009982:	0553      	lsls	r3, r2, #21
 8009984:	d530      	bpl.n	80099e8 <__ssputs_r+0x9e>
 8009986:	4629      	mov	r1, r5
 8009988:	f7ff ff3e 	bl	8009808 <_malloc_r>
 800998c:	4606      	mov	r6, r0
 800998e:	b950      	cbnz	r0, 80099a6 <__ssputs_r+0x5c>
 8009990:	230c      	movs	r3, #12
 8009992:	f8ca 3000 	str.w	r3, [sl]
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800999c:	81a3      	strh	r3, [r4, #12]
 800999e:	f04f 30ff 	mov.w	r0, #4294967295
 80099a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a6:	463a      	mov	r2, r7
 80099a8:	6921      	ldr	r1, [r4, #16]
 80099aa:	f7ff fecb 	bl	8009744 <memcpy>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	6126      	str	r6, [r4, #16]
 80099bc:	6165      	str	r5, [r4, #20]
 80099be:	443e      	add	r6, r7
 80099c0:	1bed      	subs	r5, r5, r7
 80099c2:	6026      	str	r6, [r4, #0]
 80099c4:	60a5      	str	r5, [r4, #8]
 80099c6:	464e      	mov	r6, r9
 80099c8:	454e      	cmp	r6, r9
 80099ca:	d900      	bls.n	80099ce <__ssputs_r+0x84>
 80099cc:	464e      	mov	r6, r9
 80099ce:	4632      	mov	r2, r6
 80099d0:	4641      	mov	r1, r8
 80099d2:	6820      	ldr	r0, [r4, #0]
 80099d4:	f000 fa94 	bl	8009f00 <memmove>
 80099d8:	68a3      	ldr	r3, [r4, #8]
 80099da:	1b9b      	subs	r3, r3, r6
 80099dc:	60a3      	str	r3, [r4, #8]
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	441e      	add	r6, r3
 80099e2:	6026      	str	r6, [r4, #0]
 80099e4:	2000      	movs	r0, #0
 80099e6:	e7dc      	b.n	80099a2 <__ssputs_r+0x58>
 80099e8:	462a      	mov	r2, r5
 80099ea:	f000 faa2 	bl	8009f32 <_realloc_r>
 80099ee:	4606      	mov	r6, r0
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d1e2      	bne.n	80099ba <__ssputs_r+0x70>
 80099f4:	6921      	ldr	r1, [r4, #16]
 80099f6:	4650      	mov	r0, sl
 80099f8:	f7ff feb8 	bl	800976c <_free_r>
 80099fc:	e7c8      	b.n	8009990 <__ssputs_r+0x46>
	...

08009a00 <_svfiprintf_r>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	461d      	mov	r5, r3
 8009a06:	898b      	ldrh	r3, [r1, #12]
 8009a08:	061f      	lsls	r7, r3, #24
 8009a0a:	b09d      	sub	sp, #116	; 0x74
 8009a0c:	4680      	mov	r8, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	4616      	mov	r6, r2
 8009a12:	d50f      	bpl.n	8009a34 <_svfiprintf_r+0x34>
 8009a14:	690b      	ldr	r3, [r1, #16]
 8009a16:	b96b      	cbnz	r3, 8009a34 <_svfiprintf_r+0x34>
 8009a18:	2140      	movs	r1, #64	; 0x40
 8009a1a:	f7ff fef5 	bl	8009808 <_malloc_r>
 8009a1e:	6020      	str	r0, [r4, #0]
 8009a20:	6120      	str	r0, [r4, #16]
 8009a22:	b928      	cbnz	r0, 8009a30 <_svfiprintf_r+0x30>
 8009a24:	230c      	movs	r3, #12
 8009a26:	f8c8 3000 	str.w	r3, [r8]
 8009a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2e:	e0c8      	b.n	8009bc2 <_svfiprintf_r+0x1c2>
 8009a30:	2340      	movs	r3, #64	; 0x40
 8009a32:	6163      	str	r3, [r4, #20]
 8009a34:	2300      	movs	r3, #0
 8009a36:	9309      	str	r3, [sp, #36]	; 0x24
 8009a38:	2320      	movs	r3, #32
 8009a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a3e:	2330      	movs	r3, #48	; 0x30
 8009a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a44:	9503      	str	r5, [sp, #12]
 8009a46:	f04f 0b01 	mov.w	fp, #1
 8009a4a:	4637      	mov	r7, r6
 8009a4c:	463d      	mov	r5, r7
 8009a4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a52:	b10b      	cbz	r3, 8009a58 <_svfiprintf_r+0x58>
 8009a54:	2b25      	cmp	r3, #37	; 0x25
 8009a56:	d13e      	bne.n	8009ad6 <_svfiprintf_r+0xd6>
 8009a58:	ebb7 0a06 	subs.w	sl, r7, r6
 8009a5c:	d00b      	beq.n	8009a76 <_svfiprintf_r+0x76>
 8009a5e:	4653      	mov	r3, sl
 8009a60:	4632      	mov	r2, r6
 8009a62:	4621      	mov	r1, r4
 8009a64:	4640      	mov	r0, r8
 8009a66:	f7ff ff70 	bl	800994a <__ssputs_r>
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	f000 80a4 	beq.w	8009bb8 <_svfiprintf_r+0x1b8>
 8009a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a72:	4453      	add	r3, sl
 8009a74:	9309      	str	r3, [sp, #36]	; 0x24
 8009a76:	783b      	ldrb	r3, [r7, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 809d 	beq.w	8009bb8 <_svfiprintf_r+0x1b8>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f04f 32ff 	mov.w	r2, #4294967295
 8009a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	9307      	str	r3, [sp, #28]
 8009a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a90:	931a      	str	r3, [sp, #104]	; 0x68
 8009a92:	462f      	mov	r7, r5
 8009a94:	2205      	movs	r2, #5
 8009a96:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009a9a:	4850      	ldr	r0, [pc, #320]	; (8009bdc <_svfiprintf_r+0x1dc>)
 8009a9c:	f7f6 fb98 	bl	80001d0 <memchr>
 8009aa0:	9b04      	ldr	r3, [sp, #16]
 8009aa2:	b9d0      	cbnz	r0, 8009ada <_svfiprintf_r+0xda>
 8009aa4:	06d9      	lsls	r1, r3, #27
 8009aa6:	bf44      	itt	mi
 8009aa8:	2220      	movmi	r2, #32
 8009aaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009aae:	071a      	lsls	r2, r3, #28
 8009ab0:	bf44      	itt	mi
 8009ab2:	222b      	movmi	r2, #43	; 0x2b
 8009ab4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ab8:	782a      	ldrb	r2, [r5, #0]
 8009aba:	2a2a      	cmp	r2, #42	; 0x2a
 8009abc:	d015      	beq.n	8009aea <_svfiprintf_r+0xea>
 8009abe:	9a07      	ldr	r2, [sp, #28]
 8009ac0:	462f      	mov	r7, r5
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	250a      	movs	r5, #10
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009acc:	3b30      	subs	r3, #48	; 0x30
 8009ace:	2b09      	cmp	r3, #9
 8009ad0:	d94d      	bls.n	8009b6e <_svfiprintf_r+0x16e>
 8009ad2:	b1b8      	cbz	r0, 8009b04 <_svfiprintf_r+0x104>
 8009ad4:	e00f      	b.n	8009af6 <_svfiprintf_r+0xf6>
 8009ad6:	462f      	mov	r7, r5
 8009ad8:	e7b8      	b.n	8009a4c <_svfiprintf_r+0x4c>
 8009ada:	4a40      	ldr	r2, [pc, #256]	; (8009bdc <_svfiprintf_r+0x1dc>)
 8009adc:	1a80      	subs	r0, r0, r2
 8009ade:	fa0b f000 	lsl.w	r0, fp, r0
 8009ae2:	4318      	orrs	r0, r3
 8009ae4:	9004      	str	r0, [sp, #16]
 8009ae6:	463d      	mov	r5, r7
 8009ae8:	e7d3      	b.n	8009a92 <_svfiprintf_r+0x92>
 8009aea:	9a03      	ldr	r2, [sp, #12]
 8009aec:	1d11      	adds	r1, r2, #4
 8009aee:	6812      	ldr	r2, [r2, #0]
 8009af0:	9103      	str	r1, [sp, #12]
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	db01      	blt.n	8009afa <_svfiprintf_r+0xfa>
 8009af6:	9207      	str	r2, [sp, #28]
 8009af8:	e004      	b.n	8009b04 <_svfiprintf_r+0x104>
 8009afa:	4252      	negs	r2, r2
 8009afc:	f043 0302 	orr.w	r3, r3, #2
 8009b00:	9207      	str	r2, [sp, #28]
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	783b      	ldrb	r3, [r7, #0]
 8009b06:	2b2e      	cmp	r3, #46	; 0x2e
 8009b08:	d10c      	bne.n	8009b24 <_svfiprintf_r+0x124>
 8009b0a:	787b      	ldrb	r3, [r7, #1]
 8009b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b0e:	d133      	bne.n	8009b78 <_svfiprintf_r+0x178>
 8009b10:	9b03      	ldr	r3, [sp, #12]
 8009b12:	1d1a      	adds	r2, r3, #4
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	9203      	str	r2, [sp, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	bfb8      	it	lt
 8009b1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b20:	3702      	adds	r7, #2
 8009b22:	9305      	str	r3, [sp, #20]
 8009b24:	4d2e      	ldr	r5, [pc, #184]	; (8009be0 <_svfiprintf_r+0x1e0>)
 8009b26:	7839      	ldrb	r1, [r7, #0]
 8009b28:	2203      	movs	r2, #3
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f7f6 fb50 	bl	80001d0 <memchr>
 8009b30:	b138      	cbz	r0, 8009b42 <_svfiprintf_r+0x142>
 8009b32:	2340      	movs	r3, #64	; 0x40
 8009b34:	1b40      	subs	r0, r0, r5
 8009b36:	fa03 f000 	lsl.w	r0, r3, r0
 8009b3a:	9b04      	ldr	r3, [sp, #16]
 8009b3c:	4303      	orrs	r3, r0
 8009b3e:	3701      	adds	r7, #1
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	7839      	ldrb	r1, [r7, #0]
 8009b44:	4827      	ldr	r0, [pc, #156]	; (8009be4 <_svfiprintf_r+0x1e4>)
 8009b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b4a:	2206      	movs	r2, #6
 8009b4c:	1c7e      	adds	r6, r7, #1
 8009b4e:	f7f6 fb3f 	bl	80001d0 <memchr>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d038      	beq.n	8009bc8 <_svfiprintf_r+0x1c8>
 8009b56:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <_svfiprintf_r+0x1e8>)
 8009b58:	bb13      	cbnz	r3, 8009ba0 <_svfiprintf_r+0x1a0>
 8009b5a:	9b03      	ldr	r3, [sp, #12]
 8009b5c:	3307      	adds	r3, #7
 8009b5e:	f023 0307 	bic.w	r3, r3, #7
 8009b62:	3308      	adds	r3, #8
 8009b64:	9303      	str	r3, [sp, #12]
 8009b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b68:	444b      	add	r3, r9
 8009b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b6c:	e76d      	b.n	8009a4a <_svfiprintf_r+0x4a>
 8009b6e:	fb05 3202 	mla	r2, r5, r2, r3
 8009b72:	2001      	movs	r0, #1
 8009b74:	460f      	mov	r7, r1
 8009b76:	e7a6      	b.n	8009ac6 <_svfiprintf_r+0xc6>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	3701      	adds	r7, #1
 8009b7c:	9305      	str	r3, [sp, #20]
 8009b7e:	4619      	mov	r1, r3
 8009b80:	250a      	movs	r5, #10
 8009b82:	4638      	mov	r0, r7
 8009b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b88:	3a30      	subs	r2, #48	; 0x30
 8009b8a:	2a09      	cmp	r2, #9
 8009b8c:	d903      	bls.n	8009b96 <_svfiprintf_r+0x196>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d0c8      	beq.n	8009b24 <_svfiprintf_r+0x124>
 8009b92:	9105      	str	r1, [sp, #20]
 8009b94:	e7c6      	b.n	8009b24 <_svfiprintf_r+0x124>
 8009b96:	fb05 2101 	mla	r1, r5, r1, r2
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	e7f0      	b.n	8009b82 <_svfiprintf_r+0x182>
 8009ba0:	ab03      	add	r3, sp, #12
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	4b11      	ldr	r3, [pc, #68]	; (8009bec <_svfiprintf_r+0x1ec>)
 8009ba8:	a904      	add	r1, sp, #16
 8009baa:	4640      	mov	r0, r8
 8009bac:	f3af 8000 	nop.w
 8009bb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009bb4:	4681      	mov	r9, r0
 8009bb6:	d1d6      	bne.n	8009b66 <_svfiprintf_r+0x166>
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	065b      	lsls	r3, r3, #25
 8009bbc:	f53f af35 	bmi.w	8009a2a <_svfiprintf_r+0x2a>
 8009bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bc2:	b01d      	add	sp, #116	; 0x74
 8009bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc8:	ab03      	add	r3, sp, #12
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	4622      	mov	r2, r4
 8009bce:	4b07      	ldr	r3, [pc, #28]	; (8009bec <_svfiprintf_r+0x1ec>)
 8009bd0:	a904      	add	r1, sp, #16
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	f000 f882 	bl	8009cdc <_printf_i>
 8009bd8:	e7ea      	b.n	8009bb0 <_svfiprintf_r+0x1b0>
 8009bda:	bf00      	nop
 8009bdc:	0800a09c 	.word	0x0800a09c
 8009be0:	0800a0a2 	.word	0x0800a0a2
 8009be4:	0800a0a6 	.word	0x0800a0a6
 8009be8:	00000000 	.word	0x00000000
 8009bec:	0800994b 	.word	0x0800994b

08009bf0 <_printf_common>:
 8009bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf4:	4691      	mov	r9, r2
 8009bf6:	461f      	mov	r7, r3
 8009bf8:	688a      	ldr	r2, [r1, #8]
 8009bfa:	690b      	ldr	r3, [r1, #16]
 8009bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c00:	4293      	cmp	r3, r2
 8009c02:	bfb8      	it	lt
 8009c04:	4613      	movlt	r3, r2
 8009c06:	f8c9 3000 	str.w	r3, [r9]
 8009c0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c0e:	4606      	mov	r6, r0
 8009c10:	460c      	mov	r4, r1
 8009c12:	b112      	cbz	r2, 8009c1a <_printf_common+0x2a>
 8009c14:	3301      	adds	r3, #1
 8009c16:	f8c9 3000 	str.w	r3, [r9]
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	0699      	lsls	r1, r3, #26
 8009c1e:	bf42      	ittt	mi
 8009c20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c24:	3302      	addmi	r3, #2
 8009c26:	f8c9 3000 	strmi.w	r3, [r9]
 8009c2a:	6825      	ldr	r5, [r4, #0]
 8009c2c:	f015 0506 	ands.w	r5, r5, #6
 8009c30:	d107      	bne.n	8009c42 <_printf_common+0x52>
 8009c32:	f104 0a19 	add.w	sl, r4, #25
 8009c36:	68e3      	ldr	r3, [r4, #12]
 8009c38:	f8d9 2000 	ldr.w	r2, [r9]
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	42ab      	cmp	r3, r5
 8009c40:	dc28      	bgt.n	8009c94 <_printf_common+0xa4>
 8009c42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c46:	6822      	ldr	r2, [r4, #0]
 8009c48:	3300      	adds	r3, #0
 8009c4a:	bf18      	it	ne
 8009c4c:	2301      	movne	r3, #1
 8009c4e:	0692      	lsls	r2, r2, #26
 8009c50:	d42d      	bmi.n	8009cae <_printf_common+0xbe>
 8009c52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c56:	4639      	mov	r1, r7
 8009c58:	4630      	mov	r0, r6
 8009c5a:	47c0      	blx	r8
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	d020      	beq.n	8009ca2 <_printf_common+0xb2>
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	68e5      	ldr	r5, [r4, #12]
 8009c64:	f8d9 2000 	ldr.w	r2, [r9]
 8009c68:	f003 0306 	and.w	r3, r3, #6
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	bf08      	it	eq
 8009c70:	1aad      	subeq	r5, r5, r2
 8009c72:	68a3      	ldr	r3, [r4, #8]
 8009c74:	6922      	ldr	r2, [r4, #16]
 8009c76:	bf0c      	ite	eq
 8009c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c7c:	2500      	movne	r5, #0
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	bfc4      	itt	gt
 8009c82:	1a9b      	subgt	r3, r3, r2
 8009c84:	18ed      	addgt	r5, r5, r3
 8009c86:	f04f 0900 	mov.w	r9, #0
 8009c8a:	341a      	adds	r4, #26
 8009c8c:	454d      	cmp	r5, r9
 8009c8e:	d11a      	bne.n	8009cc6 <_printf_common+0xd6>
 8009c90:	2000      	movs	r0, #0
 8009c92:	e008      	b.n	8009ca6 <_printf_common+0xb6>
 8009c94:	2301      	movs	r3, #1
 8009c96:	4652      	mov	r2, sl
 8009c98:	4639      	mov	r1, r7
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	47c0      	blx	r8
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	d103      	bne.n	8009caa <_printf_common+0xba>
 8009ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009caa:	3501      	adds	r5, #1
 8009cac:	e7c3      	b.n	8009c36 <_printf_common+0x46>
 8009cae:	18e1      	adds	r1, r4, r3
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	2030      	movs	r0, #48	; 0x30
 8009cb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cb8:	4422      	add	r2, r4
 8009cba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cc2:	3302      	adds	r3, #2
 8009cc4:	e7c5      	b.n	8009c52 <_printf_common+0x62>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4639      	mov	r1, r7
 8009ccc:	4630      	mov	r0, r6
 8009cce:	47c0      	blx	r8
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d0e6      	beq.n	8009ca2 <_printf_common+0xb2>
 8009cd4:	f109 0901 	add.w	r9, r9, #1
 8009cd8:	e7d8      	b.n	8009c8c <_printf_common+0x9c>
	...

08009cdc <_printf_i>:
 8009cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ce0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	7e09      	ldrb	r1, [r1, #24]
 8009ce8:	b085      	sub	sp, #20
 8009cea:	296e      	cmp	r1, #110	; 0x6e
 8009cec:	4617      	mov	r7, r2
 8009cee:	4606      	mov	r6, r0
 8009cf0:	4698      	mov	r8, r3
 8009cf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cf4:	f000 80b3 	beq.w	8009e5e <_printf_i+0x182>
 8009cf8:	d822      	bhi.n	8009d40 <_printf_i+0x64>
 8009cfa:	2963      	cmp	r1, #99	; 0x63
 8009cfc:	d036      	beq.n	8009d6c <_printf_i+0x90>
 8009cfe:	d80a      	bhi.n	8009d16 <_printf_i+0x3a>
 8009d00:	2900      	cmp	r1, #0
 8009d02:	f000 80b9 	beq.w	8009e78 <_printf_i+0x19c>
 8009d06:	2958      	cmp	r1, #88	; 0x58
 8009d08:	f000 8083 	beq.w	8009e12 <_printf_i+0x136>
 8009d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d14:	e032      	b.n	8009d7c <_printf_i+0xa0>
 8009d16:	2964      	cmp	r1, #100	; 0x64
 8009d18:	d001      	beq.n	8009d1e <_printf_i+0x42>
 8009d1a:	2969      	cmp	r1, #105	; 0x69
 8009d1c:	d1f6      	bne.n	8009d0c <_printf_i+0x30>
 8009d1e:	6820      	ldr	r0, [r4, #0]
 8009d20:	6813      	ldr	r3, [r2, #0]
 8009d22:	0605      	lsls	r5, r0, #24
 8009d24:	f103 0104 	add.w	r1, r3, #4
 8009d28:	d52a      	bpl.n	8009d80 <_printf_i+0xa4>
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6011      	str	r1, [r2, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	da03      	bge.n	8009d3a <_printf_i+0x5e>
 8009d32:	222d      	movs	r2, #45	; 0x2d
 8009d34:	425b      	negs	r3, r3
 8009d36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d3a:	486f      	ldr	r0, [pc, #444]	; (8009ef8 <_printf_i+0x21c>)
 8009d3c:	220a      	movs	r2, #10
 8009d3e:	e039      	b.n	8009db4 <_printf_i+0xd8>
 8009d40:	2973      	cmp	r1, #115	; 0x73
 8009d42:	f000 809d 	beq.w	8009e80 <_printf_i+0x1a4>
 8009d46:	d808      	bhi.n	8009d5a <_printf_i+0x7e>
 8009d48:	296f      	cmp	r1, #111	; 0x6f
 8009d4a:	d020      	beq.n	8009d8e <_printf_i+0xb2>
 8009d4c:	2970      	cmp	r1, #112	; 0x70
 8009d4e:	d1dd      	bne.n	8009d0c <_printf_i+0x30>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	f043 0320 	orr.w	r3, r3, #32
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	e003      	b.n	8009d62 <_printf_i+0x86>
 8009d5a:	2975      	cmp	r1, #117	; 0x75
 8009d5c:	d017      	beq.n	8009d8e <_printf_i+0xb2>
 8009d5e:	2978      	cmp	r1, #120	; 0x78
 8009d60:	d1d4      	bne.n	8009d0c <_printf_i+0x30>
 8009d62:	2378      	movs	r3, #120	; 0x78
 8009d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d68:	4864      	ldr	r0, [pc, #400]	; (8009efc <_printf_i+0x220>)
 8009d6a:	e055      	b.n	8009e18 <_printf_i+0x13c>
 8009d6c:	6813      	ldr	r3, [r2, #0]
 8009d6e:	1d19      	adds	r1, r3, #4
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6011      	str	r1, [r2, #0]
 8009d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e08c      	b.n	8009e9a <_printf_i+0x1be>
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6011      	str	r1, [r2, #0]
 8009d84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d88:	bf18      	it	ne
 8009d8a:	b21b      	sxthne	r3, r3
 8009d8c:	e7cf      	b.n	8009d2e <_printf_i+0x52>
 8009d8e:	6813      	ldr	r3, [r2, #0]
 8009d90:	6825      	ldr	r5, [r4, #0]
 8009d92:	1d18      	adds	r0, r3, #4
 8009d94:	6010      	str	r0, [r2, #0]
 8009d96:	0628      	lsls	r0, r5, #24
 8009d98:	d501      	bpl.n	8009d9e <_printf_i+0xc2>
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	e002      	b.n	8009da4 <_printf_i+0xc8>
 8009d9e:	0668      	lsls	r0, r5, #25
 8009da0:	d5fb      	bpl.n	8009d9a <_printf_i+0xbe>
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	4854      	ldr	r0, [pc, #336]	; (8009ef8 <_printf_i+0x21c>)
 8009da6:	296f      	cmp	r1, #111	; 0x6f
 8009da8:	bf14      	ite	ne
 8009daa:	220a      	movne	r2, #10
 8009dac:	2208      	moveq	r2, #8
 8009dae:	2100      	movs	r1, #0
 8009db0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009db4:	6865      	ldr	r5, [r4, #4]
 8009db6:	60a5      	str	r5, [r4, #8]
 8009db8:	2d00      	cmp	r5, #0
 8009dba:	f2c0 8095 	blt.w	8009ee8 <_printf_i+0x20c>
 8009dbe:	6821      	ldr	r1, [r4, #0]
 8009dc0:	f021 0104 	bic.w	r1, r1, #4
 8009dc4:	6021      	str	r1, [r4, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d13d      	bne.n	8009e46 <_printf_i+0x16a>
 8009dca:	2d00      	cmp	r5, #0
 8009dcc:	f040 808e 	bne.w	8009eec <_printf_i+0x210>
 8009dd0:	4665      	mov	r5, ip
 8009dd2:	2a08      	cmp	r2, #8
 8009dd4:	d10b      	bne.n	8009dee <_printf_i+0x112>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	07db      	lsls	r3, r3, #31
 8009dda:	d508      	bpl.n	8009dee <_printf_i+0x112>
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	6862      	ldr	r2, [r4, #4]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	bfde      	ittt	le
 8009de4:	2330      	movle	r3, #48	; 0x30
 8009de6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dee:	ebac 0305 	sub.w	r3, ip, r5
 8009df2:	6123      	str	r3, [r4, #16]
 8009df4:	f8cd 8000 	str.w	r8, [sp]
 8009df8:	463b      	mov	r3, r7
 8009dfa:	aa03      	add	r2, sp, #12
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f7ff fef6 	bl	8009bf0 <_printf_common>
 8009e04:	3001      	adds	r0, #1
 8009e06:	d14d      	bne.n	8009ea4 <_printf_i+0x1c8>
 8009e08:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0c:	b005      	add	sp, #20
 8009e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e12:	4839      	ldr	r0, [pc, #228]	; (8009ef8 <_printf_i+0x21c>)
 8009e14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e18:	6813      	ldr	r3, [r2, #0]
 8009e1a:	6821      	ldr	r1, [r4, #0]
 8009e1c:	1d1d      	adds	r5, r3, #4
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6015      	str	r5, [r2, #0]
 8009e22:	060a      	lsls	r2, r1, #24
 8009e24:	d50b      	bpl.n	8009e3e <_printf_i+0x162>
 8009e26:	07ca      	lsls	r2, r1, #31
 8009e28:	bf44      	itt	mi
 8009e2a:	f041 0120 	orrmi.w	r1, r1, #32
 8009e2e:	6021      	strmi	r1, [r4, #0]
 8009e30:	b91b      	cbnz	r3, 8009e3a <_printf_i+0x15e>
 8009e32:	6822      	ldr	r2, [r4, #0]
 8009e34:	f022 0220 	bic.w	r2, r2, #32
 8009e38:	6022      	str	r2, [r4, #0]
 8009e3a:	2210      	movs	r2, #16
 8009e3c:	e7b7      	b.n	8009dae <_printf_i+0xd2>
 8009e3e:	064d      	lsls	r5, r1, #25
 8009e40:	bf48      	it	mi
 8009e42:	b29b      	uxthmi	r3, r3
 8009e44:	e7ef      	b.n	8009e26 <_printf_i+0x14a>
 8009e46:	4665      	mov	r5, ip
 8009e48:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e4c:	fb02 3311 	mls	r3, r2, r1, r3
 8009e50:	5cc3      	ldrb	r3, [r0, r3]
 8009e52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e56:	460b      	mov	r3, r1
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	d1f5      	bne.n	8009e48 <_printf_i+0x16c>
 8009e5c:	e7b9      	b.n	8009dd2 <_printf_i+0xf6>
 8009e5e:	6813      	ldr	r3, [r2, #0]
 8009e60:	6825      	ldr	r5, [r4, #0]
 8009e62:	6961      	ldr	r1, [r4, #20]
 8009e64:	1d18      	adds	r0, r3, #4
 8009e66:	6010      	str	r0, [r2, #0]
 8009e68:	0628      	lsls	r0, r5, #24
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	d501      	bpl.n	8009e72 <_printf_i+0x196>
 8009e6e:	6019      	str	r1, [r3, #0]
 8009e70:	e002      	b.n	8009e78 <_printf_i+0x19c>
 8009e72:	066a      	lsls	r2, r5, #25
 8009e74:	d5fb      	bpl.n	8009e6e <_printf_i+0x192>
 8009e76:	8019      	strh	r1, [r3, #0]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	6123      	str	r3, [r4, #16]
 8009e7c:	4665      	mov	r5, ip
 8009e7e:	e7b9      	b.n	8009df4 <_printf_i+0x118>
 8009e80:	6813      	ldr	r3, [r2, #0]
 8009e82:	1d19      	adds	r1, r3, #4
 8009e84:	6011      	str	r1, [r2, #0]
 8009e86:	681d      	ldr	r5, [r3, #0]
 8009e88:	6862      	ldr	r2, [r4, #4]
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f7f6 f99f 	bl	80001d0 <memchr>
 8009e92:	b108      	cbz	r0, 8009e98 <_printf_i+0x1bc>
 8009e94:	1b40      	subs	r0, r0, r5
 8009e96:	6060      	str	r0, [r4, #4]
 8009e98:	6863      	ldr	r3, [r4, #4]
 8009e9a:	6123      	str	r3, [r4, #16]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ea2:	e7a7      	b.n	8009df4 <_printf_i+0x118>
 8009ea4:	6923      	ldr	r3, [r4, #16]
 8009ea6:	462a      	mov	r2, r5
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	4630      	mov	r0, r6
 8009eac:	47c0      	blx	r8
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d0aa      	beq.n	8009e08 <_printf_i+0x12c>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	079b      	lsls	r3, r3, #30
 8009eb6:	d413      	bmi.n	8009ee0 <_printf_i+0x204>
 8009eb8:	68e0      	ldr	r0, [r4, #12]
 8009eba:	9b03      	ldr	r3, [sp, #12]
 8009ebc:	4298      	cmp	r0, r3
 8009ebe:	bfb8      	it	lt
 8009ec0:	4618      	movlt	r0, r3
 8009ec2:	e7a3      	b.n	8009e0c <_printf_i+0x130>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	464a      	mov	r2, r9
 8009ec8:	4639      	mov	r1, r7
 8009eca:	4630      	mov	r0, r6
 8009ecc:	47c0      	blx	r8
 8009ece:	3001      	adds	r0, #1
 8009ed0:	d09a      	beq.n	8009e08 <_printf_i+0x12c>
 8009ed2:	3501      	adds	r5, #1
 8009ed4:	68e3      	ldr	r3, [r4, #12]
 8009ed6:	9a03      	ldr	r2, [sp, #12]
 8009ed8:	1a9b      	subs	r3, r3, r2
 8009eda:	42ab      	cmp	r3, r5
 8009edc:	dcf2      	bgt.n	8009ec4 <_printf_i+0x1e8>
 8009ede:	e7eb      	b.n	8009eb8 <_printf_i+0x1dc>
 8009ee0:	2500      	movs	r5, #0
 8009ee2:	f104 0919 	add.w	r9, r4, #25
 8009ee6:	e7f5      	b.n	8009ed4 <_printf_i+0x1f8>
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1ac      	bne.n	8009e46 <_printf_i+0x16a>
 8009eec:	7803      	ldrb	r3, [r0, #0]
 8009eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ef6:	e76c      	b.n	8009dd2 <_printf_i+0xf6>
 8009ef8:	0800a0ad 	.word	0x0800a0ad
 8009efc:	0800a0be 	.word	0x0800a0be

08009f00 <memmove>:
 8009f00:	4288      	cmp	r0, r1
 8009f02:	b510      	push	{r4, lr}
 8009f04:	eb01 0302 	add.w	r3, r1, r2
 8009f08:	d807      	bhi.n	8009f1a <memmove+0x1a>
 8009f0a:	1e42      	subs	r2, r0, #1
 8009f0c:	4299      	cmp	r1, r3
 8009f0e:	d00a      	beq.n	8009f26 <memmove+0x26>
 8009f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f14:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009f18:	e7f8      	b.n	8009f0c <memmove+0xc>
 8009f1a:	4283      	cmp	r3, r0
 8009f1c:	d9f5      	bls.n	8009f0a <memmove+0xa>
 8009f1e:	1881      	adds	r1, r0, r2
 8009f20:	1ad2      	subs	r2, r2, r3
 8009f22:	42d3      	cmn	r3, r2
 8009f24:	d100      	bne.n	8009f28 <memmove+0x28>
 8009f26:	bd10      	pop	{r4, pc}
 8009f28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f2c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009f30:	e7f7      	b.n	8009f22 <memmove+0x22>

08009f32 <_realloc_r>:
 8009f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f34:	4607      	mov	r7, r0
 8009f36:	4614      	mov	r4, r2
 8009f38:	460e      	mov	r6, r1
 8009f3a:	b921      	cbnz	r1, 8009f46 <_realloc_r+0x14>
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f42:	f7ff bc61 	b.w	8009808 <_malloc_r>
 8009f46:	b922      	cbnz	r2, 8009f52 <_realloc_r+0x20>
 8009f48:	f7ff fc10 	bl	800976c <_free_r>
 8009f4c:	4625      	mov	r5, r4
 8009f4e:	4628      	mov	r0, r5
 8009f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f52:	f000 f814 	bl	8009f7e <_malloc_usable_size_r>
 8009f56:	42a0      	cmp	r0, r4
 8009f58:	d20f      	bcs.n	8009f7a <_realloc_r+0x48>
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f7ff fc53 	bl	8009808 <_malloc_r>
 8009f62:	4605      	mov	r5, r0
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d0f2      	beq.n	8009f4e <_realloc_r+0x1c>
 8009f68:	4631      	mov	r1, r6
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	f7ff fbea 	bl	8009744 <memcpy>
 8009f70:	4631      	mov	r1, r6
 8009f72:	4638      	mov	r0, r7
 8009f74:	f7ff fbfa 	bl	800976c <_free_r>
 8009f78:	e7e9      	b.n	8009f4e <_realloc_r+0x1c>
 8009f7a:	4635      	mov	r5, r6
 8009f7c:	e7e7      	b.n	8009f4e <_realloc_r+0x1c>

08009f7e <_malloc_usable_size_r>:
 8009f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f82:	1f18      	subs	r0, r3, #4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	bfbc      	itt	lt
 8009f88:	580b      	ldrlt	r3, [r1, r0]
 8009f8a:	18c0      	addlt	r0, r0, r3
 8009f8c:	4770      	bx	lr
	...

08009f90 <_init>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	bf00      	nop
 8009f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f96:	bc08      	pop	{r3}
 8009f98:	469e      	mov	lr, r3
 8009f9a:	4770      	bx	lr

08009f9c <_fini>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	bf00      	nop
 8009fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa2:	bc08      	pop	{r3}
 8009fa4:	469e      	mov	lr, r3
 8009fa6:	4770      	bx	lr
