
RTOS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007350  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007598  08007598  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007598  08007598  00017598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075a0  080075a0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a0  080075a0  000175a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080075a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f0  200001e4  0800778c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bd4  0800778c  00020bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017240  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003223  00000000  00000000  00037454  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  0003a678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  0003b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024297  00000000  00000000  0003c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb72  00000000  00000000  00060867  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbc05  00000000  00000000  000703d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bfde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b0  00000000  00000000  0013c05c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080074c8 	.word	0x080074c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080074c8 	.word	0x080074c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	4b96      	ldr	r3, [pc, #600]	; (80007e4 <MX_GPIO_Init+0x274>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a95      	ldr	r2, [pc, #596]	; (80007e4 <MX_GPIO_Init+0x274>)
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b93      	ldr	r3, [pc, #588]	; (80007e4 <MX_GPIO_Init+0x274>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0310 	and.w	r3, r3, #16
 800059e:	61bb      	str	r3, [r7, #24]
 80005a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	4b8f      	ldr	r3, [pc, #572]	; (80007e4 <MX_GPIO_Init+0x274>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a8e      	ldr	r2, [pc, #568]	; (80007e4 <MX_GPIO_Init+0x274>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b8c      	ldr	r3, [pc, #560]	; (80007e4 <MX_GPIO_Init+0x274>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b88      	ldr	r3, [pc, #544]	; (80007e4 <MX_GPIO_Init+0x274>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a87      	ldr	r2, [pc, #540]	; (80007e4 <MX_GPIO_Init+0x274>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b85      	ldr	r3, [pc, #532]	; (80007e4 <MX_GPIO_Init+0x274>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b81      	ldr	r3, [pc, #516]	; (80007e4 <MX_GPIO_Init+0x274>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a80      	ldr	r2, [pc, #512]	; (80007e4 <MX_GPIO_Init+0x274>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b7e      	ldr	r3, [pc, #504]	; (80007e4 <MX_GPIO_Init+0x274>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b7a      	ldr	r3, [pc, #488]	; (80007e4 <MX_GPIO_Init+0x274>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a79      	ldr	r2, [pc, #484]	; (80007e4 <MX_GPIO_Init+0x274>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b77      	ldr	r3, [pc, #476]	; (80007e4 <MX_GPIO_Init+0x274>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b73      	ldr	r3, [pc, #460]	; (80007e4 <MX_GPIO_Init+0x274>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a72      	ldr	r2, [pc, #456]	; (80007e4 <MX_GPIO_Init+0x274>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b70      	ldr	r3, [pc, #448]	; (80007e4 <MX_GPIO_Init+0x274>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2118      	movs	r1, #24
 8000632:	486d      	ldr	r0, [pc, #436]	; (80007e8 <MX_GPIO_Init+0x278>)
 8000634:	f000 fe1a 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	486b      	ldr	r0, [pc, #428]	; (80007ec <MX_GPIO_Init+0x27c>)
 800063e:	f000 fe15 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	2200      	movs	r2, #0
 8000644:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000648:	4869      	ldr	r0, [pc, #420]	; (80007f0 <MX_GPIO_Init+0x280>)
 800064a:	f000 fe0f 	bl	800126c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4;
 800064e:	2318      	movs	r3, #24
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4860      	ldr	r0, [pc, #384]	; (80007e8 <MX_GPIO_Init+0x278>)
 8000666:	f000 fc4f 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	485a      	ldr	r0, [pc, #360]	; (80007ec <MX_GPIO_Init+0x27c>)
 8000682:	f000 fc41 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000686:	2308      	movs	r3, #8
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000696:	2305      	movs	r3, #5
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4852      	ldr	r0, [pc, #328]	; (80007ec <MX_GPIO_Init+0x27c>)
 80006a2:	f000 fc31 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006aa:	4b52      	ldr	r3, [pc, #328]	; (80007f4 <MX_GPIO_Init+0x284>)
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	484f      	ldr	r0, [pc, #316]	; (80007f8 <MX_GPIO_Init+0x288>)
 80006ba:	f000 fc25 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006be:	2310      	movs	r3, #16
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006ce:	2306      	movs	r3, #6
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	4847      	ldr	r0, [pc, #284]	; (80007f8 <MX_GPIO_Init+0x288>)
 80006da:	f000 fc15 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80006de:	23e0      	movs	r3, #224	; 0xe0
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006ee:	2305      	movs	r3, #5
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	483f      	ldr	r0, [pc, #252]	; (80007f8 <MX_GPIO_Init+0x288>)
 80006fa:	f000 fc05 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006fe:	2304      	movs	r3, #4
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	483a      	ldr	r0, [pc, #232]	; (80007fc <MX_GPIO_Init+0x28c>)
 8000712:	f000 fbf9 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000728:	2305      	movs	r3, #5
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4832      	ldr	r0, [pc, #200]	; (80007fc <MX_GPIO_Init+0x28c>)
 8000734:	f000 fbe8 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000738:	f24f 0310 	movw	r3, #61456	; 0xf010
 800073c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4827      	ldr	r0, [pc, #156]	; (80007f0 <MX_GPIO_Init+0x280>)
 8000752:	f000 fbd9 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000756:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000768:	2306      	movs	r3, #6
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	481e      	ldr	r0, [pc, #120]	; (80007ec <MX_GPIO_Init+0x27c>)
 8000774:	f000 fbc8 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000778:	2320      	movs	r3, #32
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4819      	ldr	r0, [pc, #100]	; (80007f0 <MX_GPIO_Init+0x280>)
 800078c:	f000 fbbc 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000790:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000796:	2312      	movs	r3, #18
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079a:	2301      	movs	r3, #1
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a2:	2304      	movs	r3, #4
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4813      	ldr	r0, [pc, #76]	; (80007fc <MX_GPIO_Init+0x28c>)
 80007ae:	f000 fbab 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_GPIO_Init+0x290>)
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4808      	ldr	r0, [pc, #32]	; (80007e8 <MX_GPIO_Init+0x278>)
 80007c6:	f000 fb9f 	bl	8000f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2006      	movs	r0, #6
 80007d0:	f000 fb70 	bl	8000eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007d4:	2006      	movs	r0, #6
 80007d6:	f000 fb89 	bl	8000eec <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3730      	adds	r7, #48	; 0x30
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	10310000 	.word	0x10310000
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020400 	.word	0x40020400
 8000800:	10120000 	.word	0x10120000

08000804 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d10a      	bne.n	800082a <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin));
 8000814:	2101      	movs	r1, #1
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <HAL_GPIO_EXTI_Callback+0x30>)
 8000818:	f000 fd10 	bl	800123c <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <HAL_GPIO_EXTI_Callback+0x34>)
 8000826:	f000 fd21 	bl	800126c <HAL_GPIO_WritePin>
	}
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40020000 	.word	0x40020000
 8000838:	40020c00 	.word	0x40020c00

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 fa1c 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f856 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f7ff fe92 	bl	8000570 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800084c:	f005 fcb4 	bl	80061b8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_SET) {
 8000850:	2101      	movs	r1, #1
 8000852:	4820      	ldr	r0, [pc, #128]	; (80008d4 <main+0x98>)
 8000854:	f000 fcf2 	bl	800123c <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d121      	bne.n	80008a2 <main+0x66>
	  		HAL_Delay(100);
 800085e:	2064      	movs	r0, #100	; 0x64
 8000860:	f000 fa4e 	bl	8000d00 <HAL_Delay>
	  		if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin)	== GPIO_PIN_SET) {
 8000864:	2101      	movs	r1, #1
 8000866:	481b      	ldr	r0, [pc, #108]	; (80008d4 <main+0x98>)
 8000868:	f000 fce8 	bl	800123c <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d117      	bne.n	80008a2 <main+0x66>

	  			++MessageCounter;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <main+0x9c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <main+0x9c>)
 800087c:	701a      	strb	r2, [r3, #0]
	  			MessageLength = sprintf(DataToSend, "Wiadomosc nr %d\n\r", MessageCounter);
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <main+0x9c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	4915      	ldr	r1, [pc, #84]	; (80008dc <main+0xa0>)
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <main+0xa4>)
 8000888:	f006 faba 	bl	8006e00 <siprintf>
 800088c:	4603      	mov	r3, r0
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <main+0xa8>)
 8000892:	701a      	strb	r2, [r3, #0]
	  			CDC_Transmit_FS(DataToSend, MessageLength);
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <main+0xa8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b29b      	uxth	r3, r3
 800089a:	4619      	mov	r1, r3
 800089c:	4810      	ldr	r0, [pc, #64]	; (80008e0 <main+0xa4>)
 800089e:	f005 fd65 	bl	800636c <CDC_Transmit_FS>
	  		}
	  }
	  if(ReceivedDataFlag == 1){
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <main+0xac>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d1d2      	bne.n	8000850 <main+0x14>
	  	ReceivedDataFlag = 0;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <main+0xac>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]

	  	MessageLength = sprintf(DataToSend, "Odebrano: %s\n\r", ReceivedData);
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <main+0xb0>)
 80008b2:	490f      	ldr	r1, [pc, #60]	; (80008f0 <main+0xb4>)
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <main+0xa4>)
 80008b6:	f006 faa3 	bl	8006e00 <siprintf>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <main+0xa8>)
 80008c0:	701a      	strb	r2, [r3, #0]
	  	CDC_Transmit_FS(DataToSend, MessageLength);
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <main+0xa8>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	4619      	mov	r1, r3
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <main+0xa4>)
 80008cc:	f005 fd4e 	bl	800636c <CDC_Transmit_FS>
	  if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_SET) {
 80008d0:	e7be      	b.n	8000850 <main+0x14>
 80008d2:	bf00      	nop
 80008d4:	40020000 	.word	0x40020000
 80008d8:	20000200 	.word	0x20000200
 80008dc:	080074e0 	.word	0x080074e0
 80008e0:	20000214 	.word	0x20000214
 80008e4:	20000201 	.word	0x20000201
 80008e8:	20000202 	.word	0x20000202
 80008ec:	2000023c 	.word	0x2000023c
 80008f0:	080074f4 	.word	0x080074f4

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f006 f9bc 	bl	8006c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <SystemClock_Config+0xc8>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a26      	ldr	r2, [pc, #152]	; (80009bc <SystemClock_Config+0xc8>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <SystemClock_Config+0xc8>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <SystemClock_Config+0xcc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a20      	ldr	r2, [pc, #128]	; (80009c0 <SystemClock_Config+0xcc>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <SystemClock_Config+0xcc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000964:	2304      	movs	r3, #4
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000968:	2348      	movs	r3, #72	; 0x48
 800096a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000970:	2303      	movs	r3, #3
 8000972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fe2d 	bl	80025d8 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000984:	f000 f830 	bl	80009e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2102      	movs	r1, #2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 f887 	bl	8002ab8 <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009b0:	f000 f81a 	bl	80009e8 <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3750      	adds	r7, #80	; 0x50
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d6:	f000 f973 	bl	8000cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40001000 	.word	0x40001000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2036      	movs	r0, #54	; 0x36
 8000a5e:	f000 fa29 	bl	8000eb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a62:	2036      	movs	r0, #54	; 0x36
 8000a64:	f000 fa42 	bl	8000eec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_InitTick+0xa4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <HAL_InitTick+0xa4>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_InitTick+0xa4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a84:	f107 0210 	add.w	r2, r7, #16
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 f9f0 	bl	8002e74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a94:	f002 f9da 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <HAL_InitTick+0xa8>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	0c9b      	lsrs	r3, r3, #18
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_InitTick+0xac>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <HAL_InitTick+0xb0>)
 8000ab0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_InitTick+0xac>)
 8000ab4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_InitTick+0xac>)
 8000abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000abe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_InitTick+0xac>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_InitTick+0xac>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <HAL_InitTick+0xac>)
 8000ace:	f002 fa03 	bl	8002ed8 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d104      	bne.n	8000ae2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <HAL_InitTick+0xac>)
 8000ada:	f002 fa32 	bl	8002f42 <HAL_TIM_Base_Start_IT>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3730      	adds	r7, #48	; 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800
 8000af0:	431bde83 	.word	0x431bde83
 8000af4:	20000264 	.word	0x20000264
 8000af8:	40001000 	.word	0x40001000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f000 fb9e 	bl	80012a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <TIM6_DAC_IRQHandler+0x10>)
 8000b6e:	f002 fa0c 	bl	8002f8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000264 	.word	0x20000264

08000b7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <OTG_FS_IRQHandler+0x10>)
 8000b82:	f000 fcf5 	bl	8001570 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200007c8 	.word	0x200007c8

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f006 f824 	bl	8006c0c <__errno>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20020000 	.word	0x20020000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000204 	.word	0x20000204
 8000bf8:	20000bd8 	.word	0x20000bd8

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <SystemInit+0x28>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <SystemInit+0x28>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SystemInit+0x28>)
 8000c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c16:	609a      	str	r2, [r3, #8]
#endif
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c2e:	e003      	b.n	8000c38 <LoopCopyDataInit>

08000c30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c36:	3104      	adds	r1, #4

08000c38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c40:	d3f6      	bcc.n	8000c30 <CopyDataInit>
  ldr  r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c44:	e002      	b.n	8000c4c <LoopFillZerobss>

08000c46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c48:	f842 3b04 	str.w	r3, [r2], #4

08000c4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c50:	d3f9      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd3 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f005 ffdf 	bl	8006c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fdef 	bl	800083c <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c64:	080075a8 	.word	0x080075a8
  ldr  r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c6c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000c70:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000c74:	20000bd4 	.word	0x20000bd4

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f8fa 	bl	8000e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fecc 	bl	8000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fea2 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	200002a4 	.word	0x200002a4

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200002a4 	.word	0x200002a4

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_Delay+0x40>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000008 	.word	0x20000008

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff4c 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec6:	f7ff ff61 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000eca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	6978      	ldr	r0, [r7, #20]
 8000ed2:	f7ff ffb1 	bl	8000e38 <NVIC_EncodePriority>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff80 	bl	8000de4 <__NVIC_SetPriority>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff54 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e16b      	b.n	80011fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	f040 815a 	bne.w	80011f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d00b      	beq.n	8000f62 <HAL_GPIO_Init+0x5a>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f56:	2b11      	cmp	r3, #17
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b12      	cmp	r3, #18
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0xfc>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b12      	cmp	r3, #18
 8001002:	d123      	bne.n	800104c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	69b9      	ldr	r1, [r7, #24]
 8001048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0203 	and.w	r2, r3, #3
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80b4 	beq.w	80011f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <HAL_GPIO_Init+0x308>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a5e      	ldr	r2, [pc, #376]	; (8001210 <HAL_GPIO_Init+0x308>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b5c      	ldr	r3, [pc, #368]	; (8001210 <HAL_GPIO_Init+0x308>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010aa:	4a5a      	ldr	r2, [pc, #360]	; (8001214 <HAL_GPIO_Init+0x30c>)
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a51      	ldr	r2, [pc, #324]	; (8001218 <HAL_GPIO_Init+0x310>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d02b      	beq.n	800112e <HAL_GPIO_Init+0x226>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a50      	ldr	r2, [pc, #320]	; (800121c <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d025      	beq.n	800112a <HAL_GPIO_Init+0x222>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	; (8001220 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01f      	beq.n	8001126 <HAL_GPIO_Init+0x21e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x21a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x216>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	; (800122c <HAL_GPIO_Init+0x324>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x212>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <HAL_GPIO_Init+0x328>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x20e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4a      	ldr	r2, [pc, #296]	; (8001234 <HAL_GPIO_Init+0x32c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x20a>
 800110e:	2307      	movs	r3, #7
 8001110:	e00e      	b.n	8001130 <HAL_GPIO_Init+0x228>
 8001112:	2308      	movs	r3, #8
 8001114:	e00c      	b.n	8001130 <HAL_GPIO_Init+0x228>
 8001116:	2306      	movs	r3, #6
 8001118:	e00a      	b.n	8001130 <HAL_GPIO_Init+0x228>
 800111a:	2305      	movs	r3, #5
 800111c:	e008      	b.n	8001130 <HAL_GPIO_Init+0x228>
 800111e:	2304      	movs	r3, #4
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x228>
 8001122:	2303      	movs	r3, #3
 8001124:	e004      	b.n	8001130 <HAL_GPIO_Init+0x228>
 8001126:	2302      	movs	r3, #2
 8001128:	e002      	b.n	8001130 <HAL_GPIO_Init+0x228>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x228>
 800112e:	2300      	movs	r3, #0
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	f002 0203 	and.w	r2, r2, #3
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4093      	lsls	r3, r2
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001140:	4934      	ldr	r1, [pc, #208]	; (8001214 <HAL_GPIO_Init+0x30c>)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <HAL_GPIO_Init+0x330>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001172:	4a31      	ldr	r2, [pc, #196]	; (8001238 <HAL_GPIO_Init+0x330>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <HAL_GPIO_Init+0x330>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x330>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_GPIO_Init+0x330>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <HAL_GPIO_Init+0x330>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_GPIO_Init+0x330>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_GPIO_Init+0x330>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3301      	adds	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	f67f ae90 	bls.w	8000f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001204:	bf00      	nop
 8001206:	3724      	adds	r7, #36	; 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e001      	b.n	800125e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff faa0 	bl	8000804 <HAL_GPIO_EXTI_Callback>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40013c00 	.word	0x40013c00

080012d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d2:	b08f      	sub	sp, #60	; 0x3c
 80012d4:	af0a      	add	r7, sp, #40	; 0x28
 80012d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e10f      	b.n	8001502 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d106      	bne.n	8001302 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f005 f97b 	bl	80065f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2203      	movs	r2, #3
 8001306:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f002 f92c 	bl	800357e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	687e      	ldr	r6, [r7, #4]
 800132e:	466d      	mov	r5, sp
 8001330:	f106 0410 	add.w	r4, r6, #16
 8001334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001340:	e885 0003 	stmia.w	r5, {r0, r1}
 8001344:	1d33      	adds	r3, r6, #4
 8001346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001348:	6838      	ldr	r0, [r7, #0]
 800134a:	f002 f803 	bl	8003354 <USB_CoreInit>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2202      	movs	r2, #2
 8001358:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e0d0      	b.n	8001502 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f002 f91a 	bl	80035a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e04a      	b.n	8001408 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	1a9b      	subs	r3, r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	333d      	adds	r3, #61	; 0x3d
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	333c      	adds	r3, #60	; 0x3c
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	b298      	uxth	r0, r3
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	3342      	adds	r3, #66	; 0x42
 80013ae:	4602      	mov	r2, r0
 80013b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	1a9b      	subs	r3, r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	333f      	adds	r3, #63	; 0x3f
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	3344      	adds	r3, #68	; 0x44
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	3348      	adds	r3, #72	; 0x48
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3350      	adds	r3, #80	; 0x50
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	3301      	adds	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	d3af      	bcc.n	8001372 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	e044      	b.n	80014a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	1a9b      	subs	r3, r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	3301      	adds	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3b5      	bcc.n	8001418 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	687e      	ldr	r6, [r7, #4]
 80014b4:	466d      	mov	r5, sp
 80014b6:	f106 0410 	add.w	r4, r6, #16
 80014ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ca:	1d33      	adds	r3, r6, #4
 80014cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ce:	6838      	ldr	r0, [r7, #0]
 80014d0:	f002 f890 	bl	80035f4 <USB_DevInit>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2202      	movs	r2, #2
 80014de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00d      	b.n	8001502 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 f8d8 	bl	80046b0 <USB_DevDisconnect>

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800150a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_PCD_Start+0x1c>
 8001522:	2302      	movs	r3, #2
 8001524:	e020      	b.n	8001568 <HAL_PCD_Start+0x5e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	2b01      	cmp	r3, #1
 8001534:	d109      	bne.n	800154a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800153a:	2b01      	cmp	r3, #1
 800153c:	d005      	beq.n	800154a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f002 f804 	bl	800355c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f003 f888 	bl	800466e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b08d      	sub	sp, #52	; 0x34
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f003 f946 	bl	8004818 <USB_GetMode>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 839d 	bne.w	8001cce <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f003 f8aa 	bl	80046f2 <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8393 	beq.w	8001ccc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 f8a1 	bl	80046f2 <USB_ReadInterrupts>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d107      	bne.n	80015ca <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f002 0202 	and.w	r2, r2, #2
 80015c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 f88f 	bl	80046f2 <USB_ReadInterrupts>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d161      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0210 	bic.w	r2, r2, #16
 80015ec:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	f003 020f 	and.w	r2, r3, #15
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	3304      	adds	r3, #4
 800160c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	0c5b      	lsrs	r3, r3, #17
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	2b02      	cmp	r3, #2
 8001618:	d124      	bne.n	8001664 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d035      	beq.n	8001692 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001634:	b29b      	uxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	6a38      	ldr	r0, [r7, #32]
 800163a:	f002 fef5 	bl	8004428 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800164a:	441a      	add	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	699a      	ldr	r2, [r3, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800165c:	441a      	add	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	619a      	str	r2, [r3, #24]
 8001662:	e016      	b.n	8001692 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	0c5b      	lsrs	r3, r3, #17
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	2b06      	cmp	r3, #6
 800166e:	d110      	bne.n	8001692 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001676:	2208      	movs	r2, #8
 8001678:	4619      	mov	r1, r3
 800167a:	6a38      	ldr	r0, [r7, #32]
 800167c:	f002 fed4 	bl	8004428 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800168c:	441a      	add	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699a      	ldr	r2, [r3, #24]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0210 	orr.w	r2, r2, #16
 80016a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 f823 	bl	80046f2 <USB_ReadInterrupts>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016b6:	d16e      	bne.n	8001796 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 f829 	bl	8004718 <USB_ReadDevAllOutEpInterrupt>
 80016c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80016c8:	e062      	b.n	8001790 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d057      	beq.n	8001784 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 f84e 	bl	8004780 <USB_ReadDevOutEPInterrupt>
 80016e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00c      	beq.n	800170a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016fc:	461a      	mov	r2, r3
 80016fe:	2301      	movs	r3, #1
 8001700:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fdb1 	bl	800226c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00c      	beq.n	800172e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	015a      	lsls	r2, r3, #5
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	4413      	add	r3, r2
 800171c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001720:	461a      	mov	r2, r3
 8001722:	2308      	movs	r3, #8
 8001724:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 feab 	bl	8002484 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001744:	461a      	mov	r2, r3
 8001746:	2310      	movs	r3, #16
 8001748:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	015a      	lsls	r2, r3, #5
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	4413      	add	r3, r2
 800175c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001760:	461a      	mov	r2, r3
 8001762:	2320      	movs	r3, #32
 8001764:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d009      	beq.n	8001784 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	015a      	lsls	r2, r3, #5
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	4413      	add	r3, r2
 8001778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800177c:	461a      	mov	r2, r3
 800177e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001782:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	3301      	adds	r3, #1
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	085b      	lsrs	r3, r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	2b00      	cmp	r3, #0
 8001794:	d199      	bne.n	80016ca <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f002 ffa9 	bl	80046f2 <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017aa:	f040 80c0 	bne.w	800192e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 ffca 	bl	800474c <USB_ReadDevAllInEpInterrupt>
 80017b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017be:	e0b2      	b.n	8001926 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80a7 	beq.w	800191a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fff0 	bl	80047bc <USB_ReadDevInEPInterrupt>
 80017dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d057      	beq.n	8001898 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	2201      	movs	r2, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43db      	mvns	r3, r3
 8001802:	69f9      	ldr	r1, [r7, #28]
 8001804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001808:	4013      	ands	r3, r2
 800180a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	015a      	lsls	r2, r3, #5
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	4413      	add	r3, r2
 8001814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001818:	461a      	mov	r2, r3
 800181a:	2301      	movs	r3, #1
 800181c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d132      	bne.n	800188c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	3348      	adds	r3, #72	; 0x48
 8001836:	6819      	ldr	r1, [r3, #0]
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183c:	4613      	mov	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	1a9b      	subs	r3, r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4403      	add	r3, r0
 8001846:	3344      	adds	r3, #68	; 0x44
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4419      	add	r1, r3
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001850:	4613      	mov	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4403      	add	r3, r0
 800185a:	3348      	adds	r3, #72	; 0x48
 800185c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	2b00      	cmp	r3, #0
 8001862:	d113      	bne.n	800188c <HAL_PCD_IRQHandler+0x31c>
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	3350      	adds	r3, #80	; 0x50
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001884:	461a      	mov	r2, r3
 8001886:	2101      	movs	r1, #1
 8001888:	f002 fff8 	bl	800487c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f004 ff3f 	bl	8006716 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d008      	beq.n	80018b4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	015a      	lsls	r2, r3, #5
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ae:	461a      	mov	r2, r3
 80018b0:	2308      	movs	r3, #8
 80018b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d008      	beq.n	80018d0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ca:	461a      	mov	r2, r3
 80018cc:	2310      	movs	r3, #16
 80018ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e6:	461a      	mov	r2, r3
 80018e8:	2340      	movs	r3, #64	; 0x40
 80018ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001902:	461a      	mov	r2, r3
 8001904:	2302      	movs	r3, #2
 8001906:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 fc1b 	bl	8002150 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	3301      	adds	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	085b      	lsrs	r3, r3, #1
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001928:	2b00      	cmp	r3, #0
 800192a:	f47f af49 	bne.w	80017c0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f002 fedd 	bl	80046f2 <USB_ReadInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800193e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001942:	d122      	bne.n	800198a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800195e:	2b01      	cmp	r3, #1
 8001960:	d108      	bne.n	8001974 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800196a:	2100      	movs	r1, #0
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fe27 	bl	80025c0 <HAL_PCDEx_LPM_Callback>
 8001972:	e002      	b.n	800197a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f004 ff45 	bl	8006804 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001988:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f002 feaf 	bl	80046f2 <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800199a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800199e:	d112      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d102      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f004 ff01 	bl	80067b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80019c4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fe91 	bl	80046f2 <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019da:	f040 80c7 	bne.w	8001b6c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2110      	movs	r1, #16
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 ff5f 	bl	80038bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a02:	e056      	b.n	8001ab2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a10:	461a      	mov	r2, r3
 8001a12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a16:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1a:	015a      	lsls	r2, r3, #5
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a28:	0151      	lsls	r1, r2, #5
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	440a      	add	r2, r1
 8001a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a36:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a48:	0151      	lsls	r1, r2, #5
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	440a      	add	r2, r1
 8001a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	015a      	lsls	r2, r3, #5
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a64:	461a      	mov	r2, r3
 8001a66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a6a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6e:	015a      	lsls	r2, r3, #5
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7c:	0151      	lsls	r1, r2, #5
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	440a      	add	r2, r1
 8001a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	015a      	lsls	r2, r3, #5
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a9c:	0151      	lsls	r1, r2, #5
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	440a      	add	r2, r1
 8001aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001aa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001aaa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aae:	3301      	adds	r3, #1
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3a3      	bcc.n	8001a04 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ace:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d016      	beq.n	8001b06 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae8:	f043 030b 	orr.w	r3, r3, #11
 8001aec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001afe:	f043 030b 	orr.w	r3, r3, #11
 8001b02:	6453      	str	r3, [r2, #68]	; 0x44
 8001b04:	e015      	b.n	8001b32 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b18:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b1c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b2c:	f043 030b 	orr.w	r3, r3, #11
 8001b30:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b44:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b56:	461a      	mov	r2, r3
 8001b58:	f002 fe90 	bl	800487c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 fdbe 	bl	80046f2 <USB_ReadInterrupts>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b80:	d124      	bne.n	8001bcc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fe54 	bl	8004834 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 fef4 	bl	800397e <USB_GetDevSpeed>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681c      	ldr	r4, [r3, #0]
 8001ba2:	f001 f947 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8001ba6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f001 fc31 	bl	8003418 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f004 fdd5 	bl	8006766 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 fd8e 	bl	80046f2 <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d10a      	bne.n	8001bf6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f004 fdb2 	bl	800674a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f002 0208 	and.w	r2, r2, #8
 8001bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 fd79 	bl	80046f2 <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c0a:	d10f      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f004 fe14 	bl	8006844 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fd5e 	bl	80046f2 <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c40:	d10f      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f004 fde7 	bl	8006820 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 fd43 	bl	80046f2 <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c76:	d10a      	bne.n	8001c8e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f004 fdf5 	bl	8006868 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 fd2d 	bl	80046f2 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d115      	bne.n	8001cce <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f004 fde5 	bl	8006884 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	e000      	b.n	8001cce <HAL_PCD_IRQHandler+0x75e>
      return;
 8001ccc:	bf00      	nop
    }
  }
}
 8001cce:	3734      	adds	r7, #52	; 0x34
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}

08001cd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_PCD_SetAddress+0x1a>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e013      	b.n	8001d16 <HAL_PCD_SetAddress+0x42>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fc8b 	bl	8004622 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	4608      	mov	r0, r1
 8001d28:	4611      	mov	r1, r2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	70fb      	strb	r3, [r7, #3]
 8001d30:	460b      	mov	r3, r1
 8001d32:	803b      	strh	r3, [r7, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	da0f      	bge.n	8001d64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	f003 020f 	and.w	r2, r3, #15
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	3338      	adds	r3, #56	; 0x38
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	3304      	adds	r3, #4
 8001d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	705a      	strb	r2, [r3, #1]
 8001d62:	e00f      	b.n	8001d84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 020f 	and.w	r2, r3, #15
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d90:	883a      	ldrh	r2, [r7, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	78ba      	ldrb	r2, [r7, #2]
 8001d9a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dae:	78bb      	ldrb	r3, [r7, #2]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d102      	bne.n	8001dba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_PCD_EP_Open+0xaa>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e00e      	b.n	8001de6 <HAL_PCD_EP_Open+0xc8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fdf6 	bl	80039c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001de4:	7afb      	ldrb	r3, [r7, #11]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da0f      	bge.n	8001e22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 020f 	and.w	r2, r3, #15
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	3338      	adds	r3, #56	; 0x38
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	705a      	strb	r2, [r3, #1]
 8001e20:	e00f      	b.n	8001e42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_PCD_EP_Close+0x6e>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e00e      	b.n	8001e7a <HAL_PCD_EP_Close+0x8c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68f9      	ldr	r1, [r7, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 fe34 	bl	8003ad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	f003 020f 	and.w	r2, r3, #15
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d102      	bne.n	8001ede <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6979      	ldr	r1, [r7, #20]
 8001ef6:	f002 f90f 	bl	8004118 <USB_EP0StartXfer>
 8001efa:	e008      	b.n	8001f0e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	6979      	ldr	r1, [r7, #20]
 8001f0a:	f001 fec1 	bl	8003c90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 020f 	and.w	r2, r3, #15
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	460b      	mov	r3, r1
 8001f56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f58:	7afb      	ldrb	r3, [r7, #11]
 8001f5a:	f003 020f 	and.w	r2, r3, #15
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	3338      	adds	r3, #56	; 0x38
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2201      	movs	r2, #1
 8001f86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d102      	bne.n	8001fa2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6979      	ldr	r1, [r7, #20]
 8001fba:	f002 f8ad 	bl	8004118 <USB_EP0StartXfer>
 8001fbe:	e008      	b.n	8001fd2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6979      	ldr	r1, [r7, #20]
 8001fce:	f001 fe5f 	bl	8003c90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d901      	bls.n	8001ffa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e050      	b.n	800209c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da0f      	bge.n	8002022 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 020f 	and.w	r2, r3, #15
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	3338      	adds	r3, #56	; 0x38
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	3304      	adds	r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	705a      	strb	r2, [r3, #1]
 8002020:	e00d      	b.n	800203e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	b2da      	uxtb	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_PCD_EP_SetStall+0x82>
 800205a:	2302      	movs	r3, #2
 800205c:	e01e      	b.n	800209c <HAL_PCD_EP_SetStall+0xc0>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68f9      	ldr	r1, [r7, #12]
 800206c:	4618      	mov	r0, r3
 800206e:	f002 fa04 	bl	800447a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	b2d9      	uxtb	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800208c:	461a      	mov	r2, r3
 800208e:	f002 fbf5 	bl	800487c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 020f 	and.w	r2, r3, #15
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d901      	bls.n	80020c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e042      	b.n	8002148 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	da0f      	bge.n	80020ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 020f 	and.w	r2, r3, #15
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	3338      	adds	r3, #56	; 0x38
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	3304      	adds	r3, #4
 80020e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	705a      	strb	r2, [r3, #1]
 80020e8:	e00f      	b.n	800210a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	3304      	adds	r3, #4
 8002102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	b2da      	uxtb	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_PCD_EP_ClrStall+0x86>
 8002126:	2302      	movs	r3, #2
 8002128:	e00e      	b.n	8002148 <HAL_PCD_EP_ClrStall+0xa4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f002 fa0c 	bl	8004556 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af02      	add	r7, sp, #8
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3338      	adds	r3, #56	; 0x38
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	3304      	adds	r3, #4
 8002176:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	d901      	bls.n	8002188 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e06c      	b.n	8002262 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	429a      	cmp	r2, r3
 800219c:	d902      	bls.n	80021a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	3303      	adds	r3, #3
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021ac:	e02b      	b.n	8002206 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d902      	bls.n	80021ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3303      	adds	r3, #3
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	68d9      	ldr	r1, [r3, #12]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4603      	mov	r3, r0
 80021e8:	6978      	ldr	r0, [r7, #20]
 80021ea:	f002 f8e8 	bl	80043be <USB_WritePacket>

    ep->xfer_buff  += len;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	441a      	add	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	441a      	add	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	b29b      	uxth	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	429a      	cmp	r2, r3
 800221a:	d809      	bhi.n	8002230 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002224:	429a      	cmp	r2, r3
 8002226:	d203      	bcs.n	8002230 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1be      	bne.n	80021ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	429a      	cmp	r2, r3
 800223a:	d811      	bhi.n	8002260 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	2201      	movs	r2, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	43db      	mvns	r3, r3
 8002256:	6939      	ldr	r1, [r7, #16]
 8002258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800225c:	4013      	ands	r3, r2
 800225e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	333c      	adds	r3, #60	; 0x3c
 8002284:	3304      	adds	r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	f040 80a0 	bne.w	80023e4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d015      	beq.n	80022da <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a72      	ldr	r2, [pc, #456]	; (800247c <PCD_EP_OutXfrComplete_int+0x210>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	f240 80dd 	bls.w	8002472 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80d7 	beq.w	8002472 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d6:	6093      	str	r3, [r2, #8]
 80022d8:	e0cb      	b.n	8002472 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	2320      	movs	r3, #32
 80022f4:	6093      	str	r3, [r2, #8]
 80022f6:	e0bc      	b.n	8002472 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 80b7 	bne.w	8002472 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a5d      	ldr	r2, [pc, #372]	; (800247c <PCD_EP_OutXfrComplete_int+0x210>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d90f      	bls.n	800232c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	461a      	mov	r2, r3
 8002324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002328:	6093      	str	r3, [r2, #8]
 800232a:	e0a2      	b.n	8002472 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800233e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	0159      	lsls	r1, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	440b      	add	r3, r1
 8002348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002352:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4403      	add	r3, r0
 8002362:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002366:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4403      	add	r3, r0
 800238a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4419      	add	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4403      	add	r3, r0
 80023a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023a4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d114      	bne.n	80023d6 <PCD_EP_OutXfrComplete_int+0x16a>
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023ce:	461a      	mov	r2, r3
 80023d0:	2101      	movs	r1, #1
 80023d2:	f002 fa53 	bl	800487c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f004 f97f 	bl	80066e0 <HAL_PCD_DataOutStageCallback>
 80023e2:	e046      	b.n	8002472 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a26      	ldr	r2, [pc, #152]	; (8002480 <PCD_EP_OutXfrComplete_int+0x214>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d124      	bne.n	8002436 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002402:	461a      	mov	r2, r3
 8002404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002408:	6093      	str	r3, [r2, #8]
 800240a:	e032      	b.n	8002472 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002422:	461a      	mov	r2, r3
 8002424:	2320      	movs	r3, #32
 8002426:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f004 f956 	bl	80066e0 <HAL_PCD_DataOutStageCallback>
 8002434:	e01d      	b.n	8002472 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d114      	bne.n	8002466 <PCD_EP_OutXfrComplete_int+0x1fa>
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d108      	bne.n	8002466 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800245e:	461a      	mov	r2, r3
 8002460:	2100      	movs	r1, #0
 8002462:	f002 fa0b 	bl	800487c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f004 f937 	bl	80066e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	4f54300a 	.word	0x4f54300a
 8002480:	4f54310a 	.word	0x4f54310a

08002484 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	333c      	adds	r3, #60	; 0x3c
 800249c:	3304      	adds	r3, #4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4a15      	ldr	r2, [pc, #84]	; (800250c <PCD_EP_OutSetupPacket_int+0x88>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d90e      	bls.n	80024d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d0:	461a      	mov	r2, r3
 80024d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f004 f8ef 	bl	80066bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a0a      	ldr	r2, [pc, #40]	; (800250c <PCD_EP_OutSetupPacket_int+0x88>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d90c      	bls.n	8002500 <PCD_EP_OutSetupPacket_int+0x7c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024f8:	461a      	mov	r2, r3
 80024fa:	2101      	movs	r1, #1
 80024fc:	f002 f9be 	bl	800487c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	4f54300a 	.word	0x4f54300a

08002510 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
 800251c:	4613      	mov	r3, r2
 800251e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800252e:	883b      	ldrh	r3, [r7, #0]
 8002530:	0419      	lsls	r1, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	430a      	orrs	r2, r1
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
 800253c:	e028      	b.n	8002590 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	4413      	add	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e00d      	b.n	800256e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	3340      	adds	r3, #64	; 0x40
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	0c1b      	lsrs	r3, r3, #16
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	4413      	add	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	3301      	adds	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	3b01      	subs	r3, #1
 8002574:	429a      	cmp	r2, r3
 8002576:	d3ec      	bcc.n	8002552 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002578:	883b      	ldrh	r3, [r7, #0]
 800257a:	0418      	lsls	r0, r3, #16
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	3b01      	subs	r3, #1
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	4302      	orrs	r2, r0
 8002588:	3340      	adds	r3, #64	; 0x40
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	460b      	mov	r3, r1
 80025a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e25b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d075      	beq.n	80026e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f6:	4ba3      	ldr	r3, [pc, #652]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d00c      	beq.n	800261c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4ba0      	ldr	r3, [pc, #640]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260a:	2b08      	cmp	r3, #8
 800260c:	d112      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260e:	4b9d      	ldr	r3, [pc, #628]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261a:	d10b      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	4b99      	ldr	r3, [pc, #612]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d05b      	beq.n	80026e0 <HAL_RCC_OscConfig+0x108>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d157      	bne.n	80026e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e236      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263c:	d106      	bne.n	800264c <HAL_RCC_OscConfig+0x74>
 800263e:	4b91      	ldr	r3, [pc, #580]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a90      	ldr	r2, [pc, #576]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e01d      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x98>
 8002656:	4b8b      	ldr	r3, [pc, #556]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a8a      	ldr	r2, [pc, #552]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b88      	ldr	r3, [pc, #544]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a87      	ldr	r2, [pc, #540]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 8002670:	4b84      	ldr	r3, [pc, #528]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a83      	ldr	r2, [pc, #524]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b81      	ldr	r3, [pc, #516]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a80      	ldr	r2, [pc, #512]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe fb2a 	bl	8000ce8 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002698:	f7fe fb26 	bl	8000ce8 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	; 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1fb      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b76      	ldr	r3, [pc, #472]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0xc0>
 80026b6:	e014      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe fb16 	bl	8000ce8 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c0:	f7fe fb12 	bl	8000ce8 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1e7      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	4b6c      	ldr	r3, [pc, #432]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0xe8>
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d063      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b62      	ldr	r3, [pc, #392]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002702:	2b08      	cmp	r3, #8
 8002704:	d11c      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002706:	4b5f      	ldr	r3, [pc, #380]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d116      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	4b5c      	ldr	r3, [pc, #368]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e1bb      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4b56      	ldr	r3, [pc, #344]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4952      	ldr	r1, [pc, #328]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	e03a      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002748:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <HAL_RCC_OscConfig+0x2b0>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe facb 	bl	8000ce8 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002756:	f7fe fac7 	bl	8000ce8 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e19c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4940      	ldr	r1, [pc, #256]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCC_OscConfig+0x2b0>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe faaa 	bl	8000ce8 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002798:	f7fe faa6 	bl	8000ce8 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e17b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d030      	beq.n	8002824 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b30      	ldr	r3, [pc, #192]	; (800288c <HAL_RCC_OscConfig+0x2b4>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe fa8a 	bl	8000ce8 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fa86 	bl	8000ce8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e15b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x200>
 80027f6:	e015      	b.n	8002824 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x2b4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7fe fa73 	bl	8000ce8 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002806:	f7fe fa6f 	bl	8000ce8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e144      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a0 	beq.w	8002972 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b13      	ldr	r3, [pc, #76]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_OscConfig+0x2b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d121      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_RCC_OscConfig+0x2b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <HAL_RCC_OscConfig+0x2b8>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7fe fa35 	bl	8000ce8 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	e011      	b.n	80028a6 <HAL_RCC_OscConfig+0x2ce>
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	42470000 	.word	0x42470000
 800288c:	42470e80 	.word	0x42470e80
 8002890:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7fe fa28 	bl	8000ce8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0fd      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b81      	ldr	r3, [pc, #516]	; (8002aac <HAL_RCC_OscConfig+0x4d4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x2f0>
 80028ba:	4b7d      	ldr	r3, [pc, #500]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a7c      	ldr	r2, [pc, #496]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	e01c      	b.n	8002902 <HAL_RCC_OscConfig+0x32a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x312>
 80028d0:	4b77      	ldr	r3, [pc, #476]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a76      	ldr	r2, [pc, #472]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	4b74      	ldr	r3, [pc, #464]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a73      	ldr	r2, [pc, #460]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0x32a>
 80028ea:	4b71      	ldr	r3, [pc, #452]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a70      	ldr	r2, [pc, #448]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b6e      	ldr	r3, [pc, #440]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a6d      	ldr	r2, [pc, #436]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d015      	beq.n	8002936 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7fe f9ed 	bl	8000ce8 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe f9e9 	bl	8000ce8 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0bc      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b61      	ldr	r3, [pc, #388]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCC_OscConfig+0x33a>
 8002934:	e014      	b.n	8002960 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7fe f9d7 	bl	8000ce8 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe f9d3 	bl	8000ce8 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0a6      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	4b56      	ldr	r3, [pc, #344]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ee      	bne.n	800293e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002966:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a51      	ldr	r2, [pc, #324]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8092 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d05c      	beq.n	8002a42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d141      	bne.n	8002a14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <HAL_RCC_OscConfig+0x4dc>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe f9a7 	bl	8000ce8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299e:	f7fe f9a3 	bl	8000ce8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e078      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	019b      	lsls	r3, r3, #6
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	3b01      	subs	r3, #1
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	4933      	ldr	r1, [pc, #204]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <HAL_RCC_OscConfig+0x4dc>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe f97c 	bl	8000ce8 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe f978 	bl	8000ce8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e04d      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x41c>
 8002a12:	e045      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <HAL_RCC_OscConfig+0x4dc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f965 	bl	8000ce8 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe f961 	bl	8000ce8 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e036      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a34:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x44a>
 8002a40:	e02e      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e029      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_RCC_OscConfig+0x4d8>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d115      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a76:	4013      	ands	r3, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d10d      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	42470060 	.word	0x42470060

08002ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0cc      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b68      	ldr	r3, [pc, #416]	; (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d90c      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b65      	ldr	r3, [pc, #404]	; (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b63      	ldr	r3, [pc, #396]	; (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0b8      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b0c:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a58      	ldr	r2, [pc, #352]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b24:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a52      	ldr	r2, [pc, #328]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	494d      	ldr	r1, [pc, #308]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d044      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d119      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e07f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b76:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e06f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e067      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b96:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4934      	ldr	r1, [pc, #208]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe f89e 	bl	8000ce8 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb0:	f7fe f89a 	bl	8000ce8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e04f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 020c 	and.w	r2, r3, #12
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1eb      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d20c      	bcs.n	8002c00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e032      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4916      	ldr	r1, [pc, #88]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2a:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	490e      	ldr	r1, [pc, #56]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c3e:	f000 f821 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002c42:	4601      	mov	r1, r0
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	5cd3      	ldrb	r3, [r2, r3]
 8002c52:	fa21 f303 	lsr.w	r3, r1, r3
 8002c56:	4a09      	ldr	r2, [pc, #36]	; (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fef2 	bl	8000a48 <HAL_InitTick>

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023c00 	.word	0x40023c00
 8002c74:	40023800 	.word	0x40023800
 8002c78:	0800754c 	.word	0x0800754c
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	20000004 	.word	0x20000004

08002c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	2300      	movs	r3, #0
 8002c94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c9a:	4b63      	ldr	r3, [pc, #396]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d007      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x32>
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d008      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x38>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f040 80b4 	bne.w	8002e18 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4b5e      	ldr	r3, [pc, #376]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cb2:	60bb      	str	r3, [r7, #8]
       break;
 8002cb4:	e0b3      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cb6:	4b5e      	ldr	r3, [pc, #376]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002cb8:	60bb      	str	r3, [r7, #8]
      break;
 8002cba:	e0b0      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cbc:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cc6:	4b58      	ldr	r3, [pc, #352]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d04a      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd2:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	099b      	lsrs	r3, r3, #6
 8002cd8:	f04f 0400 	mov.w	r4, #0
 8002cdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	ea03 0501 	and.w	r5, r3, r1
 8002ce8:	ea04 0602 	and.w	r6, r4, r2
 8002cec:	4629      	mov	r1, r5
 8002cee:	4632      	mov	r2, r6
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	f04f 0400 	mov.w	r4, #0
 8002cf8:	0154      	lsls	r4, r2, #5
 8002cfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cfe:	014b      	lsls	r3, r1, #5
 8002d00:	4619      	mov	r1, r3
 8002d02:	4622      	mov	r2, r4
 8002d04:	1b49      	subs	r1, r1, r5
 8002d06:	eb62 0206 	sbc.w	r2, r2, r6
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	f04f 0400 	mov.w	r4, #0
 8002d12:	0194      	lsls	r4, r2, #6
 8002d14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d18:	018b      	lsls	r3, r1, #6
 8002d1a:	1a5b      	subs	r3, r3, r1
 8002d1c:	eb64 0402 	sbc.w	r4, r4, r2
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	00e2      	lsls	r2, r4, #3
 8002d2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d2e:	00d9      	lsls	r1, r3, #3
 8002d30:	460b      	mov	r3, r1
 8002d32:	4614      	mov	r4, r2
 8002d34:	195b      	adds	r3, r3, r5
 8002d36:	eb44 0406 	adc.w	r4, r4, r6
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	0262      	lsls	r2, r4, #9
 8002d44:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d48:	0259      	lsls	r1, r3, #9
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	4621      	mov	r1, r4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f04f 0400 	mov.w	r4, #0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	f7fd fa88 	bl	8000270 <__aeabi_uldivmod>
 8002d60:	4603      	mov	r3, r0
 8002d62:	460c      	mov	r4, r1
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	e049      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d68:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	099b      	lsrs	r3, r3, #6
 8002d6e:	f04f 0400 	mov.w	r4, #0
 8002d72:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	ea03 0501 	and.w	r5, r3, r1
 8002d7e:	ea04 0602 	and.w	r6, r4, r2
 8002d82:	4629      	mov	r1, r5
 8002d84:	4632      	mov	r2, r6
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	f04f 0400 	mov.w	r4, #0
 8002d8e:	0154      	lsls	r4, r2, #5
 8002d90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d94:	014b      	lsls	r3, r1, #5
 8002d96:	4619      	mov	r1, r3
 8002d98:	4622      	mov	r2, r4
 8002d9a:	1b49      	subs	r1, r1, r5
 8002d9c:	eb62 0206 	sbc.w	r2, r2, r6
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	f04f 0400 	mov.w	r4, #0
 8002da8:	0194      	lsls	r4, r2, #6
 8002daa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dae:	018b      	lsls	r3, r1, #6
 8002db0:	1a5b      	subs	r3, r3, r1
 8002db2:	eb64 0402 	sbc.w	r4, r4, r2
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	00e2      	lsls	r2, r4, #3
 8002dc0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dc4:	00d9      	lsls	r1, r3, #3
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4614      	mov	r4, r2
 8002dca:	195b      	adds	r3, r3, r5
 8002dcc:	eb44 0406 	adc.w	r4, r4, r6
 8002dd0:	f04f 0100 	mov.w	r1, #0
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	02a2      	lsls	r2, r4, #10
 8002dda:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dde:	0299      	lsls	r1, r3, #10
 8002de0:	460b      	mov	r3, r1
 8002de2:	4614      	mov	r4, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	4621      	mov	r1, r4
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f04f 0400 	mov.w	r4, #0
 8002dee:	461a      	mov	r2, r3
 8002df0:	4623      	mov	r3, r4
 8002df2:	f7fd fa3d 	bl	8000270 <__aeabi_uldivmod>
 8002df6:	4603      	mov	r3, r0
 8002df8:	460c      	mov	r4, r1
 8002dfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	3301      	adds	r3, #1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	60bb      	str	r3, [r7, #8]
      break;
 8002e16:	e002      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e1a:	60bb      	str	r3, [r7, #8]
      break;
 8002e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	00f42400 	.word	0x00f42400
 8002e30:	007a1200 	.word	0x007a1200

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000000 	.word	0x20000000

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e50:	f7ff fff0 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e54:	4601      	mov	r1, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0a9b      	lsrs	r3, r3, #10
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	0800755c 	.word	0x0800755c

08002e74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	220f      	movs	r2, #15
 8002e82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <HAL_RCC_GetClockConfig+0x60>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 020f 	and.w	r2, r3, #15
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40023c00 	.word	0x40023c00

08002ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e01d      	b.n	8002f26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f815 	bl	8002f2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f000 f968 	bl	80031ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d007      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d122      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d11b      	bne.n	8002fe6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f06f 0202 	mvn.w	r2, #2
 8002fb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f8ee 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8002fd2:	e005      	b.n	8002fe0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f8e0 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8f1 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d122      	bne.n	800303a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d11b      	bne.n	800303a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f06f 0204 	mvn.w	r2, #4
 800300a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8c4 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 8003026:	e005      	b.n	8003034 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f8b6 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f8c7 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d122      	bne.n	800308e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b08      	cmp	r3, #8
 8003054:	d11b      	bne.n	800308e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f06f 0208 	mvn.w	r2, #8
 800305e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2204      	movs	r2, #4
 8003064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f89a 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 800307a:	e005      	b.n	8003088 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f88c 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f89d 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b10      	cmp	r3, #16
 800309a:	d122      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d11b      	bne.n	80030e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f06f 0210 	mvn.w	r2, #16
 80030b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2208      	movs	r2, #8
 80030b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f870 	bl	80031ae <HAL_TIM_IC_CaptureCallback>
 80030ce:	e005      	b.n	80030dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f862 	bl	800319a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f873 	bl	80031c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d10e      	bne.n	800310e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d107      	bne.n	800310e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f06f 0201 	mvn.w	r2, #1
 8003106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fd fc5b 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b80      	cmp	r3, #128	; 0x80
 800311a:	d10e      	bne.n	800313a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b80      	cmp	r3, #128	; 0x80
 8003128:	d107      	bne.n	800313a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f903 	bl	8003340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d10e      	bne.n	8003166 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d107      	bne.n	8003166 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800315e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f838 	bl	80031d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b20      	cmp	r3, #32
 8003172:	d10e      	bne.n	8003192 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b20      	cmp	r3, #32
 8003180:	d107      	bne.n	8003192 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f06f 0220 	mvn.w	r2, #32
 800318a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f8cd 	bl	800332c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a40      	ldr	r2, [pc, #256]	; (8003300 <TIM_Base_SetConfig+0x114>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d00f      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3d      	ldr	r2, [pc, #244]	; (8003304 <TIM_Base_SetConfig+0x118>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00b      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3c      	ldr	r2, [pc, #240]	; (8003308 <TIM_Base_SetConfig+0x11c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3b      	ldr	r2, [pc, #236]	; (800330c <TIM_Base_SetConfig+0x120>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <TIM_Base_SetConfig+0x124>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d108      	bne.n	800323e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <TIM_Base_SetConfig+0x114>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d02b      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d027      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2c      	ldr	r2, [pc, #176]	; (8003304 <TIM_Base_SetConfig+0x118>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d023      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a2b      	ldr	r2, [pc, #172]	; (8003308 <TIM_Base_SetConfig+0x11c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01f      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2a      	ldr	r2, [pc, #168]	; (800330c <TIM_Base_SetConfig+0x120>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01b      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a29      	ldr	r2, [pc, #164]	; (8003310 <TIM_Base_SetConfig+0x124>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d017      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a28      	ldr	r2, [pc, #160]	; (8003314 <TIM_Base_SetConfig+0x128>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a27      	ldr	r2, [pc, #156]	; (8003318 <TIM_Base_SetConfig+0x12c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00f      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a26      	ldr	r2, [pc, #152]	; (800331c <TIM_Base_SetConfig+0x130>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00b      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <TIM_Base_SetConfig+0x134>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <TIM_Base_SetConfig+0x138>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a23      	ldr	r2, [pc, #140]	; (8003328 <TIM_Base_SetConfig+0x13c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <TIM_Base_SetConfig+0x114>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0xf8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <TIM_Base_SetConfig+0x124>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d103      	bne.n	80032ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	615a      	str	r2, [r3, #20]
}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40010000 	.word	0x40010000
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40010400 	.word	0x40010400
 8003314:	40014000 	.word	0x40014000
 8003318:	40014400 	.word	0x40014400
 800331c:	40014800 	.word	0x40014800
 8003320:	40001800 	.word	0x40001800
 8003324:	40001c00 	.word	0x40001c00
 8003328:	40002000 	.word	0x40002000

0800332c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003354:	b084      	sub	sp, #16
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	f107 001c 	add.w	r0, r7, #28
 8003362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	2b01      	cmp	r3, #1
 800336a:	d122      	bne.n	80033b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f001 fac6 	bl	8004938 <USB_CoreReset>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e01a      	b.n	80033e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f001 faba 	bl	8004938 <USB_CoreReset>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
 80033da:	e005      	b.n	80033e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10b      	bne.n	8003406 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f043 0206 	orr.w	r2, r3, #6
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f043 0220 	orr.w	r2, r3, #32
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003412:	b004      	add	sp, #16
 8003414:	4770      	bx	lr
	...

08003418 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d165      	bne.n	80034f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4a41      	ldr	r2, [pc, #260]	; (8003534 <USB_SetTurnaroundTime+0x11c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d906      	bls.n	8003442 <USB_SetTurnaroundTime+0x2a>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4a40      	ldr	r2, [pc, #256]	; (8003538 <USB_SetTurnaroundTime+0x120>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d802      	bhi.n	8003442 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800343c:	230f      	movs	r3, #15
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	e062      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4a3c      	ldr	r2, [pc, #240]	; (8003538 <USB_SetTurnaroundTime+0x120>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d906      	bls.n	8003458 <USB_SetTurnaroundTime+0x40>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a3b      	ldr	r2, [pc, #236]	; (800353c <USB_SetTurnaroundTime+0x124>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d802      	bhi.n	8003458 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003452:	230e      	movs	r3, #14
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e057      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4a38      	ldr	r2, [pc, #224]	; (800353c <USB_SetTurnaroundTime+0x124>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d906      	bls.n	800346e <USB_SetTurnaroundTime+0x56>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a37      	ldr	r2, [pc, #220]	; (8003540 <USB_SetTurnaroundTime+0x128>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d802      	bhi.n	800346e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003468:	230d      	movs	r3, #13
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e04c      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4a33      	ldr	r2, [pc, #204]	; (8003540 <USB_SetTurnaroundTime+0x128>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d906      	bls.n	8003484 <USB_SetTurnaroundTime+0x6c>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a32      	ldr	r2, [pc, #200]	; (8003544 <USB_SetTurnaroundTime+0x12c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d802      	bhi.n	8003484 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800347e:	230c      	movs	r3, #12
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e041      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4a2f      	ldr	r2, [pc, #188]	; (8003544 <USB_SetTurnaroundTime+0x12c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d906      	bls.n	800349a <USB_SetTurnaroundTime+0x82>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <USB_SetTurnaroundTime+0x130>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d802      	bhi.n	800349a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003494:	230b      	movs	r3, #11
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e036      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <USB_SetTurnaroundTime+0x130>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d906      	bls.n	80034b0 <USB_SetTurnaroundTime+0x98>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4a29      	ldr	r2, [pc, #164]	; (800354c <USB_SetTurnaroundTime+0x134>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d802      	bhi.n	80034b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034aa:	230a      	movs	r3, #10
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e02b      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4a26      	ldr	r2, [pc, #152]	; (800354c <USB_SetTurnaroundTime+0x134>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d906      	bls.n	80034c6 <USB_SetTurnaroundTime+0xae>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4a25      	ldr	r2, [pc, #148]	; (8003550 <USB_SetTurnaroundTime+0x138>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d802      	bhi.n	80034c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034c0:	2309      	movs	r3, #9
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	e020      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4a21      	ldr	r2, [pc, #132]	; (8003550 <USB_SetTurnaroundTime+0x138>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d906      	bls.n	80034dc <USB_SetTurnaroundTime+0xc4>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4a20      	ldr	r2, [pc, #128]	; (8003554 <USB_SetTurnaroundTime+0x13c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d802      	bhi.n	80034dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80034d6:	2308      	movs	r3, #8
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e015      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <USB_SetTurnaroundTime+0x13c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d906      	bls.n	80034f2 <USB_SetTurnaroundTime+0xda>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <USB_SetTurnaroundTime+0x140>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d802      	bhi.n	80034f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80034ec:	2307      	movs	r3, #7
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e00a      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80034f2:	2306      	movs	r3, #6
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e007      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80034fe:	2309      	movs	r3, #9
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e001      	b.n	8003508 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003504:	2309      	movs	r3, #9
 8003506:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	029b      	lsls	r3, r3, #10
 800351c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003520:	431a      	orrs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	00d8acbf 	.word	0x00d8acbf
 8003538:	00e4e1bf 	.word	0x00e4e1bf
 800353c:	00f423ff 	.word	0x00f423ff
 8003540:	0106737f 	.word	0x0106737f
 8003544:	011a499f 	.word	0x011a499f
 8003548:	01312cff 	.word	0x01312cff
 800354c:	014ca43f 	.word	0x014ca43f
 8003550:	016e35ff 	.word	0x016e35ff
 8003554:	01a6ab1f 	.word	0x01a6ab1f
 8003558:	01e847ff 	.word	0x01e847ff

0800355c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f023 0201 	bic.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d106      	bne.n	80035cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	e00b      	b.n	80035e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	e001      	b.n	80035e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e003      	b.n	80035ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80035e4:	2032      	movs	r0, #50	; 0x32
 80035e6:	f7fd fb8b 	bl	8000d00 <HAL_Delay>

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035f4:	b084      	sub	sp, #16
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e009      	b.n	8003628 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3340      	adds	r3, #64	; 0x40
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	2200      	movs	r2, #0
 8003620:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	3301      	adds	r3, #1
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b0e      	cmp	r3, #14
 800362c:	d9f2      	bls.n	8003614 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11c      	bne.n	800366e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003642:	f043 0302 	orr.w	r3, r3, #2
 8003646:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
 800366c:	e00b      	b.n	8003686 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800368c:	461a      	mov	r2, r3
 800368e:	2300      	movs	r3, #0
 8003690:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003698:	4619      	mov	r1, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a0:	461a      	mov	r2, r3
 80036a2:	680b      	ldr	r3, [r1, #0]
 80036a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d10c      	bne.n	80036c6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036b2:	2100      	movs	r1, #0
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f949 	bl	800394c <USB_SetDevSpeed>
 80036ba:	e008      	b.n	80036ce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036bc:	2101      	movs	r1, #1
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f944 	bl	800394c <USB_SetDevSpeed>
 80036c4:	e003      	b.n	80036ce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036c6:	2103      	movs	r1, #3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f93f 	bl	800394c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036ce:	2110      	movs	r1, #16
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f8f3 	bl	80038bc <USB_FlushTxFifo>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f911 	bl	8003908 <USB_FlushRxFifo>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f6:	461a      	mov	r2, r3
 80036f8:	2300      	movs	r3, #0
 80036fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003702:	461a      	mov	r2, r3
 8003704:	2300      	movs	r3, #0
 8003706:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370e:	461a      	mov	r2, r3
 8003710:	2300      	movs	r3, #0
 8003712:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	e043      	b.n	80037a2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800372c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003730:	d118      	bne.n	8003764 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003744:	461a      	mov	r2, r3
 8003746:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	e013      	b.n	8003776 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	461a      	mov	r2, r3
 800375c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e008      	b.n	8003776 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	461a      	mov	r2, r3
 8003772:	2300      	movs	r3, #0
 8003774:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	461a      	mov	r2, r3
 8003784:	2300      	movs	r3, #0
 8003786:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003794:	461a      	mov	r2, r3
 8003796:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800379a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	3301      	adds	r3, #1
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3b7      	bcc.n	800371a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	e043      	b.n	8003838 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c6:	d118      	bne.n	80037fa <USB_DevInit+0x206>
    {
      if (i == 0U)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037da:	461a      	mov	r2, r3
 80037dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e013      	b.n	800380c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f0:	461a      	mov	r2, r3
 80037f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e008      	b.n	800380c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003806:	461a      	mov	r2, r3
 8003808:	2300      	movs	r3, #0
 800380a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003818:	461a      	mov	r2, r3
 800381a:	2300      	movs	r3, #0
 800381c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382a:	461a      	mov	r2, r3
 800382c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003830:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	3301      	adds	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	429a      	cmp	r2, r3
 800383e:	d3b7      	bcc.n	80037b0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800384e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003852:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003860:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f043 0210 	orr.w	r2, r3, #16
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <USB_DevInit+0x2c4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f043 0208 	orr.w	r2, r3, #8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003894:	2b01      	cmp	r3, #1
 8003896:	d107      	bne.n	80038a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038b4:	b004      	add	sp, #16
 80038b6:	4770      	bx	lr
 80038b8:	803c3800 	.word	0x803c3800

080038bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	019b      	lsls	r3, r3, #6
 80038ce:	f043 0220 	orr.w	r2, r3, #32
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3301      	adds	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <USB_FlushTxFifo+0x48>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e006      	b.n	80038f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d0f0      	beq.n	80038d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	00030d40 	.word	0x00030d40

08003908 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2210      	movs	r2, #16
 8003918:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3301      	adds	r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <USB_FlushRxFifo+0x40>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d901      	bls.n	800392c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e006      	b.n	800393a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b10      	cmp	r3, #16
 8003936:	d0f0      	beq.n	800391a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	00030d40 	.word	0x00030d40

0800394c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	68f9      	ldr	r1, [r7, #12]
 8003968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800397e:	b480      	push	{r7}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0306 	and.w	r3, r3, #6
 8003996:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]
 80039a2:	e00a      	b.n	80039ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d002      	beq.n	80039b0 <USB_GetDevSpeed+0x32>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	d102      	bne.n	80039b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039b0:	2302      	movs	r3, #2
 80039b2:	75fb      	strb	r3, [r7, #23]
 80039b4:	e001      	b.n	80039ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039b6:	230f      	movs	r3, #15
 80039b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	785b      	ldrb	r3, [r3, #1]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d13a      	bne.n	8003a5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	2101      	movs	r1, #1
 80039f6:	fa01 f303 	lsl.w	r3, r1, r3
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d155      	bne.n	8003ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	78db      	ldrb	r3, [r3, #3]
 8003a36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	059b      	lsls	r3, r3, #22
 8003a3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a40:	4313      	orrs	r3, r2
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	0151      	lsls	r1, r2, #5
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	440a      	add	r2, r1
 8003a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e036      	b.n	8003ac8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	041b      	lsls	r3, r3, #16
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11a      	bne.n	8003ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	78db      	ldrb	r3, [r3, #3]
 8003aac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	0151      	lsls	r1, r2, #5
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	440a      	add	r2, r1
 8003aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d161      	bne.n	8003bb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b0a:	d11f      	bne.n	8003b4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	0151      	lsls	r1, r2, #5
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	440a      	add	r2, r1
 8003b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	68f9      	ldr	r1, [r7, #12]
 8003b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	2101      	movs	r1, #1
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	68f9      	ldr	r1, [r7, #12]
 8003b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b90:	4013      	ands	r3, r2
 8003b92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	0159      	lsls	r1, r3, #5
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	440b      	add	r3, r1
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <USB_DeactivateEndpoint+0x1b0>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]
 8003bb6:	e060      	b.n	8003c7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bce:	d11f      	bne.n	8003c10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	041b      	lsls	r3, r3, #16
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c30:	4013      	ands	r3, r2
 8003c32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	2101      	movs	r1, #1
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c54:	4013      	ands	r3, r2
 8003c56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	0159      	lsls	r1, r3, #5
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	440b      	add	r3, r1
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	4619      	mov	r1, r3
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <USB_DeactivateEndpoint+0x1b4>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	ec337800 	.word	0xec337800
 8003c8c:	eff37800 	.word	0xeff37800

08003c90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	f040 815c 	bne.w	8003f6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d132      	bne.n	8003d20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	0151      	lsls	r1, r2, #5
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	440a      	add	r2, r1
 8003cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d18:	0cdb      	lsrs	r3, r3, #19
 8003d1a:	04db      	lsls	r3, r3, #19
 8003d1c:	6113      	str	r3, [r2, #16]
 8003d1e:	e074      	b.n	8003e0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3a:	0cdb      	lsrs	r3, r3, #19
 8003d3c:	04db      	lsls	r3, r3, #19
 8003d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6959      	ldr	r1, [r3, #20]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	440b      	add	r3, r1
 8003d7c:	1e59      	subs	r1, r3, #1
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d86:	04d9      	lsls	r1, r3, #19
 8003d88:	4b9d      	ldr	r3, [pc, #628]	; (8004000 <USB_EPStartXfer+0x370>)
 8003d8a:	400b      	ands	r3, r1
 8003d8c:	69b9      	ldr	r1, [r7, #24]
 8003d8e:	0148      	lsls	r0, r1, #5
 8003d90:	69f9      	ldr	r1, [r7, #28]
 8003d92:	4401      	add	r1, r0
 8003d94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db2:	69b9      	ldr	r1, [r7, #24]
 8003db4:	0148      	lsls	r0, r1, #5
 8003db6:	69f9      	ldr	r1, [r7, #28]
 8003db8:	4401      	add	r1, r0
 8003dba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	78db      	ldrb	r3, [r3, #3]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d11f      	bne.n	8003e0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003de8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d14b      	bne.n	8003ea8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	461a      	mov	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	78db      	ldrb	r3, [r3, #3]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d128      	bne.n	8003e86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d110      	bne.n	8003e66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	0151      	lsls	r1, r2, #5
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	440a      	add	r2, r1
 8003e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	e00f      	b.n	8003e86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	0151      	lsls	r1, r2, #5
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	440a      	add	r2, r1
 8003e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e12f      	b.n	8004108 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ec6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	78db      	ldrb	r3, [r3, #3]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d015      	beq.n	8003efc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8117 	beq.w	8004108 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	2101      	movs	r1, #1
 8003eec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef0:	69f9      	ldr	r1, [r7, #28]
 8003ef2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	634b      	str	r3, [r1, #52]	; 0x34
 8003efa:	e105      	b.n	8004108 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d110      	bne.n	8003f2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e00f      	b.n	8003f4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	68d9      	ldr	r1, [r3, #12]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	b298      	uxth	r0, r3
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	4603      	mov	r3, r0
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fa2b 	bl	80043be <USB_WritePacket>
 8003f68:	e0ce      	b.n	8004108 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f84:	0cdb      	lsrs	r3, r3, #19
 8003f86:	04db      	lsls	r3, r3, #19
 8003f88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	0151      	lsls	r1, r2, #5
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	440a      	add	r2, r1
 8003fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d126      	bne.n	8004004 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fcc:	69b9      	ldr	r1, [r7, #24]
 8003fce:	0148      	lsls	r0, r1, #5
 8003fd0:	69f9      	ldr	r1, [r7, #28]
 8003fd2:	4401      	add	r1, r0
 8003fd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ffa:	6113      	str	r3, [r2, #16]
 8003ffc:	e036      	b.n	800406c <USB_EPStartXfer+0x3dc>
 8003ffe:	bf00      	nop
 8004000:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4413      	add	r3, r2
 800400e:	1e5a      	subs	r2, r3, #1
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	8afb      	ldrh	r3, [r7, #22]
 800402a:	04d9      	lsls	r1, r3, #19
 800402c:	4b39      	ldr	r3, [pc, #228]	; (8004114 <USB_EPStartXfer+0x484>)
 800402e:	400b      	ands	r3, r1
 8004030:	69b9      	ldr	r1, [r7, #24]
 8004032:	0148      	lsls	r0, r1, #5
 8004034:	69f9      	ldr	r1, [r7, #28]
 8004036:	4401      	add	r1, r0
 8004038:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800403c:	4313      	orrs	r3, r2
 800403e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	8af9      	ldrh	r1, [r7, #22]
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	0148      	lsls	r0, r1, #5
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	4401      	add	r1, r0
 8004064:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004068:	4313      	orrs	r3, r2
 800406a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10d      	bne.n	800408e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	68d9      	ldr	r1, [r3, #12]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	460a      	mov	r2, r1
 800408c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	78db      	ldrb	r3, [r3, #3]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d128      	bne.n	80040e8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d110      	bne.n	80040c8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e00f      	b.n	80040e8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	0151      	lsls	r1, r2, #5
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	440a      	add	r2, r1
 80040de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	0151      	lsls	r1, r2, #5
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	440a      	add	r2, r1
 80040fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004102:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	1ff80000 	.word	0x1ff80000

08004118 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	f040 80cd 	bne.w	80042d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d132      	bne.n	80041a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	440a      	add	r2, r1
 800417c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a0:	0cdb      	lsrs	r3, r3, #19
 80041a2:	04db      	lsls	r3, r3, #19
 80041a4:	6113      	str	r3, [r2, #16]
 80041a6:	e04e      	b.n	8004246 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	0151      	lsls	r1, r2, #5
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	440a      	add	r2, r1
 80041be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c2:	0cdb      	lsrs	r3, r3, #19
 80041c4:	04db      	lsls	r3, r3, #19
 80041c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d903      	bls.n	8004200 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	440a      	add	r2, r1
 8004216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800421e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004236:	6939      	ldr	r1, [r7, #16]
 8004238:	0148      	lsls	r0, r1, #5
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	4401      	add	r1, r0
 800423e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004242:	4313      	orrs	r3, r2
 8004244:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d11e      	bne.n	800428a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	461a      	mov	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	0151      	lsls	r1, r2, #5
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	440a      	add	r2, r1
 800427e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e092      	b.n	80043b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d07e      	beq.n	80043b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	2101      	movs	r1, #1
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	6979      	ldr	r1, [r7, #20]
 80042ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ce:	4313      	orrs	r3, r2
 80042d0:	634b      	str	r3, [r1, #52]	; 0x34
 80042d2:	e06d      	b.n	80043b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	0151      	lsls	r1, r2, #5
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	440a      	add	r2, r1
 80042ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ee:	0cdb      	lsrs	r3, r3, #19
 80042f0:	04db      	lsls	r3, r3, #19
 80042f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800430e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004312:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004316:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	440a      	add	r2, r1
 800433e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004346:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	6939      	ldr	r1, [r7, #16]
 8004360:	0148      	lsls	r0, r1, #5
 8004362:	6979      	ldr	r1, [r7, #20]
 8004364:	4401      	add	r1, r0
 8004366:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800436a:	4313      	orrs	r3, r2
 800436c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10d      	bne.n	8004390 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d009      	beq.n	8004390 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	68d9      	ldr	r1, [r3, #12]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438c:	460a      	mov	r2, r1
 800438e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80043be:	b480      	push	{r7}
 80043c0:	b089      	sub	sp, #36	; 0x24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	4611      	mov	r1, r2
 80043ca:	461a      	mov	r2, r3
 80043cc:	460b      	mov	r3, r1
 80043ce:	71fb      	strb	r3, [r7, #7]
 80043d0:	4613      	mov	r3, r2
 80043d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80043dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d11a      	bne.n	800441a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80043e4:	88bb      	ldrh	r3, [r7, #4]
 80043e6:	3303      	adds	r3, #3
 80043e8:	089b      	lsrs	r3, r3, #2
 80043ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	e00f      	b.n	8004412 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	031a      	lsls	r2, r3, #12
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fe:	461a      	mov	r2, r3
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3304      	adds	r3, #4
 800440a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	3301      	adds	r3, #1
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	429a      	cmp	r2, r3
 8004418:	d3eb      	bcc.n	80043f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3724      	adds	r7, #36	; 0x24
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	3303      	adds	r3, #3
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	e00b      	b.n	8004464 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	601a      	str	r2, [r3, #0]
    pDest++;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3304      	adds	r3, #4
 800445c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	3301      	adds	r3, #1
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d3ef      	bcc.n	800444c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800446c:	69fb      	ldr	r3, [r7, #28]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3724      	adds	r7, #36	; 0x24
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d12c      	bne.n	80044f0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	db12      	blt.n	80044ce <USB_EPSetStall+0x54>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00f      	beq.n	80044ce <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044cc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	0151      	lsls	r1, r2, #5
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	440a      	add	r2, r1
 80044e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e02b      	b.n	8004548 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db12      	blt.n	8004528 <USB_EPSetStall+0xae>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00f      	beq.n	8004528 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004526:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	440a      	add	r2, r1
 800453e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004546:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d128      	bne.n	80045c4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	440a      	add	r2, r1
 8004588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004590:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	78db      	ldrb	r3, [r3, #3]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d003      	beq.n	80045a2 <USB_EPClearStall+0x4c>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	78db      	ldrb	r3, [r3, #3]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d138      	bne.n	8004614 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e027      	b.n	8004614 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	78db      	ldrb	r3, [r3, #3]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d003      	beq.n	80045f4 <USB_EPClearStall+0x9e>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	78db      	ldrb	r3, [r3, #3]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d10f      	bne.n	8004614 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	0151      	lsls	r1, r2, #5
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	440a      	add	r2, r1
 800460a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004612:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	460b      	mov	r3, r1
 800462c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004640:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004644:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004688:	f023 0303 	bic.w	r3, r3, #3
 800468c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800469c:	f023 0302 	bic.w	r3, r3, #2
 80046a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046ca:	f023 0303 	bic.w	r3, r3, #3
 80046ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046de:	f043 0302 	orr.w	r3, r3, #2
 80046e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4013      	ands	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800470a:	68fb      	ldr	r3, [r7, #12]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	0c1b      	lsrs	r3, r3, #16
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	4013      	ands	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	b29b      	uxth	r3, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80047ae:	68bb      	ldr	r3, [r7, #8]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ec:	01db      	lsls	r3, r3, #7
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4013      	ands	r3, r2
 8004808:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800480a:	68bb      	ldr	r3, [r7, #8]
}
 800480c:	4618      	mov	r0, r3
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0301 	and.w	r3, r3, #1
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004852:	f023 0307 	bic.w	r3, r3, #7
 8004856:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	460b      	mov	r3, r1
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	333c      	adds	r3, #60	; 0x3c
 8004892:	3304      	adds	r3, #4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4a26      	ldr	r2, [pc, #152]	; (8004934 <USB_EP0_OutStart+0xb8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d90a      	bls.n	80048b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b0:	d101      	bne.n	80048b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e037      	b.n	8004926 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	461a      	mov	r2, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e4:	f043 0318 	orr.w	r3, r3, #24
 80048e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80048fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80048fe:	7afb      	ldrb	r3, [r7, #11]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d10f      	bne.n	8004924 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004922:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	4f54300a 	.word	0x4f54300a

08004938 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3301      	adds	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a13      	ldr	r2, [pc, #76]	; (800499c <USB_CoreReset+0x64>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e01b      	b.n	800498e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	daf2      	bge.n	8004944 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f043 0201 	orr.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3301      	adds	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <USB_CoreReset+0x64>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d901      	bls.n	8004980 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e006      	b.n	800498e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d0f0      	beq.n	800496e <USB_CoreReset+0x36>

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	00030d40 	.word	0x00030d40

080049a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80049ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80049b0:	f002 f956 	bl	8006c60 <malloc>
 80049b4:	4603      	mov	r3, r0
 80049b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d105      	bne.n	80049ca <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80049c6:	2302      	movs	r3, #2
 80049c8:	e066      	b.n	8004a98 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	7c1b      	ldrb	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d119      	bne.n	8004a0e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80049da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049de:	2202      	movs	r2, #2
 80049e0:	2181      	movs	r1, #129	; 0x81
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f001 ffc3 	bl	800696e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80049ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049f2:	2202      	movs	r2, #2
 80049f4:	2101      	movs	r1, #1
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f001 ffb9 	bl	800696e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2210      	movs	r2, #16
 8004a08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004a0c:	e016      	b.n	8004a3c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a0e:	2340      	movs	r3, #64	; 0x40
 8004a10:	2202      	movs	r2, #2
 8004a12:	2181      	movs	r1, #129	; 0x81
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 ffaa 	bl	800696e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a20:	2340      	movs	r3, #64	; 0x40
 8004a22:	2202      	movs	r2, #2
 8004a24:	2101      	movs	r1, #1
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f001 ffa1 	bl	800696e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2210      	movs	r2, #16
 8004a38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	2203      	movs	r2, #3
 8004a40:	2182      	movs	r1, #130	; 0x82
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 ff93 	bl	800696e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	7c1b      	ldrb	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f002 f864 	bl	8006b4c <USBD_LL_PrepareReceive>
 8004a84:	e007      	b.n	8004a96 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a8c:	2340      	movs	r3, #64	; 0x40
 8004a8e:	2101      	movs	r1, #1
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f002 f85b 	bl	8006b4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004ab0:	2181      	movs	r1, #129	; 0x81
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f001 ff81 	bl	80069ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004abe:	2101      	movs	r1, #1
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f001 ff7a 	bl	80069ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ace:	2182      	movs	r1, #130	; 0x82
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f001 ff72 	bl	80069ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b00:	4618      	mov	r0, r3
 8004b02:	f002 f8b5 	bl	8006c70 <free>
    pdev->pClassData = NULL;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b28:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03a      	beq.n	8004bb8 <USBD_CDC_Setup+0xa0>
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	f040 8097 	bne.w	8004c76 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	88db      	ldrh	r3, [r3, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d029      	beq.n	8004ba4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da11      	bge.n	8004b7e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004b66:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	88d2      	ldrh	r2, [r2, #6]
 8004b6c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004b6e:	6939      	ldr	r1, [r7, #16]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	88db      	ldrh	r3, [r3, #6]
 8004b74:	461a      	mov	r2, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f001 fa9d 	bl	80060b6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004b7c:	e082      	b.n	8004c84 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	785a      	ldrb	r2, [r3, #1]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	88db      	ldrh	r3, [r3, #6]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004b94:	6939      	ldr	r1, [r7, #16]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	88db      	ldrh	r3, [r3, #6]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f001 fab6 	bl	800610e <USBD_CtlPrepareRx>
    break;
 8004ba2:	e06f      	b.n	8004c84 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	7850      	ldrb	r0, [r2, #1]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	6839      	ldr	r1, [r7, #0]
 8004bb4:	4798      	blx	r3
    break;
 8004bb6:	e065      	b.n	8004c84 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b0b      	cmp	r3, #11
 8004bbe:	d84f      	bhi.n	8004c60 <USBD_CDC_Setup+0x148>
 8004bc0:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <USBD_CDC_Setup+0xb0>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bf9 	.word	0x08004bf9
 8004bcc:	08004c6f 	.word	0x08004c6f
 8004bd0:	08004c61 	.word	0x08004c61
 8004bd4:	08004c61 	.word	0x08004c61
 8004bd8:	08004c61 	.word	0x08004c61
 8004bdc:	08004c61 	.word	0x08004c61
 8004be0:	08004c61 	.word	0x08004c61
 8004be4:	08004c61 	.word	0x08004c61
 8004be8:	08004c61 	.word	0x08004c61
 8004bec:	08004c61 	.word	0x08004c61
 8004bf0:	08004c21 	.word	0x08004c21
 8004bf4:	08004c49 	.word	0x08004c49
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d107      	bne.n	8004c12 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c02:	f107 030c 	add.w	r3, r7, #12
 8004c06:	2202      	movs	r2, #2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f001 fa53 	bl	80060b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004c10:	e030      	b.n	8004c74 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f001 f9dd 	bl	8005fd4 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1e:	e029      	b.n	8004c74 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d107      	bne.n	8004c3a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c2a:	f107 030f 	add.w	r3, r7, #15
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f001 fa3f 	bl	80060b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004c38:	e01c      	b.n	8004c74 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f001 f9c9 	bl	8005fd4 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c42:	2303      	movs	r3, #3
 8004c44:	75fb      	strb	r3, [r7, #23]
      break;
 8004c46:	e015      	b.n	8004c74 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d00f      	beq.n	8004c72 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f001 f9bd 	bl	8005fd4 <USBD_CtlError>
        ret = USBD_FAIL;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c5e:	e008      	b.n	8004c72 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004c60:	6839      	ldr	r1, [r7, #0]
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f001 f9b6 	bl	8005fd4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6c:	e002      	b.n	8004c74 <USBD_CDC_Setup+0x15c>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e008      	b.n	8004c84 <USBD_CDC_Setup+0x16c>
      break;
 8004c72:	bf00      	nop
    }
    break;
 8004c74:	e006      	b.n	8004c84 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f001 f9ab 	bl	8005fd4 <USBD_CtlError>
    ret = USBD_FAIL;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	75fb      	strb	r3, [r7, #23]
    break;
 8004c82:	bf00      	nop
  }

  return (uint8_t)ret;
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop

08004c90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004ca2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e049      	b.n	8004d46 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	3318      	adds	r3, #24
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d029      	beq.n	8004d24 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3318      	adds	r3, #24
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	78f9      	ldrb	r1, [r7, #3]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a5b      	subs	r3, r3, r1
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4403      	add	r3, r0
 8004cf0:	3344      	adds	r3, #68	; 0x44
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004cf8:	fb03 f301 	mul.w	r3, r3, r1
 8004cfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d110      	bne.n	8004d24 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3318      	adds	r3, #24
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d16:	78f9      	ldrb	r1, [r7, #3]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f001 fef4 	bl	8006b0a <USBD_LL_Transmit>
 8004d22:	e00f      	b.n	8004d44 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e015      	b.n	8004d9c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 ff0a 	bl	8006b8e <USBD_LL_GetRxDataSize>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004d96:	4611      	mov	r1, r2
 8004d98:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004db2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d015      	beq.n	8004dea <USBD_CDC_EP0_RxReady+0x46>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004dc4:	2bff      	cmp	r3, #255	; 0xff
 8004dc6:	d010      	beq.n	8004dea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004dd6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004dde:	b292      	uxth	r2, r2
 8004de0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	22ff      	movs	r2, #255	; 0xff
 8004de6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2243      	movs	r2, #67	; 0x43
 8004e00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004e02:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	20000094 	.word	0x20000094

08004e14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2243      	movs	r2, #67	; 0x43
 8004e20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004e22:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	20000050 	.word	0x20000050

08004e34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2243      	movs	r2, #67	; 0x43
 8004e40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004e42:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	200000d8 	.word	0x200000d8

08004e54 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	220a      	movs	r2, #10
 8004e60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004e62:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	2000000c 	.word	0x2000000c

08004e74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e004      	b.n	8004e92 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b087      	sub	sp, #28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ee0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f06:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e01a      	b.n	8004f50 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d114      	bne.n	8004f4e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f42:	2181      	movs	r1, #129	; 0x81
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 fde0 	bl	8006b0a <USBD_LL_Transmit>

    ret = USBD_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e016      	b.n	8004fa4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	7c1b      	ldrb	r3, [r3, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f88:	2101      	movs	r1, #1
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f001 fdde 	bl	8006b4c <USBD_LL_PrepareReceive>
 8004f90:	e007      	b.n	8004fa2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 fdd5 	bl	8006b4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e025      	b.n	8005010 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	79fa      	ldrb	r2, [r7, #7]
 8005002:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f001 fc4b 	bl	80068a0 <USBD_LL_Init>
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800500e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800502c:	2303      	movs	r3, #3
 800502e:	e010      	b.n	8005052 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	f107 020e 	add.w	r2, r7, #14
 8005044:	4610      	mov	r0, r2
 8005046:	4798      	blx	r3
 8005048:	4602      	mov	r2, r0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f001 fc68 	bl	8006938 <USBD_LL_Start>
 8005068:	4603      	mov	r3, r0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005094:	2303      	movs	r3, #3
 8005096:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	4611      	mov	r1, r2
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	4798      	blx	r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	78fa      	ldrb	r2, [r7, #3]
 80050e0:	4611      	mov	r1, r2
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
  }

  return USBD_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 ff2c 	bl	8005f60 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	2b01      	cmp	r3, #1
 800512a:	d00e      	beq.n	800514a <USBD_LL_SetupStage+0x5a>
 800512c:	2b01      	cmp	r3, #1
 800512e:	d302      	bcc.n	8005136 <USBD_LL_SetupStage+0x46>
 8005130:	2b02      	cmp	r3, #2
 8005132:	d014      	beq.n	800515e <USBD_LL_SetupStage+0x6e>
 8005134:	e01d      	b.n	8005172 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa18 	bl	8005574 <USBD_StdDevReq>
 8005144:	4603      	mov	r3, r0
 8005146:	73fb      	strb	r3, [r7, #15]
      break;
 8005148:	e020      	b.n	800518c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa7c 	bl	8005650 <USBD_StdItfReq>
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]
      break;
 800515c:	e016      	b.n	800518c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fab8 	bl	80056dc <USBD_StdEPReq>
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]
      break;
 8005170:	e00c      	b.n	800518c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005178:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800517c:	b2db      	uxtb	r3, r3
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 fc39 	bl	80069f8 <USBD_LL_StallEP>
 8005186:	4603      	mov	r3, r0
 8005188:	73fb      	strb	r3, [r7, #15]
      break;
 800518a:	bf00      	nop
  }

  return ret;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	460b      	mov	r3, r1
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80051a4:	7afb      	ldrb	r3, [r7, #11]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d137      	bne.n	800521a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80051b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d14a      	bne.n	8005252 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d913      	bls.n	80051f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	1ad2      	subs	r2, r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4293      	cmp	r3, r2
 80051e0:	bf28      	it	cs
 80051e2:	4613      	movcs	r3, r2
 80051e4:	461a      	mov	r2, r3
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 ffad 	bl	8006148 <USBD_CtlContinueRx>
 80051ee:	e030      	b.n	8005252 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005202:	2b03      	cmp	r3, #3
 8005204:	d105      	bne.n	8005212 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 ffa9 	bl	800616a <USBD_CtlSendStatus>
 8005218:	e01b      	b.n	8005252 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d013      	beq.n	800524e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800522c:	2b03      	cmp	r3, #3
 800522e:	d10e      	bne.n	800524e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	7afa      	ldrb	r2, [r7, #11]
 800523a:	4611      	mov	r1, r2
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	4798      	blx	r3
 8005240:	4603      	mov	r3, r0
 8005242:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
 800524c:	e002      	b.n	8005254 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800524e:	2303      	movs	r3, #3
 8005250:	e000      	b.n	8005254 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	460b      	mov	r3, r1
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800526a:	7afb      	ldrb	r3, [r7, #11]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d16a      	bne.n	8005346 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3314      	adds	r3, #20
 8005274:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800527c:	2b02      	cmp	r3, #2
 800527e:	d155      	bne.n	800532c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	429a      	cmp	r2, r3
 800528a:	d914      	bls.n	80052b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	1ad2      	subs	r2, r2, r3
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	461a      	mov	r2, r3
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 ff22 	bl	80060ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052a8:	2300      	movs	r3, #0
 80052aa:	2200      	movs	r2, #0
 80052ac:	2100      	movs	r1, #0
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f001 fc4c 	bl	8006b4c <USBD_LL_PrepareReceive>
 80052b4:	e03a      	b.n	800532c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d11c      	bne.n	80052fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d316      	bcc.n	80052fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052d8:	429a      	cmp	r2, r3
 80052da:	d20f      	bcs.n	80052fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052dc:	2200      	movs	r2, #0
 80052de:	2100      	movs	r1, #0
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 ff03 	bl	80060ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052ee:	2300      	movs	r3, #0
 80052f0:	2200      	movs	r2, #0
 80052f2:	2100      	movs	r1, #0
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f001 fc29 	bl	8006b4c <USBD_LL_PrepareReceive>
 80052fa:	e017      	b.n	800532c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800530e:	2b03      	cmp	r3, #3
 8005310:	d105      	bne.n	800531e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800531e:	2180      	movs	r1, #128	; 0x80
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f001 fb69 	bl	80069f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 ff32 	bl	8006190 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005332:	2b01      	cmp	r3, #1
 8005334:	d123      	bne.n	800537e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff fe9b 	bl	8005072 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005344:	e01b      	b.n	800537e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d013      	beq.n	800537a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005358:	2b03      	cmp	r3, #3
 800535a:	d10e      	bne.n	800537a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	7afa      	ldrb	r2, [r7, #11]
 8005366:	4611      	mov	r1, r2
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	4798      	blx	r3
 800536c:	4603      	mov	r3, r0
 800536e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	e002      	b.n	8005380 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800537a:	2303      	movs	r3, #3
 800537c:	e000      	b.n	8005380 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d009      	beq.n	80053cc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6852      	ldr	r2, [r2, #4]
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	4611      	mov	r1, r2
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053cc:	2340      	movs	r3, #64	; 0x40
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 facb 	bl	800696e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2240      	movs	r2, #64	; 0x40
 80053e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053e8:	2340      	movs	r3, #64	; 0x40
 80053ea:	2200      	movs	r2, #0
 80053ec:	2180      	movs	r1, #128	; 0x80
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 fabd 	bl	800696e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2240      	movs	r2, #64	; 0x40
 80053fe:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2204      	movs	r2, #4
 8005442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005462:	2b04      	cmp	r3, #4
 8005464:	d105      	bne.n	8005472 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548e:	2b03      	cmp	r3, #3
 8005490:	d10b      	bne.n	80054aa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6852      	ldr	r2, [r2, #4]
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	4611      	mov	r1, r2
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
  }

  return USBD_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005536:	b480      	push	{r7}
 8005538:	b087      	sub	sp, #28
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	3301      	adds	r3, #1
 800554c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005554:	8a3b      	ldrh	r3, [r7, #16]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	b21a      	sxth	r2, r3
 800555a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800555e:	4313      	orrs	r3, r2
 8005560:	b21b      	sxth	r3, r3
 8005562:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005564:	89fb      	ldrh	r3, [r7, #14]
}
 8005566:	4618      	mov	r0, r3
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800558a:	2b20      	cmp	r3, #32
 800558c:	d004      	beq.n	8005598 <USBD_StdDevReq+0x24>
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d002      	beq.n	8005598 <USBD_StdDevReq+0x24>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <USBD_StdDevReq+0x38>
 8005596:	e050      	b.n	800563a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	73fb      	strb	r3, [r7, #15]
    break;
 80055aa:	e04b      	b.n	8005644 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	2b09      	cmp	r3, #9
 80055b2:	d83c      	bhi.n	800562e <USBD_StdDevReq+0xba>
 80055b4:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <USBD_StdDevReq+0x48>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	08005611 	.word	0x08005611
 80055c0:	08005625 	.word	0x08005625
 80055c4:	0800562f 	.word	0x0800562f
 80055c8:	0800561b 	.word	0x0800561b
 80055cc:	0800562f 	.word	0x0800562f
 80055d0:	080055ef 	.word	0x080055ef
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	0800562f 	.word	0x0800562f
 80055dc:	08005607 	.word	0x08005607
 80055e0:	080055f9 	.word	0x080055f9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f9ce 	bl	8005988 <USBD_GetDescriptor>
      break;
 80055ec:	e024      	b.n	8005638 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fb33 	bl	8005c5c <USBD_SetAddress>
      break;
 80055f6:	e01f      	b.n	8005638 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80055f8:	6839      	ldr	r1, [r7, #0]
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fb70 	bl	8005ce0 <USBD_SetConfig>
 8005600:	4603      	mov	r3, r0
 8005602:	73fb      	strb	r3, [r7, #15]
      break;
 8005604:	e018      	b.n	8005638 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fc0d 	bl	8005e28 <USBD_GetConfig>
      break;
 800560e:	e013      	b.n	8005638 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fc3c 	bl	8005e90 <USBD_GetStatus>
      break;
 8005618:	e00e      	b.n	8005638 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fc6a 	bl	8005ef6 <USBD_SetFeature>
      break;
 8005622:	e009      	b.n	8005638 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fc79 	bl	8005f1e <USBD_ClrFeature>
      break;
 800562c:	e004      	b.n	8005638 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fccf 	bl	8005fd4 <USBD_CtlError>
      break;
 8005636:	bf00      	nop
    }
    break;
 8005638:	e004      	b.n	8005644 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fcc9 	bl	8005fd4 <USBD_CtlError>
    break;
 8005642:	bf00      	nop
  }

  return ret;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop

08005650 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005666:	2b20      	cmp	r3, #32
 8005668:	d003      	beq.n	8005672 <USBD_StdItfReq+0x22>
 800566a:	2b40      	cmp	r3, #64	; 0x40
 800566c:	d001      	beq.n	8005672 <USBD_StdItfReq+0x22>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d12a      	bne.n	80056c8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005678:	3b01      	subs	r3, #1
 800567a:	2b02      	cmp	r3, #2
 800567c:	d81d      	bhi.n	80056ba <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	889b      	ldrh	r3, [r3, #4]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d813      	bhi.n	80056b0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
 8005696:	4603      	mov	r3, r0
 8005698:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	88db      	ldrh	r3, [r3, #6]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d110      	bne.n	80056c4 <USBD_StdItfReq+0x74>
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10d      	bne.n	80056c4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fd5e 	bl	800616a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80056ae:	e009      	b.n	80056c4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fc8e 	bl	8005fd4 <USBD_CtlError>
      break;
 80056b8:	e004      	b.n	80056c4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fc89 	bl	8005fd4 <USBD_CtlError>
      break;
 80056c2:	e000      	b.n	80056c6 <USBD_StdItfReq+0x76>
      break;
 80056c4:	bf00      	nop
    }
    break;
 80056c6:	e004      	b.n	80056d2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fc82 	bl	8005fd4 <USBD_CtlError>
    break;
 80056d0:	bf00      	nop
  }

  return ret;
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	889b      	ldrh	r3, [r3, #4]
 80056ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d004      	beq.n	8005706 <USBD_StdEPReq+0x2a>
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d002      	beq.n	8005706 <USBD_StdEPReq+0x2a>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <USBD_StdEPReq+0x3e>
 8005704:	e135      	b.n	8005972 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	6839      	ldr	r1, [r7, #0]
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	4798      	blx	r3
 8005714:	4603      	mov	r3, r0
 8005716:	73fb      	strb	r3, [r7, #15]
    break;
 8005718:	e130      	b.n	800597c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d03e      	beq.n	80057a0 <USBD_StdEPReq+0xc4>
 8005722:	2b03      	cmp	r3, #3
 8005724:	d002      	beq.n	800572c <USBD_StdEPReq+0x50>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d077      	beq.n	800581a <USBD_StdEPReq+0x13e>
 800572a:	e11c      	b.n	8005966 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005732:	2b02      	cmp	r3, #2
 8005734:	d002      	beq.n	800573c <USBD_StdEPReq+0x60>
 8005736:	2b03      	cmp	r3, #3
 8005738:	d015      	beq.n	8005766 <USBD_StdEPReq+0x8a>
 800573a:	e02b      	b.n	8005794 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800573c:	7bbb      	ldrb	r3, [r7, #14]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00c      	beq.n	800575c <USBD_StdEPReq+0x80>
 8005742:	7bbb      	ldrb	r3, [r7, #14]
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	d009      	beq.n	800575c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005748:	7bbb      	ldrb	r3, [r7, #14]
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f001 f953 	bl	80069f8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005752:	2180      	movs	r1, #128	; 0x80
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 f94f 	bl	80069f8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800575a:	e020      	b.n	800579e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fc38 	bl	8005fd4 <USBD_CtlError>
        break;
 8005764:	e01b      	b.n	800579e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	885b      	ldrh	r3, [r3, #2]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10e      	bne.n	800578c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800576e:	7bbb      	ldrb	r3, [r7, #14]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <USBD_StdEPReq+0xb0>
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d008      	beq.n	800578c <USBD_StdEPReq+0xb0>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	88db      	ldrh	r3, [r3, #6]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005782:	7bbb      	ldrb	r3, [r7, #14]
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 f936 	bl	80069f8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fcec 	bl	800616a <USBD_CtlSendStatus>

        break;
 8005792:	e004      	b.n	800579e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fc1c 	bl	8005fd4 <USBD_CtlError>
        break;
 800579c:	bf00      	nop
      }
      break;
 800579e:	e0e7      	b.n	8005970 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d002      	beq.n	80057b0 <USBD_StdEPReq+0xd4>
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d015      	beq.n	80057da <USBD_StdEPReq+0xfe>
 80057ae:	e02d      	b.n	800580c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057b0:	7bbb      	ldrb	r3, [r7, #14]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00c      	beq.n	80057d0 <USBD_StdEPReq+0xf4>
 80057b6:	7bbb      	ldrb	r3, [r7, #14]
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d009      	beq.n	80057d0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 f919 	bl	80069f8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 f915 	bl	80069f8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80057ce:	e023      	b.n	8005818 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fbfe 	bl	8005fd4 <USBD_CtlError>
        break;
 80057d8:	e01e      	b.n	8005818 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	885b      	ldrh	r3, [r3, #2]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d119      	bne.n	8005816 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80057e2:	7bbb      	ldrb	r3, [r7, #14]
 80057e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d004      	beq.n	80057f6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 f920 	bl	8006a36 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fcb7 	bl	800616a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
        }
        break;
 800580a:	e004      	b.n	8005816 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fbe0 	bl	8005fd4 <USBD_CtlError>
        break;
 8005814:	e000      	b.n	8005818 <USBD_StdEPReq+0x13c>
        break;
 8005816:	bf00      	nop
      }
      break;
 8005818:	e0aa      	b.n	8005970 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005820:	2b02      	cmp	r3, #2
 8005822:	d002      	beq.n	800582a <USBD_StdEPReq+0x14e>
 8005824:	2b03      	cmp	r3, #3
 8005826:	d032      	beq.n	800588e <USBD_StdEPReq+0x1b2>
 8005828:	e097      	b.n	800595a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800582a:	7bbb      	ldrb	r3, [r7, #14]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <USBD_StdEPReq+0x164>
 8005830:	7bbb      	ldrb	r3, [r7, #14]
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d004      	beq.n	8005840 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fbcb 	bl	8005fd4 <USBD_CtlError>
          break;
 800583e:	e091      	b.n	8005964 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005844:	2b00      	cmp	r3, #0
 8005846:	da0b      	bge.n	8005860 <USBD_StdEPReq+0x184>
 8005848:	7bbb      	ldrb	r3, [r7, #14]
 800584a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	3310      	adds	r3, #16
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4413      	add	r3, r2
 800585c:	3304      	adds	r3, #4
 800585e:	e00b      	b.n	8005878 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005860:	7bbb      	ldrb	r3, [r7, #14]
 8005862:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4413      	add	r3, r2
 8005876:	3304      	adds	r3, #4
 8005878:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2202      	movs	r2, #2
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fc15 	bl	80060b6 <USBD_CtlSendData>
        break;
 800588c:	e06a      	b.n	8005964 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800588e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005892:	2b00      	cmp	r3, #0
 8005894:	da11      	bge.n	80058ba <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005896:	7bbb      	ldrb	r3, [r7, #14]
 8005898:	f003 020f 	and.w	r2, r3, #15
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	3324      	adds	r3, #36	; 0x24
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d117      	bne.n	80058e0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80058b0:	6839      	ldr	r1, [r7, #0]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fb8e 	bl	8005fd4 <USBD_CtlError>
            break;
 80058b8:	e054      	b.n	8005964 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80058ba:	7bbb      	ldrb	r3, [r7, #14]
 80058bc:	f003 020f 	and.w	r2, r3, #15
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fb7b 	bl	8005fd4 <USBD_CtlError>
            break;
 80058de:	e041      	b.n	8005964 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	da0b      	bge.n	8005900 <USBD_StdEPReq+0x224>
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	3310      	adds	r3, #16
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	4413      	add	r3, r2
 80058fc:	3304      	adds	r3, #4
 80058fe:	e00b      	b.n	8005918 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4413      	add	r3, r2
 8005916:	3304      	adds	r3, #4
 8005918:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800591a:	7bbb      	ldrb	r3, [r7, #14]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <USBD_StdEPReq+0x24a>
 8005920:	7bbb      	ldrb	r3, [r7, #14]
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d103      	bne.n	800592e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e00e      	b.n	800594c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 f89e 	bl	8006a74 <USBD_LL_IsStallEP>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	e002      	b.n	800594c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2202      	movs	r2, #2
 8005950:	4619      	mov	r1, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fbaf 	bl	80060b6 <USBD_CtlSendData>
          break;
 8005958:	e004      	b.n	8005964 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800595a:	6839      	ldr	r1, [r7, #0]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fb39 	bl	8005fd4 <USBD_CtlError>
        break;
 8005962:	bf00      	nop
      }
      break;
 8005964:	e004      	b.n	8005970 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fb33 	bl	8005fd4 <USBD_CtlError>
      break;
 800596e:	bf00      	nop
    }
    break;
 8005970:	e004      	b.n	800597c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fb2d 	bl	8005fd4 <USBD_CtlError>
    break;
 800597a:	bf00      	nop
  }

  return ret;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	885b      	ldrh	r3, [r3, #2]
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	2b06      	cmp	r3, #6
 80059aa:	f200 8128 	bhi.w	8005bfe <USBD_GetDescriptor+0x276>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <USBD_GetDescriptor+0x2c>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059d1 	.word	0x080059d1
 80059b8:	080059e9 	.word	0x080059e9
 80059bc:	08005a29 	.word	0x08005a29
 80059c0:	08005bff 	.word	0x08005bff
 80059c4:	08005bff 	.word	0x08005bff
 80059c8:	08005b9f 	.word	0x08005b9f
 80059cc:	08005bcb 	.word	0x08005bcb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	7c12      	ldrb	r2, [r2, #16]
 80059dc:	f107 0108 	add.w	r1, r7, #8
 80059e0:	4610      	mov	r0, r2
 80059e2:	4798      	blx	r3
 80059e4:	60f8      	str	r0, [r7, #12]
    break;
 80059e6:	e112      	b.n	8005c0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	7c1b      	ldrb	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10d      	bne.n	8005a0c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	f107 0208 	add.w	r2, r7, #8
 80059fc:	4610      	mov	r0, r2
 80059fe:	4798      	blx	r3
 8005a00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	2202      	movs	r2, #2
 8005a08:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005a0a:	e100      	b.n	8005c0e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	f107 0208 	add.w	r2, r7, #8
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4798      	blx	r3
 8005a1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	2202      	movs	r2, #2
 8005a24:	701a      	strb	r2, [r3, #0]
    break;
 8005a26:	e0f2      	b.n	8005c0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	885b      	ldrh	r3, [r3, #2]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	f200 80ac 	bhi.w	8005b8c <USBD_GetDescriptor+0x204>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <USBD_GetDescriptor+0xb4>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a55 	.word	0x08005a55
 8005a40:	08005a89 	.word	0x08005a89
 8005a44:	08005abd 	.word	0x08005abd
 8005a48:	08005af1 	.word	0x08005af1
 8005a4c:	08005b25 	.word	0x08005b25
 8005a50:	08005b59 	.word	0x08005b59
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	7c12      	ldrb	r2, [r2, #16]
 8005a6c:	f107 0108 	add.w	r1, r7, #8
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
 8005a74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a76:	e091      	b.n	8005b9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 faaa 	bl	8005fd4 <USBD_CtlError>
        err++;
 8005a80:	7afb      	ldrb	r3, [r7, #11]
 8005a82:	3301      	adds	r3, #1
 8005a84:	72fb      	strb	r3, [r7, #11]
      break;
 8005a86:	e089      	b.n	8005b9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00b      	beq.n	8005aac <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	7c12      	ldrb	r2, [r2, #16]
 8005aa0:	f107 0108 	add.w	r1, r7, #8
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
 8005aa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005aaa:	e077      	b.n	8005b9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa90 	bl	8005fd4 <USBD_CtlError>
        err++;
 8005ab4:	7afb      	ldrb	r3, [r7, #11]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	72fb      	strb	r3, [r7, #11]
      break;
 8005aba:	e06f      	b.n	8005b9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00b      	beq.n	8005ae0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	7c12      	ldrb	r2, [r2, #16]
 8005ad4:	f107 0108 	add.w	r1, r7, #8
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
 8005adc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ade:	e05d      	b.n	8005b9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005ae0:	6839      	ldr	r1, [r7, #0]
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fa76 	bl	8005fd4 <USBD_CtlError>
        err++;
 8005ae8:	7afb      	ldrb	r3, [r7, #11]
 8005aea:	3301      	adds	r3, #1
 8005aec:	72fb      	strb	r3, [r7, #11]
      break;
 8005aee:	e055      	b.n	8005b9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	7c12      	ldrb	r2, [r2, #16]
 8005b08:	f107 0108 	add.w	r1, r7, #8
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
 8005b10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b12:	e043      	b.n	8005b9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa5c 	bl	8005fd4 <USBD_CtlError>
        err++;
 8005b1c:	7afb      	ldrb	r3, [r7, #11]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	72fb      	strb	r3, [r7, #11]
      break;
 8005b22:	e03b      	b.n	8005b9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00b      	beq.n	8005b48 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	7c12      	ldrb	r2, [r2, #16]
 8005b3c:	f107 0108 	add.w	r1, r7, #8
 8005b40:	4610      	mov	r0, r2
 8005b42:	4798      	blx	r3
 8005b44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b46:	e029      	b.n	8005b9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa42 	bl	8005fd4 <USBD_CtlError>
        err++;
 8005b50:	7afb      	ldrb	r3, [r7, #11]
 8005b52:	3301      	adds	r3, #1
 8005b54:	72fb      	strb	r3, [r7, #11]
      break;
 8005b56:	e021      	b.n	8005b9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	7c12      	ldrb	r2, [r2, #16]
 8005b70:	f107 0108 	add.w	r1, r7, #8
 8005b74:	4610      	mov	r0, r2
 8005b76:	4798      	blx	r3
 8005b78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b7a:	e00f      	b.n	8005b9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa28 	bl	8005fd4 <USBD_CtlError>
        err++;
 8005b84:	7afb      	ldrb	r3, [r7, #11]
 8005b86:	3301      	adds	r3, #1
 8005b88:	72fb      	strb	r3, [r7, #11]
      break;
 8005b8a:	e007      	b.n	8005b9c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fa20 	bl	8005fd4 <USBD_CtlError>
      err++;
 8005b94:	7afb      	ldrb	r3, [r7, #11]
 8005b96:	3301      	adds	r3, #1
 8005b98:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005b9a:	bf00      	nop
    }
    break;
 8005b9c:	e037      	b.n	8005c0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	7c1b      	ldrb	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	f107 0208 	add.w	r2, r7, #8
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	4798      	blx	r3
 8005bb6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005bb8:	e029      	b.n	8005c0e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fa09 	bl	8005fd4 <USBD_CtlError>
      err++;
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	72fb      	strb	r3, [r7, #11]
    break;
 8005bc8:	e021      	b.n	8005c0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	7c1b      	ldrb	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10d      	bne.n	8005bee <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	f107 0208 	add.w	r2, r7, #8
 8005bde:	4610      	mov	r0, r2
 8005be0:	4798      	blx	r3
 8005be2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	2207      	movs	r2, #7
 8005bea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005bec:	e00f      	b.n	8005c0e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f9ef 	bl	8005fd4 <USBD_CtlError>
      err++;
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	72fb      	strb	r3, [r7, #11]
    break;
 8005bfc:	e007      	b.n	8005c0e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f9e7 	bl	8005fd4 <USBD_CtlError>
    err++;
 8005c06:	7afb      	ldrb	r3, [r7, #11]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	72fb      	strb	r3, [r7, #11]
    break;
 8005c0c:	bf00      	nop
  }

  if (err != 0U)
 8005c0e:	7afb      	ldrb	r3, [r7, #11]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11e      	bne.n	8005c52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	88db      	ldrh	r3, [r3, #6]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d016      	beq.n	8005c4a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005c1c:	893b      	ldrh	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00e      	beq.n	8005c40 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	88da      	ldrh	r2, [r3, #6]
 8005c26:	893b      	ldrh	r3, [r7, #8]
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	bf28      	it	cs
 8005c2c:	4613      	movcs	r3, r2
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c32:	893b      	ldrh	r3, [r7, #8]
 8005c34:	461a      	mov	r2, r3
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fa3c 	bl	80060b6 <USBD_CtlSendData>
 8005c3e:	e009      	b.n	8005c54 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f9c6 	bl	8005fd4 <USBD_CtlError>
 8005c48:	e004      	b.n	8005c54 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fa8d 	bl	800616a <USBD_CtlSendStatus>
 8005c50:	e000      	b.n	8005c54 <USBD_GetDescriptor+0x2cc>
    return;
 8005c52:	bf00      	nop
    }
  }
}
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop

08005c5c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	889b      	ldrh	r3, [r3, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d130      	bne.n	8005cd0 <USBD_SetAddress+0x74>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	88db      	ldrh	r3, [r3, #6]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d12c      	bne.n	8005cd0 <USBD_SetAddress+0x74>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	885b      	ldrh	r3, [r3, #2]
 8005c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c7c:	d828      	bhi.n	8005cd0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	885b      	ldrh	r3, [r3, #2]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d104      	bne.n	8005c9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f99c 	bl	8005fd4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c9c:	e01c      	b.n	8005cd8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	7bfa      	ldrb	r2, [r7, #15]
 8005ca2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 ff0e 	bl	8006acc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fa5a 	bl	800616a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc4:	e008      	b.n	8005cd8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cce:	e003      	b.n	8005cd8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f97e 	bl	8005fd4 <USBD_CtlError>
  }
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	885b      	ldrh	r3, [r3, #2]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	4b4b      	ldr	r3, [pc, #300]	; (8005e24 <USBD_SetConfig+0x144>)
 8005cf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005cf8:	4b4a      	ldr	r3, [pc, #296]	; (8005e24 <USBD_SetConfig+0x144>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d905      	bls.n	8005d0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f966 	bl	8005fd4 <USBD_CtlError>
    return USBD_FAIL;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e087      	b.n	8005e1c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d002      	beq.n	8005d1c <USBD_SetConfig+0x3c>
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d025      	beq.n	8005d66 <USBD_SetConfig+0x86>
 8005d1a:	e071      	b.n	8005e00 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005d1c:	4b41      	ldr	r3, [pc, #260]	; (8005e24 <USBD_SetConfig+0x144>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01c      	beq.n	8005d5e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005d24:	4b3f      	ldr	r3, [pc, #252]	; (8005e24 <USBD_SetConfig+0x144>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d2e:	4b3d      	ldr	r3, [pc, #244]	; (8005e24 <USBD_SetConfig+0x144>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	4619      	mov	r1, r3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff f9a7 	bl	8005088 <USBD_SetClassConfig>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f944 	bl	8005fd4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005d4c:	e065      	b.n	8005e1a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa0b 	bl	800616a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2203      	movs	r2, #3
 8005d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005d5c:	e05d      	b.n	8005e1a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa03 	bl	800616a <USBD_CtlSendStatus>
    break;
 8005d64:	e059      	b.n	8005e1a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <USBD_SetConfig+0x144>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d112      	bne.n	8005d94 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005d76:	4b2b      	ldr	r3, [pc, #172]	; (8005e24 <USBD_SetConfig+0x144>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d80:	4b28      	ldr	r3, [pc, #160]	; (8005e24 <USBD_SetConfig+0x144>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	4619      	mov	r1, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff f99a 	bl	80050c0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f9ec 	bl	800616a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005d92:	e042      	b.n	8005e1a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005d94:	4b23      	ldr	r3, [pc, #140]	; (8005e24 <USBD_SetConfig+0x144>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d02a      	beq.n	8005df8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff f988 	bl	80050c0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005db0:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <USBD_SetConfig+0x144>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005dba:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <USBD_SetConfig+0x144>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff f961 	bl	8005088 <USBD_SetClassConfig>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00f      	beq.n	8005df0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f8fe 	bl	8005fd4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff f96d 	bl	80050c0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005dee:	e014      	b.n	8005e1a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f9ba 	bl	800616a <USBD_CtlSendStatus>
    break;
 8005df6:	e010      	b.n	8005e1a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f9b6 	bl	800616a <USBD_CtlSendStatus>
    break;
 8005dfe:	e00c      	b.n	8005e1a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f8e6 	bl	8005fd4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e08:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <USBD_SetConfig+0x144>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff f956 	bl	80050c0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005e14:	2303      	movs	r3, #3
 8005e16:	73fb      	strb	r3, [r7, #15]
    break;
 8005e18:	bf00      	nop
  }

  return ret;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000208 	.word	0x20000208

08005e28 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	88db      	ldrh	r3, [r3, #6]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d004      	beq.n	8005e44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f8c9 	bl	8005fd4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005e42:	e021      	b.n	8005e88 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	db17      	blt.n	8005e7e <USBD_GetConfig+0x56>
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	dd02      	ble.n	8005e58 <USBD_GetConfig+0x30>
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d00b      	beq.n	8005e6e <USBD_GetConfig+0x46>
 8005e56:	e012      	b.n	8005e7e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3308      	adds	r3, #8
 8005e62:	2201      	movs	r2, #1
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f925 	bl	80060b6 <USBD_CtlSendData>
      break;
 8005e6c:	e00c      	b.n	8005e88 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	2201      	movs	r2, #1
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f91d 	bl	80060b6 <USBD_CtlSendData>
      break;
 8005e7c:	e004      	b.n	8005e88 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f8a7 	bl	8005fd4 <USBD_CtlError>
      break;
 8005e86:	bf00      	nop
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d81e      	bhi.n	8005ee4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	88db      	ldrh	r3, [r3, #6]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d004      	beq.n	8005eb8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f88f 	bl	8005fd4 <USBD_CtlError>
      break;
 8005eb6:	e01a      	b.n	8005eee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f043 0202 	orr.w	r2, r3, #2
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	2202      	movs	r2, #2
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f8ea 	bl	80060b6 <USBD_CtlSendData>
    break;
 8005ee2:	e004      	b.n	8005eee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f874 	bl	8005fd4 <USBD_CtlError>
    break;
 8005eec:	bf00      	nop
  }
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	885b      	ldrh	r3, [r3, #2]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d106      	bne.n	8005f16 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f92a 	bl	800616a <USBD_CtlSendStatus>
  }
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d80b      	bhi.n	8005f4c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	885b      	ldrh	r3, [r3, #2]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10c      	bne.n	8005f56 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f910 	bl	800616a <USBD_CtlSendStatus>
      }
      break;
 8005f4a:	e004      	b.n	8005f56 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f840 	bl	8005fd4 <USBD_CtlError>
      break;
 8005f54:	e000      	b.n	8005f58 <USBD_ClrFeature+0x3a>
      break;
 8005f56:	bf00      	nop
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3301      	adds	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff fad3 	bl	8005536 <SWAPBYTE>
 8005f90:	4603      	mov	r3, r0
 8005f92:	461a      	mov	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff fac6 	bl	8005536 <SWAPBYTE>
 8005faa:	4603      	mov	r3, r0
 8005fac:	461a      	mov	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff fab9 	bl	8005536 <SWAPBYTE>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	80da      	strh	r2, [r3, #6]
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fde:	2180      	movs	r1, #128	; 0x80
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fd09 	bl	80069f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fd05 	bl	80069f8 <USBD_LL_StallEP>
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d036      	beq.n	800607a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006010:	6938      	ldr	r0, [r7, #16]
 8006012:	f000 f836 	bl	8006082 <USBD_GetLen>
 8006016:	4603      	mov	r3, r0
 8006018:	3301      	adds	r3, #1
 800601a:	b29b      	uxth	r3, r3
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006024:	7dfb      	ldrb	r3, [r7, #23]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	4413      	add	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	3301      	adds	r3, #1
 8006034:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	4413      	add	r3, r2
 800603c:	2203      	movs	r2, #3
 800603e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006040:	7dfb      	ldrb	r3, [r7, #23]
 8006042:	3301      	adds	r3, #1
 8006044:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006046:	e013      	b.n	8006070 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	4413      	add	r3, r2
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	3301      	adds	r3, #1
 8006058:	613b      	str	r3, [r7, #16]
    idx++;
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	3301      	adds	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	4413      	add	r3, r2
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
    idx++;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	3301      	adds	r3, #1
 800606e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e7      	bne.n	8006048 <USBD_GetString+0x52>
 8006078:	e000      	b.n	800607c <USBD_GetString+0x86>
    return;
 800607a:	bf00      	nop
  }
}
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006092:	e005      	b.n	80060a0 <USBD_GetLen+0x1e>
  {
    len++;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	3301      	adds	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	3301      	adds	r3, #1
 800609e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1f5      	bne.n	8006094 <USBD_GetLen+0x12>
  }

  return len;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2202      	movs	r2, #2
 80060c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	2100      	movs	r1, #0
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fd14 	bl	8006b0a <USBD_LL_Transmit>

  return USBD_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	2100      	movs	r1, #0
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fd03 	bl	8006b0a <USBD_LL_Transmit>

  return USBD_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2203      	movs	r2, #3
 800611e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	2100      	movs	r1, #0
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fd07 	bl	8006b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	2100      	movs	r1, #0
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fcf6 	bl	8006b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2204      	movs	r2, #4
 8006176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800617a:	2300      	movs	r3, #0
 800617c:	2200      	movs	r2, #0
 800617e:	2100      	movs	r1, #0
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fcc2 	bl	8006b0a <USBD_LL_Transmit>

  return USBD_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2205      	movs	r2, #5
 800619c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061a0:	2300      	movs	r3, #0
 80061a2:	2200      	movs	r2, #0
 80061a4:	2100      	movs	r1, #0
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fcd0 	bl	8006b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061bc:	2200      	movs	r2, #0
 80061be:	4912      	ldr	r1, [pc, #72]	; (8006208 <MX_USB_DEVICE_Init+0x50>)
 80061c0:	4812      	ldr	r0, [pc, #72]	; (800620c <MX_USB_DEVICE_Init+0x54>)
 80061c2:	f7fe fef3 	bl	8004fac <USBD_Init>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061cc:	f7fa fc0c 	bl	80009e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80061d0:	490f      	ldr	r1, [pc, #60]	; (8006210 <MX_USB_DEVICE_Init+0x58>)
 80061d2:	480e      	ldr	r0, [pc, #56]	; (800620c <MX_USB_DEVICE_Init+0x54>)
 80061d4:	f7fe ff20 	bl	8005018 <USBD_RegisterClass>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061de:	f7fa fc03 	bl	80009e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80061e2:	490c      	ldr	r1, [pc, #48]	; (8006214 <MX_USB_DEVICE_Init+0x5c>)
 80061e4:	4809      	ldr	r0, [pc, #36]	; (800620c <MX_USB_DEVICE_Init+0x54>)
 80061e6:	f7fe fe45 	bl	8004e74 <USBD_CDC_RegisterInterface>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80061f0:	f7fa fbfa 	bl	80009e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061f4:	4805      	ldr	r0, [pc, #20]	; (800620c <MX_USB_DEVICE_Init+0x54>)
 80061f6:	f7fe ff30 	bl	800505a <USBD_Start>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006200:	f7fa fbf2 	bl	80009e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006204:	bf00      	nop
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000130 	.word	0x20000130
 800620c:	200002a8 	.word	0x200002a8
 8006210:	20000018 	.word	0x20000018
 8006214:	2000011c 	.word	0x2000011c

08006218 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800621c:	2200      	movs	r2, #0
 800621e:	4905      	ldr	r1, [pc, #20]	; (8006234 <CDC_Init_FS+0x1c>)
 8006220:	4805      	ldr	r0, [pc, #20]	; (8006238 <CDC_Init_FS+0x20>)
 8006222:	f7fe fe3c 	bl	8004e9e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006226:	4905      	ldr	r1, [pc, #20]	; (800623c <CDC_Init_FS+0x24>)
 8006228:	4803      	ldr	r0, [pc, #12]	; (8006238 <CDC_Init_FS+0x20>)
 800622a:	f7fe fe51 	bl	8004ed0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800622e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006230:	4618      	mov	r0, r3
 8006232:	bd80      	pop	{r7, pc}
 8006234:	200005a0 	.word	0x200005a0
 8006238:	200002a8 	.word	0x200002a8
 800623c:	20000578 	.word	0x20000578

08006240 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006244:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	6039      	str	r1, [r7, #0]
 800625a:	71fb      	strb	r3, [r7, #7]
 800625c:	4613      	mov	r3, r2
 800625e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	2b23      	cmp	r3, #35	; 0x23
 8006264:	d84a      	bhi.n	80062fc <CDC_Control_FS+0xac>
 8006266:	a201      	add	r2, pc, #4	; (adr r2, 800626c <CDC_Control_FS+0x1c>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	080062fd 	.word	0x080062fd
 8006270:	080062fd 	.word	0x080062fd
 8006274:	080062fd 	.word	0x080062fd
 8006278:	080062fd 	.word	0x080062fd
 800627c:	080062fd 	.word	0x080062fd
 8006280:	080062fd 	.word	0x080062fd
 8006284:	080062fd 	.word	0x080062fd
 8006288:	080062fd 	.word	0x080062fd
 800628c:	080062fd 	.word	0x080062fd
 8006290:	080062fd 	.word	0x080062fd
 8006294:	080062fd 	.word	0x080062fd
 8006298:	080062fd 	.word	0x080062fd
 800629c:	080062fd 	.word	0x080062fd
 80062a0:	080062fd 	.word	0x080062fd
 80062a4:	080062fd 	.word	0x080062fd
 80062a8:	080062fd 	.word	0x080062fd
 80062ac:	080062fd 	.word	0x080062fd
 80062b0:	080062fd 	.word	0x080062fd
 80062b4:	080062fd 	.word	0x080062fd
 80062b8:	080062fd 	.word	0x080062fd
 80062bc:	080062fd 	.word	0x080062fd
 80062c0:	080062fd 	.word	0x080062fd
 80062c4:	080062fd 	.word	0x080062fd
 80062c8:	080062fd 	.word	0x080062fd
 80062cc:	080062fd 	.word	0x080062fd
 80062d0:	080062fd 	.word	0x080062fd
 80062d4:	080062fd 	.word	0x080062fd
 80062d8:	080062fd 	.word	0x080062fd
 80062dc:	080062fd 	.word	0x080062fd
 80062e0:	080062fd 	.word	0x080062fd
 80062e4:	080062fd 	.word	0x080062fd
 80062e8:	080062fd 	.word	0x080062fd
 80062ec:	080062fd 	.word	0x080062fd
 80062f0:	080062fd 	.word	0x080062fd
 80062f4:	080062fd 	.word	0x080062fd
 80062f8:	080062fd 	.word	0x080062fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80062fc:	bf00      	nop
  }

  return (USBD_OK);
 80062fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	4811      	ldr	r0, [pc, #68]	; (8006360 <CDC_Receive_FS+0x54>)
 800631a:	f7fe fdd9 	bl	8004ed0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800631e:	4810      	ldr	r0, [pc, #64]	; (8006360 <CDC_Receive_FS+0x54>)
 8006320:	f7fe fe1a 	bl	8004f58 <USBD_CDC_ReceivePacket>
    extern uint8_t ReceivedData[40]; // Tablica przechowujaca odebrane dane
    extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

    // Wyczyszczenie tablicy odebranych danych
    uint8_t iter;
    for(iter = 0; iter<40; ++iter){
 8006324:	2300      	movs	r3, #0
 8006326:	73fb      	strb	r3, [r7, #15]
 8006328:	e006      	b.n	8006338 <CDC_Receive_FS+0x2c>
  	  ReceivedData[iter] = 0;
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	4a0d      	ldr	r2, [pc, #52]	; (8006364 <CDC_Receive_FS+0x58>)
 800632e:	2100      	movs	r1, #0
 8006330:	54d1      	strb	r1, [r2, r3]
    for(iter = 0; iter<40; ++iter){
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	3301      	adds	r3, #1
 8006336:	73fb      	strb	r3, [r7, #15]
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b27      	cmp	r3, #39	; 0x27
 800633c:	d9f5      	bls.n	800632a <CDC_Receive_FS+0x1e>
    }

    strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3301      	adds	r3, #1
 8006344:	461a      	mov	r2, r3
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4806      	ldr	r0, [pc, #24]	; (8006364 <CDC_Receive_FS+0x58>)
 800634a:	f000 fd79 	bl	8006e40 <strlcpy>
    ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <CDC_Receive_FS+0x5c>)
 8006350:	2201      	movs	r2, #1
 8006352:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8006354:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	200002a8 	.word	0x200002a8
 8006364:	2000023c 	.word	0x2000023c
 8006368:	20000202 	.word	0x20000202

0800636c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800637c:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <CDC_Transmit_FS+0x48>)
 800637e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006382:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800638e:	2301      	movs	r3, #1
 8006390:	e00b      	b.n	80063aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006392:	887b      	ldrh	r3, [r7, #2]
 8006394:	461a      	mov	r2, r3
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4806      	ldr	r0, [pc, #24]	; (80063b4 <CDC_Transmit_FS+0x48>)
 800639a:	f7fe fd80 	bl	8004e9e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800639e:	4805      	ldr	r0, [pc, #20]	; (80063b4 <CDC_Transmit_FS+0x48>)
 80063a0:	f7fe fdaa 	bl	8004ef8 <USBD_CDC_TransmitPacket>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200002a8 	.word	0x200002a8

080063b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80063ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
	...

080063dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	6039      	str	r1, [r7, #0]
 80063e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2212      	movs	r2, #18
 80063ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80063ee:	4b03      	ldr	r3, [pc, #12]	; (80063fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	2000014c 	.word	0x2000014c

08006400 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	6039      	str	r1, [r7, #0]
 800640a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2204      	movs	r2, #4
 8006410:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006412:	4b03      	ldr	r3, [pc, #12]	; (8006420 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	20000160 	.word	0x20000160

08006424 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	6039      	str	r1, [r7, #0]
 800642e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d105      	bne.n	8006442 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	4907      	ldr	r1, [pc, #28]	; (8006458 <USBD_FS_ProductStrDescriptor+0x34>)
 800643a:	4808      	ldr	r0, [pc, #32]	; (800645c <USBD_FS_ProductStrDescriptor+0x38>)
 800643c:	f7ff fddb 	bl	8005ff6 <USBD_GetString>
 8006440:	e004      	b.n	800644c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	4904      	ldr	r1, [pc, #16]	; (8006458 <USBD_FS_ProductStrDescriptor+0x34>)
 8006446:	4805      	ldr	r0, [pc, #20]	; (800645c <USBD_FS_ProductStrDescriptor+0x38>)
 8006448:	f7ff fdd5 	bl	8005ff6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800644c:	4b02      	ldr	r3, [pc, #8]	; (8006458 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	200005c8 	.word	0x200005c8
 800645c:	08007504 	.word	0x08007504

08006460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	4603      	mov	r3, r0
 8006468:	6039      	str	r1, [r7, #0]
 800646a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	4904      	ldr	r1, [pc, #16]	; (8006480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006470:	4804      	ldr	r0, [pc, #16]	; (8006484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006472:	f7ff fdc0 	bl	8005ff6 <USBD_GetString>
  return USBD_StrDesc;
 8006476:	4b02      	ldr	r3, [pc, #8]	; (8006480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	200005c8 	.word	0x200005c8
 8006484:	0800751c 	.word	0x0800751c

08006488 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	6039      	str	r1, [r7, #0]
 8006492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	221a      	movs	r2, #26
 8006498:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800649a:	f000 f843 	bl	8006524 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800649e:	4b02      	ldr	r3, [pc, #8]	; (80064a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000164 	.word	0x20000164

080064ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	6039      	str	r1, [r7, #0]
 80064b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	4907      	ldr	r1, [pc, #28]	; (80064e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80064c2:	4808      	ldr	r0, [pc, #32]	; (80064e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80064c4:	f7ff fd97 	bl	8005ff6 <USBD_GetString>
 80064c8:	e004      	b.n	80064d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	4904      	ldr	r1, [pc, #16]	; (80064e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80064ce:	4805      	ldr	r0, [pc, #20]	; (80064e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80064d0:	f7ff fd91 	bl	8005ff6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064d4:	4b02      	ldr	r3, [pc, #8]	; (80064e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	200005c8 	.word	0x200005c8
 80064e4:	08007530 	.word	0x08007530

080064e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	6039      	str	r1, [r7, #0]
 80064f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	4907      	ldr	r1, [pc, #28]	; (800651c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064fe:	4808      	ldr	r0, [pc, #32]	; (8006520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006500:	f7ff fd79 	bl	8005ff6 <USBD_GetString>
 8006504:	e004      	b.n	8006510 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	4904      	ldr	r1, [pc, #16]	; (800651c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800650a:	4805      	ldr	r0, [pc, #20]	; (8006520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800650c:	f7ff fd73 	bl	8005ff6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006510:	4b02      	ldr	r3, [pc, #8]	; (800651c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	200005c8 	.word	0x200005c8
 8006520:	0800753c 	.word	0x0800753c

08006524 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800652a:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <Get_SerialNum+0x44>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <Get_SerialNum+0x48>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006536:	4b0e      	ldr	r3, [pc, #56]	; (8006570 <Get_SerialNum+0x4c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4413      	add	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d009      	beq.n	800655e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800654a:	2208      	movs	r2, #8
 800654c:	4909      	ldr	r1, [pc, #36]	; (8006574 <Get_SerialNum+0x50>)
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f814 	bl	800657c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006554:	2204      	movs	r2, #4
 8006556:	4908      	ldr	r1, [pc, #32]	; (8006578 <Get_SerialNum+0x54>)
 8006558:	68b8      	ldr	r0, [r7, #8]
 800655a:	f000 f80f 	bl	800657c <IntToUnicode>
  }
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	1fff7a10 	.word	0x1fff7a10
 800656c:	1fff7a14 	.word	0x1fff7a14
 8006570:	1fff7a18 	.word	0x1fff7a18
 8006574:	20000166 	.word	0x20000166
 8006578:	20000176 	.word	0x20000176

0800657c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]
 8006592:	e027      	b.n	80065e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	0f1b      	lsrs	r3, r3, #28
 8006598:	2b09      	cmp	r3, #9
 800659a:	d80b      	bhi.n	80065b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	0f1b      	lsrs	r3, r3, #28
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	4619      	mov	r1, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	440b      	add	r3, r1
 80065ac:	3230      	adds	r2, #48	; 0x30
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	e00a      	b.n	80065ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	0f1b      	lsrs	r3, r3, #28
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	4619      	mov	r1, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	440b      	add	r3, r1
 80065c4:	3237      	adds	r2, #55	; 0x37
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	3301      	adds	r3, #1
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	4413      	add	r3, r2
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	3301      	adds	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
 80065e4:	7dfa      	ldrb	r2, [r7, #23]
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d3d3      	bcc.n	8006594 <IntToUnicode+0x18>
  }
}
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006600:	f107 0314 	add.w	r3, r7, #20
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	609a      	str	r2, [r3, #8]
 800660c:	60da      	str	r2, [r3, #12]
 800660e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006618:	d147      	bne.n	80066aa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800661a:	2300      	movs	r3, #0
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	4b25      	ldr	r3, [pc, #148]	; (80066b4 <HAL_PCD_MspInit+0xbc>)
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	4a24      	ldr	r2, [pc, #144]	; (80066b4 <HAL_PCD_MspInit+0xbc>)
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	6313      	str	r3, [r2, #48]	; 0x30
 800662a:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <HAL_PCD_MspInit+0xbc>)
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800663a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006644:	f107 0314 	add.w	r3, r7, #20
 8006648:	4619      	mov	r1, r3
 800664a:	481b      	ldr	r0, [pc, #108]	; (80066b8 <HAL_PCD_MspInit+0xc0>)
 800664c:	f7fa fc5c 	bl	8000f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006650:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006656:	2302      	movs	r3, #2
 8006658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665a:	2300      	movs	r3, #0
 800665c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800665e:	2300      	movs	r3, #0
 8006660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006662:	230a      	movs	r3, #10
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006666:	f107 0314 	add.w	r3, r7, #20
 800666a:	4619      	mov	r1, r3
 800666c:	4812      	ldr	r0, [pc, #72]	; (80066b8 <HAL_PCD_MspInit+0xc0>)
 800666e:	f7fa fc4b 	bl	8000f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006672:	4b10      	ldr	r3, [pc, #64]	; (80066b4 <HAL_PCD_MspInit+0xbc>)
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	4a0f      	ldr	r2, [pc, #60]	; (80066b4 <HAL_PCD_MspInit+0xbc>)
 8006678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667c:	6353      	str	r3, [r2, #52]	; 0x34
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <HAL_PCD_MspInit+0xbc>)
 8006684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006686:	4a0b      	ldr	r2, [pc, #44]	; (80066b4 <HAL_PCD_MspInit+0xbc>)
 8006688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800668c:	6453      	str	r3, [r2, #68]	; 0x44
 800668e:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <HAL_PCD_MspInit+0xbc>)
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800669a:	2200      	movs	r2, #0
 800669c:	2100      	movs	r1, #0
 800669e:	2043      	movs	r0, #67	; 0x43
 80066a0:	f7fa fc08 	bl	8000eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066a4:	2043      	movs	r0, #67	; 0x43
 80066a6:	f7fa fc21 	bl	8000eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066aa:	bf00      	nop
 80066ac:	3728      	adds	r7, #40	; 0x28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40023800 	.word	0x40023800
 80066b8:	40020000 	.word	0x40020000

080066bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f7fe fd0c 	bl	80050f0 <USBD_LL_SetupStage>
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80066f2:	78fa      	ldrb	r2, [r7, #3]
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	4619      	mov	r1, r3
 800670a:	f7fe fd44 	bl	8005196 <USBD_LL_DataOutStage>
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	3348      	adds	r3, #72	; 0x48
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	4619      	mov	r1, r3
 800673e:	f7fe fd8d 	bl	800525c <USBD_LL_DataInStage>
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe fe91 	bl	8005480 <USBD_LL_SOF>
}
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800676e:	2301      	movs	r3, #1
 8006770:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
 800677e:	e008      	b.n	8006792 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d102      	bne.n	800678e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
 800678c:	e001      	b.n	8006792 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800678e:	f7fa f92b 	bl	80009e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006798:	7bfa      	ldrb	r2, [r7, #15]
 800679a:	4611      	mov	r1, r2
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fe34 	bl	800540a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fded 	bl	8005388 <USBD_LL_Reset>
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fe2f 	bl	800542a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6812      	ldr	r2, [r2, #0]
 80067da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067de:	f043 0301 	orr.w	r3, r3, #1
 80067e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80067ec:	4b04      	ldr	r3, [pc, #16]	; (8006800 <HAL_PCD_SuspendCallback+0x48>)
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	4a03      	ldr	r2, [pc, #12]	; (8006800 <HAL_PCD_SuspendCallback+0x48>)
 80067f2:	f043 0306 	orr.w	r3, r3, #6
 80067f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	e000ed00 	.word	0xe000ed00

08006804 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fe1e 	bl	8005454 <USBD_LL_Resume>
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006832:	78fa      	ldrb	r2, [r7, #3]
 8006834:	4611      	mov	r1, r2
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fe49 	bl	80054ce <USBD_LL_IsoOUTIncomplete>
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006856:	78fa      	ldrb	r2, [r7, #3]
 8006858:	4611      	mov	r1, r2
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fe2a 	bl	80054b4 <USBD_LL_IsoINIncomplete>
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fe36 	bl	80054e8 <USBD_LL_DevConnected>
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fe33 	bl	80054fe <USBD_LL_DevDisconnected>
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d13c      	bne.n	800692a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80068b0:	4a20      	ldr	r2, [pc, #128]	; (8006934 <USBD_LL_Init+0x94>)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1e      	ldr	r2, [pc, #120]	; (8006934 <USBD_LL_Init+0x94>)
 80068bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80068c0:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <USBD_LL_Init+0x94>)
 80068c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80068c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80068c8:	4b1a      	ldr	r3, [pc, #104]	; (8006934 <USBD_LL_Init+0x94>)
 80068ca:	2204      	movs	r2, #4
 80068cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80068ce:	4b19      	ldr	r3, [pc, #100]	; (8006934 <USBD_LL_Init+0x94>)
 80068d0:	2202      	movs	r2, #2
 80068d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80068d4:	4b17      	ldr	r3, [pc, #92]	; (8006934 <USBD_LL_Init+0x94>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80068da:	4b16      	ldr	r3, [pc, #88]	; (8006934 <USBD_LL_Init+0x94>)
 80068dc:	2202      	movs	r2, #2
 80068de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80068e0:	4b14      	ldr	r3, [pc, #80]	; (8006934 <USBD_LL_Init+0x94>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <USBD_LL_Init+0x94>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80068ec:	4b11      	ldr	r3, [pc, #68]	; (8006934 <USBD_LL_Init+0x94>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80068f2:	4b10      	ldr	r3, [pc, #64]	; (8006934 <USBD_LL_Init+0x94>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80068f8:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <USBD_LL_Init+0x94>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80068fe:	480d      	ldr	r0, [pc, #52]	; (8006934 <USBD_LL_Init+0x94>)
 8006900:	f7fa fce6 	bl	80012d0 <HAL_PCD_Init>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800690a:	f7fa f86d 	bl	80009e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800690e:	2180      	movs	r1, #128	; 0x80
 8006910:	4808      	ldr	r0, [pc, #32]	; (8006934 <USBD_LL_Init+0x94>)
 8006912:	f7fb fe44 	bl	800259e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006916:	2240      	movs	r2, #64	; 0x40
 8006918:	2100      	movs	r1, #0
 800691a:	4806      	ldr	r0, [pc, #24]	; (8006934 <USBD_LL_Init+0x94>)
 800691c:	f7fb fdf8 	bl	8002510 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006920:	2280      	movs	r2, #128	; 0x80
 8006922:	2101      	movs	r1, #1
 8006924:	4803      	ldr	r0, [pc, #12]	; (8006934 <USBD_LL_Init+0x94>)
 8006926:	f7fb fdf3 	bl	8002510 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	200007c8 	.word	0x200007c8

08006938 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800694e:	4618      	mov	r0, r3
 8006950:	f7fa fddb 	bl	800150a <HAL_PCD_Start>
 8006954:	4603      	mov	r3, r0
 8006956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f92a 	bl	8006bb4 <USBD_Get_USB_Status>
 8006960:	4603      	mov	r3, r0
 8006962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006964:	7bbb      	ldrb	r3, [r7, #14]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	4608      	mov	r0, r1
 8006978:	4611      	mov	r1, r2
 800697a:	461a      	mov	r2, r3
 800697c:	4603      	mov	r3, r0
 800697e:	70fb      	strb	r3, [r7, #3]
 8006980:	460b      	mov	r3, r1
 8006982:	70bb      	strb	r3, [r7, #2]
 8006984:	4613      	mov	r3, r2
 8006986:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006996:	78bb      	ldrb	r3, [r7, #2]
 8006998:	883a      	ldrh	r2, [r7, #0]
 800699a:	78f9      	ldrb	r1, [r7, #3]
 800699c:	f7fb f9bf 	bl	8001d1e <HAL_PCD_EP_Open>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 f904 	bl	8006bb4 <USBD_Get_USB_Status>
 80069ac:	4603      	mov	r3, r0
 80069ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	460b      	mov	r3, r1
 80069c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069d4:	78fa      	ldrb	r2, [r7, #3]
 80069d6:	4611      	mov	r1, r2
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fb fa08 	bl	8001dee <HAL_PCD_EP_Close>
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f8e5 	bl	8006bb4 <USBD_Get_USB_Status>
 80069ea:	4603      	mov	r3, r0
 80069ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a12:	78fa      	ldrb	r2, [r7, #3]
 8006a14:	4611      	mov	r1, r2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fb fae0 	bl	8001fdc <HAL_PCD_EP_SetStall>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f8c6 	bl	8006bb4 <USBD_Get_USB_Status>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a50:	78fa      	ldrb	r2, [r7, #3]
 8006a52:	4611      	mov	r1, r2
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fb fb25 	bl	80020a4 <HAL_PCD_EP_ClrStall>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f8a7 	bl	8006bb4 <USBD_Get_USB_Status>
 8006a66:	4603      	mov	r3, r0
 8006a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da0b      	bge.n	8006aa8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	333e      	adds	r3, #62	; 0x3e
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	e00b      	b.n	8006ac0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006abe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	4611      	mov	r1, r2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fb f8f2 	bl	8001cd4 <HAL_PCD_SetAddress>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f85c 	bl	8006bb4 <USBD_Get_USB_Status>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	460b      	mov	r3, r1
 8006b18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006b28:	7af9      	ldrb	r1, [r7, #11]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	f7fb fa0b 	bl	8001f48 <HAL_PCD_EP_Transmit>
 8006b32:	4603      	mov	r3, r0
 8006b34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 f83b 	bl	8006bb4 <USBD_Get_USB_Status>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b42:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006b6a:	7af9      	ldrb	r1, [r7, #11]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	f7fb f987 	bl	8001e82 <HAL_PCD_EP_Receive>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f81a 	bl	8006bb4 <USBD_Get_USB_Status>
 8006b80:	4603      	mov	r3, r0
 8006b82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b84:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ba0:	78fa      	ldrb	r2, [r7, #3]
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fb f9b7 	bl	8001f18 <HAL_PCD_EP_GetRxCount>
 8006baa:	4603      	mov	r3, r0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d817      	bhi.n	8006bf8 <USBD_Get_USB_Status+0x44>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <USBD_Get_USB_Status+0x1c>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006be1 	.word	0x08006be1
 8006bd4:	08006be7 	.word	0x08006be7
 8006bd8:	08006bed 	.word	0x08006bed
 8006bdc:	08006bf3 	.word	0x08006bf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	73fb      	strb	r3, [r7, #15]
    break;
 8006be4:	e00b      	b.n	8006bfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006be6:	2303      	movs	r3, #3
 8006be8:	73fb      	strb	r3, [r7, #15]
    break;
 8006bea:	e008      	b.n	8006bfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006bec:	2301      	movs	r3, #1
 8006bee:	73fb      	strb	r3, [r7, #15]
    break;
 8006bf0:	e005      	b.n	8006bfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8006bf6:	e002      	b.n	8006bfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8006bfc:	bf00      	nop
  }
  return usb_status;
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <__errno>:
 8006c0c:	4b01      	ldr	r3, [pc, #4]	; (8006c14 <__errno+0x8>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	20000180 	.word	0x20000180

08006c18 <__libc_init_array>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	4e0d      	ldr	r6, [pc, #52]	; (8006c50 <__libc_init_array+0x38>)
 8006c1c:	4c0d      	ldr	r4, [pc, #52]	; (8006c54 <__libc_init_array+0x3c>)
 8006c1e:	1ba4      	subs	r4, r4, r6
 8006c20:	10a4      	asrs	r4, r4, #2
 8006c22:	2500      	movs	r5, #0
 8006c24:	42a5      	cmp	r5, r4
 8006c26:	d109      	bne.n	8006c3c <__libc_init_array+0x24>
 8006c28:	4e0b      	ldr	r6, [pc, #44]	; (8006c58 <__libc_init_array+0x40>)
 8006c2a:	4c0c      	ldr	r4, [pc, #48]	; (8006c5c <__libc_init_array+0x44>)
 8006c2c:	f000 fc4c 	bl	80074c8 <_init>
 8006c30:	1ba4      	subs	r4, r4, r6
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	2500      	movs	r5, #0
 8006c36:	42a5      	cmp	r5, r4
 8006c38:	d105      	bne.n	8006c46 <__libc_init_array+0x2e>
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c40:	4798      	blx	r3
 8006c42:	3501      	adds	r5, #1
 8006c44:	e7ee      	b.n	8006c24 <__libc_init_array+0xc>
 8006c46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c4a:	4798      	blx	r3
 8006c4c:	3501      	adds	r5, #1
 8006c4e:	e7f2      	b.n	8006c36 <__libc_init_array+0x1e>
 8006c50:	080075a0 	.word	0x080075a0
 8006c54:	080075a0 	.word	0x080075a0
 8006c58:	080075a0 	.word	0x080075a0
 8006c5c:	080075a4 	.word	0x080075a4

08006c60 <malloc>:
 8006c60:	4b02      	ldr	r3, [pc, #8]	; (8006c6c <malloc+0xc>)
 8006c62:	4601      	mov	r1, r0
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	f000 b861 	b.w	8006d2c <_malloc_r>
 8006c6a:	bf00      	nop
 8006c6c:	20000180 	.word	0x20000180

08006c70 <free>:
 8006c70:	4b02      	ldr	r3, [pc, #8]	; (8006c7c <free+0xc>)
 8006c72:	4601      	mov	r1, r0
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f000 b80b 	b.w	8006c90 <_free_r>
 8006c7a:	bf00      	nop
 8006c7c:	20000180 	.word	0x20000180

08006c80 <memset>:
 8006c80:	4402      	add	r2, r0
 8006c82:	4603      	mov	r3, r0
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d100      	bne.n	8006c8a <memset+0xa>
 8006c88:	4770      	bx	lr
 8006c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c8e:	e7f9      	b.n	8006c84 <memset+0x4>

08006c90 <_free_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4605      	mov	r5, r0
 8006c94:	2900      	cmp	r1, #0
 8006c96:	d045      	beq.n	8006d24 <_free_r+0x94>
 8006c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c9c:	1f0c      	subs	r4, r1, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	bfb8      	it	lt
 8006ca2:	18e4      	addlt	r4, r4, r3
 8006ca4:	f000 f8e1 	bl	8006e6a <__malloc_lock>
 8006ca8:	4a1f      	ldr	r2, [pc, #124]	; (8006d28 <_free_r+0x98>)
 8006caa:	6813      	ldr	r3, [r2, #0]
 8006cac:	4610      	mov	r0, r2
 8006cae:	b933      	cbnz	r3, 8006cbe <_free_r+0x2e>
 8006cb0:	6063      	str	r3, [r4, #4]
 8006cb2:	6014      	str	r4, [r2, #0]
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cba:	f000 b8d7 	b.w	8006e6c <__malloc_unlock>
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	d90c      	bls.n	8006cdc <_free_r+0x4c>
 8006cc2:	6821      	ldr	r1, [r4, #0]
 8006cc4:	1862      	adds	r2, r4, r1
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	bf04      	itt	eq
 8006cca:	681a      	ldreq	r2, [r3, #0]
 8006ccc:	685b      	ldreq	r3, [r3, #4]
 8006cce:	6063      	str	r3, [r4, #4]
 8006cd0:	bf04      	itt	eq
 8006cd2:	1852      	addeq	r2, r2, r1
 8006cd4:	6022      	streq	r2, [r4, #0]
 8006cd6:	6004      	str	r4, [r0, #0]
 8006cd8:	e7ec      	b.n	8006cb4 <_free_r+0x24>
 8006cda:	4613      	mov	r3, r2
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	b10a      	cbz	r2, 8006ce4 <_free_r+0x54>
 8006ce0:	42a2      	cmp	r2, r4
 8006ce2:	d9fa      	bls.n	8006cda <_free_r+0x4a>
 8006ce4:	6819      	ldr	r1, [r3, #0]
 8006ce6:	1858      	adds	r0, r3, r1
 8006ce8:	42a0      	cmp	r0, r4
 8006cea:	d10b      	bne.n	8006d04 <_free_r+0x74>
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	4401      	add	r1, r0
 8006cf0:	1858      	adds	r0, r3, r1
 8006cf2:	4282      	cmp	r2, r0
 8006cf4:	6019      	str	r1, [r3, #0]
 8006cf6:	d1dd      	bne.n	8006cb4 <_free_r+0x24>
 8006cf8:	6810      	ldr	r0, [r2, #0]
 8006cfa:	6852      	ldr	r2, [r2, #4]
 8006cfc:	605a      	str	r2, [r3, #4]
 8006cfe:	4401      	add	r1, r0
 8006d00:	6019      	str	r1, [r3, #0]
 8006d02:	e7d7      	b.n	8006cb4 <_free_r+0x24>
 8006d04:	d902      	bls.n	8006d0c <_free_r+0x7c>
 8006d06:	230c      	movs	r3, #12
 8006d08:	602b      	str	r3, [r5, #0]
 8006d0a:	e7d3      	b.n	8006cb4 <_free_r+0x24>
 8006d0c:	6820      	ldr	r0, [r4, #0]
 8006d0e:	1821      	adds	r1, r4, r0
 8006d10:	428a      	cmp	r2, r1
 8006d12:	bf04      	itt	eq
 8006d14:	6811      	ldreq	r1, [r2, #0]
 8006d16:	6852      	ldreq	r2, [r2, #4]
 8006d18:	6062      	str	r2, [r4, #4]
 8006d1a:	bf04      	itt	eq
 8006d1c:	1809      	addeq	r1, r1, r0
 8006d1e:	6021      	streq	r1, [r4, #0]
 8006d20:	605c      	str	r4, [r3, #4]
 8006d22:	e7c7      	b.n	8006cb4 <_free_r+0x24>
 8006d24:	bd38      	pop	{r3, r4, r5, pc}
 8006d26:	bf00      	nop
 8006d28:	2000020c 	.word	0x2000020c

08006d2c <_malloc_r>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	1ccd      	adds	r5, r1, #3
 8006d30:	f025 0503 	bic.w	r5, r5, #3
 8006d34:	3508      	adds	r5, #8
 8006d36:	2d0c      	cmp	r5, #12
 8006d38:	bf38      	it	cc
 8006d3a:	250c      	movcc	r5, #12
 8006d3c:	2d00      	cmp	r5, #0
 8006d3e:	4606      	mov	r6, r0
 8006d40:	db01      	blt.n	8006d46 <_malloc_r+0x1a>
 8006d42:	42a9      	cmp	r1, r5
 8006d44:	d903      	bls.n	8006d4e <_malloc_r+0x22>
 8006d46:	230c      	movs	r3, #12
 8006d48:	6033      	str	r3, [r6, #0]
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	bd70      	pop	{r4, r5, r6, pc}
 8006d4e:	f000 f88c 	bl	8006e6a <__malloc_lock>
 8006d52:	4a21      	ldr	r2, [pc, #132]	; (8006dd8 <_malloc_r+0xac>)
 8006d54:	6814      	ldr	r4, [r2, #0]
 8006d56:	4621      	mov	r1, r4
 8006d58:	b991      	cbnz	r1, 8006d80 <_malloc_r+0x54>
 8006d5a:	4c20      	ldr	r4, [pc, #128]	; (8006ddc <_malloc_r+0xb0>)
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	b91b      	cbnz	r3, 8006d68 <_malloc_r+0x3c>
 8006d60:	4630      	mov	r0, r6
 8006d62:	f000 f83d 	bl	8006de0 <_sbrk_r>
 8006d66:	6020      	str	r0, [r4, #0]
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 f838 	bl	8006de0 <_sbrk_r>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d124      	bne.n	8006dbe <_malloc_r+0x92>
 8006d74:	230c      	movs	r3, #12
 8006d76:	6033      	str	r3, [r6, #0]
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f000 f877 	bl	8006e6c <__malloc_unlock>
 8006d7e:	e7e4      	b.n	8006d4a <_malloc_r+0x1e>
 8006d80:	680b      	ldr	r3, [r1, #0]
 8006d82:	1b5b      	subs	r3, r3, r5
 8006d84:	d418      	bmi.n	8006db8 <_malloc_r+0x8c>
 8006d86:	2b0b      	cmp	r3, #11
 8006d88:	d90f      	bls.n	8006daa <_malloc_r+0x7e>
 8006d8a:	600b      	str	r3, [r1, #0]
 8006d8c:	50cd      	str	r5, [r1, r3]
 8006d8e:	18cc      	adds	r4, r1, r3
 8006d90:	4630      	mov	r0, r6
 8006d92:	f000 f86b 	bl	8006e6c <__malloc_unlock>
 8006d96:	f104 000b 	add.w	r0, r4, #11
 8006d9a:	1d23      	adds	r3, r4, #4
 8006d9c:	f020 0007 	bic.w	r0, r0, #7
 8006da0:	1ac3      	subs	r3, r0, r3
 8006da2:	d0d3      	beq.n	8006d4c <_malloc_r+0x20>
 8006da4:	425a      	negs	r2, r3
 8006da6:	50e2      	str	r2, [r4, r3]
 8006da8:	e7d0      	b.n	8006d4c <_malloc_r+0x20>
 8006daa:	428c      	cmp	r4, r1
 8006dac:	684b      	ldr	r3, [r1, #4]
 8006dae:	bf16      	itet	ne
 8006db0:	6063      	strne	r3, [r4, #4]
 8006db2:	6013      	streq	r3, [r2, #0]
 8006db4:	460c      	movne	r4, r1
 8006db6:	e7eb      	b.n	8006d90 <_malloc_r+0x64>
 8006db8:	460c      	mov	r4, r1
 8006dba:	6849      	ldr	r1, [r1, #4]
 8006dbc:	e7cc      	b.n	8006d58 <_malloc_r+0x2c>
 8006dbe:	1cc4      	adds	r4, r0, #3
 8006dc0:	f024 0403 	bic.w	r4, r4, #3
 8006dc4:	42a0      	cmp	r0, r4
 8006dc6:	d005      	beq.n	8006dd4 <_malloc_r+0xa8>
 8006dc8:	1a21      	subs	r1, r4, r0
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f000 f808 	bl	8006de0 <_sbrk_r>
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d0cf      	beq.n	8006d74 <_malloc_r+0x48>
 8006dd4:	6025      	str	r5, [r4, #0]
 8006dd6:	e7db      	b.n	8006d90 <_malloc_r+0x64>
 8006dd8:	2000020c 	.word	0x2000020c
 8006ddc:	20000210 	.word	0x20000210

08006de0 <_sbrk_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4c06      	ldr	r4, [pc, #24]	; (8006dfc <_sbrk_r+0x1c>)
 8006de4:	2300      	movs	r3, #0
 8006de6:	4605      	mov	r5, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	6023      	str	r3, [r4, #0]
 8006dec:	f7f9 fed0 	bl	8000b90 <_sbrk>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_sbrk_r+0x1a>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_sbrk_r+0x1a>
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	20000bd0 	.word	0x20000bd0

08006e00 <siprintf>:
 8006e00:	b40e      	push	{r1, r2, r3}
 8006e02:	b500      	push	{lr}
 8006e04:	b09c      	sub	sp, #112	; 0x70
 8006e06:	ab1d      	add	r3, sp, #116	; 0x74
 8006e08:	9002      	str	r0, [sp, #8]
 8006e0a:	9006      	str	r0, [sp, #24]
 8006e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e10:	4809      	ldr	r0, [pc, #36]	; (8006e38 <siprintf+0x38>)
 8006e12:	9107      	str	r1, [sp, #28]
 8006e14:	9104      	str	r1, [sp, #16]
 8006e16:	4909      	ldr	r1, [pc, #36]	; (8006e3c <siprintf+0x3c>)
 8006e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1c:	9105      	str	r1, [sp, #20]
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	a902      	add	r1, sp, #8
 8006e24:	f000 f87e 	bl	8006f24 <_svfiprintf_r>
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	b01c      	add	sp, #112	; 0x70
 8006e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e34:	b003      	add	sp, #12
 8006e36:	4770      	bx	lr
 8006e38:	20000180 	.word	0x20000180
 8006e3c:	ffff0208 	.word	0xffff0208

08006e40 <strlcpy>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	460b      	mov	r3, r1
 8006e44:	b162      	cbz	r2, 8006e60 <strlcpy+0x20>
 8006e46:	3a01      	subs	r2, #1
 8006e48:	d008      	beq.n	8006e5c <strlcpy+0x1c>
 8006e4a:	f813 4b01 	ldrb.w	r4, [r3], #1
 8006e4e:	f800 4b01 	strb.w	r4, [r0], #1
 8006e52:	2c00      	cmp	r4, #0
 8006e54:	d1f7      	bne.n	8006e46 <strlcpy+0x6>
 8006e56:	1a58      	subs	r0, r3, r1
 8006e58:	3801      	subs	r0, #1
 8006e5a:	bd10      	pop	{r4, pc}
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	7002      	strb	r2, [r0, #0]
 8006e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e64:	2a00      	cmp	r2, #0
 8006e66:	d1fb      	bne.n	8006e60 <strlcpy+0x20>
 8006e68:	e7f5      	b.n	8006e56 <strlcpy+0x16>

08006e6a <__malloc_lock>:
 8006e6a:	4770      	bx	lr

08006e6c <__malloc_unlock>:
 8006e6c:	4770      	bx	lr

08006e6e <__ssputs_r>:
 8006e6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e72:	688e      	ldr	r6, [r1, #8]
 8006e74:	429e      	cmp	r6, r3
 8006e76:	4682      	mov	sl, r0
 8006e78:	460c      	mov	r4, r1
 8006e7a:	4690      	mov	r8, r2
 8006e7c:	4699      	mov	r9, r3
 8006e7e:	d837      	bhi.n	8006ef0 <__ssputs_r+0x82>
 8006e80:	898a      	ldrh	r2, [r1, #12]
 8006e82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e86:	d031      	beq.n	8006eec <__ssputs_r+0x7e>
 8006e88:	6825      	ldr	r5, [r4, #0]
 8006e8a:	6909      	ldr	r1, [r1, #16]
 8006e8c:	1a6f      	subs	r7, r5, r1
 8006e8e:	6965      	ldr	r5, [r4, #20]
 8006e90:	2302      	movs	r3, #2
 8006e92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e96:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e9a:	f109 0301 	add.w	r3, r9, #1
 8006e9e:	443b      	add	r3, r7
 8006ea0:	429d      	cmp	r5, r3
 8006ea2:	bf38      	it	cc
 8006ea4:	461d      	movcc	r5, r3
 8006ea6:	0553      	lsls	r3, r2, #21
 8006ea8:	d530      	bpl.n	8006f0c <__ssputs_r+0x9e>
 8006eaa:	4629      	mov	r1, r5
 8006eac:	f7ff ff3e 	bl	8006d2c <_malloc_r>
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	b950      	cbnz	r0, 8006eca <__ssputs_r+0x5c>
 8006eb4:	230c      	movs	r3, #12
 8006eb6:	f8ca 3000 	str.w	r3, [sl]
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec0:	81a3      	strh	r3, [r4, #12]
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eca:	463a      	mov	r2, r7
 8006ecc:	6921      	ldr	r1, [r4, #16]
 8006ece:	f000 faa9 	bl	8007424 <memcpy>
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006edc:	81a3      	strh	r3, [r4, #12]
 8006ede:	6126      	str	r6, [r4, #16]
 8006ee0:	6165      	str	r5, [r4, #20]
 8006ee2:	443e      	add	r6, r7
 8006ee4:	1bed      	subs	r5, r5, r7
 8006ee6:	6026      	str	r6, [r4, #0]
 8006ee8:	60a5      	str	r5, [r4, #8]
 8006eea:	464e      	mov	r6, r9
 8006eec:	454e      	cmp	r6, r9
 8006eee:	d900      	bls.n	8006ef2 <__ssputs_r+0x84>
 8006ef0:	464e      	mov	r6, r9
 8006ef2:	4632      	mov	r2, r6
 8006ef4:	4641      	mov	r1, r8
 8006ef6:	6820      	ldr	r0, [r4, #0]
 8006ef8:	f000 fa9f 	bl	800743a <memmove>
 8006efc:	68a3      	ldr	r3, [r4, #8]
 8006efe:	1b9b      	subs	r3, r3, r6
 8006f00:	60a3      	str	r3, [r4, #8]
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	441e      	add	r6, r3
 8006f06:	6026      	str	r6, [r4, #0]
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e7dc      	b.n	8006ec6 <__ssputs_r+0x58>
 8006f0c:	462a      	mov	r2, r5
 8006f0e:	f000 faad 	bl	800746c <_realloc_r>
 8006f12:	4606      	mov	r6, r0
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d1e2      	bne.n	8006ede <__ssputs_r+0x70>
 8006f18:	6921      	ldr	r1, [r4, #16]
 8006f1a:	4650      	mov	r0, sl
 8006f1c:	f7ff feb8 	bl	8006c90 <_free_r>
 8006f20:	e7c8      	b.n	8006eb4 <__ssputs_r+0x46>
	...

08006f24 <_svfiprintf_r>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	461d      	mov	r5, r3
 8006f2a:	898b      	ldrh	r3, [r1, #12]
 8006f2c:	061f      	lsls	r7, r3, #24
 8006f2e:	b09d      	sub	sp, #116	; 0x74
 8006f30:	4680      	mov	r8, r0
 8006f32:	460c      	mov	r4, r1
 8006f34:	4616      	mov	r6, r2
 8006f36:	d50f      	bpl.n	8006f58 <_svfiprintf_r+0x34>
 8006f38:	690b      	ldr	r3, [r1, #16]
 8006f3a:	b96b      	cbnz	r3, 8006f58 <_svfiprintf_r+0x34>
 8006f3c:	2140      	movs	r1, #64	; 0x40
 8006f3e:	f7ff fef5 	bl	8006d2c <_malloc_r>
 8006f42:	6020      	str	r0, [r4, #0]
 8006f44:	6120      	str	r0, [r4, #16]
 8006f46:	b928      	cbnz	r0, 8006f54 <_svfiprintf_r+0x30>
 8006f48:	230c      	movs	r3, #12
 8006f4a:	f8c8 3000 	str.w	r3, [r8]
 8006f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f52:	e0c8      	b.n	80070e6 <_svfiprintf_r+0x1c2>
 8006f54:	2340      	movs	r3, #64	; 0x40
 8006f56:	6163      	str	r3, [r4, #20]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f5c:	2320      	movs	r3, #32
 8006f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f62:	2330      	movs	r3, #48	; 0x30
 8006f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f68:	9503      	str	r5, [sp, #12]
 8006f6a:	f04f 0b01 	mov.w	fp, #1
 8006f6e:	4637      	mov	r7, r6
 8006f70:	463d      	mov	r5, r7
 8006f72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f76:	b10b      	cbz	r3, 8006f7c <_svfiprintf_r+0x58>
 8006f78:	2b25      	cmp	r3, #37	; 0x25
 8006f7a:	d13e      	bne.n	8006ffa <_svfiprintf_r+0xd6>
 8006f7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006f80:	d00b      	beq.n	8006f9a <_svfiprintf_r+0x76>
 8006f82:	4653      	mov	r3, sl
 8006f84:	4632      	mov	r2, r6
 8006f86:	4621      	mov	r1, r4
 8006f88:	4640      	mov	r0, r8
 8006f8a:	f7ff ff70 	bl	8006e6e <__ssputs_r>
 8006f8e:	3001      	adds	r0, #1
 8006f90:	f000 80a4 	beq.w	80070dc <_svfiprintf_r+0x1b8>
 8006f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f96:	4453      	add	r3, sl
 8006f98:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9a:	783b      	ldrb	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 809d 	beq.w	80070dc <_svfiprintf_r+0x1b8>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	9307      	str	r3, [sp, #28]
 8006fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8006fb6:	462f      	mov	r7, r5
 8006fb8:	2205      	movs	r2, #5
 8006fba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006fbe:	4850      	ldr	r0, [pc, #320]	; (8007100 <_svfiprintf_r+0x1dc>)
 8006fc0:	f7f9 f906 	bl	80001d0 <memchr>
 8006fc4:	9b04      	ldr	r3, [sp, #16]
 8006fc6:	b9d0      	cbnz	r0, 8006ffe <_svfiprintf_r+0xda>
 8006fc8:	06d9      	lsls	r1, r3, #27
 8006fca:	bf44      	itt	mi
 8006fcc:	2220      	movmi	r2, #32
 8006fce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fd2:	071a      	lsls	r2, r3, #28
 8006fd4:	bf44      	itt	mi
 8006fd6:	222b      	movmi	r2, #43	; 0x2b
 8006fd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fdc:	782a      	ldrb	r2, [r5, #0]
 8006fde:	2a2a      	cmp	r2, #42	; 0x2a
 8006fe0:	d015      	beq.n	800700e <_svfiprintf_r+0xea>
 8006fe2:	9a07      	ldr	r2, [sp, #28]
 8006fe4:	462f      	mov	r7, r5
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	250a      	movs	r5, #10
 8006fea:	4639      	mov	r1, r7
 8006fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff0:	3b30      	subs	r3, #48	; 0x30
 8006ff2:	2b09      	cmp	r3, #9
 8006ff4:	d94d      	bls.n	8007092 <_svfiprintf_r+0x16e>
 8006ff6:	b1b8      	cbz	r0, 8007028 <_svfiprintf_r+0x104>
 8006ff8:	e00f      	b.n	800701a <_svfiprintf_r+0xf6>
 8006ffa:	462f      	mov	r7, r5
 8006ffc:	e7b8      	b.n	8006f70 <_svfiprintf_r+0x4c>
 8006ffe:	4a40      	ldr	r2, [pc, #256]	; (8007100 <_svfiprintf_r+0x1dc>)
 8007000:	1a80      	subs	r0, r0, r2
 8007002:	fa0b f000 	lsl.w	r0, fp, r0
 8007006:	4318      	orrs	r0, r3
 8007008:	9004      	str	r0, [sp, #16]
 800700a:	463d      	mov	r5, r7
 800700c:	e7d3      	b.n	8006fb6 <_svfiprintf_r+0x92>
 800700e:	9a03      	ldr	r2, [sp, #12]
 8007010:	1d11      	adds	r1, r2, #4
 8007012:	6812      	ldr	r2, [r2, #0]
 8007014:	9103      	str	r1, [sp, #12]
 8007016:	2a00      	cmp	r2, #0
 8007018:	db01      	blt.n	800701e <_svfiprintf_r+0xfa>
 800701a:	9207      	str	r2, [sp, #28]
 800701c:	e004      	b.n	8007028 <_svfiprintf_r+0x104>
 800701e:	4252      	negs	r2, r2
 8007020:	f043 0302 	orr.w	r3, r3, #2
 8007024:	9207      	str	r2, [sp, #28]
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	783b      	ldrb	r3, [r7, #0]
 800702a:	2b2e      	cmp	r3, #46	; 0x2e
 800702c:	d10c      	bne.n	8007048 <_svfiprintf_r+0x124>
 800702e:	787b      	ldrb	r3, [r7, #1]
 8007030:	2b2a      	cmp	r3, #42	; 0x2a
 8007032:	d133      	bne.n	800709c <_svfiprintf_r+0x178>
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	1d1a      	adds	r2, r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	9203      	str	r2, [sp, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	bfb8      	it	lt
 8007040:	f04f 33ff 	movlt.w	r3, #4294967295
 8007044:	3702      	adds	r7, #2
 8007046:	9305      	str	r3, [sp, #20]
 8007048:	4d2e      	ldr	r5, [pc, #184]	; (8007104 <_svfiprintf_r+0x1e0>)
 800704a:	7839      	ldrb	r1, [r7, #0]
 800704c:	2203      	movs	r2, #3
 800704e:	4628      	mov	r0, r5
 8007050:	f7f9 f8be 	bl	80001d0 <memchr>
 8007054:	b138      	cbz	r0, 8007066 <_svfiprintf_r+0x142>
 8007056:	2340      	movs	r3, #64	; 0x40
 8007058:	1b40      	subs	r0, r0, r5
 800705a:	fa03 f000 	lsl.w	r0, r3, r0
 800705e:	9b04      	ldr	r3, [sp, #16]
 8007060:	4303      	orrs	r3, r0
 8007062:	3701      	adds	r7, #1
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	7839      	ldrb	r1, [r7, #0]
 8007068:	4827      	ldr	r0, [pc, #156]	; (8007108 <_svfiprintf_r+0x1e4>)
 800706a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800706e:	2206      	movs	r2, #6
 8007070:	1c7e      	adds	r6, r7, #1
 8007072:	f7f9 f8ad 	bl	80001d0 <memchr>
 8007076:	2800      	cmp	r0, #0
 8007078:	d038      	beq.n	80070ec <_svfiprintf_r+0x1c8>
 800707a:	4b24      	ldr	r3, [pc, #144]	; (800710c <_svfiprintf_r+0x1e8>)
 800707c:	bb13      	cbnz	r3, 80070c4 <_svfiprintf_r+0x1a0>
 800707e:	9b03      	ldr	r3, [sp, #12]
 8007080:	3307      	adds	r3, #7
 8007082:	f023 0307 	bic.w	r3, r3, #7
 8007086:	3308      	adds	r3, #8
 8007088:	9303      	str	r3, [sp, #12]
 800708a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708c:	444b      	add	r3, r9
 800708e:	9309      	str	r3, [sp, #36]	; 0x24
 8007090:	e76d      	b.n	8006f6e <_svfiprintf_r+0x4a>
 8007092:	fb05 3202 	mla	r2, r5, r2, r3
 8007096:	2001      	movs	r0, #1
 8007098:	460f      	mov	r7, r1
 800709a:	e7a6      	b.n	8006fea <_svfiprintf_r+0xc6>
 800709c:	2300      	movs	r3, #0
 800709e:	3701      	adds	r7, #1
 80070a0:	9305      	str	r3, [sp, #20]
 80070a2:	4619      	mov	r1, r3
 80070a4:	250a      	movs	r5, #10
 80070a6:	4638      	mov	r0, r7
 80070a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ac:	3a30      	subs	r2, #48	; 0x30
 80070ae:	2a09      	cmp	r2, #9
 80070b0:	d903      	bls.n	80070ba <_svfiprintf_r+0x196>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0c8      	beq.n	8007048 <_svfiprintf_r+0x124>
 80070b6:	9105      	str	r1, [sp, #20]
 80070b8:	e7c6      	b.n	8007048 <_svfiprintf_r+0x124>
 80070ba:	fb05 2101 	mla	r1, r5, r1, r2
 80070be:	2301      	movs	r3, #1
 80070c0:	4607      	mov	r7, r0
 80070c2:	e7f0      	b.n	80070a6 <_svfiprintf_r+0x182>
 80070c4:	ab03      	add	r3, sp, #12
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	4622      	mov	r2, r4
 80070ca:	4b11      	ldr	r3, [pc, #68]	; (8007110 <_svfiprintf_r+0x1ec>)
 80070cc:	a904      	add	r1, sp, #16
 80070ce:	4640      	mov	r0, r8
 80070d0:	f3af 8000 	nop.w
 80070d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80070d8:	4681      	mov	r9, r0
 80070da:	d1d6      	bne.n	800708a <_svfiprintf_r+0x166>
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	065b      	lsls	r3, r3, #25
 80070e0:	f53f af35 	bmi.w	8006f4e <_svfiprintf_r+0x2a>
 80070e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070e6:	b01d      	add	sp, #116	; 0x74
 80070e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ec:	ab03      	add	r3, sp, #12
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	4622      	mov	r2, r4
 80070f2:	4b07      	ldr	r3, [pc, #28]	; (8007110 <_svfiprintf_r+0x1ec>)
 80070f4:	a904      	add	r1, sp, #16
 80070f6:	4640      	mov	r0, r8
 80070f8:	f000 f882 	bl	8007200 <_printf_i>
 80070fc:	e7ea      	b.n	80070d4 <_svfiprintf_r+0x1b0>
 80070fe:	bf00      	nop
 8007100:	08007564 	.word	0x08007564
 8007104:	0800756a 	.word	0x0800756a
 8007108:	0800756e 	.word	0x0800756e
 800710c:	00000000 	.word	0x00000000
 8007110:	08006e6f 	.word	0x08006e6f

08007114 <_printf_common>:
 8007114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007118:	4691      	mov	r9, r2
 800711a:	461f      	mov	r7, r3
 800711c:	688a      	ldr	r2, [r1, #8]
 800711e:	690b      	ldr	r3, [r1, #16]
 8007120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007124:	4293      	cmp	r3, r2
 8007126:	bfb8      	it	lt
 8007128:	4613      	movlt	r3, r2
 800712a:	f8c9 3000 	str.w	r3, [r9]
 800712e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007132:	4606      	mov	r6, r0
 8007134:	460c      	mov	r4, r1
 8007136:	b112      	cbz	r2, 800713e <_printf_common+0x2a>
 8007138:	3301      	adds	r3, #1
 800713a:	f8c9 3000 	str.w	r3, [r9]
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	0699      	lsls	r1, r3, #26
 8007142:	bf42      	ittt	mi
 8007144:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007148:	3302      	addmi	r3, #2
 800714a:	f8c9 3000 	strmi.w	r3, [r9]
 800714e:	6825      	ldr	r5, [r4, #0]
 8007150:	f015 0506 	ands.w	r5, r5, #6
 8007154:	d107      	bne.n	8007166 <_printf_common+0x52>
 8007156:	f104 0a19 	add.w	sl, r4, #25
 800715a:	68e3      	ldr	r3, [r4, #12]
 800715c:	f8d9 2000 	ldr.w	r2, [r9]
 8007160:	1a9b      	subs	r3, r3, r2
 8007162:	42ab      	cmp	r3, r5
 8007164:	dc28      	bgt.n	80071b8 <_printf_common+0xa4>
 8007166:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	3300      	adds	r3, #0
 800716e:	bf18      	it	ne
 8007170:	2301      	movne	r3, #1
 8007172:	0692      	lsls	r2, r2, #26
 8007174:	d42d      	bmi.n	80071d2 <_printf_common+0xbe>
 8007176:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800717a:	4639      	mov	r1, r7
 800717c:	4630      	mov	r0, r6
 800717e:	47c0      	blx	r8
 8007180:	3001      	adds	r0, #1
 8007182:	d020      	beq.n	80071c6 <_printf_common+0xb2>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	68e5      	ldr	r5, [r4, #12]
 8007188:	f8d9 2000 	ldr.w	r2, [r9]
 800718c:	f003 0306 	and.w	r3, r3, #6
 8007190:	2b04      	cmp	r3, #4
 8007192:	bf08      	it	eq
 8007194:	1aad      	subeq	r5, r5, r2
 8007196:	68a3      	ldr	r3, [r4, #8]
 8007198:	6922      	ldr	r2, [r4, #16]
 800719a:	bf0c      	ite	eq
 800719c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071a0:	2500      	movne	r5, #0
 80071a2:	4293      	cmp	r3, r2
 80071a4:	bfc4      	itt	gt
 80071a6:	1a9b      	subgt	r3, r3, r2
 80071a8:	18ed      	addgt	r5, r5, r3
 80071aa:	f04f 0900 	mov.w	r9, #0
 80071ae:	341a      	adds	r4, #26
 80071b0:	454d      	cmp	r5, r9
 80071b2:	d11a      	bne.n	80071ea <_printf_common+0xd6>
 80071b4:	2000      	movs	r0, #0
 80071b6:	e008      	b.n	80071ca <_printf_common+0xb6>
 80071b8:	2301      	movs	r3, #1
 80071ba:	4652      	mov	r2, sl
 80071bc:	4639      	mov	r1, r7
 80071be:	4630      	mov	r0, r6
 80071c0:	47c0      	blx	r8
 80071c2:	3001      	adds	r0, #1
 80071c4:	d103      	bne.n	80071ce <_printf_common+0xba>
 80071c6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ce:	3501      	adds	r5, #1
 80071d0:	e7c3      	b.n	800715a <_printf_common+0x46>
 80071d2:	18e1      	adds	r1, r4, r3
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	2030      	movs	r0, #48	; 0x30
 80071d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071dc:	4422      	add	r2, r4
 80071de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071e6:	3302      	adds	r3, #2
 80071e8:	e7c5      	b.n	8007176 <_printf_common+0x62>
 80071ea:	2301      	movs	r3, #1
 80071ec:	4622      	mov	r2, r4
 80071ee:	4639      	mov	r1, r7
 80071f0:	4630      	mov	r0, r6
 80071f2:	47c0      	blx	r8
 80071f4:	3001      	adds	r0, #1
 80071f6:	d0e6      	beq.n	80071c6 <_printf_common+0xb2>
 80071f8:	f109 0901 	add.w	r9, r9, #1
 80071fc:	e7d8      	b.n	80071b0 <_printf_common+0x9c>
	...

08007200 <_printf_i>:
 8007200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007204:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007208:	460c      	mov	r4, r1
 800720a:	7e09      	ldrb	r1, [r1, #24]
 800720c:	b085      	sub	sp, #20
 800720e:	296e      	cmp	r1, #110	; 0x6e
 8007210:	4617      	mov	r7, r2
 8007212:	4606      	mov	r6, r0
 8007214:	4698      	mov	r8, r3
 8007216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007218:	f000 80b3 	beq.w	8007382 <_printf_i+0x182>
 800721c:	d822      	bhi.n	8007264 <_printf_i+0x64>
 800721e:	2963      	cmp	r1, #99	; 0x63
 8007220:	d036      	beq.n	8007290 <_printf_i+0x90>
 8007222:	d80a      	bhi.n	800723a <_printf_i+0x3a>
 8007224:	2900      	cmp	r1, #0
 8007226:	f000 80b9 	beq.w	800739c <_printf_i+0x19c>
 800722a:	2958      	cmp	r1, #88	; 0x58
 800722c:	f000 8083 	beq.w	8007336 <_printf_i+0x136>
 8007230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007234:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007238:	e032      	b.n	80072a0 <_printf_i+0xa0>
 800723a:	2964      	cmp	r1, #100	; 0x64
 800723c:	d001      	beq.n	8007242 <_printf_i+0x42>
 800723e:	2969      	cmp	r1, #105	; 0x69
 8007240:	d1f6      	bne.n	8007230 <_printf_i+0x30>
 8007242:	6820      	ldr	r0, [r4, #0]
 8007244:	6813      	ldr	r3, [r2, #0]
 8007246:	0605      	lsls	r5, r0, #24
 8007248:	f103 0104 	add.w	r1, r3, #4
 800724c:	d52a      	bpl.n	80072a4 <_printf_i+0xa4>
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6011      	str	r1, [r2, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	da03      	bge.n	800725e <_printf_i+0x5e>
 8007256:	222d      	movs	r2, #45	; 0x2d
 8007258:	425b      	negs	r3, r3
 800725a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800725e:	486f      	ldr	r0, [pc, #444]	; (800741c <_printf_i+0x21c>)
 8007260:	220a      	movs	r2, #10
 8007262:	e039      	b.n	80072d8 <_printf_i+0xd8>
 8007264:	2973      	cmp	r1, #115	; 0x73
 8007266:	f000 809d 	beq.w	80073a4 <_printf_i+0x1a4>
 800726a:	d808      	bhi.n	800727e <_printf_i+0x7e>
 800726c:	296f      	cmp	r1, #111	; 0x6f
 800726e:	d020      	beq.n	80072b2 <_printf_i+0xb2>
 8007270:	2970      	cmp	r1, #112	; 0x70
 8007272:	d1dd      	bne.n	8007230 <_printf_i+0x30>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	f043 0320 	orr.w	r3, r3, #32
 800727a:	6023      	str	r3, [r4, #0]
 800727c:	e003      	b.n	8007286 <_printf_i+0x86>
 800727e:	2975      	cmp	r1, #117	; 0x75
 8007280:	d017      	beq.n	80072b2 <_printf_i+0xb2>
 8007282:	2978      	cmp	r1, #120	; 0x78
 8007284:	d1d4      	bne.n	8007230 <_printf_i+0x30>
 8007286:	2378      	movs	r3, #120	; 0x78
 8007288:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800728c:	4864      	ldr	r0, [pc, #400]	; (8007420 <_printf_i+0x220>)
 800728e:	e055      	b.n	800733c <_printf_i+0x13c>
 8007290:	6813      	ldr	r3, [r2, #0]
 8007292:	1d19      	adds	r1, r3, #4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6011      	str	r1, [r2, #0]
 8007298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800729c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072a0:	2301      	movs	r3, #1
 80072a2:	e08c      	b.n	80073be <_printf_i+0x1be>
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6011      	str	r1, [r2, #0]
 80072a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072ac:	bf18      	it	ne
 80072ae:	b21b      	sxthne	r3, r3
 80072b0:	e7cf      	b.n	8007252 <_printf_i+0x52>
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	6825      	ldr	r5, [r4, #0]
 80072b6:	1d18      	adds	r0, r3, #4
 80072b8:	6010      	str	r0, [r2, #0]
 80072ba:	0628      	lsls	r0, r5, #24
 80072bc:	d501      	bpl.n	80072c2 <_printf_i+0xc2>
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	e002      	b.n	80072c8 <_printf_i+0xc8>
 80072c2:	0668      	lsls	r0, r5, #25
 80072c4:	d5fb      	bpl.n	80072be <_printf_i+0xbe>
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	4854      	ldr	r0, [pc, #336]	; (800741c <_printf_i+0x21c>)
 80072ca:	296f      	cmp	r1, #111	; 0x6f
 80072cc:	bf14      	ite	ne
 80072ce:	220a      	movne	r2, #10
 80072d0:	2208      	moveq	r2, #8
 80072d2:	2100      	movs	r1, #0
 80072d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072d8:	6865      	ldr	r5, [r4, #4]
 80072da:	60a5      	str	r5, [r4, #8]
 80072dc:	2d00      	cmp	r5, #0
 80072de:	f2c0 8095 	blt.w	800740c <_printf_i+0x20c>
 80072e2:	6821      	ldr	r1, [r4, #0]
 80072e4:	f021 0104 	bic.w	r1, r1, #4
 80072e8:	6021      	str	r1, [r4, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d13d      	bne.n	800736a <_printf_i+0x16a>
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	f040 808e 	bne.w	8007410 <_printf_i+0x210>
 80072f4:	4665      	mov	r5, ip
 80072f6:	2a08      	cmp	r2, #8
 80072f8:	d10b      	bne.n	8007312 <_printf_i+0x112>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	07db      	lsls	r3, r3, #31
 80072fe:	d508      	bpl.n	8007312 <_printf_i+0x112>
 8007300:	6923      	ldr	r3, [r4, #16]
 8007302:	6862      	ldr	r2, [r4, #4]
 8007304:	429a      	cmp	r2, r3
 8007306:	bfde      	ittt	le
 8007308:	2330      	movle	r3, #48	; 0x30
 800730a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800730e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007312:	ebac 0305 	sub.w	r3, ip, r5
 8007316:	6123      	str	r3, [r4, #16]
 8007318:	f8cd 8000 	str.w	r8, [sp]
 800731c:	463b      	mov	r3, r7
 800731e:	aa03      	add	r2, sp, #12
 8007320:	4621      	mov	r1, r4
 8007322:	4630      	mov	r0, r6
 8007324:	f7ff fef6 	bl	8007114 <_printf_common>
 8007328:	3001      	adds	r0, #1
 800732a:	d14d      	bne.n	80073c8 <_printf_i+0x1c8>
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	b005      	add	sp, #20
 8007332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007336:	4839      	ldr	r0, [pc, #228]	; (800741c <_printf_i+0x21c>)
 8007338:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800733c:	6813      	ldr	r3, [r2, #0]
 800733e:	6821      	ldr	r1, [r4, #0]
 8007340:	1d1d      	adds	r5, r3, #4
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6015      	str	r5, [r2, #0]
 8007346:	060a      	lsls	r2, r1, #24
 8007348:	d50b      	bpl.n	8007362 <_printf_i+0x162>
 800734a:	07ca      	lsls	r2, r1, #31
 800734c:	bf44      	itt	mi
 800734e:	f041 0120 	orrmi.w	r1, r1, #32
 8007352:	6021      	strmi	r1, [r4, #0]
 8007354:	b91b      	cbnz	r3, 800735e <_printf_i+0x15e>
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	f022 0220 	bic.w	r2, r2, #32
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	2210      	movs	r2, #16
 8007360:	e7b7      	b.n	80072d2 <_printf_i+0xd2>
 8007362:	064d      	lsls	r5, r1, #25
 8007364:	bf48      	it	mi
 8007366:	b29b      	uxthmi	r3, r3
 8007368:	e7ef      	b.n	800734a <_printf_i+0x14a>
 800736a:	4665      	mov	r5, ip
 800736c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007370:	fb02 3311 	mls	r3, r2, r1, r3
 8007374:	5cc3      	ldrb	r3, [r0, r3]
 8007376:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800737a:	460b      	mov	r3, r1
 800737c:	2900      	cmp	r1, #0
 800737e:	d1f5      	bne.n	800736c <_printf_i+0x16c>
 8007380:	e7b9      	b.n	80072f6 <_printf_i+0xf6>
 8007382:	6813      	ldr	r3, [r2, #0]
 8007384:	6825      	ldr	r5, [r4, #0]
 8007386:	6961      	ldr	r1, [r4, #20]
 8007388:	1d18      	adds	r0, r3, #4
 800738a:	6010      	str	r0, [r2, #0]
 800738c:	0628      	lsls	r0, r5, #24
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	d501      	bpl.n	8007396 <_printf_i+0x196>
 8007392:	6019      	str	r1, [r3, #0]
 8007394:	e002      	b.n	800739c <_printf_i+0x19c>
 8007396:	066a      	lsls	r2, r5, #25
 8007398:	d5fb      	bpl.n	8007392 <_printf_i+0x192>
 800739a:	8019      	strh	r1, [r3, #0]
 800739c:	2300      	movs	r3, #0
 800739e:	6123      	str	r3, [r4, #16]
 80073a0:	4665      	mov	r5, ip
 80073a2:	e7b9      	b.n	8007318 <_printf_i+0x118>
 80073a4:	6813      	ldr	r3, [r2, #0]
 80073a6:	1d19      	adds	r1, r3, #4
 80073a8:	6011      	str	r1, [r2, #0]
 80073aa:	681d      	ldr	r5, [r3, #0]
 80073ac:	6862      	ldr	r2, [r4, #4]
 80073ae:	2100      	movs	r1, #0
 80073b0:	4628      	mov	r0, r5
 80073b2:	f7f8 ff0d 	bl	80001d0 <memchr>
 80073b6:	b108      	cbz	r0, 80073bc <_printf_i+0x1bc>
 80073b8:	1b40      	subs	r0, r0, r5
 80073ba:	6060      	str	r0, [r4, #4]
 80073bc:	6863      	ldr	r3, [r4, #4]
 80073be:	6123      	str	r3, [r4, #16]
 80073c0:	2300      	movs	r3, #0
 80073c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c6:	e7a7      	b.n	8007318 <_printf_i+0x118>
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	462a      	mov	r2, r5
 80073cc:	4639      	mov	r1, r7
 80073ce:	4630      	mov	r0, r6
 80073d0:	47c0      	blx	r8
 80073d2:	3001      	adds	r0, #1
 80073d4:	d0aa      	beq.n	800732c <_printf_i+0x12c>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	079b      	lsls	r3, r3, #30
 80073da:	d413      	bmi.n	8007404 <_printf_i+0x204>
 80073dc:	68e0      	ldr	r0, [r4, #12]
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	4298      	cmp	r0, r3
 80073e2:	bfb8      	it	lt
 80073e4:	4618      	movlt	r0, r3
 80073e6:	e7a3      	b.n	8007330 <_printf_i+0x130>
 80073e8:	2301      	movs	r3, #1
 80073ea:	464a      	mov	r2, r9
 80073ec:	4639      	mov	r1, r7
 80073ee:	4630      	mov	r0, r6
 80073f0:	47c0      	blx	r8
 80073f2:	3001      	adds	r0, #1
 80073f4:	d09a      	beq.n	800732c <_printf_i+0x12c>
 80073f6:	3501      	adds	r5, #1
 80073f8:	68e3      	ldr	r3, [r4, #12]
 80073fa:	9a03      	ldr	r2, [sp, #12]
 80073fc:	1a9b      	subs	r3, r3, r2
 80073fe:	42ab      	cmp	r3, r5
 8007400:	dcf2      	bgt.n	80073e8 <_printf_i+0x1e8>
 8007402:	e7eb      	b.n	80073dc <_printf_i+0x1dc>
 8007404:	2500      	movs	r5, #0
 8007406:	f104 0919 	add.w	r9, r4, #25
 800740a:	e7f5      	b.n	80073f8 <_printf_i+0x1f8>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1ac      	bne.n	800736a <_printf_i+0x16a>
 8007410:	7803      	ldrb	r3, [r0, #0]
 8007412:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007416:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800741a:	e76c      	b.n	80072f6 <_printf_i+0xf6>
 800741c:	08007575 	.word	0x08007575
 8007420:	08007586 	.word	0x08007586

08007424 <memcpy>:
 8007424:	b510      	push	{r4, lr}
 8007426:	1e43      	subs	r3, r0, #1
 8007428:	440a      	add	r2, r1
 800742a:	4291      	cmp	r1, r2
 800742c:	d100      	bne.n	8007430 <memcpy+0xc>
 800742e:	bd10      	pop	{r4, pc}
 8007430:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007438:	e7f7      	b.n	800742a <memcpy+0x6>

0800743a <memmove>:
 800743a:	4288      	cmp	r0, r1
 800743c:	b510      	push	{r4, lr}
 800743e:	eb01 0302 	add.w	r3, r1, r2
 8007442:	d807      	bhi.n	8007454 <memmove+0x1a>
 8007444:	1e42      	subs	r2, r0, #1
 8007446:	4299      	cmp	r1, r3
 8007448:	d00a      	beq.n	8007460 <memmove+0x26>
 800744a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800744e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007452:	e7f8      	b.n	8007446 <memmove+0xc>
 8007454:	4283      	cmp	r3, r0
 8007456:	d9f5      	bls.n	8007444 <memmove+0xa>
 8007458:	1881      	adds	r1, r0, r2
 800745a:	1ad2      	subs	r2, r2, r3
 800745c:	42d3      	cmn	r3, r2
 800745e:	d100      	bne.n	8007462 <memmove+0x28>
 8007460:	bd10      	pop	{r4, pc}
 8007462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007466:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800746a:	e7f7      	b.n	800745c <memmove+0x22>

0800746c <_realloc_r>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	4607      	mov	r7, r0
 8007470:	4614      	mov	r4, r2
 8007472:	460e      	mov	r6, r1
 8007474:	b921      	cbnz	r1, 8007480 <_realloc_r+0x14>
 8007476:	4611      	mov	r1, r2
 8007478:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800747c:	f7ff bc56 	b.w	8006d2c <_malloc_r>
 8007480:	b922      	cbnz	r2, 800748c <_realloc_r+0x20>
 8007482:	f7ff fc05 	bl	8006c90 <_free_r>
 8007486:	4625      	mov	r5, r4
 8007488:	4628      	mov	r0, r5
 800748a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800748c:	f000 f814 	bl	80074b8 <_malloc_usable_size_r>
 8007490:	42a0      	cmp	r0, r4
 8007492:	d20f      	bcs.n	80074b4 <_realloc_r+0x48>
 8007494:	4621      	mov	r1, r4
 8007496:	4638      	mov	r0, r7
 8007498:	f7ff fc48 	bl	8006d2c <_malloc_r>
 800749c:	4605      	mov	r5, r0
 800749e:	2800      	cmp	r0, #0
 80074a0:	d0f2      	beq.n	8007488 <_realloc_r+0x1c>
 80074a2:	4631      	mov	r1, r6
 80074a4:	4622      	mov	r2, r4
 80074a6:	f7ff ffbd 	bl	8007424 <memcpy>
 80074aa:	4631      	mov	r1, r6
 80074ac:	4638      	mov	r0, r7
 80074ae:	f7ff fbef 	bl	8006c90 <_free_r>
 80074b2:	e7e9      	b.n	8007488 <_realloc_r+0x1c>
 80074b4:	4635      	mov	r5, r6
 80074b6:	e7e7      	b.n	8007488 <_realloc_r+0x1c>

080074b8 <_malloc_usable_size_r>:
 80074b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074bc:	1f18      	subs	r0, r3, #4
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bfbc      	itt	lt
 80074c2:	580b      	ldrlt	r3, [r1, r0]
 80074c4:	18c0      	addlt	r0, r0, r3
 80074c6:	4770      	bx	lr

080074c8 <_init>:
 80074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ca:	bf00      	nop
 80074cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ce:	bc08      	pop	{r3}
 80074d0:	469e      	mov	lr, r3
 80074d2:	4770      	bx	lr

080074d4 <_fini>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	bf00      	nop
 80074d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074da:	bc08      	pop	{r3}
 80074dc:	469e      	mov	lr, r3
 80074de:	4770      	bx	lr
