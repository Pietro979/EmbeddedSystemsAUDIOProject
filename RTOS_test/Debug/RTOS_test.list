
RTOS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08009fb8  08009fb8  00019fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d0  0800a0d0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d0  0800a0d0  0001a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d8  0800a0d8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d8  0800a0d8  0001a0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a0e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005340  200001e8  0800a2c8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005528  0800a2c8  00025528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b65  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004759  00000000  00000000  00043d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f8  00000000  00000000  000484d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f0  00000000  00000000  00049cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000263bb  00000000  00000000  0004b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016721  00000000  00000000  0007167b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5c94  00000000  00000000  00087d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015da30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000662c  00000000  00000000  0015daac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fa0 	.word	0x08009fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009fa0 	.word	0x08009fa0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <MX_FREERTOS_Init+0x28>)
 8000576:	2100      	movs	r1, #0
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <MX_FREERTOS_Init+0x2c>)
 800057a:	f005 feb1 	bl	80062e0 <osThreadNew>
 800057e:	4602      	mov	r2, r0
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <MX_FREERTOS_Init+0x30>)
 8000582:	601a      	str	r2, [r3, #0]

  /* creation of USB */
  USBHandle = osThreadNew(StartTask02, NULL, &USB_attributes);
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <MX_FREERTOS_Init+0x34>)
 8000586:	2100      	movs	r1, #0
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <MX_FREERTOS_Init+0x38>)
 800058a:	f005 fea9 	bl	80062e0 <osThreadNew>
 800058e:	4602      	mov	r2, r0
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_FREERTOS_Init+0x3c>)
 8000592:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	0800a03c 	.word	0x0800a03c
 800059c:	080005b1 	.word	0x080005b1
 80005a0:	20004b20 	.word	0x20004b20
 80005a4:	0800a060 	.word	0x0800a060
 80005a8:	080005d5 	.word	0x080005d5
 80005ac:	20004b24 	.word	0x20004b24

080005b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005b8:	f008 fb68 	bl	8008c8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  	  {
  		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <StartDefaultTask+0x20>)
 80005c2:	f000 fe76 	bl	80012b2 <HAL_GPIO_TogglePin>
  		  osDelay(500);
 80005c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ca:	f005 ff2f 	bl	800642c <osDelay>
  		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80005ce:	e7f5      	b.n	80005bc <StartDefaultTask+0xc>
 80005d0:	40020c00 	.word	0x40020c00

080005d4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	  extern uint8_t MessageCounter;
	  extern uint8_t MessageLength;
	  extern uint8_t DataToSend[40];
	  for(;;)
	  {
		  if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_SET) {
 80005dc:	2101      	movs	r1, #1
 80005de:	4814      	ldr	r0, [pc, #80]	; (8000630 <StartTask02+0x5c>)
 80005e0:	f000 fe36 	bl	8001250 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d1f8      	bne.n	80005dc <StartTask02+0x8>
	  	  		osDelay(100);
 80005ea:	2064      	movs	r0, #100	; 0x64
 80005ec:	f005 ff1e 	bl	800642c <osDelay>
	  		  		if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin)	== GPIO_PIN_SET) {
 80005f0:	2101      	movs	r1, #1
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <StartTask02+0x5c>)
 80005f4:	f000 fe2c 	bl	8001250 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d1ee      	bne.n	80005dc <StartTask02+0x8>
	  	  	  			++MessageCounter;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <StartTask02+0x60>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <StartTask02+0x60>)
 8000608:	701a      	strb	r2, [r3, #0]
	  	  	  			MessageLength = sprintf(DataToSend, "Wiadomosc nr %d\n\r", MessageCounter);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <StartTask02+0x60>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	4909      	ldr	r1, [pc, #36]	; (8000638 <StartTask02+0x64>)
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <StartTask02+0x68>)
 8000614:	f009 f96a 	bl	80098ec <siprintf>
 8000618:	4603      	mov	r3, r0
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <StartTask02+0x6c>)
 800061e:	701a      	strb	r2, [r3, #0]
	  	  	  			CDC_Transmit_FS(DataToSend, MessageLength);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <StartTask02+0x6c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <StartTask02+0x68>)
 8000628:	f008 fc0a 	bl	8008e40 <CDC_Transmit_FS>
		  if (HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_SET) {
 800062c:	e7d6      	b.n	80005dc <StartTask02+0x8>
 800062e:	bf00      	nop
 8000630:	40020000 	.word	0x40020000
 8000634:	20000204 	.word	0x20000204
 8000638:	08009fc8 	.word	0x08009fc8
 800063c:	20004b28 	.word	0x20004b28
 8000640:	20000205 	.word	0x20000205

08000644 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
 800065e:	4b96      	ldr	r3, [pc, #600]	; (80008b8 <MX_GPIO_Init+0x274>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a95      	ldr	r2, [pc, #596]	; (80008b8 <MX_GPIO_Init+0x274>)
 8000664:	f043 0310 	orr.w	r3, r3, #16
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b93      	ldr	r3, [pc, #588]	; (80008b8 <MX_GPIO_Init+0x274>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0310 	and.w	r3, r3, #16
 8000672:	61bb      	str	r3, [r7, #24]
 8000674:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	4b8f      	ldr	r3, [pc, #572]	; (80008b8 <MX_GPIO_Init+0x274>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a8e      	ldr	r2, [pc, #568]	; (80008b8 <MX_GPIO_Init+0x274>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b8c      	ldr	r3, [pc, #560]	; (80008b8 <MX_GPIO_Init+0x274>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b88      	ldr	r3, [pc, #544]	; (80008b8 <MX_GPIO_Init+0x274>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a87      	ldr	r2, [pc, #540]	; (80008b8 <MX_GPIO_Init+0x274>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b85      	ldr	r3, [pc, #532]	; (80008b8 <MX_GPIO_Init+0x274>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b81      	ldr	r3, [pc, #516]	; (80008b8 <MX_GPIO_Init+0x274>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a80      	ldr	r2, [pc, #512]	; (80008b8 <MX_GPIO_Init+0x274>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b7e      	ldr	r3, [pc, #504]	; (80008b8 <MX_GPIO_Init+0x274>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b7a      	ldr	r3, [pc, #488]	; (80008b8 <MX_GPIO_Init+0x274>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a79      	ldr	r2, [pc, #484]	; (80008b8 <MX_GPIO_Init+0x274>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b77      	ldr	r3, [pc, #476]	; (80008b8 <MX_GPIO_Init+0x274>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b73      	ldr	r3, [pc, #460]	; (80008b8 <MX_GPIO_Init+0x274>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a72      	ldr	r2, [pc, #456]	; (80008b8 <MX_GPIO_Init+0x274>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b70      	ldr	r3, [pc, #448]	; (80008b8 <MX_GPIO_Init+0x274>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2118      	movs	r1, #24
 8000706:	486d      	ldr	r0, [pc, #436]	; (80008bc <MX_GPIO_Init+0x278>)
 8000708:	f000 fdba 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2101      	movs	r1, #1
 8000710:	486b      	ldr	r0, [pc, #428]	; (80008c0 <MX_GPIO_Init+0x27c>)
 8000712:	f000 fdb5 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000716:	2200      	movs	r2, #0
 8000718:	f24f 0110 	movw	r1, #61456	; 0xf010
 800071c:	4869      	ldr	r0, [pc, #420]	; (80008c4 <MX_GPIO_Init+0x280>)
 800071e:	f000 fdaf 	bl	8001280 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4;
 8000722:	2318      	movs	r3, #24
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4860      	ldr	r0, [pc, #384]	; (80008bc <MX_GPIO_Init+0x278>)
 800073a:	f000 fbef 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800073e:	2301      	movs	r3, #1
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	485a      	ldr	r0, [pc, #360]	; (80008c0 <MX_GPIO_Init+0x27c>)
 8000756:	f000 fbe1 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800075a:	2308      	movs	r3, #8
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800076a:	2305      	movs	r3, #5
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4852      	ldr	r0, [pc, #328]	; (80008c0 <MX_GPIO_Init+0x27c>)
 8000776:	f000 fbd1 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800077a:	2301      	movs	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800077e:	4b52      	ldr	r3, [pc, #328]	; (80008c8 <MX_GPIO_Init+0x284>)
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	484f      	ldr	r0, [pc, #316]	; (80008cc <MX_GPIO_Init+0x288>)
 800078e:	f000 fbc5 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000792:	2310      	movs	r3, #16
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007a2:	2306      	movs	r3, #6
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4847      	ldr	r0, [pc, #284]	; (80008cc <MX_GPIO_Init+0x288>)
 80007ae:	f000 fbb5 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007b2:	23e0      	movs	r3, #224	; 0xe0
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007c2:	2305      	movs	r3, #5
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	483f      	ldr	r0, [pc, #252]	; (80008cc <MX_GPIO_Init+0x288>)
 80007ce:	f000 fba5 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007d2:	2304      	movs	r3, #4
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	483a      	ldr	r0, [pc, #232]	; (80008d0 <MX_GPIO_Init+0x28c>)
 80007e6:	f000 fb99 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007fc:	2305      	movs	r3, #5
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4832      	ldr	r0, [pc, #200]	; (80008d0 <MX_GPIO_Init+0x28c>)
 8000808:	f000 fb88 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800080c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000810:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4827      	ldr	r0, [pc, #156]	; (80008c4 <MX_GPIO_Init+0x280>)
 8000826:	f000 fb79 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800082a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800083c:	2306      	movs	r3, #6
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	481e      	ldr	r0, [pc, #120]	; (80008c0 <MX_GPIO_Init+0x27c>)
 8000848:	f000 fb68 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800084c:	2320      	movs	r3, #32
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4819      	ldr	r0, [pc, #100]	; (80008c4 <MX_GPIO_Init+0x280>)
 8000860:	f000 fb5c 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000864:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086a:	2312      	movs	r3, #18
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086e:	2301      	movs	r3, #1
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000876:	2304      	movs	r3, #4
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_GPIO_Init+0x28c>)
 8000882:	f000 fb4b 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_GPIO_Init+0x290>)
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <MX_GPIO_Init+0x278>)
 800089a:	f000 fb3f 	bl	8000f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2006      	movs	r0, #6
 80008a4:	f000 fb10 	bl	8000ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008a8:	2006      	movs	r0, #6
 80008aa:	f000 fb29 	bl	8000f00 <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	10310000 	.word	0x10310000
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	10120000 	.word	0x10120000

080008d8 <HAL_GPIO_EXTI_Callback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 80008e2:	88fb      	ldrh	r3, [r7, #6]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d10a      	bne.n	80008fe <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin));
 80008e8:	2101      	movs	r1, #1
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <HAL_GPIO_EXTI_Callback+0x30>)
 80008ec:	f000 fcb0 	bl	8001250 <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <HAL_GPIO_EXTI_Callback+0x34>)
 80008fa:	f000 fcc1 	bl	8001280 <HAL_GPIO_WritePin>
	}
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40020000 	.word	0x40020000
 800090c:	40020c00 	.word	0x40020c00

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 f9bc 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f80a 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f7ff fe92 	bl	8000644 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000920:	f005 fc74 	bl	800620c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000924:	f7ff fe24 	bl	8000570 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000928:	f005 fca4 	bl	8006274 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800092c:	e7fe      	b.n	800092c <main+0x1c>
	...

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	; 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	; 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f008 ff13 	bl	800976a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <SystemClock_Config+0xc8>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a26      	ldr	r2, [pc, #152]	; (80009f8 <SystemClock_Config+0xc8>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <SystemClock_Config+0xc8>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <SystemClock_Config+0xcc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a20      	ldr	r2, [pc, #128]	; (80009fc <SystemClock_Config+0xcc>)
 800097a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <SystemClock_Config+0xcc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009a4:	2348      	movs	r3, #72	; 0x48
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009ac:	2303      	movs	r3, #3
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fe33 	bl	8002620 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c0:	f000 f830 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2302      	movs	r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2102      	movs	r1, #2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 f88d 	bl	8002b00 <HAL_RCC_ClockConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009ec:	f000 f81a 	bl	8000a24 <Error_Handler>
  }
}
 80009f0:	bf00      	nop
 80009f2:	3750      	adds	r7, #80	; 0x50
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a12:	f000 f95f 	bl	8000cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40001000 	.word	0x40001000

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	2036      	movs	r0, #54	; 0x36
 8000a9a:	f000 fa15 	bl	8000ec8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a9e:	2036      	movs	r0, #54	; 0x36
 8000aa0:	f000 fa2e 	bl	8000f00 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <HAL_InitTick+0xa4>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <HAL_InitTick+0xa4>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_InitTick+0xa4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 0310 	and.w	r3, r3, #16
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 f9f6 	bl	8002ebc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ad0:	f002 f9e0 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <HAL_InitTick+0xa8>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0c9b      	lsrs	r3, r3, #18
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_InitTick+0xac>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <HAL_InitTick+0xb0>)
 8000aec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_InitTick+0xac>)
 8000af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_InitTick+0xac>)
 8000af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_InitTick+0xac>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_InitTick+0xac>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <HAL_InitTick+0xac>)
 8000b0a:	f002 fa09 	bl	8002f20 <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d104      	bne.n	8000b1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <HAL_InitTick+0xac>)
 8000b16:	f002 fa38 	bl	8002f8a <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	431bde83 	.word	0x431bde83
 8000b30:	20004b78 	.word	0x20004b78
 8000b34:	40001000 	.word	0x40001000

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f000 fbb9 	bl	80012e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <TIM6_DAC_IRQHandler+0x10>)
 8000b82:	f002 fa26 	bl	8002fd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20004b78 	.word	0x20004b78

08000b90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <OTG_FS_IRQHandler+0x10>)
 8000b96:	f000 fd0f 	bl	80015b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000511c 	.word	0x2000511c

08000ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <_sbrk+0x5c>)
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_sbrk+0x60>)
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_sbrk+0x64>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <_sbrk+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d207      	bcs.n	8000be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd4:	f008 fd84 	bl	80096e0 <__errno>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	230c      	movs	r3, #12
 8000bdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	e009      	b.n	8000bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <_sbrk+0x64>)
 8000bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20020000 	.word	0x20020000
 8000c04:	00000400 	.word	0x00000400
 8000c08:	20000208 	.word	0x20000208
 8000c0c:	20005528 	.word	0x20005528

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <SystemInit+0x28>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <SystemInit+0x28>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SystemInit+0x28>)
 8000c26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c42:	e003      	b.n	8000c4c <LoopCopyDataInit>

08000c44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c4a:	3104      	adds	r1, #4

08000c4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c4c:	480b      	ldr	r0, [pc, #44]	; (8000c7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c54:	d3f6      	bcc.n	8000c44 <CopyDataInit>
  ldr  r2, =_sbss
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c58:	e002      	b.n	8000c60 <LoopFillZerobss>

08000c5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c5c:	f842 3b04 	str.w	r3, [r2], #4

08000c60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c64:	d3f9      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c66:	f7ff ffd3 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f008 fd3f 	bl	80096ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fe4f 	bl	8000910 <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c78:	0800a0e0 	.word	0x0800a0e0
  ldr  r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c80:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8000c84:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8000c88:	20005528 	.word	0x20005528

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_Init+0x40>)
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_Init+0x40>)
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_Init+0x40>)
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f8fa 	bl	8000eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff fee0 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff feb6 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20004bb8 	.word	0x20004bb8

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20004bb8 	.word	0x20004bb8

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_Delay+0x40>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff4c 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eda:	f7ff ff61 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f7ff ffb1 	bl	8000e4c <NVIC_EncodePriority>
 8000eea:	4602      	mov	r2, r0
 8000eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff80 	bl	8000df8 <__NVIC_SetPriority>
}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff54 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e16b      	b.n	8001210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 815a 	bne.w	800120a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d00b      	beq.n	8000f76 <HAL_GPIO_Init+0x5a>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d007      	beq.n	8000f76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f6a:	2b11      	cmp	r3, #17
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b12      	cmp	r3, #18
 8000f74:	d130      	bne.n	8000fd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 0201 	and.w	r2, r3, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0xfc>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b12      	cmp	r3, #18
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80b4 	beq.w	800120a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <HAL_GPIO_Init+0x308>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a5e      	ldr	r2, [pc, #376]	; (8001224 <HAL_GPIO_Init+0x308>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <HAL_GPIO_Init+0x308>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a51      	ldr	r2, [pc, #324]	; (800122c <HAL_GPIO_Init+0x310>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02b      	beq.n	8001142 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a50      	ldr	r2, [pc, #320]	; (8001230 <HAL_GPIO_Init+0x314>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4f      	ldr	r2, [pc, #316]	; (8001234 <HAL_GPIO_Init+0x318>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4e      	ldr	r2, [pc, #312]	; (8001238 <HAL_GPIO_Init+0x31c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4d      	ldr	r2, [pc, #308]	; (800123c <HAL_GPIO_Init+0x320>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <HAL_GPIO_Init+0x324>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4b      	ldr	r2, [pc, #300]	; (8001244 <HAL_GPIO_Init+0x328>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4a      	ldr	r2, [pc, #296]	; (8001248 <HAL_GPIO_Init+0x32c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x20a>
 8001122:	2307      	movs	r3, #7
 8001124:	e00e      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001126:	2308      	movs	r3, #8
 8001128:	e00c      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112a:	2306      	movs	r3, #6
 800112c:	e00a      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112e:	2305      	movs	r3, #5
 8001130:	e008      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001132:	2304      	movs	r3, #4
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001136:	2303      	movs	r3, #3
 8001138:	e004      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113a:	2302      	movs	r3, #2
 800113c:	e002      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001142:	2300      	movs	r3, #0
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	4093      	lsls	r3, r2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001154:	4934      	ldr	r1, [pc, #208]	; (8001228 <HAL_GPIO_Init+0x30c>)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <HAL_GPIO_Init+0x330>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001186:	4a31      	ldr	r2, [pc, #196]	; (800124c <HAL_GPIO_Init+0x330>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800118c:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_GPIO_Init+0x330>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b0:	4a26      	ldr	r2, [pc, #152]	; (800124c <HAL_GPIO_Init+0x330>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <HAL_GPIO_Init+0x330>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <HAL_GPIO_Init+0x330>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <HAL_GPIO_Init+0x330>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001204:	4a11      	ldr	r2, [pc, #68]	; (800124c <HAL_GPIO_Init+0x330>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3301      	adds	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	f67f ae90 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001218:	bf00      	nop
 800121a:	3724      	adds	r7, #36	; 0x24
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40023800 	.word	0x40023800
 8001228:	40013800 	.word	0x40013800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400
 8001234:	40020800 	.word	0x40020800
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40021000 	.word	0x40021000
 8001240:	40021400 	.word	0x40021400
 8001244:	40021800 	.word	0x40021800
 8001248:	40021c00 	.word	0x40021c00
 800124c:	40013c00 	.word	0x40013c00

08001250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e001      	b.n	8001272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800129c:	e003      	b.n	80012a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	619a      	str	r2, [r3, #24]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	401a      	ands	r2, r3
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d104      	bne.n	80012d6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	041a      	lsls	r2, r3, #16
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fae6 	bl	80008d8 <HAL_GPIO_EXTI_Callback>
  }
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40013c00 	.word	0x40013c00

08001318 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	b08f      	sub	sp, #60	; 0x3c
 800131c:	af0a      	add	r7, sp, #40	; 0x28
 800131e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e10f      	b.n	800154a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d106      	bne.n	800134a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f007 fec1 	bl	80090cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2203      	movs	r2, #3
 800134e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d102      	bne.n	8001364 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f002 f92c 	bl	80035c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	687e      	ldr	r6, [r7, #4]
 8001376:	466d      	mov	r5, sp
 8001378:	f106 0410 	add.w	r4, r6, #16
 800137c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001384:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001388:	e885 0003 	stmia.w	r5, {r0, r1}
 800138c:	1d33      	adds	r3, r6, #4
 800138e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f002 f803 	bl	800339c <USB_CoreInit>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0d0      	b.n	800154a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 f91a 	bl	80035e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e04a      	b.n	8001450 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	333d      	adds	r3, #61	; 0x3d
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	333c      	adds	r3, #60	; 0x3c
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	b298      	uxth	r0, r3
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	1a9b      	subs	r3, r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	3342      	adds	r3, #66	; 0x42
 80013f6:	4602      	mov	r2, r0
 80013f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	333f      	adds	r3, #63	; 0x3f
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	1a9b      	subs	r3, r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	3344      	adds	r3, #68	; 0x44
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3348      	adds	r3, #72	; 0x48
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3350      	adds	r3, #80	; 0x50
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	3301      	adds	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3af      	bcc.n	80013ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e044      	b.n	80014ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	1a9b      	subs	r3, r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	3301      	adds	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3b5      	bcc.n	8001460 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	687e      	ldr	r6, [r7, #4]
 80014fc:	466d      	mov	r5, sp
 80014fe:	f106 0410 	add.w	r4, r6, #16
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001512:	1d33      	adds	r3, r6, #4
 8001514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001516:	6838      	ldr	r0, [r7, #0]
 8001518:	f002 f890 	bl	800363c <USB_DevInit>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00d      	b.n	800154a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f003 f8d8 	bl	80046f8 <USB_DevDisconnect>

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001552 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_PCD_Start+0x1c>
 800156a:	2302      	movs	r3, #2
 800156c:	e020      	b.n	80015b0 <HAL_PCD_Start+0x5e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	2b01      	cmp	r3, #1
 800157c:	d109      	bne.n	8001592 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001582:	2b01      	cmp	r3, #1
 8001584:	d005      	beq.n	8001592 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f002 f804 	bl	80035a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 f888 	bl	80046b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b08d      	sub	sp, #52	; 0x34
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 f946 	bl	8004860 <USB_GetMode>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 839d 	bne.w	8001d16 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 f8aa 	bl	800473a <USB_ReadInterrupts>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8393 	beq.w	8001d14 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 f8a1 	bl	800473a <USB_ReadInterrupts>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d107      	bne.n	8001612 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f002 0202 	and.w	r2, r2, #2
 8001610:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f003 f88f 	bl	800473a <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b10      	cmp	r3, #16
 8001624:	d161      	bne.n	80016ea <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699a      	ldr	r2, [r3, #24]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0210 	bic.w	r2, r2, #16
 8001634:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 020f 	and.w	r2, r3, #15
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	3304      	adds	r3, #4
 8001654:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	0c5b      	lsrs	r3, r3, #17
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	2b02      	cmp	r3, #2
 8001660:	d124      	bne.n	80016ac <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d035      	beq.n	80016da <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800167c:	b29b      	uxth	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	6a38      	ldr	r0, [r7, #32]
 8001682:	f002 fef5 	bl	8004470 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001692:	441a      	add	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a4:	441a      	add	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	619a      	str	r2, [r3, #24]
 80016aa:	e016      	b.n	80016da <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	0c5b      	lsrs	r3, r3, #17
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	d110      	bne.n	80016da <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016be:	2208      	movs	r2, #8
 80016c0:	4619      	mov	r1, r3
 80016c2:	6a38      	ldr	r0, [r7, #32]
 80016c4:	f002 fed4 	bl	8004470 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	699a      	ldr	r2, [r3, #24]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d4:	441a      	add	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699a      	ldr	r2, [r3, #24]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0210 	orr.w	r2, r2, #16
 80016e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 f823 	bl	800473a <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016fe:	d16e      	bne.n	80017de <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f003 f829 	bl	8004760 <USB_ReadDevAllOutEpInterrupt>
 800170e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001710:	e062      	b.n	80017d8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d057      	beq.n	80017cc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f003 f84e 	bl	80047c8 <USB_ReadDevOutEPInterrupt>
 800172c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00c      	beq.n	8001752 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	015a      	lsls	r2, r3, #5
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001744:	461a      	mov	r2, r3
 8001746:	2301      	movs	r3, #1
 8001748:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800174a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fdb1 	bl	80022b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00c      	beq.n	8001776 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	015a      	lsls	r2, r3, #5
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	4413      	add	r3, r2
 8001764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001768:	461a      	mov	r2, r3
 800176a:	2308      	movs	r3, #8
 800176c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800176e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 feab 	bl	80024cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178c:	461a      	mov	r2, r3
 800178e:	2310      	movs	r3, #16
 8001790:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a8:	461a      	mov	r2, r3
 80017aa:	2320      	movs	r3, #32
 80017ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d009      	beq.n	80017cc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017c4:	461a      	mov	r2, r3
 80017c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	3301      	adds	r3, #1
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d199      	bne.n	8001712 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 ffa9 	bl	800473a <USB_ReadInterrupts>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017f2:	f040 80c0 	bne.w	8001976 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 ffca 	bl	8004794 <USB_ReadDevAllInEpInterrupt>
 8001800:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001806:	e0b2      	b.n	800196e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80a7 	beq.w	8001962 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f002 fff0 	bl	8004804 <USB_ReadDevInEPInterrupt>
 8001824:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d057      	beq.n	80018e0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	2201      	movs	r2, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	69f9      	ldr	r1, [r7, #28]
 800184c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001850:	4013      	ands	r3, r2
 8001852:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	4413      	add	r3, r2
 800185c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001860:	461a      	mov	r2, r3
 8001862:	2301      	movs	r3, #1
 8001864:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d132      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3348      	adds	r3, #72	; 0x48
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4403      	add	r3, r0
 800188e:	3344      	adds	r3, #68	; 0x44
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4419      	add	r1, r3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4403      	add	r3, r0
 80018a2:	3348      	adds	r3, #72	; 0x48
 80018a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d113      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x31c>
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	3350      	adds	r3, #80	; 0x50
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d108      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018cc:	461a      	mov	r2, r3
 80018ce:	2101      	movs	r1, #1
 80018d0:	f002 fff8 	bl	80048c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f007 fc85 	bl	80091ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d008      	beq.n	80018fc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f6:	461a      	mov	r2, r3
 80018f8:	2308      	movs	r3, #8
 80018fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4413      	add	r3, r2
 800190e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001912:	461a      	mov	r2, r3
 8001914:	2310      	movs	r3, #16
 8001916:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	4413      	add	r3, r2
 800192a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800192e:	461a      	mov	r2, r3
 8001930:	2340      	movs	r3, #64	; 0x40
 8001932:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d008      	beq.n	8001950 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4413      	add	r3, r2
 8001946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800194a:	461a      	mov	r2, r3
 800194c:	2302      	movs	r3, #2
 800194e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800195a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fc1b 	bl	8002198 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001970:	2b00      	cmp	r3, #0
 8001972:	f47f af49 	bne.w	8001808 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f002 fedd 	bl	800473a <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800198a:	d122      	bne.n	80019d2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d108      	bne.n	80019bc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019b2:	2100      	movs	r1, #0
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fe27 	bl	8002608 <HAL_PCDEx_LPM_Callback>
 80019ba:	e002      	b.n	80019c2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f007 fc8b 	bl	80092d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 feaf 	bl	800473a <USB_ReadInterrupts>
 80019dc:	4603      	mov	r3, r0
 80019de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e6:	d112      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f007 fc47 	bl	800928c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a0c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 fe91 	bl	800473a <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a22:	f040 80c7 	bne.w	8001bb4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2110      	movs	r1, #16
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 ff5f 	bl	8003904 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4a:	e056      	b.n	8001afa <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	015a      	lsls	r2, r3, #5
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a70:	0151      	lsls	r1, r2, #5
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	440a      	add	r2, r1
 8001a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a7e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a90:	0151      	lsls	r1, r2, #5
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	440a      	add	r2, r1
 8001a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aac:	461a      	mov	r2, r3
 8001aae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ab2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac4:	0151      	lsls	r1, r2, #5
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	440a      	add	r2, r1
 8001aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ad2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae4:	0151      	lsls	r1, r2, #5
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	440a      	add	r2, r1
 8001aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001aee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001af2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	3301      	adds	r3, #1
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d3a3      	bcc.n	8001a4c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d016      	beq.n	8001b4e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b30:	f043 030b 	orr.w	r3, r3, #11
 8001b34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b46:	f043 030b 	orr.w	r3, r3, #11
 8001b4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4c:	e015      	b.n	8001b7a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b60:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b74:	f043 030b 	orr.w	r3, r3, #11
 8001b78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f002 fe90 	bl	80048c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fdbe 	bl	800473a <USB_ReadInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bc8:	d124      	bne.n	8001c14 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fe54 	bl	800487c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fef4 	bl	80039c6 <USB_GetDevSpeed>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681c      	ldr	r4, [r3, #0]
 8001bea:	f001 f947 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8001bee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f001 fc31 	bl	8003460 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f007 fb1b 	bl	800923a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fd8e 	bl	800473a <USB_ReadInterrupts>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d10a      	bne.n	8001c3e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f007 faf8 	bl	800921e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f002 0208 	and.w	r2, r2, #8
 8001c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 fd79 	bl	800473a <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c52:	d10f      	bne.n	8001c74 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f007 fb5a 	bl	8009318 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fd5e 	bl	800473a <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c88:	d10f      	bne.n	8001caa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f007 fb2d 	bl	80092f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fd43 	bl	800473a <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbe:	d10a      	bne.n	8001cd6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f007 fb3b 	bl	800933c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fd2d 	bl	800473a <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d115      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f007 fb2b 	bl	8009358 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	e000      	b.n	8001d16 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001d14:	bf00      	nop
    }
  }
}
 8001d16:	3734      	adds	r7, #52	; 0x34
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}

08001d1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_PCD_SetAddress+0x1a>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e013      	b.n	8001d5e <HAL_PCD_SetAddress+0x42>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	78fa      	ldrb	r2, [r7, #3]
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 fc8b 	bl	800466a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	4608      	mov	r0, r1
 8001d70:	4611      	mov	r1, r2
 8001d72:	461a      	mov	r2, r3
 8001d74:	4603      	mov	r3, r0
 8001d76:	70fb      	strb	r3, [r7, #3]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	803b      	strh	r3, [r7, #0]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da0f      	bge.n	8001dac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	3338      	adds	r3, #56	; 0x38
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	3304      	adds	r3, #4
 8001da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	705a      	strb	r2, [r3, #1]
 8001daa:	e00f      	b.n	8001dcc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	f003 020f 	and.w	r2, r3, #15
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dd8:	883a      	ldrh	r2, [r7, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	78ba      	ldrb	r2, [r7, #2]
 8001de2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	785b      	ldrb	r3, [r3, #1]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001df6:	78bb      	ldrb	r3, [r7, #2]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d102      	bne.n	8001e02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_PCD_EP_Open+0xaa>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e00e      	b.n	8001e2e <HAL_PCD_EP_Open+0xc8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fdf6 	bl	8003a10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e2c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	da0f      	bge.n	8001e6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	3338      	adds	r3, #56	; 0x38
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	705a      	strb	r2, [r3, #1]
 8001e68:	e00f      	b.n	8001e8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 020f 	and.w	r2, r3, #15
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_PCD_EP_Close+0x6e>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e00e      	b.n	8001ec2 <HAL_PCD_EP_Close+0x8c>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68f9      	ldr	r1, [r7, #12]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 fe34 	bl	8003b20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	7afb      	ldrb	r3, [r7, #11]
 8001edc:	f003 020f 	and.w	r2, r3, #15
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d102      	bne.n	8001f26 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	6979      	ldr	r1, [r7, #20]
 8001f3e:	f002 f90f 	bl	8004160 <USB_EP0StartXfer>
 8001f42:	e008      	b.n	8001f56 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6979      	ldr	r1, [r7, #20]
 8001f52:	f001 fec1 	bl	8003cd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f003 020f 	and.w	r2, r3, #15
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa0:	7afb      	ldrb	r3, [r7, #11]
 8001fa2:	f003 020f 	and.w	r2, r3, #15
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	3338      	adds	r3, #56	; 0x38
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d102      	bne.n	8001fea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fea:	7afb      	ldrb	r3, [r7, #11]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	6979      	ldr	r1, [r7, #20]
 8002002:	f002 f8ad 	bl	8004160 <USB_EP0StartXfer>
 8002006:	e008      	b.n	800201a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	6979      	ldr	r1, [r7, #20]
 8002016:	f001 fe5f 	bl	8003cd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f003 020f 	and.w	r2, r3, #15
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	d901      	bls.n	8002042 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e050      	b.n	80020e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002046:	2b00      	cmp	r3, #0
 8002048:	da0f      	bge.n	800206a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	3338      	adds	r3, #56	; 0x38
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	705a      	strb	r2, [r3, #1]
 8002068:	e00d      	b.n	8002086 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_PCD_EP_SetStall+0x82>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e01e      	b.n	80020e4 <HAL_PCD_EP_SetStall+0xc0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f002 fa04 	bl	80044c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	b2d9      	uxtb	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020d4:	461a      	mov	r2, r3
 80020d6:	f002 fbf5 	bl	80048c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 020f 	and.w	r2, r3, #15
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d901      	bls.n	800210a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e042      	b.n	8002190 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800210a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210e:	2b00      	cmp	r3, #0
 8002110:	da0f      	bge.n	8002132 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 020f 	and.w	r2, r3, #15
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	3338      	adds	r3, #56	; 0x38
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	3304      	adds	r3, #4
 8002128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	705a      	strb	r2, [r3, #1]
 8002130:	e00f      	b.n	8002152 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 020f 	and.w	r2, r3, #15
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_PCD_EP_ClrStall+0x86>
 800216e:	2302      	movs	r3, #2
 8002170:	e00e      	b.n	8002190 <HAL_PCD_EP_ClrStall+0xa4>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68f9      	ldr	r1, [r7, #12]
 8002180:	4618      	mov	r0, r3
 8002182:	f002 fa0c 	bl	800459e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af02      	add	r7, sp, #8
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	3338      	adds	r3, #56	; 0x38
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	3304      	adds	r3, #4
 80021be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d901      	bls.n	80021d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e06c      	b.n	80022aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d902      	bls.n	80021ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	3303      	adds	r3, #3
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021f4:	e02b      	b.n	800224e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	429a      	cmp	r2, r3
 800220a:	d902      	bls.n	8002212 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3303      	adds	r3, #3
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	68d9      	ldr	r1, [r3, #12]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800222a:	b2db      	uxtb	r3, r3
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	4603      	mov	r3, r0
 8002230:	6978      	ldr	r0, [r7, #20]
 8002232:	f002 f8e8 	bl	8004406 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	441a      	add	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	441a      	add	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	b29b      	uxth	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	429a      	cmp	r2, r3
 8002262:	d809      	bhi.n	8002278 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	699a      	ldr	r2, [r3, #24]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800226c:	429a      	cmp	r2, r3
 800226e:	d203      	bcs.n	8002278 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1be      	bne.n	80021f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	429a      	cmp	r2, r3
 8002282:	d811      	bhi.n	80022a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	43db      	mvns	r3, r3
 800229e:	6939      	ldr	r1, [r7, #16]
 80022a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022a4:	4013      	ands	r3, r2
 80022a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	333c      	adds	r3, #60	; 0x3c
 80022cc:	3304      	adds	r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	f040 80a0 	bne.w	800242c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d015      	beq.n	8002322 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a72      	ldr	r2, [pc, #456]	; (80024c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	f240 80dd 	bls.w	80024ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80d7 	beq.w	80024ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002318:	461a      	mov	r2, r3
 800231a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800231e:	6093      	str	r3, [r2, #8]
 8002320:	e0cb      	b.n	80024ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d009      	beq.n	8002340 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002338:	461a      	mov	r2, r3
 800233a:	2320      	movs	r3, #32
 800233c:	6093      	str	r3, [r2, #8]
 800233e:	e0bc      	b.n	80024ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 80b7 	bne.w	80024ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a5d      	ldr	r2, [pc, #372]	; (80024c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d90f      	bls.n	8002374 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236a:	461a      	mov	r2, r3
 800236c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002370:	6093      	str	r3, [r2, #8]
 8002372:	e0a2      	b.n	80024ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002386:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	0159      	lsls	r1, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	440b      	add	r3, r1
 8002390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800239a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4403      	add	r3, r0
 80023aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4403      	add	r3, r0
 80023d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4419      	add	r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4403      	add	r3, r0
 80023e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d114      	bne.n	800241e <PCD_EP_OutXfrComplete_int+0x16a>
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d108      	bne.n	800241e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002416:	461a      	mov	r2, r3
 8002418:	2101      	movs	r1, #1
 800241a:	f002 fa53 	bl	80048c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f006 fec5 	bl	80091b4 <HAL_PCD_DataOutStageCallback>
 800242a:	e046      	b.n	80024ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d124      	bne.n	800247e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244a:	461a      	mov	r2, r3
 800244c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002450:	6093      	str	r3, [r2, #8]
 8002452:	e032      	b.n	80024ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b00      	cmp	r3, #0
 800245c:	d008      	beq.n	8002470 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246a:	461a      	mov	r2, r3
 800246c:	2320      	movs	r3, #32
 800246e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4619      	mov	r1, r3
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f006 fe9c 	bl	80091b4 <HAL_PCD_DataOutStageCallback>
 800247c:	e01d      	b.n	80024ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d114      	bne.n	80024ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d108      	bne.n	80024ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024a6:	461a      	mov	r2, r3
 80024a8:	2100      	movs	r1, #0
 80024aa:	f002 fa0b 	bl	80048c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f006 fe7d 	bl	80091b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	4f54300a 	.word	0x4f54300a
 80024c8:	4f54310a 	.word	0x4f54310a

080024cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	333c      	adds	r3, #60	; 0x3c
 80024e4:	3304      	adds	r3, #4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <PCD_EP_OutSetupPacket_int+0x88>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d90e      	bls.n	8002520 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	461a      	mov	r2, r3
 800251a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800251e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f006 fe35 	bl	8009190 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <PCD_EP_OutSetupPacket_int+0x88>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d90c      	bls.n	8002548 <PCD_EP_OutSetupPacket_int+0x7c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d108      	bne.n	8002548 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002540:	461a      	mov	r2, r3
 8002542:	2101      	movs	r1, #1
 8002544:	f002 f9be 	bl	80048c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	4f54300a 	.word	0x4f54300a

08002558 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
 8002564:	4613      	mov	r3, r2
 8002566:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d107      	bne.n	8002586 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002576:	883b      	ldrh	r3, [r7, #0]
 8002578:	0419      	lsls	r1, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	430a      	orrs	r2, r1
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
 8002584:	e028      	b.n	80025d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	4413      	add	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e00d      	b.n	80025b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3340      	adds	r3, #64	; 0x40
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	4413      	add	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	3301      	adds	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	429a      	cmp	r2, r3
 80025be:	d3ec      	bcc.n	800259a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025c0:	883b      	ldrh	r3, [r7, #0]
 80025c2:	0418      	lsls	r0, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	4302      	orrs	r2, r0
 80025d0:	3340      	adds	r3, #64	; 0x40
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e25b      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d075      	beq.n	800272a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263e:	4ba3      	ldr	r3, [pc, #652]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d00c      	beq.n	8002664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264a:	4ba0      	ldr	r3, [pc, #640]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002652:	2b08      	cmp	r3, #8
 8002654:	d112      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4b9d      	ldr	r3, [pc, #628]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002662:	d10b      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	4b99      	ldr	r3, [pc, #612]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d05b      	beq.n	8002728 <HAL_RCC_OscConfig+0x108>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d157      	bne.n	8002728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e236      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x74>
 8002686:	4b91      	ldr	r3, [pc, #580]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a90      	ldr	r2, [pc, #576]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e01d      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x98>
 800269e:	4b8b      	ldr	r3, [pc, #556]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a8a      	ldr	r2, [pc, #552]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a87      	ldr	r2, [pc, #540]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 80026b8:	4b84      	ldr	r3, [pc, #528]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a83      	ldr	r2, [pc, #524]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b81      	ldr	r3, [pc, #516]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a80      	ldr	r2, [pc, #512]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7fe fb10 	bl	8000cfc <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7fe fb0c 	bl	8000cfc <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1fb      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0xc0>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe fafc 	bl	8000cfc <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe faf8 	bl	8000cfc <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1e7      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	4b6c      	ldr	r3, [pc, #432]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0xe8>
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d063      	beq.n	80027fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002736:	4b65      	ldr	r3, [pc, #404]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800274a:	2b08      	cmp	r3, #8
 800274c:	d11c      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b5f      	ldr	r3, [pc, #380]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1bb      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4b56      	ldr	r3, [pc, #344]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4952      	ldr	r1, [pc, #328]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	e03a      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002790:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <HAL_RCC_OscConfig+0x2b0>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fab1 	bl	8000cfc <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe faad 	bl	8000cfc <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e19c      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b43      	ldr	r3, [pc, #268]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4940      	ldr	r1, [pc, #256]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d2:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_RCC_OscConfig+0x2b0>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fa90 	bl	8000cfc <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e0:	f7fe fa8c 	bl	8000cfc <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e17b      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d030      	beq.n	800286c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002812:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_RCC_OscConfig+0x2b4>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fa70 	bl	8000cfc <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002820:	f7fe fa6c 	bl	8000cfc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e15b      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x200>
 800283e:	e015      	b.n	800286c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002840:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_OscConfig+0x2b4>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7fe fa59 	bl	8000cfc <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284e:	f7fe fa55 	bl	8000cfc <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e144      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f0      	bne.n	800284e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a0 	beq.w	80029ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10f      	bne.n	80028aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002898:	6413      	str	r3, [r2, #64]	; 0x40
 800289a:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a6:	2301      	movs	r3, #1
 80028a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_OscConfig+0x2b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d121      	bne.n	80028fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_RCC_OscConfig+0x2b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_RCC_OscConfig+0x2b8>)
 80028bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c2:	f7fe fa1b 	bl	8000cfc <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	e011      	b.n	80028ee <HAL_RCC_OscConfig+0x2ce>
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470000 	.word	0x42470000
 80028d4:	42470e80 	.word	0x42470e80
 80028d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe fa0e 	bl	8000cfc <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0fd      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_RCC_OscConfig+0x4d4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d106      	bne.n	8002910 <HAL_RCC_OscConfig+0x2f0>
 8002902:	4b7d      	ldr	r3, [pc, #500]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a7c      	ldr	r2, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	e01c      	b.n	800294a <HAL_RCC_OscConfig+0x32a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b05      	cmp	r3, #5
 8002916:	d10c      	bne.n	8002932 <HAL_RCC_OscConfig+0x312>
 8002918:	4b77      	ldr	r3, [pc, #476]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a76      	ldr	r2, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	4b74      	ldr	r3, [pc, #464]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a73      	ldr	r2, [pc, #460]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	e00b      	b.n	800294a <HAL_RCC_OscConfig+0x32a>
 8002932:	4b71      	ldr	r3, [pc, #452]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a70      	ldr	r2, [pc, #448]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
 800293e:	4b6e      	ldr	r3, [pc, #440]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a6d      	ldr	r2, [pc, #436]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d015      	beq.n	800297e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7fe f9d3 	bl	8000cfc <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe f9cf 	bl	8000cfc <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0bc      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ee      	beq.n	800295a <HAL_RCC_OscConfig+0x33a>
 800297c:	e014      	b.n	80029a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe f9bd 	bl	8000cfc <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe f9b9 	bl	8000cfc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e0a6      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ee      	bne.n	8002986 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d105      	bne.n	80029ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ae:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a51      	ldr	r2, [pc, #324]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8092 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c4:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d05c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d141      	bne.n	8002a5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d8:	4b48      	ldr	r3, [pc, #288]	; (8002afc <HAL_RCC_OscConfig+0x4dc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe f98d 	bl	8000cfc <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe f989 	bl	8000cfc <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e078      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f8:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	019b      	lsls	r3, r3, #6
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	061b      	lsls	r3, r3, #24
 8002a28:	4933      	ldr	r1, [pc, #204]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2e:	4b33      	ldr	r3, [pc, #204]	; (8002afc <HAL_RCC_OscConfig+0x4dc>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe f962 	bl	8000cfc <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe f95e 	bl	8000cfc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e04d      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x41c>
 8002a5a:	e045      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <HAL_RCC_OscConfig+0x4dc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe f94b 	bl	8000cfc <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fe f947 	bl	8000cfc <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e036      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x44a>
 8002a88:	e02e      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e029      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d11c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d115      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002abe:	4013      	ands	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d106      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40007000 	.word	0x40007000
 8002af8:	40023800 	.word	0x40023800
 8002afc:	42470060 	.word	0x42470060

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0cc      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d90c      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d044      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d119      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e067      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4934      	ldr	r1, [pc, #208]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7fe f884 	bl	8000cfc <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7fe f880 	bl	8000cfc <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e04f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d20c      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
 8002c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd feec 	bl	8000a84 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	0800a084 	.word	0x0800a084
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	20000004 	.word	0x20000004

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d007      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x32>
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x38>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 80b4 	bne.w	8002e60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cfa:	60bb      	str	r3, [r7, #8]
       break;
 8002cfc:	e0b3      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfe:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d00:	60bb      	str	r3, [r7, #8]
      break;
 8002d02:	e0b0      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b5a      	ldr	r3, [pc, #360]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0e:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04a      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	f04f 0400 	mov.w	r4, #0
 8002d24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	ea03 0501 	and.w	r5, r3, r1
 8002d30:	ea04 0602 	and.w	r6, r4, r2
 8002d34:	4629      	mov	r1, r5
 8002d36:	4632      	mov	r2, r6
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	f04f 0400 	mov.w	r4, #0
 8002d40:	0154      	lsls	r4, r2, #5
 8002d42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d46:	014b      	lsls	r3, r1, #5
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	1b49      	subs	r1, r1, r5
 8002d4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f04f 0400 	mov.w	r4, #0
 8002d5a:	0194      	lsls	r4, r2, #6
 8002d5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d60:	018b      	lsls	r3, r1, #6
 8002d62:	1a5b      	subs	r3, r3, r1
 8002d64:	eb64 0402 	sbc.w	r4, r4, r2
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	00e2      	lsls	r2, r4, #3
 8002d72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d76:	00d9      	lsls	r1, r3, #3
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4614      	mov	r4, r2
 8002d7c:	195b      	adds	r3, r3, r5
 8002d7e:	eb44 0406 	adc.w	r4, r4, r6
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	0262      	lsls	r2, r4, #9
 8002d8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d90:	0259      	lsls	r1, r3, #9
 8002d92:	460b      	mov	r3, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	4621      	mov	r1, r4
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f04f 0400 	mov.w	r4, #0
 8002da0:	461a      	mov	r2, r3
 8002da2:	4623      	mov	r3, r4
 8002da4:	f7fd fa64 	bl	8000270 <__aeabi_uldivmod>
 8002da8:	4603      	mov	r3, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	e049      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	f04f 0400 	mov.w	r4, #0
 8002dba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	ea03 0501 	and.w	r5, r3, r1
 8002dc6:	ea04 0602 	and.w	r6, r4, r2
 8002dca:	4629      	mov	r1, r5
 8002dcc:	4632      	mov	r2, r6
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f04f 0400 	mov.w	r4, #0
 8002dd6:	0154      	lsls	r4, r2, #5
 8002dd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ddc:	014b      	lsls	r3, r1, #5
 8002dde:	4619      	mov	r1, r3
 8002de0:	4622      	mov	r2, r4
 8002de2:	1b49      	subs	r1, r1, r5
 8002de4:	eb62 0206 	sbc.w	r2, r2, r6
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	f04f 0400 	mov.w	r4, #0
 8002df0:	0194      	lsls	r4, r2, #6
 8002df2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002df6:	018b      	lsls	r3, r1, #6
 8002df8:	1a5b      	subs	r3, r3, r1
 8002dfa:	eb64 0402 	sbc.w	r4, r4, r2
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e0c:	00d9      	lsls	r1, r3, #3
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4614      	mov	r4, r2
 8002e12:	195b      	adds	r3, r3, r5
 8002e14:	eb44 0406 	adc.w	r4, r4, r6
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	02a2      	lsls	r2, r4, #10
 8002e22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e26:	0299      	lsls	r1, r3, #10
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4614      	mov	r4, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	4621      	mov	r1, r4
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f04f 0400 	mov.w	r4, #0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4623      	mov	r3, r4
 8002e3a:	f7fd fa19 	bl	8000270 <__aeabi_uldivmod>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	460c      	mov	r4, r1
 8002e42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	0c1b      	lsrs	r3, r3, #16
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	60bb      	str	r3, [r7, #8]
      break;
 8002e5e:	e002      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e62:	60bb      	str	r3, [r7, #8]
      break;
 8002e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e66:	68bb      	ldr	r3, [r7, #8]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	00f42400 	.word	0x00f42400
 8002e78:	007a1200 	.word	0x007a1200

08002e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000000 	.word	0x20000000

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e98:	f7ff fff0 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002e9c:	4601      	mov	r1, r0
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0a9b      	lsrs	r3, r3, #10
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4a03      	ldr	r2, [pc, #12]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	0800a094 	.word	0x0800a094

08002ebc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	220f      	movs	r2, #15
 8002eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_RCC_GetClockConfig+0x5c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0203 	and.w	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002efe:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <HAL_RCC_GetClockConfig+0x60>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40023c00 	.word	0x40023c00

08002f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e01d      	b.n	8002f6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f815 	bl	8002f76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f000 f968 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b06      	cmp	r3, #6
 8002fb2:	d007      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d122      	bne.n	800302e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d11b      	bne.n	800302e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0202 	mvn.w	r2, #2
 8002ffe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8ee 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 800301a:	e005      	b.n	8003028 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f8e0 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8f1 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b04      	cmp	r3, #4
 800303a:	d122      	bne.n	8003082 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d11b      	bne.n	8003082 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f06f 0204 	mvn.w	r2, #4
 8003052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f8c4 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 800306e:	e005      	b.n	800307c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8b6 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f8c7 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b08      	cmp	r3, #8
 800308e:	d122      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b08      	cmp	r3, #8
 800309c:	d11b      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f06f 0208 	mvn.w	r2, #8
 80030a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2204      	movs	r2, #4
 80030ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f89a 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 80030c2:	e005      	b.n	80030d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f88c 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f89d 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d122      	bne.n	800312a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d11b      	bne.n	800312a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f06f 0210 	mvn.w	r2, #16
 80030fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2208      	movs	r2, #8
 8003100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f870 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8003116:	e005      	b.n	8003124 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f862 	bl	80031e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f873 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10e      	bne.n	8003156 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f06f 0201 	mvn.w	r2, #1
 800314e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7fd fc55 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	2b80      	cmp	r3, #128	; 0x80
 8003162:	d10e      	bne.n	8003182 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d107      	bne.n	8003182 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800317a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f903 	bl	8003388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	d10e      	bne.n	80031ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d107      	bne.n	80031ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f838 	bl	800321e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d10e      	bne.n	80031da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d107      	bne.n	80031da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f06f 0220 	mvn.w	r2, #32
 80031d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f8cd 	bl	8003374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a40      	ldr	r2, [pc, #256]	; (8003348 <TIM_Base_SetConfig+0x114>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d013      	beq.n	8003274 <TIM_Base_SetConfig+0x40>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d00f      	beq.n	8003274 <TIM_Base_SetConfig+0x40>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3d      	ldr	r2, [pc, #244]	; (800334c <TIM_Base_SetConfig+0x118>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00b      	beq.n	8003274 <TIM_Base_SetConfig+0x40>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a3c      	ldr	r2, [pc, #240]	; (8003350 <TIM_Base_SetConfig+0x11c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d007      	beq.n	8003274 <TIM_Base_SetConfig+0x40>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a3b      	ldr	r2, [pc, #236]	; (8003354 <TIM_Base_SetConfig+0x120>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_Base_SetConfig+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a3a      	ldr	r2, [pc, #232]	; (8003358 <TIM_Base_SetConfig+0x124>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d108      	bne.n	8003286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2f      	ldr	r2, [pc, #188]	; (8003348 <TIM_Base_SetConfig+0x114>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02b      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003294:	d027      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2c      	ldr	r2, [pc, #176]	; (800334c <TIM_Base_SetConfig+0x118>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d023      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2b      	ldr	r2, [pc, #172]	; (8003350 <TIM_Base_SetConfig+0x11c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01f      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a2a      	ldr	r2, [pc, #168]	; (8003354 <TIM_Base_SetConfig+0x120>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01b      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <TIM_Base_SetConfig+0x124>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d017      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a28      	ldr	r2, [pc, #160]	; (800335c <TIM_Base_SetConfig+0x128>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a27      	ldr	r2, [pc, #156]	; (8003360 <TIM_Base_SetConfig+0x12c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00f      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a26      	ldr	r2, [pc, #152]	; (8003364 <TIM_Base_SetConfig+0x130>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00b      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a25      	ldr	r2, [pc, #148]	; (8003368 <TIM_Base_SetConfig+0x134>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a24      	ldr	r2, [pc, #144]	; (800336c <TIM_Base_SetConfig+0x138>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a23      	ldr	r2, [pc, #140]	; (8003370 <TIM_Base_SetConfig+0x13c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d108      	bne.n	80032f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <TIM_Base_SetConfig+0x114>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_Base_SetConfig+0xf8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <TIM_Base_SetConfig+0x124>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d103      	bne.n	8003334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	615a      	str	r2, [r3, #20]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40010000 	.word	0x40010000
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40000c00 	.word	0x40000c00
 8003358:	40010400 	.word	0x40010400
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800
 8003368:	40001800 	.word	0x40001800
 800336c:	40001c00 	.word	0x40001c00
 8003370:	40002000 	.word	0x40002000

08003374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800339c:	b084      	sub	sp, #16
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	f107 001c 	add.w	r0, r7, #28
 80033aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d122      	bne.n	80033fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d105      	bne.n	80033ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f001 fac6 	bl	8004980 <USB_CoreReset>
 80033f4:	4603      	mov	r3, r0
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e01a      	b.n	8003430 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f001 faba 	bl	8004980 <USB_CoreReset>
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
 8003422:	e005      	b.n	8003430 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	2b01      	cmp	r3, #1
 8003434:	d10b      	bne.n	800344e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f043 0206 	orr.w	r2, r3, #6
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800345a:	b004      	add	sp, #16
 800345c:	4770      	bx	lr
	...

08003460 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	4613      	mov	r3, r2
 800346c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d165      	bne.n	8003540 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4a41      	ldr	r2, [pc, #260]	; (800357c <USB_SetTurnaroundTime+0x11c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d906      	bls.n	800348a <USB_SetTurnaroundTime+0x2a>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4a40      	ldr	r2, [pc, #256]	; (8003580 <USB_SetTurnaroundTime+0x120>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d802      	bhi.n	800348a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003484:	230f      	movs	r3, #15
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	e062      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4a3c      	ldr	r2, [pc, #240]	; (8003580 <USB_SetTurnaroundTime+0x120>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d906      	bls.n	80034a0 <USB_SetTurnaroundTime+0x40>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <USB_SetTurnaroundTime+0x124>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d802      	bhi.n	80034a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800349a:	230e      	movs	r3, #14
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e057      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a38      	ldr	r2, [pc, #224]	; (8003584 <USB_SetTurnaroundTime+0x124>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d906      	bls.n	80034b6 <USB_SetTurnaroundTime+0x56>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a37      	ldr	r2, [pc, #220]	; (8003588 <USB_SetTurnaroundTime+0x128>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d802      	bhi.n	80034b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80034b0:	230d      	movs	r3, #13
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	e04c      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4a33      	ldr	r2, [pc, #204]	; (8003588 <USB_SetTurnaroundTime+0x128>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d906      	bls.n	80034cc <USB_SetTurnaroundTime+0x6c>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4a32      	ldr	r2, [pc, #200]	; (800358c <USB_SetTurnaroundTime+0x12c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d802      	bhi.n	80034cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80034c6:	230c      	movs	r3, #12
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e041      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4a2f      	ldr	r2, [pc, #188]	; (800358c <USB_SetTurnaroundTime+0x12c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d906      	bls.n	80034e2 <USB_SetTurnaroundTime+0x82>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4a2e      	ldr	r2, [pc, #184]	; (8003590 <USB_SetTurnaroundTime+0x130>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d802      	bhi.n	80034e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80034dc:	230b      	movs	r3, #11
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e036      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4a2a      	ldr	r2, [pc, #168]	; (8003590 <USB_SetTurnaroundTime+0x130>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d906      	bls.n	80034f8 <USB_SetTurnaroundTime+0x98>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4a29      	ldr	r2, [pc, #164]	; (8003594 <USB_SetTurnaroundTime+0x134>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d802      	bhi.n	80034f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034f2:	230a      	movs	r3, #10
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e02b      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a26      	ldr	r2, [pc, #152]	; (8003594 <USB_SetTurnaroundTime+0x134>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d906      	bls.n	800350e <USB_SetTurnaroundTime+0xae>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4a25      	ldr	r2, [pc, #148]	; (8003598 <USB_SetTurnaroundTime+0x138>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d802      	bhi.n	800350e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003508:	2309      	movs	r3, #9
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e020      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <USB_SetTurnaroundTime+0x138>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d906      	bls.n	8003524 <USB_SetTurnaroundTime+0xc4>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4a20      	ldr	r2, [pc, #128]	; (800359c <USB_SetTurnaroundTime+0x13c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d802      	bhi.n	8003524 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800351e:	2308      	movs	r3, #8
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	e015      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a1d      	ldr	r2, [pc, #116]	; (800359c <USB_SetTurnaroundTime+0x13c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d906      	bls.n	800353a <USB_SetTurnaroundTime+0xda>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <USB_SetTurnaroundTime+0x140>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d802      	bhi.n	800353a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003534:	2307      	movs	r3, #7
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e00a      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800353a:	2306      	movs	r3, #6
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e007      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003546:	2309      	movs	r3, #9
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	e001      	b.n	8003550 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800354c:	2309      	movs	r3, #9
 800354e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	00d8acbf 	.word	0x00d8acbf
 8003580:	00e4e1bf 	.word	0x00e4e1bf
 8003584:	00f423ff 	.word	0x00f423ff
 8003588:	0106737f 	.word	0x0106737f
 800358c:	011a499f 	.word	0x011a499f
 8003590:	01312cff 	.word	0x01312cff
 8003594:	014ca43f 	.word	0x014ca43f
 8003598:	016e35ff 	.word	0x016e35ff
 800359c:	01a6ab1f 	.word	0x01a6ab1f
 80035a0:	01e847ff 	.word	0x01e847ff

080035a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0201 	bic.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d106      	bne.n	8003614 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	e00b      	b.n	800362c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	e001      	b.n	800362c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e003      	b.n	8003634 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800362c:	2032      	movs	r0, #50	; 0x32
 800362e:	f7fd fb71 	bl	8000d14 <HAL_Delay>

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800363c:	b084      	sub	sp, #16
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800364a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	e009      	b.n	8003670 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3340      	adds	r3, #64	; 0x40
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	2200      	movs	r2, #0
 8003668:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3301      	adds	r3, #1
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b0e      	cmp	r3, #14
 8003674:	d9f2      	bls.n	800365c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d11c      	bne.n	80036b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368a:	f043 0302 	orr.w	r3, r3, #2
 800368e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
 80036b4:	e00b      	b.n	80036ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036d4:	461a      	mov	r2, r3
 80036d6:	2300      	movs	r3, #0
 80036d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e0:	4619      	mov	r1, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e8:	461a      	mov	r2, r3
 80036ea:	680b      	ldr	r3, [r1, #0]
 80036ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10c      	bne.n	800370e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036fa:	2100      	movs	r1, #0
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f949 	bl	8003994 <USB_SetDevSpeed>
 8003702:	e008      	b.n	8003716 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003704:	2101      	movs	r1, #1
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f944 	bl	8003994 <USB_SetDevSpeed>
 800370c:	e003      	b.n	8003716 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800370e:	2103      	movs	r1, #3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f93f 	bl	8003994 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003716:	2110      	movs	r1, #16
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f8f3 	bl	8003904 <USB_FlushTxFifo>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f911 	bl	8003950 <USB_FlushRxFifo>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	461a      	mov	r2, r3
 8003740:	2300      	movs	r3, #0
 8003742:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374a:	461a      	mov	r2, r3
 800374c:	2300      	movs	r3, #0
 800374e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003756:	461a      	mov	r2, r3
 8003758:	2300      	movs	r3, #0
 800375a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	e043      	b.n	80037ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003778:	d118      	bne.n	80037ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378c:	461a      	mov	r2, r3
 800378e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	e013      	b.n	80037be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	461a      	mov	r2, r3
 80037a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e008      	b.n	80037be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	461a      	mov	r2, r3
 80037ba:	2300      	movs	r3, #0
 80037bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ca:	461a      	mov	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	461a      	mov	r2, r3
 80037de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	3301      	adds	r3, #1
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d3b7      	bcc.n	8003762 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	e043      	b.n	8003880 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800380a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800380e:	d118      	bne.n	8003842 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003822:	461a      	mov	r2, r3
 8003824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e013      	b.n	8003854 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	461a      	mov	r2, r3
 800383a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e008      	b.n	8003854 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	461a      	mov	r2, r3
 8003862:	2300      	movs	r3, #0
 8003864:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003878:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3301      	adds	r3, #1
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	429a      	cmp	r2, r3
 8003886:	d3b7      	bcc.n	80037f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f043 0210 	orr.w	r2, r3, #16
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <USB_DevInit+0x2c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f043 0208 	orr.w	r2, r3, #8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038fc:	b004      	add	sp, #16
 80038fe:	4770      	bx	lr
 8003900:	803c3800 	.word	0x803c3800

08003904 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	019b      	lsls	r3, r3, #6
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3301      	adds	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <USB_FlushTxFifo+0x48>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e006      	b.n	800393e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b20      	cmp	r3, #32
 800393a:	d0f0      	beq.n	800391e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	00030d40 	.word	0x00030d40

08003950 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2210      	movs	r2, #16
 8003960:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <USB_FlushRxFifo+0x40>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e006      	b.n	8003982 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d0f0      	beq.n	8003962 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	00030d40 	.word	0x00030d40

08003994 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	68f9      	ldr	r1, [r7, #12]
 80039b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b087      	sub	sp, #28
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0306 	and.w	r3, r3, #6
 80039de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]
 80039ea:	e00a      	b.n	8003a02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d002      	beq.n	80039f8 <USB_GetDevSpeed+0x32>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d102      	bne.n	80039fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039f8:	2302      	movs	r3, #2
 80039fa:	75fb      	strb	r3, [r7, #23]
 80039fc:	e001      	b.n	8003a02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039fe:	230f      	movs	r3, #15
 8003a00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	785b      	ldrb	r3, [r3, #1]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d13a      	bne.n	8003aa2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	68f9      	ldr	r1, [r7, #12]
 8003a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d155      	bne.n	8003b10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	78db      	ldrb	r3, [r3, #3]
 8003a7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	059b      	lsls	r3, r3, #22
 8003a86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	e036      	b.n	8003b10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11a      	bne.n	8003b10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	78db      	ldrb	r3, [r3, #3]
 8003af4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003af6:	430b      	orrs	r3, r1
 8003af8:	4313      	orrs	r3, r2
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	0151      	lsls	r1, r2, #5
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	440a      	add	r2, r1
 8003b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d161      	bne.n	8003c00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b52:	d11f      	bne.n	8003b94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	2101      	movs	r1, #1
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	68f9      	ldr	r1, [r7, #12]
 8003bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	0159      	lsls	r1, r3, #5
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	440b      	add	r3, r1
 8003bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4b35      	ldr	r3, [pc, #212]	; (8003cd0 <USB_DeactivateEndpoint+0x1b0>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
 8003bfe:	e060      	b.n	8003cc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c16:	d11f      	bne.n	8003c58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	43db      	mvns	r3, r3
 8003c72:	68f9      	ldr	r1, [r7, #12]
 8003c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c78:	4013      	ands	r3, r2
 8003c7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	43db      	mvns	r3, r3
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	0159      	lsls	r1, r3, #5
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	440b      	add	r3, r1
 8003cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <USB_DeactivateEndpoint+0x1b4>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	ec337800 	.word	0xec337800
 8003cd4:	eff37800 	.word	0xeff37800

08003cd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	f040 815c 	bne.w	8003fb2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d132      	bne.n	8003d68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	0151      	lsls	r1, r2, #5
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	440a      	add	r2, r1
 8003d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	0151      	lsls	r1, r2, #5
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	440a      	add	r2, r1
 8003d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d60:	0cdb      	lsrs	r3, r3, #19
 8003d62:	04db      	lsls	r3, r3, #19
 8003d64:	6113      	str	r3, [r2, #16]
 8003d66:	e074      	b.n	8003e52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d82:	0cdb      	lsrs	r3, r3, #19
 8003d84:	04db      	lsls	r3, r3, #19
 8003d86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003da6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003daa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6959      	ldr	r1, [r3, #20]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	440b      	add	r3, r1
 8003dc4:	1e59      	subs	r1, r3, #1
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dce:	04d9      	lsls	r1, r3, #19
 8003dd0:	4b9d      	ldr	r3, [pc, #628]	; (8004048 <USB_EPStartXfer+0x370>)
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	69b9      	ldr	r1, [r7, #24]
 8003dd6:	0148      	lsls	r0, r1, #5
 8003dd8:	69f9      	ldr	r1, [r7, #28]
 8003dda:	4401      	add	r1, r0
 8003ddc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003de0:	4313      	orrs	r3, r2
 8003de2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfa:	69b9      	ldr	r1, [r7, #24]
 8003dfc:	0148      	lsls	r0, r1, #5
 8003dfe:	69f9      	ldr	r1, [r7, #28]
 8003e00:	4401      	add	r1, r0
 8003e02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e06:	4313      	orrs	r3, r2
 8003e08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	78db      	ldrb	r3, [r3, #3]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d11f      	bne.n	8003e52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	0151      	lsls	r1, r2, #5
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	440a      	add	r2, r1
 8003e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d14b      	bne.n	8003ef0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	78db      	ldrb	r3, [r3, #3]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d128      	bne.n	8003ece <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d110      	bne.n	8003eae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	0151      	lsls	r1, r2, #5
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	440a      	add	r2, r1
 8003ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	e00f      	b.n	8003ece <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	0151      	lsls	r1, r2, #5
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	440a      	add	r2, r1
 8003ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	0151      	lsls	r1, r2, #5
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	440a      	add	r2, r1
 8003ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e12f      	b.n	8004150 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	0151      	lsls	r1, r2, #5
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	440a      	add	r2, r1
 8003f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f0e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	78db      	ldrb	r3, [r3, #3]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d015      	beq.n	8003f44 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8117 	beq.w	8004150 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	2101      	movs	r1, #1
 8003f34:	fa01 f303 	lsl.w	r3, r1, r3
 8003f38:	69f9      	ldr	r1, [r7, #28]
 8003f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	634b      	str	r3, [r1, #52]	; 0x34
 8003f42:	e105      	b.n	8004150 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d110      	bne.n	8003f76 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	0151      	lsls	r1, r2, #5
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	440a      	add	r2, r1
 8003f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	e00f      	b.n	8003f96 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	68d9      	ldr	r1, [r3, #12]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	b298      	uxth	r0, r3
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	4603      	mov	r3, r0
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fa2b 	bl	8004406 <USB_WritePacket>
 8003fb0:	e0ce      	b.n	8004150 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	0151      	lsls	r1, r2, #5
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fcc:	0cdb      	lsrs	r3, r3, #19
 8003fce:	04db      	lsls	r3, r3, #19
 8003fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ff4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d126      	bne.n	800404c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	69b9      	ldr	r1, [r7, #24]
 8004016:	0148      	lsls	r0, r1, #5
 8004018:	69f9      	ldr	r1, [r7, #28]
 800401a:	4401      	add	r1, r0
 800401c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004020:	4313      	orrs	r3, r2
 8004022:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	440a      	add	r2, r1
 800403a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004042:	6113      	str	r3, [r2, #16]
 8004044:	e036      	b.n	80040b4 <USB_EPStartXfer+0x3dc>
 8004046:	bf00      	nop
 8004048:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4413      	add	r3, r2
 8004056:	1e5a      	subs	r2, r3, #1
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	8afb      	ldrh	r3, [r7, #22]
 8004072:	04d9      	lsls	r1, r3, #19
 8004074:	4b39      	ldr	r3, [pc, #228]	; (800415c <USB_EPStartXfer+0x484>)
 8004076:	400b      	ands	r3, r1
 8004078:	69b9      	ldr	r1, [r7, #24]
 800407a:	0148      	lsls	r0, r1, #5
 800407c:	69f9      	ldr	r1, [r7, #28]
 800407e:	4401      	add	r1, r0
 8004080:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004084:	4313      	orrs	r3, r2
 8004086:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	8af9      	ldrh	r1, [r7, #22]
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a4:	69b9      	ldr	r1, [r7, #24]
 80040a6:	0148      	lsls	r0, r1, #5
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	4401      	add	r1, r0
 80040ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040b0:	4313      	orrs	r3, r2
 80040b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d10d      	bne.n	80040d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	460a      	mov	r2, r1
 80040d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	78db      	ldrb	r3, [r3, #3]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d128      	bne.n	8004130 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d110      	bne.n	8004110 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	440a      	add	r2, r1
 8004104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004108:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e00f      	b.n	8004130 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	440a      	add	r2, r1
 8004146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800414e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	1ff80000 	.word	0x1ff80000

08004160 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	2b01      	cmp	r3, #1
 800417e:	f040 80cd 	bne.w	800431c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d132      	bne.n	80041f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e8:	0cdb      	lsrs	r3, r3, #19
 80041ea:	04db      	lsls	r3, r3, #19
 80041ec:	6113      	str	r3, [r2, #16]
 80041ee:	e04e      	b.n	800428e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	440a      	add	r2, r1
 8004206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420a:	0cdb      	lsrs	r3, r3, #19
 800420c:	04db      	lsls	r3, r3, #19
 800420e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	0151      	lsls	r1, r2, #5
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	440a      	add	r2, r1
 8004226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800422e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004232:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	d903      	bls.n	8004248 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	0151      	lsls	r1, r2, #5
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	440a      	add	r2, r1
 800425e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004266:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427e:	6939      	ldr	r1, [r7, #16]
 8004280:	0148      	lsls	r0, r1, #5
 8004282:	6979      	ldr	r1, [r7, #20]
 8004284:	4401      	add	r1, r0
 8004286:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d11e      	bne.n	80042d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	461a      	mov	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	e092      	b.n	80043f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d07e      	beq.n	80043f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	2101      	movs	r1, #1
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	6979      	ldr	r1, [r7, #20]
 8004312:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004316:	4313      	orrs	r3, r2
 8004318:	634b      	str	r3, [r1, #52]	; 0x34
 800431a:	e06d      	b.n	80043f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	440a      	add	r2, r1
 8004332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004336:	0cdb      	lsrs	r3, r3, #19
 8004338:	04db      	lsls	r3, r3, #19
 800433a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	0151      	lsls	r1, r2, #5
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	440a      	add	r2, r1
 8004352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004356:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800435a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800435e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	0151      	lsls	r1, r2, #5
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	440a      	add	r2, r1
 8004386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800438e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a6:	6939      	ldr	r1, [r7, #16]
 80043a8:	0148      	lsls	r0, r1, #5
 80043aa:	6979      	ldr	r1, [r7, #20]
 80043ac:	4401      	add	r1, r0
 80043ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043b2:	4313      	orrs	r3, r2
 80043b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d10d      	bne.n	80043d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d009      	beq.n	80043d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	68d9      	ldr	r1, [r3, #12]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	460a      	mov	r2, r1
 80043d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004406:	b480      	push	{r7}
 8004408:	b089      	sub	sp, #36	; 0x24
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	4611      	mov	r1, r2
 8004412:	461a      	mov	r2, r3
 8004414:	460b      	mov	r3, r1
 8004416:	71fb      	strb	r3, [r7, #7]
 8004418:	4613      	mov	r3, r2
 800441a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004424:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d11a      	bne.n	8004462 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800442c:	88bb      	ldrh	r3, [r7, #4]
 800442e:	3303      	adds	r3, #3
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004434:	2300      	movs	r3, #0
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	e00f      	b.n	800445a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	031a      	lsls	r2, r3, #12
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	4413      	add	r3, r2
 8004442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004446:	461a      	mov	r2, r3
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3304      	adds	r3, #4
 8004452:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	3301      	adds	r3, #1
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	429a      	cmp	r2, r3
 8004460:	d3eb      	bcc.n	800443a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3724      	adds	r7, #36	; 0x24
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004470:	b480      	push	{r7}
 8004472:	b089      	sub	sp, #36	; 0x24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	4613      	mov	r3, r2
 800447c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	3303      	adds	r3, #3
 800448a:	089b      	lsrs	r3, r3, #2
 800448c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800448e:	2300      	movs	r3, #0
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e00b      	b.n	80044ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	601a      	str	r2, [r3, #0]
    pDest++;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	3304      	adds	r3, #4
 80044a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	3301      	adds	r3, #1
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d3ef      	bcc.n	8004494 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80044b4:	69fb      	ldr	r3, [r7, #28]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3724      	adds	r7, #36	; 0x24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	785b      	ldrb	r3, [r3, #1]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d12c      	bne.n	8004538 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	db12      	blt.n	8004516 <USB_EPSetStall+0x54>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00f      	beq.n	8004516 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	0151      	lsls	r1, r2, #5
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	440a      	add	r2, r1
 800450c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004510:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004514:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e02b      	b.n	8004590 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	db12      	blt.n	8004570 <USB_EPSetStall+0xae>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00f      	beq.n	8004570 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	440a      	add	r2, r1
 8004566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800456a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800456e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800458e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d128      	bne.n	800460c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	78db      	ldrb	r3, [r3, #3]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d003      	beq.n	80045ea <USB_EPClearStall+0x4c>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	78db      	ldrb	r3, [r3, #3]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d138      	bne.n	800465c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e027      	b.n	800465c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004626:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800462a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	78db      	ldrb	r3, [r3, #3]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d003      	beq.n	800463c <USB_EPClearStall+0x9e>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	78db      	ldrb	r3, [r3, #3]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d10f      	bne.n	800465c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	440a      	add	r2, r1
 8004652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	460b      	mov	r3, r1
 8004674:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004688:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800468c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a4:	4313      	orrs	r3, r2
 80046a6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046d0:	f023 0303 	bic.w	r3, r3, #3
 80046d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e4:	f023 0302 	bic.w	r3, r3, #2
 80046e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004726:	f043 0302 	orr.w	r3, r3, #2
 800472a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4013      	ands	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004752:	68fb      	ldr	r3, [r7, #12]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	4013      	ands	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	0c1b      	lsrs	r3, r3, #16
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4013      	ands	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	b29b      	uxth	r3, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80047f6:	68bb      	ldr	r3, [r7, #8]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004826:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	01db      	lsls	r3, r3, #7
 8004836:	b2db      	uxtb	r3, r3
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004852:	68bb      	ldr	r3, [r7, #8]
}
 8004854:	4618      	mov	r0, r3
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f003 0301 	and.w	r3, r3, #1
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004896:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800489a:	f023 0307 	bic.w	r3, r3, #7
 800489e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	460b      	mov	r3, r1
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	333c      	adds	r3, #60	; 0x3c
 80048da:	3304      	adds	r3, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4a26      	ldr	r2, [pc, #152]	; (800497c <USB_EP0_OutStart+0xb8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d90a      	bls.n	80048fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f8:	d101      	bne.n	80048fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e037      	b.n	800496e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	461a      	mov	r2, r3
 8004906:	2300      	movs	r3, #0
 8004908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800491c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800492c:	f043 0318 	orr.w	r3, r3, #24
 8004930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004940:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004944:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004946:	7afb      	ldrb	r3, [r7, #11]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d10f      	bne.n	800496c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	461a      	mov	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004966:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800496a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	4f54300a 	.word	0x4f54300a

08004980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <USB_CoreReset+0x64>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e01b      	b.n	80049d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	daf2      	bge.n	800498c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <USB_CoreReset+0x64>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e006      	b.n	80049d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d0f0      	beq.n	80049b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	00030d40 	.word	0x00030d40

080049e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80049f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80049f8:	f004 fe9c 	bl	8009734 <malloc>
 80049fc:	4603      	mov	r3, r0
 80049fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d105      	bne.n	8004a12 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e066      	b.n	8004ae0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7c1b      	ldrb	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d119      	bne.n	8004a56 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a26:	2202      	movs	r2, #2
 8004a28:	2181      	movs	r1, #129	; 0x81
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f004 fd09 	bl	8009442 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f004 fcff 	bl	8009442 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2210      	movs	r2, #16
 8004a50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004a54:	e016      	b.n	8004a84 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a56:	2340      	movs	r3, #64	; 0x40
 8004a58:	2202      	movs	r2, #2
 8004a5a:	2181      	movs	r1, #129	; 0x81
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f004 fcf0 	bl	8009442 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a68:	2340      	movs	r3, #64	; 0x40
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f004 fce7 	bl	8009442 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2210      	movs	r2, #16
 8004a80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004a84:	2308      	movs	r3, #8
 8004a86:	2203      	movs	r2, #3
 8004a88:	2182      	movs	r1, #130	; 0x82
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f004 fcd9 	bl	8009442 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	7c1b      	ldrb	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f004 fdaa 	bl	8009620 <USBD_LL_PrepareReceive>
 8004acc:	e007      	b.n	8004ade <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ad4:	2340      	movs	r3, #64	; 0x40
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f004 fda1 	bl	8009620 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004af8:	2181      	movs	r1, #129	; 0x81
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f004 fcc7 	bl	800948e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b06:	2101      	movs	r1, #1
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f004 fcc0 	bl	800948e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004b16:	2182      	movs	r1, #130	; 0x82
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f004 fcb8 	bl	800948e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00e      	beq.n	8004b56 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f004 fdfb 	bl	8009744 <free>
    pdev->pClassData = NULL;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b70:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d03a      	beq.n	8004c00 <USBD_CDC_Setup+0xa0>
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	f040 8097 	bne.w	8004cbe <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	88db      	ldrh	r3, [r3, #6]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d029      	beq.n	8004bec <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b25b      	sxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da11      	bge.n	8004bc6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004bae:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	88d2      	ldrh	r2, [r2, #6]
 8004bb4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004bb6:	6939      	ldr	r1, [r7, #16]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	88db      	ldrh	r3, [r3, #6]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f001 fa9d 	bl	80060fe <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004bc4:	e082      	b.n	8004ccc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	785a      	ldrb	r2, [r3, #1]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	88db      	ldrh	r3, [r3, #6]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004bdc:	6939      	ldr	r1, [r7, #16]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	88db      	ldrh	r3, [r3, #6]
 8004be2:	461a      	mov	r2, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f001 fab6 	bl	8006156 <USBD_CtlPrepareRx>
    break;
 8004bea:	e06f      	b.n	8004ccc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	7850      	ldrb	r0, [r2, #1]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	6839      	ldr	r1, [r7, #0]
 8004bfc:	4798      	blx	r3
    break;
 8004bfe:	e065      	b.n	8004ccc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	2b0b      	cmp	r3, #11
 8004c06:	d84f      	bhi.n	8004ca8 <USBD_CDC_Setup+0x148>
 8004c08:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <USBD_CDC_Setup+0xb0>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c41 	.word	0x08004c41
 8004c14:	08004cb7 	.word	0x08004cb7
 8004c18:	08004ca9 	.word	0x08004ca9
 8004c1c:	08004ca9 	.word	0x08004ca9
 8004c20:	08004ca9 	.word	0x08004ca9
 8004c24:	08004ca9 	.word	0x08004ca9
 8004c28:	08004ca9 	.word	0x08004ca9
 8004c2c:	08004ca9 	.word	0x08004ca9
 8004c30:	08004ca9 	.word	0x08004ca9
 8004c34:	08004ca9 	.word	0x08004ca9
 8004c38:	08004c69 	.word	0x08004c69
 8004c3c:	08004c91 	.word	0x08004c91
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d107      	bne.n	8004c5a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c4a:	f107 030c 	add.w	r3, r7, #12
 8004c4e:	2202      	movs	r2, #2
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f001 fa53 	bl	80060fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004c58:	e030      	b.n	8004cbc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004c5a:	6839      	ldr	r1, [r7, #0]
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f001 f9dd 	bl	800601c <USBD_CtlError>
        ret = USBD_FAIL;
 8004c62:	2303      	movs	r3, #3
 8004c64:	75fb      	strb	r3, [r7, #23]
      break;
 8004c66:	e029      	b.n	8004cbc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d107      	bne.n	8004c82 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c72:	f107 030f 	add.w	r3, r7, #15
 8004c76:	2201      	movs	r2, #1
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f001 fa3f 	bl	80060fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004c80:	e01c      	b.n	8004cbc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f001 f9c9 	bl	800601c <USBD_CtlError>
        ret = USBD_FAIL;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8e:	e015      	b.n	8004cbc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d00f      	beq.n	8004cba <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f001 f9bd 	bl	800601c <USBD_CtlError>
        ret = USBD_FAIL;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ca6:	e008      	b.n	8004cba <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f001 f9b6 	bl	800601c <USBD_CtlError>
      ret = USBD_FAIL;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb4:	e002      	b.n	8004cbc <USBD_CDC_Setup+0x15c>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e008      	b.n	8004ccc <USBD_CDC_Setup+0x16c>
      break;
 8004cba:	bf00      	nop
    }
    break;
 8004cbc:	e006      	b.n	8004ccc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f001 f9ab 	bl	800601c <USBD_CtlError>
    ret = USBD_FAIL;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	75fb      	strb	r3, [r7, #23]
    break;
 8004cca:	bf00      	nop
  }

  return (uint8_t)ret;
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop

08004cd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004cea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e049      	b.n	8004d8e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3318      	adds	r3, #24
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d029      	beq.n	8004d6c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	3318      	adds	r3, #24
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	78f9      	ldrb	r1, [r7, #3]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	1a5b      	subs	r3, r3, r1
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4403      	add	r3, r0
 8004d38:	3344      	adds	r3, #68	; 0x44
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d40:	fb03 f301 	mul.w	r3, r3, r1
 8004d44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d110      	bne.n	8004d6c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	3318      	adds	r3, #24
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d5e:	78f9      	ldrb	r1, [r7, #3]
 8004d60:	2300      	movs	r3, #0
 8004d62:	2200      	movs	r2, #0
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f004 fc3a 	bl	80095de <USBD_LL_Transmit>
 8004d6a:	e00f      	b.n	8004d8c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004d88:	78fa      	ldrb	r2, [r7, #3]
 8004d8a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004da8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e015      	b.n	8004de4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f004 fc50 	bl	8009662 <USBD_LL_GetRxDataSize>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004dde:	4611      	mov	r1, r2
 8004de0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dfa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d015      	beq.n	8004e32 <USBD_CDC_EP0_RxReady+0x46>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e0c:	2bff      	cmp	r3, #255	; 0xff
 8004e0e:	d010      	beq.n	8004e32 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004e1e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004e26:	b292      	uxth	r2, r2
 8004e28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	22ff      	movs	r2, #255	; 0xff
 8004e2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2243      	movs	r2, #67	; 0x43
 8004e48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004e4a:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	20000094 	.word	0x20000094

08004e5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2243      	movs	r2, #67	; 0x43
 8004e68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004e6a:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	20000050 	.word	0x20000050

08004e7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2243      	movs	r2, #67	; 0x43
 8004e88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004e8a:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	200000d8 	.word	0x200000d8

08004e9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	220a      	movs	r2, #10
 8004ea8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004eaa:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	2000000c 	.word	0x2000000c

08004ebc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e004      	b.n	8004eda <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b087      	sub	sp, #28
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ef8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f28:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e01a      	b.n	8004f98 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d114      	bne.n	8004f96 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f8a:	2181      	movs	r1, #129	; 0x81
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f004 fb26 	bl	80095de <USBD_LL_Transmit>

    ret = USBD_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e016      	b.n	8004fec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	7c1b      	ldrb	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f004 fb24 	bl	8009620 <USBD_LL_PrepareReceive>
 8004fd8:	e007      	b.n	8004fea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fe0:	2340      	movs	r3, #64	; 0x40
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f004 fb1b 	bl	8009620 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005008:	2303      	movs	r3, #3
 800500a:	e025      	b.n	8005058 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	79fa      	ldrb	r2, [r7, #7]
 800504a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f004 f991 	bl	8009374 <USBD_LL_Init>
 8005052:	4603      	mov	r3, r0
 8005054:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005056:	7dfb      	ldrb	r3, [r7, #23]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005074:	2303      	movs	r3, #3
 8005076:	e010      	b.n	800509a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	f107 020e 	add.w	r2, r7, #14
 800508c:	4610      	mov	r0, r2
 800508e:	4798      	blx	r3
 8005090:	4602      	mov	r2, r0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f004 f9ae 	bl	800940c <USBD_LL_Start>
 80050b0:	4603      	mov	r3, r0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80050dc:	2303      	movs	r3, #3
 80050de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	4611      	mov	r1, r2
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	4611      	mov	r1, r2
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4798      	blx	r3
  }

  return USBD_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 ff2c 	bl	8005fa8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800515e:	461a      	mov	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	2b01      	cmp	r3, #1
 8005172:	d00e      	beq.n	8005192 <USBD_LL_SetupStage+0x5a>
 8005174:	2b01      	cmp	r3, #1
 8005176:	d302      	bcc.n	800517e <USBD_LL_SetupStage+0x46>
 8005178:	2b02      	cmp	r3, #2
 800517a:	d014      	beq.n	80051a6 <USBD_LL_SetupStage+0x6e>
 800517c:	e01d      	b.n	80051ba <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa18 	bl	80055bc <USBD_StdDevReq>
 800518c:	4603      	mov	r3, r0
 800518e:	73fb      	strb	r3, [r7, #15]
      break;
 8005190:	e020      	b.n	80051d4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fa7c 	bl	8005698 <USBD_StdItfReq>
 80051a0:	4603      	mov	r3, r0
 80051a2:	73fb      	strb	r3, [r7, #15]
      break;
 80051a4:	e016      	b.n	80051d4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051ac:	4619      	mov	r1, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fab8 	bl	8005724 <USBD_StdEPReq>
 80051b4:	4603      	mov	r3, r0
 80051b6:	73fb      	strb	r3, [r7, #15]
      break;
 80051b8:	e00c      	b.n	80051d4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80051c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f004 f97f 	bl	80094cc <USBD_LL_StallEP>
 80051ce:	4603      	mov	r3, r0
 80051d0:	73fb      	strb	r3, [r7, #15]
      break;
 80051d2:	bf00      	nop
  }

  return ret;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b086      	sub	sp, #24
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	460b      	mov	r3, r1
 80051e8:	607a      	str	r2, [r7, #4]
 80051ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80051ec:	7afb      	ldrb	r3, [r7, #11]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d137      	bne.n	8005262 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80051f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005200:	2b03      	cmp	r3, #3
 8005202:	d14a      	bne.n	800529a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	429a      	cmp	r2, r3
 800520e:	d913      	bls.n	8005238 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	1ad2      	subs	r2, r2, r3
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	4293      	cmp	r3, r2
 8005228:	bf28      	it	cs
 800522a:	4613      	movcs	r3, r2
 800522c:	461a      	mov	r2, r3
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 ffad 	bl	8006190 <USBD_CtlContinueRx>
 8005236:	e030      	b.n	800529a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800524a:	2b03      	cmp	r3, #3
 800524c:	d105      	bne.n	800525a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 ffa9 	bl	80061b2 <USBD_CtlSendStatus>
 8005260:	e01b      	b.n	800529a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d013      	beq.n	8005296 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005274:	2b03      	cmp	r3, #3
 8005276:	d10e      	bne.n	8005296 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	7afa      	ldrb	r2, [r7, #11]
 8005282:	4611      	mov	r1, r2
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	4798      	blx	r3
 8005288:	4603      	mov	r3, r0
 800528a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	e002      	b.n	800529c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005296:	2303      	movs	r3, #3
 8005298:	e000      	b.n	800529c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	460b      	mov	r3, r1
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80052b2:	7afb      	ldrb	r3, [r7, #11]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d16a      	bne.n	800538e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3314      	adds	r3, #20
 80052bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d155      	bne.n	8005374 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d914      	bls.n	80052fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	1ad2      	subs	r2, r2, r3
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	461a      	mov	r2, r3
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 ff22 	bl	8006134 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052f0:	2300      	movs	r3, #0
 80052f2:	2200      	movs	r2, #0
 80052f4:	2100      	movs	r1, #0
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f004 f992 	bl	8009620 <USBD_LL_PrepareReceive>
 80052fc:	e03a      	b.n	8005374 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	429a      	cmp	r2, r3
 8005308:	d11c      	bne.n	8005344 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005312:	429a      	cmp	r2, r3
 8005314:	d316      	bcc.n	8005344 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005320:	429a      	cmp	r2, r3
 8005322:	d20f      	bcs.n	8005344 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005324:	2200      	movs	r2, #0
 8005326:	2100      	movs	r1, #0
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 ff03 	bl	8006134 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005336:	2300      	movs	r3, #0
 8005338:	2200      	movs	r2, #0
 800533a:	2100      	movs	r1, #0
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f004 f96f 	bl	8009620 <USBD_LL_PrepareReceive>
 8005342:	e017      	b.n	8005374 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005356:	2b03      	cmp	r3, #3
 8005358:	d105      	bne.n	8005366 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f004 f8af 	bl	80094cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 ff32 	bl	80061d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800537a:	2b01      	cmp	r3, #1
 800537c:	d123      	bne.n	80053c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7ff fe9b 	bl	80050ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800538c:	e01b      	b.n	80053c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d013      	beq.n	80053c2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d10e      	bne.n	80053c2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	7afa      	ldrb	r2, [r7, #11]
 80053ae:	4611      	mov	r1, r2
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	4798      	blx	r3
 80053b4:	4603      	mov	r3, r0
 80053b6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	e002      	b.n	80053c8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e000      	b.n	80053c8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d009      	beq.n	8005414 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6852      	ldr	r2, [r2, #4]
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	4611      	mov	r1, r2
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005414:	2340      	movs	r3, #64	; 0x40
 8005416:	2200      	movs	r2, #0
 8005418:	2100      	movs	r1, #0
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f004 f811 	bl	8009442 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2240      	movs	r2, #64	; 0x40
 800542c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005430:	2340      	movs	r3, #64	; 0x40
 8005432:	2200      	movs	r2, #0
 8005434:	2180      	movs	r1, #128	; 0x80
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f004 f803 	bl	8009442 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2240      	movs	r2, #64	; 0x40
 8005446:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	78fa      	ldrb	r2, [r7, #3]
 8005462:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2204      	movs	r2, #4
 800548a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d105      	bne.n	80054ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d10b      	bne.n	80054f2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	460b      	mov	r3, r1
 8005520:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6852      	ldr	r2, [r2, #4]
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	4611      	mov	r1, r2
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
  }

  return USBD_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800557e:	b480      	push	{r7}
 8005580:	b087      	sub	sp, #28
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	3301      	adds	r3, #1
 8005594:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800559c:	8a3b      	ldrh	r3, [r7, #16]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	b21a      	sxth	r2, r3
 80055a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	b21b      	sxth	r3, r3
 80055aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80055ac:	89fb      	ldrh	r3, [r7, #14]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d004      	beq.n	80055e0 <USBD_StdDevReq+0x24>
 80055d6:	2b40      	cmp	r3, #64	; 0x40
 80055d8:	d002      	beq.n	80055e0 <USBD_StdDevReq+0x24>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <USBD_StdDevReq+0x38>
 80055de:	e050      	b.n	8005682 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]
    break;
 80055f2:	e04b      	b.n	800568c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b09      	cmp	r3, #9
 80055fa:	d83c      	bhi.n	8005676 <USBD_StdDevReq+0xba>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <USBD_StdDevReq+0x48>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005659 	.word	0x08005659
 8005608:	0800566d 	.word	0x0800566d
 800560c:	08005677 	.word	0x08005677
 8005610:	08005663 	.word	0x08005663
 8005614:	08005677 	.word	0x08005677
 8005618:	08005637 	.word	0x08005637
 800561c:	0800562d 	.word	0x0800562d
 8005620:	08005677 	.word	0x08005677
 8005624:	0800564f 	.word	0x0800564f
 8005628:	08005641 	.word	0x08005641
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f9ce 	bl	80059d0 <USBD_GetDescriptor>
      break;
 8005634:	e024      	b.n	8005680 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fb33 	bl	8005ca4 <USBD_SetAddress>
      break;
 800563e:	e01f      	b.n	8005680 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fb70 	bl	8005d28 <USBD_SetConfig>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e018      	b.n	8005680 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fc0d 	bl	8005e70 <USBD_GetConfig>
      break;
 8005656:	e013      	b.n	8005680 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fc3c 	bl	8005ed8 <USBD_GetStatus>
      break;
 8005660:	e00e      	b.n	8005680 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fc6a 	bl	8005f3e <USBD_SetFeature>
      break;
 800566a:	e009      	b.n	8005680 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fc79 	bl	8005f66 <USBD_ClrFeature>
      break;
 8005674:	e004      	b.n	8005680 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fccf 	bl	800601c <USBD_CtlError>
      break;
 800567e:	bf00      	nop
    }
    break;
 8005680:	e004      	b.n	800568c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005682:	6839      	ldr	r1, [r7, #0]
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fcc9 	bl	800601c <USBD_CtlError>
    break;
 800568a:	bf00      	nop
  }

  return ret;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop

08005698 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d003      	beq.n	80056ba <USBD_StdItfReq+0x22>
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d001      	beq.n	80056ba <USBD_StdItfReq+0x22>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d12a      	bne.n	8005710 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056c0:	3b01      	subs	r3, #1
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d81d      	bhi.n	8005702 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	889b      	ldrh	r3, [r3, #4]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d813      	bhi.n	80056f8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
 80056de:	4603      	mov	r3, r0
 80056e0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	88db      	ldrh	r3, [r3, #6]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d110      	bne.n	800570c <USBD_StdItfReq+0x74>
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fd5e 	bl	80061b2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80056f6:	e009      	b.n	800570c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fc8e 	bl	800601c <USBD_CtlError>
      break;
 8005700:	e004      	b.n	800570c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fc89 	bl	800601c <USBD_CtlError>
      break;
 800570a:	e000      	b.n	800570e <USBD_StdItfReq+0x76>
      break;
 800570c:	bf00      	nop
    }
    break;
 800570e:	e004      	b.n	800571a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fc82 	bl	800601c <USBD_CtlError>
    break;
 8005718:	bf00      	nop
  }

  return ret;
 800571a:	7bfb      	ldrb	r3, [r7, #15]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	889b      	ldrh	r3, [r3, #4]
 8005736:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005740:	2b20      	cmp	r3, #32
 8005742:	d004      	beq.n	800574e <USBD_StdEPReq+0x2a>
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d002      	beq.n	800574e <USBD_StdEPReq+0x2a>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <USBD_StdEPReq+0x3e>
 800574c:	e135      	b.n	80059ba <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
 800575c:	4603      	mov	r3, r0
 800575e:	73fb      	strb	r3, [r7, #15]
    break;
 8005760:	e130      	b.n	80059c4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d03e      	beq.n	80057e8 <USBD_StdEPReq+0xc4>
 800576a:	2b03      	cmp	r3, #3
 800576c:	d002      	beq.n	8005774 <USBD_StdEPReq+0x50>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d077      	beq.n	8005862 <USBD_StdEPReq+0x13e>
 8005772:	e11c      	b.n	80059ae <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577a:	2b02      	cmp	r3, #2
 800577c:	d002      	beq.n	8005784 <USBD_StdEPReq+0x60>
 800577e:	2b03      	cmp	r3, #3
 8005780:	d015      	beq.n	80057ae <USBD_StdEPReq+0x8a>
 8005782:	e02b      	b.n	80057dc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005784:	7bbb      	ldrb	r3, [r7, #14]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <USBD_StdEPReq+0x80>
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	2b80      	cmp	r3, #128	; 0x80
 800578e:	d009      	beq.n	80057a4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f003 fe99 	bl	80094cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800579a:	2180      	movs	r1, #128	; 0x80
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f003 fe95 	bl	80094cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80057a2:	e020      	b.n	80057e6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80057a4:	6839      	ldr	r1, [r7, #0]
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fc38 	bl	800601c <USBD_CtlError>
        break;
 80057ac:	e01b      	b.n	80057e6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	885b      	ldrh	r3, [r3, #2]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10e      	bne.n	80057d4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057b6:	7bbb      	ldrb	r3, [r7, #14]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <USBD_StdEPReq+0xb0>
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	2b80      	cmp	r3, #128	; 0x80
 80057c0:	d008      	beq.n	80057d4 <USBD_StdEPReq+0xb0>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	88db      	ldrh	r3, [r3, #6]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80057ca:	7bbb      	ldrb	r3, [r7, #14]
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f003 fe7c 	bl	80094cc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fcec 	bl	80061b2 <USBD_CtlSendStatus>

        break;
 80057da:	e004      	b.n	80057e6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fc1c 	bl	800601c <USBD_CtlError>
        break;
 80057e4:	bf00      	nop
      }
      break;
 80057e6:	e0e7      	b.n	80059b8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d002      	beq.n	80057f8 <USBD_StdEPReq+0xd4>
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d015      	beq.n	8005822 <USBD_StdEPReq+0xfe>
 80057f6:	e02d      	b.n	8005854 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057f8:	7bbb      	ldrb	r3, [r7, #14]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00c      	beq.n	8005818 <USBD_StdEPReq+0xf4>
 80057fe:	7bbb      	ldrb	r3, [r7, #14]
 8005800:	2b80      	cmp	r3, #128	; 0x80
 8005802:	d009      	beq.n	8005818 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f003 fe5f 	bl	80094cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800580e:	2180      	movs	r1, #128	; 0x80
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f003 fe5b 	bl	80094cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005816:	e023      	b.n	8005860 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fbfe 	bl	800601c <USBD_CtlError>
        break;
 8005820:	e01e      	b.n	8005860 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	885b      	ldrh	r3, [r3, #2]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d119      	bne.n	800585e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800582a:	7bbb      	ldrb	r3, [r7, #14]
 800582c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005834:	7bbb      	ldrb	r3, [r7, #14]
 8005836:	4619      	mov	r1, r3
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f003 fe66 	bl	800950a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fcb7 	bl	80061b2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
        }
        break;
 8005852:	e004      	b.n	800585e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fbe0 	bl	800601c <USBD_CtlError>
        break;
 800585c:	e000      	b.n	8005860 <USBD_StdEPReq+0x13c>
        break;
 800585e:	bf00      	nop
      }
      break;
 8005860:	e0aa      	b.n	80059b8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005868:	2b02      	cmp	r3, #2
 800586a:	d002      	beq.n	8005872 <USBD_StdEPReq+0x14e>
 800586c:	2b03      	cmp	r3, #3
 800586e:	d032      	beq.n	80058d6 <USBD_StdEPReq+0x1b2>
 8005870:	e097      	b.n	80059a2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005872:	7bbb      	ldrb	r3, [r7, #14]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <USBD_StdEPReq+0x164>
 8005878:	7bbb      	ldrb	r3, [r7, #14]
 800587a:	2b80      	cmp	r3, #128	; 0x80
 800587c:	d004      	beq.n	8005888 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fbcb 	bl	800601c <USBD_CtlError>
          break;
 8005886:	e091      	b.n	80059ac <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800588c:	2b00      	cmp	r3, #0
 800588e:	da0b      	bge.n	80058a8 <USBD_StdEPReq+0x184>
 8005890:	7bbb      	ldrb	r3, [r7, #14]
 8005892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	3310      	adds	r3, #16
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	3304      	adds	r3, #4
 80058a6:	e00b      	b.n	80058c0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80058a8:	7bbb      	ldrb	r3, [r7, #14]
 80058aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	4413      	add	r3, r2
 80058be:	3304      	adds	r3, #4
 80058c0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2202      	movs	r2, #2
 80058cc:	4619      	mov	r1, r3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fc15 	bl	80060fe <USBD_CtlSendData>
        break;
 80058d4:	e06a      	b.n	80059ac <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80058d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	da11      	bge.n	8005902 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058de:	7bbb      	ldrb	r3, [r7, #14]
 80058e0:	f003 020f 	and.w	r2, r3, #15
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	3324      	adds	r3, #36	; 0x24
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d117      	bne.n	8005928 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fb8e 	bl	800601c <USBD_CtlError>
            break;
 8005900:	e054      	b.n	80059ac <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	f003 020f 	and.w	r2, r3, #15
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fb7b 	bl	800601c <USBD_CtlError>
            break;
 8005926:	e041      	b.n	80059ac <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800592c:	2b00      	cmp	r3, #0
 800592e:	da0b      	bge.n	8005948 <USBD_StdEPReq+0x224>
 8005930:	7bbb      	ldrb	r3, [r7, #14]
 8005932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	3310      	adds	r3, #16
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	4413      	add	r3, r2
 8005944:	3304      	adds	r3, #4
 8005946:	e00b      	b.n	8005960 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005948:	7bbb      	ldrb	r3, [r7, #14]
 800594a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	3304      	adds	r3, #4
 8005960:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005962:	7bbb      	ldrb	r3, [r7, #14]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <USBD_StdEPReq+0x24a>
 8005968:	7bbb      	ldrb	r3, [r7, #14]
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d103      	bne.n	8005976 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	e00e      	b.n	8005994 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005976:	7bbb      	ldrb	r3, [r7, #14]
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f003 fde4 	bl	8009548 <USBD_LL_IsStallEP>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2201      	movs	r2, #1
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e002      	b.n	8005994 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2202      	movs	r2, #2
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fbaf 	bl	80060fe <USBD_CtlSendData>
          break;
 80059a0:	e004      	b.n	80059ac <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fb39 	bl	800601c <USBD_CtlError>
        break;
 80059aa:	bf00      	nop
      }
      break;
 80059ac:	e004      	b.n	80059b8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fb33 	bl	800601c <USBD_CtlError>
      break;
 80059b6:	bf00      	nop
    }
    break;
 80059b8:	e004      	b.n	80059c4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fb2d 	bl	800601c <USBD_CtlError>
    break;
 80059c2:	bf00      	nop
  }

  return ret;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	885b      	ldrh	r3, [r3, #2]
 80059ea:	0a1b      	lsrs	r3, r3, #8
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	2b06      	cmp	r3, #6
 80059f2:	f200 8128 	bhi.w	8005c46 <USBD_GetDescriptor+0x276>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <USBD_GetDescriptor+0x2c>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a19 	.word	0x08005a19
 8005a00:	08005a31 	.word	0x08005a31
 8005a04:	08005a71 	.word	0x08005a71
 8005a08:	08005c47 	.word	0x08005c47
 8005a0c:	08005c47 	.word	0x08005c47
 8005a10:	08005be7 	.word	0x08005be7
 8005a14:	08005c13 	.word	0x08005c13
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	7c12      	ldrb	r2, [r2, #16]
 8005a24:	f107 0108 	add.w	r1, r7, #8
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
 8005a2c:	60f8      	str	r0, [r7, #12]
    break;
 8005a2e:	e112      	b.n	8005c56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	7c1b      	ldrb	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10d      	bne.n	8005a54 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	f107 0208 	add.w	r2, r7, #8
 8005a44:	4610      	mov	r0, r2
 8005a46:	4798      	blx	r3
 8005a48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	2202      	movs	r2, #2
 8005a50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005a52:	e100      	b.n	8005c56 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	f107 0208 	add.w	r2, r7, #8
 8005a60:	4610      	mov	r0, r2
 8005a62:	4798      	blx	r3
 8005a64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	701a      	strb	r2, [r3, #0]
    break;
 8005a6e:	e0f2      	b.n	8005c56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	885b      	ldrh	r3, [r3, #2]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	f200 80ac 	bhi.w	8005bd4 <USBD_GetDescriptor+0x204>
 8005a7c:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <USBD_GetDescriptor+0xb4>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005a9d 	.word	0x08005a9d
 8005a88:	08005ad1 	.word	0x08005ad1
 8005a8c:	08005b05 	.word	0x08005b05
 8005a90:	08005b39 	.word	0x08005b39
 8005a94:	08005b6d 	.word	0x08005b6d
 8005a98:	08005ba1 	.word	0x08005ba1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	7c12      	ldrb	r2, [r2, #16]
 8005ab4:	f107 0108 	add.w	r1, r7, #8
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005abe:	e091      	b.n	8005be4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 faaa 	bl	800601c <USBD_CtlError>
        err++;
 8005ac8:	7afb      	ldrb	r3, [r7, #11]
 8005aca:	3301      	adds	r3, #1
 8005acc:	72fb      	strb	r3, [r7, #11]
      break;
 8005ace:	e089      	b.n	8005be4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	7c12      	ldrb	r2, [r2, #16]
 8005ae8:	f107 0108 	add.w	r1, r7, #8
 8005aec:	4610      	mov	r0, r2
 8005aee:	4798      	blx	r3
 8005af0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005af2:	e077      	b.n	8005be4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa90 	bl	800601c <USBD_CtlError>
        err++;
 8005afc:	7afb      	ldrb	r3, [r7, #11]
 8005afe:	3301      	adds	r3, #1
 8005b00:	72fb      	strb	r3, [r7, #11]
      break;
 8005b02:	e06f      	b.n	8005be4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00b      	beq.n	8005b28 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	7c12      	ldrb	r2, [r2, #16]
 8005b1c:	f107 0108 	add.w	r1, r7, #8
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
 8005b24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b26:	e05d      	b.n	8005be4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa76 	bl	800601c <USBD_CtlError>
        err++;
 8005b30:	7afb      	ldrb	r3, [r7, #11]
 8005b32:	3301      	adds	r3, #1
 8005b34:	72fb      	strb	r3, [r7, #11]
      break;
 8005b36:	e055      	b.n	8005be4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00b      	beq.n	8005b5c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	7c12      	ldrb	r2, [r2, #16]
 8005b50:	f107 0108 	add.w	r1, r7, #8
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
 8005b58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b5a:	e043      	b.n	8005be4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa5c 	bl	800601c <USBD_CtlError>
        err++;
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	3301      	adds	r3, #1
 8005b68:	72fb      	strb	r3, [r7, #11]
      break;
 8005b6a:	e03b      	b.n	8005be4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	7c12      	ldrb	r2, [r2, #16]
 8005b84:	f107 0108 	add.w	r1, r7, #8
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4798      	blx	r3
 8005b8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b8e:	e029      	b.n	8005be4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa42 	bl	800601c <USBD_CtlError>
        err++;
 8005b98:	7afb      	ldrb	r3, [r7, #11]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	72fb      	strb	r3, [r7, #11]
      break;
 8005b9e:	e021      	b.n	8005be4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	7c12      	ldrb	r2, [r2, #16]
 8005bb8:	f107 0108 	add.w	r1, r7, #8
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4798      	blx	r3
 8005bc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bc2:	e00f      	b.n	8005be4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fa28 	bl	800601c <USBD_CtlError>
        err++;
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	72fb      	strb	r3, [r7, #11]
      break;
 8005bd2:	e007      	b.n	8005be4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fa20 	bl	800601c <USBD_CtlError>
      err++;
 8005bdc:	7afb      	ldrb	r3, [r7, #11]
 8005bde:	3301      	adds	r3, #1
 8005be0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005be2:	bf00      	nop
    }
    break;
 8005be4:	e037      	b.n	8005c56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	7c1b      	ldrb	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	f107 0208 	add.w	r2, r7, #8
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	4798      	blx	r3
 8005bfe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005c00:	e029      	b.n	8005c56 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fa09 	bl	800601c <USBD_CtlError>
      err++;
 8005c0a:	7afb      	ldrb	r3, [r7, #11]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	72fb      	strb	r3, [r7, #11]
    break;
 8005c10:	e021      	b.n	8005c56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	7c1b      	ldrb	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10d      	bne.n	8005c36 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c22:	f107 0208 	add.w	r2, r7, #8
 8005c26:	4610      	mov	r0, r2
 8005c28:	4798      	blx	r3
 8005c2a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	2207      	movs	r2, #7
 8005c32:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005c34:	e00f      	b.n	8005c56 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f9ef 	bl	800601c <USBD_CtlError>
      err++;
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	3301      	adds	r3, #1
 8005c42:	72fb      	strb	r3, [r7, #11]
    break;
 8005c44:	e007      	b.n	8005c56 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f9e7 	bl	800601c <USBD_CtlError>
    err++;
 8005c4e:	7afb      	ldrb	r3, [r7, #11]
 8005c50:	3301      	adds	r3, #1
 8005c52:	72fb      	strb	r3, [r7, #11]
    break;
 8005c54:	bf00      	nop
  }

  if (err != 0U)
 8005c56:	7afb      	ldrb	r3, [r7, #11]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d11e      	bne.n	8005c9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	88db      	ldrh	r3, [r3, #6]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d016      	beq.n	8005c92 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005c64:	893b      	ldrh	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00e      	beq.n	8005c88 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	88da      	ldrh	r2, [r3, #6]
 8005c6e:	893b      	ldrh	r3, [r7, #8]
 8005c70:	4293      	cmp	r3, r2
 8005c72:	bf28      	it	cs
 8005c74:	4613      	movcs	r3, r2
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c7a:	893b      	ldrh	r3, [r7, #8]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fa3c 	bl	80060fe <USBD_CtlSendData>
 8005c86:	e009      	b.n	8005c9c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9c6 	bl	800601c <USBD_CtlError>
 8005c90:	e004      	b.n	8005c9c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa8d 	bl	80061b2 <USBD_CtlSendStatus>
 8005c98:	e000      	b.n	8005c9c <USBD_GetDescriptor+0x2cc>
    return;
 8005c9a:	bf00      	nop
    }
  }
}
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop

08005ca4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	889b      	ldrh	r3, [r3, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d130      	bne.n	8005d18 <USBD_SetAddress+0x74>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	88db      	ldrh	r3, [r3, #6]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d12c      	bne.n	8005d18 <USBD_SetAddress+0x74>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	885b      	ldrh	r3, [r3, #2]
 8005cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc4:	d828      	bhi.n	8005d18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	885b      	ldrh	r3, [r3, #2]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d104      	bne.n	8005ce6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f99c 	bl	800601c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce4:	e01c      	b.n	8005d20 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	7bfa      	ldrb	r2, [r7, #15]
 8005cea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f003 fc54 	bl	80095a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fa5a 	bl	80061b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0c:	e008      	b.n	8005d20 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d16:	e003      	b.n	8005d20 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f97e 	bl	800601c <USBD_CtlError>
  }
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	885b      	ldrh	r3, [r3, #2]
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	4b4b      	ldr	r3, [pc, #300]	; (8005e6c <USBD_SetConfig+0x144>)
 8005d3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d40:	4b4a      	ldr	r3, [pc, #296]	; (8005e6c <USBD_SetConfig+0x144>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d905      	bls.n	8005d54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f966 	bl	800601c <USBD_CtlError>
    return USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e087      	b.n	8005e64 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d002      	beq.n	8005d64 <USBD_SetConfig+0x3c>
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d025      	beq.n	8005dae <USBD_SetConfig+0x86>
 8005d62:	e071      	b.n	8005e48 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005d64:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <USBD_SetConfig+0x144>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01c      	beq.n	8005da6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005d6c:	4b3f      	ldr	r3, [pc, #252]	; (8005e6c <USBD_SetConfig+0x144>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d76:	4b3d      	ldr	r3, [pc, #244]	; (8005e6c <USBD_SetConfig+0x144>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff f9a7 	bl	80050d0 <USBD_SetClassConfig>
 8005d82:	4603      	mov	r3, r0
 8005d84:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f944 	bl	800601c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005d94:	e065      	b.n	8005e62 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa0b 	bl	80061b2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2203      	movs	r2, #3
 8005da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005da4:	e05d      	b.n	8005e62 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa03 	bl	80061b2 <USBD_CtlSendStatus>
    break;
 8005dac:	e059      	b.n	8005e62 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005dae:	4b2f      	ldr	r3, [pc, #188]	; (8005e6c <USBD_SetConfig+0x144>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d112      	bne.n	8005ddc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005dbe:	4b2b      	ldr	r3, [pc, #172]	; (8005e6c <USBD_SetConfig+0x144>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dc8:	4b28      	ldr	r3, [pc, #160]	; (8005e6c <USBD_SetConfig+0x144>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff f99a 	bl	8005108 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f9ec 	bl	80061b2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005dda:	e042      	b.n	8005e62 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005ddc:	4b23      	ldr	r3, [pc, #140]	; (8005e6c <USBD_SetConfig+0x144>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d02a      	beq.n	8005e40 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff f988 	bl	8005108 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005df8:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <USBD_SetConfig+0x144>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e02:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <USBD_SetConfig+0x144>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff f961 	bl	80050d0 <USBD_SetClassConfig>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00f      	beq.n	8005e38 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f8fe 	bl	800601c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff f96d 	bl	8005108 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005e36:	e014      	b.n	8005e62 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f9ba 	bl	80061b2 <USBD_CtlSendStatus>
    break;
 8005e3e:	e010      	b.n	8005e62 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9b6 	bl	80061b2 <USBD_CtlSendStatus>
    break;
 8005e46:	e00c      	b.n	8005e62 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f8e6 	bl	800601c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <USBD_SetConfig+0x144>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff f956 	bl	8005108 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8005e60:	bf00      	nop
  }

  return ret;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2000020c 	.word	0x2000020c

08005e70 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	88db      	ldrh	r3, [r3, #6]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d004      	beq.n	8005e8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f8c9 	bl	800601c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005e8a:	e021      	b.n	8005ed0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	db17      	blt.n	8005ec6 <USBD_GetConfig+0x56>
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	dd02      	ble.n	8005ea0 <USBD_GetConfig+0x30>
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d00b      	beq.n	8005eb6 <USBD_GetConfig+0x46>
 8005e9e:	e012      	b.n	8005ec6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	2201      	movs	r2, #1
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f925 	bl	80060fe <USBD_CtlSendData>
      break;
 8005eb4:	e00c      	b.n	8005ed0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f91d 	bl	80060fe <USBD_CtlSendData>
      break;
 8005ec4:	e004      	b.n	8005ed0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f8a7 	bl	800601c <USBD_CtlError>
      break;
 8005ece:	bf00      	nop
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d81e      	bhi.n	8005f2c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	88db      	ldrh	r3, [r3, #6]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d004      	beq.n	8005f00 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f88f 	bl	800601c <USBD_CtlError>
      break;
 8005efe:	e01a      	b.n	8005f36 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f043 0202 	orr.w	r2, r3, #2
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	2202      	movs	r2, #2
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f8ea 	bl	80060fe <USBD_CtlSendData>
    break;
 8005f2a:	e004      	b.n	8005f36 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f874 	bl	800601c <USBD_CtlError>
    break;
 8005f34:	bf00      	nop
  }
}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	885b      	ldrh	r3, [r3, #2]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d106      	bne.n	8005f5e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f92a 	bl	80061b2 <USBD_CtlSendStatus>
  }
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f76:	3b01      	subs	r3, #1
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d80b      	bhi.n	8005f94 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	885b      	ldrh	r3, [r3, #2]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d10c      	bne.n	8005f9e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f910 	bl	80061b2 <USBD_CtlSendStatus>
      }
      break;
 8005f92:	e004      	b.n	8005f9e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f840 	bl	800601c <USBD_CtlError>
      break;
 8005f9c:	e000      	b.n	8005fa0 <USBD_ClrFeature+0x3a>
      break;
 8005f9e:	bf00      	nop
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	781a      	ldrb	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff fad3 	bl	800557e <SWAPBYTE>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f7ff fac6 	bl	800557e <SWAPBYTE>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3301      	adds	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff fab9 	bl	800557e <SWAPBYTE>
 800600c:	4603      	mov	r3, r0
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	80da      	strh	r2, [r3, #6]
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006026:	2180      	movs	r1, #128	; 0x80
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f003 fa4f 	bl	80094cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800602e:	2100      	movs	r1, #0
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f003 fa4b 	bl	80094cc <USBD_LL_StallEP>
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b086      	sub	sp, #24
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d036      	beq.n	80060c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006058:	6938      	ldr	r0, [r7, #16]
 800605a:	f000 f836 	bl	80060ca <USBD_GetLen>
 800605e:	4603      	mov	r3, r0
 8006060:	3301      	adds	r3, #1
 8006062:	b29b      	uxth	r3, r3
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	4413      	add	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	7812      	ldrb	r2, [r2, #0]
 8006076:	701a      	strb	r2, [r3, #0]
  idx++;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	3301      	adds	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	4413      	add	r3, r2
 8006084:	2203      	movs	r2, #3
 8006086:	701a      	strb	r2, [r3, #0]
  idx++;
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	3301      	adds	r3, #1
 800608c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800608e:	e013      	b.n	80060b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	4413      	add	r3, r2
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	7812      	ldrb	r2, [r2, #0]
 800609a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	3301      	adds	r3, #1
 80060a0:	613b      	str	r3, [r7, #16]
    idx++;
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	3301      	adds	r3, #1
 80060a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
    idx++;
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	3301      	adds	r3, #1
 80060b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e7      	bne.n	8006090 <USBD_GetString+0x52>
 80060c0:	e000      	b.n	80060c4 <USBD_GetString+0x86>
    return;
 80060c2:	bf00      	nop
  }
}
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80060da:	e005      	b.n	80060e8 <USBD_GetLen+0x1e>
  {
    len++;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	3301      	adds	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	3301      	adds	r3, #1
 80060e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f5      	bne.n	80060dc <USBD_GetLen+0x12>
  }

  return len;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2202      	movs	r2, #2
 800610e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	2100      	movs	r1, #0
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f003 fa5a 	bl	80095de <USBD_LL_Transmit>

  return USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	2100      	movs	r1, #0
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f003 fa49 	bl	80095de <USBD_LL_Transmit>

  return USBD_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2203      	movs	r2, #3
 8006166:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	2100      	movs	r1, #0
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f003 fa4d 	bl	8009620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	2100      	movs	r1, #0
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f003 fa3c 	bl	8009620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2204      	movs	r2, #4
 80061be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80061c2:	2300      	movs	r3, #0
 80061c4:	2200      	movs	r2, #0
 80061c6:	2100      	movs	r1, #0
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f003 fa08 	bl	80095de <USBD_LL_Transmit>

  return USBD_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2205      	movs	r2, #5
 80061e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061e8:	2300      	movs	r3, #0
 80061ea:	2200      	movs	r2, #0
 80061ec:	2100      	movs	r1, #0
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f003 fa16 	bl	8009620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80061fe:	b480      	push	{r7}
 8006200:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006202:	bf00      	nop
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006212:	f3ef 8305 	mrs	r3, IPSR
 8006216:	60bb      	str	r3, [r7, #8]
  return(result);
 8006218:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10f      	bne.n	800623e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621e:	f3ef 8310 	mrs	r3, PRIMASK
 8006222:	607b      	str	r3, [r7, #4]
  return(result);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d105      	bne.n	8006236 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800622a:	f3ef 8311 	mrs	r3, BASEPRI
 800622e:	603b      	str	r3, [r7, #0]
  return(result);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d007      	beq.n	8006246 <osKernelInitialize+0x3a>
 8006236:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <osKernelInitialize+0x64>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d103      	bne.n	8006246 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800623e:	f06f 0305 	mvn.w	r3, #5
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e00c      	b.n	8006260 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006246:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <osKernelInitialize+0x64>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d105      	bne.n	800625a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800624e:	4b08      	ldr	r3, [pc, #32]	; (8006270 <osKernelInitialize+0x64>)
 8006250:	2201      	movs	r2, #1
 8006252:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e002      	b.n	8006260 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
 800625e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006260:	68fb      	ldr	r3, [r7, #12]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	20000210 	.word	0x20000210

08006274 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800627a:	f3ef 8305 	mrs	r3, IPSR
 800627e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006280:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10f      	bne.n	80062a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006286:	f3ef 8310 	mrs	r3, PRIMASK
 800628a:	607b      	str	r3, [r7, #4]
  return(result);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d105      	bne.n	800629e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006292:	f3ef 8311 	mrs	r3, BASEPRI
 8006296:	603b      	str	r3, [r7, #0]
  return(result);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <osKernelStart+0x3a>
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <osKernelStart+0x68>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d103      	bne.n	80062ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80062a6:	f06f 0305 	mvn.w	r3, #5
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e010      	b.n	80062d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <osKernelStart+0x68>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d109      	bne.n	80062ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062b6:	f7ff ffa2 	bl	80061fe <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <osKernelStart+0x68>)
 80062bc:	2202      	movs	r2, #2
 80062be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062c0:	f001 f870 	bl	80073a4 <vTaskStartScheduler>
      stat = osOK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	e002      	b.n	80062d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80062ca:	f04f 33ff 	mov.w	r3, #4294967295
 80062ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062d0:	68fb      	ldr	r3, [r7, #12]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000210 	.word	0x20000210

080062e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b090      	sub	sp, #64	; 0x40
 80062e4:	af04      	add	r7, sp, #16
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062f0:	f3ef 8305 	mrs	r3, IPSR
 80062f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80062f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 808f 	bne.w	800641c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006302:	61bb      	str	r3, [r7, #24]
  return(result);
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d105      	bne.n	8006316 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800630a:	f3ef 8311 	mrs	r3, BASEPRI
 800630e:	617b      	str	r3, [r7, #20]
  return(result);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <osThreadNew+0x3e>
 8006316:	4b44      	ldr	r3, [pc, #272]	; (8006428 <osThreadNew+0x148>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d07e      	beq.n	800641c <osThreadNew+0x13c>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d07b      	beq.n	800641c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006328:	2318      	movs	r3, #24
 800632a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800632c:	2300      	movs	r3, #0
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006330:	f04f 33ff 	mov.w	r3, #4294967295
 8006334:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d045      	beq.n	80063c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <osThreadNew+0x6a>
        name = attr->name;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <osThreadNew+0x90>
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	2b38      	cmp	r3, #56	; 0x38
 8006362:	d805      	bhi.n	8006370 <osThreadNew+0x90>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <osThreadNew+0x94>
        return (NULL);
 8006370:	2300      	movs	r3, #0
 8006372:	e054      	b.n	800641e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	089b      	lsrs	r3, r3, #2
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00e      	beq.n	80063aa <osThreadNew+0xca>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	2b5b      	cmp	r3, #91	; 0x5b
 8006392:	d90a      	bls.n	80063aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006398:	2b00      	cmp	r3, #0
 800639a:	d006      	beq.n	80063aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <osThreadNew+0xca>
        mem = 1;
 80063a4:	2301      	movs	r3, #1
 80063a6:	623b      	str	r3, [r7, #32]
 80063a8:	e010      	b.n	80063cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10c      	bne.n	80063cc <osThreadNew+0xec>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d108      	bne.n	80063cc <osThreadNew+0xec>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <osThreadNew+0xec>
          mem = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	623b      	str	r3, [r7, #32]
 80063c6:	e001      	b.n	80063cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d110      	bne.n	80063f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063da:	9202      	str	r2, [sp, #8]
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 fe09 	bl	8007000 <xTaskCreateStatic>
 80063ee:	4603      	mov	r3, r0
 80063f0:	613b      	str	r3, [r7, #16]
 80063f2:	e013      	b.n	800641c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d110      	bne.n	800641c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f107 0310 	add.w	r3, r7, #16
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fe51 	bl	80070b4 <xTaskCreate>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d001      	beq.n	800641c <osThreadNew+0x13c>
          hTask = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800641c:	693b      	ldr	r3, [r7, #16]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3730      	adds	r7, #48	; 0x30
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000210 	.word	0x20000210

0800642c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006434:	f3ef 8305 	mrs	r3, IPSR
 8006438:	613b      	str	r3, [r7, #16]
  return(result);
 800643a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10f      	bne.n	8006460 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006440:	f3ef 8310 	mrs	r3, PRIMASK
 8006444:	60fb      	str	r3, [r7, #12]
  return(result);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d105      	bne.n	8006458 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800644c:	f3ef 8311 	mrs	r3, BASEPRI
 8006450:	60bb      	str	r3, [r7, #8]
  return(result);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <osDelay+0x3c>
 8006458:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <osDelay+0x58>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d103      	bne.n	8006468 <osDelay+0x3c>
    stat = osErrorISR;
 8006460:	f06f 0305 	mvn.w	r3, #5
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e007      	b.n	8006478 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 ff62 	bl	800733c <vTaskDelay>
    }
  }

  return (stat);
 8006478:	697b      	ldr	r3, [r7, #20]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20000210 	.word	0x20000210

08006488 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4a07      	ldr	r2, [pc, #28]	; (80064b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4a06      	ldr	r2, [pc, #24]	; (80064b8 <vApplicationGetIdleTaskMemory+0x30>)
 800649e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2280      	movs	r2, #128	; 0x80
 80064a4:	601a      	str	r2, [r3, #0]
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	20000214 	.word	0x20000214
 80064b8:	20000270 	.word	0x20000270

080064bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4a07      	ldr	r2, [pc, #28]	; (80064e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80064cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4a06      	ldr	r2, [pc, #24]	; (80064ec <vApplicationGetTimerTaskMemory+0x30>)
 80064d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064da:	601a      	str	r2, [r3, #0]
}
 80064dc:	bf00      	nop
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	20000470 	.word	0x20000470
 80064ec:	200004cc 	.word	0x200004cc

080064f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f103 0208 	add.w	r2, r3, #8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f04f 32ff 	mov.w	r2, #4294967295
 8006508:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f103 0208 	add.w	r2, r3, #8
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f103 0208 	add.w	r2, r3, #8
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
}
 8006586:	bf00      	nop
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d103      	bne.n	80065b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e00c      	b.n	80065cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3308      	adds	r3, #8
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e002      	b.n	80065c0 <vListInsert+0x2e>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d2f6      	bcs.n	80065ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	601a      	str	r2, [r3, #0]
}
 80065f8:	bf00      	nop
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6892      	ldr	r2, [r2, #8]
 800661a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6852      	ldr	r2, [r2, #4]
 8006624:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d103      	bne.n	8006638 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	1e5a      	subs	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d109      	bne.n	8006680 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	60bb      	str	r3, [r7, #8]
 800667e:	e7fe      	b.n	800667e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006680:	f002 f814 	bl	80086ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668c:	68f9      	ldr	r1, [r7, #12]
 800668e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006690:	fb01 f303 	mul.w	r3, r1, r3
 8006694:	441a      	add	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b0:	3b01      	subs	r3, #1
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066b6:	fb01 f303 	mul.w	r3, r1, r3
 80066ba:	441a      	add	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	22ff      	movs	r2, #255	; 0xff
 80066c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	22ff      	movs	r2, #255	; 0xff
 80066cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d114      	bne.n	8006700 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01a      	beq.n	8006714 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3310      	adds	r3, #16
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 f8de 	bl	80078a4 <xTaskRemoveFromEventList>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d012      	beq.n	8006714 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066ee:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <xQueueGenericReset+0xcc>)
 80066f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	e009      	b.n	8006714 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3310      	adds	r3, #16
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fef3 	bl	80064f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3324      	adds	r3, #36	; 0x24
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff feee 	bl	80064f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006714:	f001 fff8 	bl	8008708 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006718:	2301      	movs	r3, #1
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	e000ed04 	.word	0xe000ed04

08006728 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08e      	sub	sp, #56	; 0x38
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d109      	bne.n	8006750 <xQueueGenericCreateStatic+0x28>
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
 800674e:	e7fe      	b.n	800674e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <xQueueGenericCreateStatic+0x42>
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
 8006768:	e7fe      	b.n	8006768 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <xQueueGenericCreateStatic+0x4e>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <xQueueGenericCreateStatic+0x52>
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <xQueueGenericCreateStatic+0x54>
 800677a:	2300      	movs	r3, #0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d109      	bne.n	8006794 <xQueueGenericCreateStatic+0x6c>
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	623b      	str	r3, [r7, #32]
 8006792:	e7fe      	b.n	8006792 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d102      	bne.n	80067a0 <xQueueGenericCreateStatic+0x78>
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <xQueueGenericCreateStatic+0x7c>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <xQueueGenericCreateStatic+0x7e>
 80067a4:	2300      	movs	r3, #0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <xQueueGenericCreateStatic+0x96>
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	e7fe      	b.n	80067bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067be:	2350      	movs	r3, #80	; 0x50
 80067c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b50      	cmp	r3, #80	; 0x50
 80067c6:	d009      	beq.n	80067dc <xQueueGenericCreateStatic+0xb4>
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	e7fe      	b.n	80067da <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00d      	beq.n	8006804 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	4613      	mov	r3, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 f805 	bl	800680e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006806:	4618      	mov	r0, r3
 8006808:	3730      	adds	r7, #48	; 0x30
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d103      	bne.n	800682a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e002      	b.n	8006830 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800683c:	2101      	movs	r1, #1
 800683e:	69b8      	ldr	r0, [r7, #24]
 8006840:	f7ff ff0a 	bl	8006658 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	78fa      	ldrb	r2, [r7, #3]
 8006848:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08e      	sub	sp, #56	; 0x38
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006862:	2300      	movs	r3, #0
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	2b00      	cmp	r3, #0
 800686e:	d109      	bne.n	8006884 <xQueueGenericSend+0x30>
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
 8006882:	e7fe      	b.n	8006882 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d103      	bne.n	8006892 <xQueueGenericSend+0x3e>
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <xQueueGenericSend+0x42>
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <xQueueGenericSend+0x44>
 8006896:	2300      	movs	r3, #0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <xQueueGenericSend+0x5c>
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
 80068ae:	e7fe      	b.n	80068ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d103      	bne.n	80068be <xQueueGenericSend+0x6a>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <xQueueGenericSend+0x6e>
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <xQueueGenericSend+0x70>
 80068c2:	2300      	movs	r3, #0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d109      	bne.n	80068dc <xQueueGenericSend+0x88>
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	e7fe      	b.n	80068da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068dc:	f001 f998 	bl	8007c10 <xTaskGetSchedulerState>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <xQueueGenericSend+0x98>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <xQueueGenericSend+0x9c>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <xQueueGenericSend+0x9e>
 80068f0:	2300      	movs	r3, #0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <xQueueGenericSend+0xb6>
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	e7fe      	b.n	8006908 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800690a:	f001 fecf 	bl	80086ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <xQueueGenericSend+0xcc>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d129      	bne.n	8006974 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006926:	f000 f9ff 	bl	8006d28 <prvCopyDataToQueue>
 800692a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	2b00      	cmp	r3, #0
 8006932:	d010      	beq.n	8006956 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	3324      	adds	r3, #36	; 0x24
 8006938:	4618      	mov	r0, r3
 800693a:	f000 ffb3 	bl	80078a4 <xTaskRemoveFromEventList>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d013      	beq.n	800696c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006944:	4b3f      	ldr	r3, [pc, #252]	; (8006a44 <xQueueGenericSend+0x1f0>)
 8006946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	e00a      	b.n	800696c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800695c:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <xQueueGenericSend+0x1f0>)
 800695e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800696c:	f001 fecc 	bl	8008708 <vPortExitCritical>
				return pdPASS;
 8006970:	2301      	movs	r3, #1
 8006972:	e063      	b.n	8006a3c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800697a:	f001 fec5 	bl	8008708 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800697e:	2300      	movs	r3, #0
 8006980:	e05c      	b.n	8006a3c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006988:	f107 0314 	add.w	r3, r7, #20
 800698c:	4618      	mov	r0, r3
 800698e:	f000 ffeb 	bl	8007968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006992:	2301      	movs	r3, #1
 8006994:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006996:	f001 feb7 	bl	8008708 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800699a:	f000 fd67 	bl	800746c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800699e:	f001 fe85 	bl	80086ac <vPortEnterCritical>
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069a8:	b25b      	sxtb	r3, r3
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ae:	d103      	bne.n	80069b8 <xQueueGenericSend+0x164>
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069be:	b25b      	sxtb	r3, r3
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d103      	bne.n	80069ce <xQueueGenericSend+0x17a>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069ce:	f001 fe9b 	bl	8008708 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069d2:	1d3a      	adds	r2, r7, #4
 80069d4:	f107 0314 	add.w	r3, r7, #20
 80069d8:	4611      	mov	r1, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 ffda 	bl	8007994 <xTaskCheckForTimeOut>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d124      	bne.n	8006a30 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069e8:	f000 fa96 	bl	8006f18 <prvIsQueueFull>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d018      	beq.n	8006a24 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	3310      	adds	r3, #16
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	4611      	mov	r1, r2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 ff04 	bl	8007808 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a02:	f000 fa21 	bl	8006e48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a06:	f000 fd3f 	bl	8007488 <xTaskResumeAll>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f47f af7c 	bne.w	800690a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <xQueueGenericSend+0x1f0>)
 8006a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	e772      	b.n	800690a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a26:	f000 fa0f 	bl	8006e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a2a:	f000 fd2d 	bl	8007488 <xTaskResumeAll>
 8006a2e:	e76c      	b.n	800690a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a32:	f000 fa09 	bl	8006e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a36:	f000 fd27 	bl	8007488 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3738      	adds	r7, #56	; 0x38
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08e      	sub	sp, #56	; 0x38
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <xQueueGenericSendFromISR+0x2c>
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
 8006a72:	e7fe      	b.n	8006a72 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d103      	bne.n	8006a82 <xQueueGenericSendFromISR+0x3a>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <xQueueGenericSendFromISR+0x3e>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <xQueueGenericSendFromISR+0x40>
 8006a86:	2300      	movs	r3, #0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d109      	bne.n	8006aa0 <xQueueGenericSendFromISR+0x58>
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	623b      	str	r3, [r7, #32]
 8006a9e:	e7fe      	b.n	8006a9e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d103      	bne.n	8006aae <xQueueGenericSendFromISR+0x66>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <xQueueGenericSendFromISR+0x6a>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <xQueueGenericSendFromISR+0x6c>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d109      	bne.n	8006acc <xQueueGenericSendFromISR+0x84>
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	e7fe      	b.n	8006aca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006acc:	f001 feca 	bl	8008864 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ad0:	f3ef 8211 	mrs	r2, BASEPRI
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	61ba      	str	r2, [r7, #24]
 8006ae6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ae8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d302      	bcc.n	8006afe <xQueueGenericSendFromISR+0xb6>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d12c      	bne.n	8006b58 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b0e:	f000 f90b 	bl	8006d28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b12:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1a:	d112      	bne.n	8006b42 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d016      	beq.n	8006b52 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	3324      	adds	r3, #36	; 0x24
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 febb 	bl	80078a4 <xTaskRemoveFromEventList>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00e      	beq.n	8006b52 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e007      	b.n	8006b52 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b46:	3301      	adds	r3, #1
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	b25a      	sxtb	r2, r3
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b52:	2301      	movs	r3, #1
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006b56:	e001      	b.n	8006b5c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3738      	adds	r7, #56	; 0x38
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08c      	sub	sp, #48	; 0x30
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <xQueueReceive+0x2e>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	623b      	str	r3, [r7, #32]
 8006b9c:	e7fe      	b.n	8006b9c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d103      	bne.n	8006bac <xQueueReceive+0x3c>
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <xQueueReceive+0x40>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <xQueueReceive+0x42>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <xQueueReceive+0x5a>
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	e7fe      	b.n	8006bc8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bca:	f001 f821 	bl	8007c10 <xTaskGetSchedulerState>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <xQueueReceive+0x6a>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <xQueueReceive+0x6e>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e000      	b.n	8006be0 <xQueueReceive+0x70>
 8006bde:	2300      	movs	r3, #0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <xQueueReceive+0x88>
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e7fe      	b.n	8006bf6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bf8:	f001 fd58 	bl	80086ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01f      	beq.n	8006c48 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c0c:	f000 f8f6 	bl	8006dfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	1e5a      	subs	r2, r3, #1
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00f      	beq.n	8006c40 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	3310      	adds	r3, #16
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fe3d 	bl	80078a4 <xTaskRemoveFromEventList>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c30:	4b3c      	ldr	r3, [pc, #240]	; (8006d24 <xQueueReceive+0x1b4>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c40:	f001 fd62 	bl	8008708 <vPortExitCritical>
				return pdPASS;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e069      	b.n	8006d1c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c4e:	f001 fd5b 	bl	8008708 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e062      	b.n	8006d1c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c5c:	f107 0310 	add.w	r3, r7, #16
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fe81 	bl	8007968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c6a:	f001 fd4d 	bl	8008708 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c6e:	f000 fbfd 	bl	800746c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c72:	f001 fd1b 	bl	80086ac <vPortEnterCritical>
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d103      	bne.n	8006c8c <xQueueReceive+0x11c>
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c92:	b25b      	sxtb	r3, r3
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d103      	bne.n	8006ca2 <xQueueReceive+0x132>
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ca2:	f001 fd31 	bl	8008708 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ca6:	1d3a      	adds	r2, r7, #4
 8006ca8:	f107 0310 	add.w	r3, r7, #16
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fe70 	bl	8007994 <xTaskCheckForTimeOut>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d123      	bne.n	8006d02 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cbc:	f000 f916 	bl	8006eec <prvIsQueueEmpty>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d017      	beq.n	8006cf6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	3324      	adds	r3, #36	; 0x24
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fd9a 	bl	8007808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd6:	f000 f8b7 	bl	8006e48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cda:	f000 fbd5 	bl	8007488 <xTaskResumeAll>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d189      	bne.n	8006bf8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <xQueueReceive+0x1b4>)
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	e780      	b.n	8006bf8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf8:	f000 f8a6 	bl	8006e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cfc:	f000 fbc4 	bl	8007488 <xTaskResumeAll>
 8006d00:	e77a      	b.n	8006bf8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d04:	f000 f8a0 	bl	8006e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d08:	f000 fbbe 	bl	8007488 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d0e:	f000 f8ed 	bl	8006eec <prvIsQueueEmpty>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f43f af6f 	beq.w	8006bf8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3730      	adds	r7, #48	; 0x30
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10d      	bne.n	8006d62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d14d      	bne.n	8006dea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 ff7a 	bl	8007c4c <xTaskPriorityDisinherit>
 8006d58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	e043      	b.n	8006dea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d119      	bne.n	8006d9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6858      	ldr	r0, [r3, #4]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	461a      	mov	r2, r3
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	f002 fcee 	bl	8009754 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	441a      	add	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d32b      	bcc.n	8006dea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	605a      	str	r2, [r3, #4]
 8006d9a:	e026      	b.n	8006dea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68d8      	ldr	r0, [r3, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da4:	461a      	mov	r2, r3
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	f002 fcd4 	bl	8009754 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	425b      	negs	r3, r3
 8006db6:	441a      	add	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d207      	bcs.n	8006dd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	425b      	negs	r3, r3
 8006dd2:	441a      	add	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d105      	bne.n	8006dea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006df2:	697b      	ldr	r3, [r7, #20]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d018      	beq.n	8006e40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	441a      	add	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d303      	bcc.n	8006e30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68d9      	ldr	r1, [r3, #12]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6838      	ldr	r0, [r7, #0]
 8006e3c:	f002 fc8a 	bl	8009754 <memcpy>
	}
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e50:	f001 fc2c 	bl	80086ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e5c:	e011      	b.n	8006e82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d012      	beq.n	8006e8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3324      	adds	r3, #36	; 0x24
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fd1a 	bl	80078a4 <xTaskRemoveFromEventList>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e76:	f000 fded 	bl	8007a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	dce9      	bgt.n	8006e5e <prvUnlockQueue+0x16>
 8006e8a:	e000      	b.n	8006e8e <prvUnlockQueue+0x46>
					break;
 8006e8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	22ff      	movs	r2, #255	; 0xff
 8006e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e96:	f001 fc37 	bl	8008708 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e9a:	f001 fc07 	bl	80086ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ea4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ea6:	e011      	b.n	8006ecc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d012      	beq.n	8006ed6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3310      	adds	r3, #16
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fcf5 	bl	80078a4 <xTaskRemoveFromEventList>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ec0:	f000 fdc8 	bl	8007a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	dce9      	bgt.n	8006ea8 <prvUnlockQueue+0x60>
 8006ed4:	e000      	b.n	8006ed8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ed6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	22ff      	movs	r2, #255	; 0xff
 8006edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ee0:	f001 fc12 	bl	8008708 <vPortExitCritical>
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ef4:	f001 fbda 	bl	80086ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f00:	2301      	movs	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e001      	b.n	8006f0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f0a:	f001 fbfd 	bl	8008708 <vPortExitCritical>

	return xReturn;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f20:	f001 fbc4 	bl	80086ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d102      	bne.n	8006f36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f30:	2301      	movs	r3, #1
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	e001      	b.n	8006f3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f3a:	f001 fbe5 	bl	8008708 <vPortExitCritical>

	return xReturn;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	e014      	b.n	8006f82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f58:	4a0e      	ldr	r2, [pc, #56]	; (8006f94 <vQueueAddToRegistry+0x4c>)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10b      	bne.n	8006f7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f64:	490b      	ldr	r1, [pc, #44]	; (8006f94 <vQueueAddToRegistry+0x4c>)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <vQueueAddToRegistry+0x4c>)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	4413      	add	r3, r2
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f7a:	e005      	b.n	8006f88 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b07      	cmp	r3, #7
 8006f86:	d9e7      	bls.n	8006f58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	20004bbc 	.word	0x20004bbc

08006f98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fa8:	f001 fb80 	bl	80086ac <vPortEnterCritical>
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fb2:	b25b      	sxtb	r3, r3
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb8:	d103      	bne.n	8006fc2 <vQueueWaitForMessageRestricted+0x2a>
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fc8:	b25b      	sxtb	r3, r3
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fce:	d103      	bne.n	8006fd8 <vQueueWaitForMessageRestricted+0x40>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd8:	f001 fb96 	bl	8008708 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	3324      	adds	r3, #36	; 0x24
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fc2f 	bl	8007850 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ff2:	6978      	ldr	r0, [r7, #20]
 8006ff4:	f7ff ff28 	bl	8006e48 <prvUnlockQueue>
	}
 8006ff8:	bf00      	nop
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08e      	sub	sp, #56	; 0x38
 8007004:	af04      	add	r7, sp, #16
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <xTaskCreateStatic+0x28>
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	e7fe      	b.n	8007026 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <xTaskCreateStatic+0x42>
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	e7fe      	b.n	8007040 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007042:	235c      	movs	r3, #92	; 0x5c
 8007044:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b5c      	cmp	r3, #92	; 0x5c
 800704a:	d009      	beq.n	8007060 <xTaskCreateStatic+0x60>
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e7fe      	b.n	800705e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007060:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01e      	beq.n	80070a6 <xTaskCreateStatic+0xa6>
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	2b00      	cmp	r3, #0
 800706c:	d01b      	beq.n	80070a6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007076:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	2202      	movs	r2, #2
 800707c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007080:	2300      	movs	r3, #0
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	9302      	str	r3, [sp, #8]
 8007088:	f107 0314 	add.w	r3, r7, #20
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f850 	bl	800713e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800709e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070a0:	f000 f8dc 	bl	800725c <prvAddNewTaskToReadyList>
 80070a4:	e001      	b.n	80070aa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070aa:	697b      	ldr	r3, [r7, #20]
	}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3728      	adds	r7, #40	; 0x28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08c      	sub	sp, #48	; 0x30
 80070b8:	af04      	add	r7, sp, #16
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	4613      	mov	r3, r2
 80070c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070c4:	88fb      	ldrh	r3, [r7, #6]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f001 fc09 	bl	80088e0 <pvPortMalloc>
 80070ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00e      	beq.n	80070f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070d6:	205c      	movs	r0, #92	; 0x5c
 80070d8:	f001 fc02 	bl	80088e0 <pvPortMalloc>
 80070dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	631a      	str	r2, [r3, #48]	; 0x30
 80070ea:	e005      	b.n	80070f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070ec:	6978      	ldr	r0, [r7, #20]
 80070ee:	f001 fcb9 	bl	8008a64 <vPortFree>
 80070f2:	e001      	b.n	80070f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d017      	beq.n	800712e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007106:	88fa      	ldrh	r2, [r7, #6]
 8007108:	2300      	movs	r3, #0
 800710a:	9303      	str	r3, [sp, #12]
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	9302      	str	r3, [sp, #8]
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f80e 	bl	800713e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007122:	69f8      	ldr	r0, [r7, #28]
 8007124:	f000 f89a 	bl	800725c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007128:	2301      	movs	r3, #1
 800712a:	61bb      	str	r3, [r7, #24]
 800712c:	e002      	b.n	8007134 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800712e:	f04f 33ff 	mov.w	r3, #4294967295
 8007132:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007134:	69bb      	ldr	r3, [r7, #24]
	}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b088      	sub	sp, #32
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	461a      	mov	r2, r3
 8007156:	21a5      	movs	r1, #165	; 0xa5
 8007158:	f002 fb07 	bl	800976a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007166:	3b01      	subs	r3, #1
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	f023 0307 	bic.w	r3, r3, #7
 8007174:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <prvInitialiseNewTask+0x56>
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	e7fe      	b.n	8007192 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01f      	beq.n	80071da <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800719a:	2300      	movs	r3, #0
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	e012      	b.n	80071c6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	4413      	add	r3, r2
 80071a6:	7819      	ldrb	r1, [r3, #0]
 80071a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	4413      	add	r3, r2
 80071ae:	3334      	adds	r3, #52	; 0x34
 80071b0:	460a      	mov	r2, r1
 80071b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d006      	beq.n	80071ce <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	3301      	adds	r3, #1
 80071c4:	61fb      	str	r3, [r7, #28]
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	2b0f      	cmp	r3, #15
 80071ca:	d9e9      	bls.n	80071a0 <prvInitialiseNewTask+0x62>
 80071cc:	e000      	b.n	80071d0 <prvInitialiseNewTask+0x92>
			{
				break;
 80071ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071d8:	e003      	b.n	80071e2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	2b37      	cmp	r3, #55	; 0x37
 80071e6:	d901      	bls.n	80071ec <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071e8:	2337      	movs	r3, #55	; 0x37
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	2200      	movs	r2, #0
 80071fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	3304      	adds	r3, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff f994 	bl	8006530 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	3318      	adds	r3, #24
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff f98f 	bl	8006530 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007226:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	2200      	movs	r2, #0
 800722c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	68f9      	ldr	r1, [r7, #12]
 800723a:	69b8      	ldr	r0, [r7, #24]
 800723c:	f001 f90c 	bl	8008458 <pxPortInitialiseStack>
 8007240:	4602      	mov	r2, r0
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007252:	bf00      	nop
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007264:	f001 fa22 	bl	80086ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007268:	4b2d      	ldr	r3, [pc, #180]	; (8007320 <prvAddNewTaskToReadyList+0xc4>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	4a2c      	ldr	r2, [pc, #176]	; (8007320 <prvAddNewTaskToReadyList+0xc4>)
 8007270:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007272:	4b2c      	ldr	r3, [pc, #176]	; (8007324 <prvAddNewTaskToReadyList+0xc8>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800727a:	4a2a      	ldr	r2, [pc, #168]	; (8007324 <prvAddNewTaskToReadyList+0xc8>)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007280:	4b27      	ldr	r3, [pc, #156]	; (8007320 <prvAddNewTaskToReadyList+0xc4>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d110      	bne.n	80072aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007288:	f000 fc08 	bl	8007a9c <prvInitialiseTaskLists>
 800728c:	e00d      	b.n	80072aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800728e:	4b26      	ldr	r3, [pc, #152]	; (8007328 <prvAddNewTaskToReadyList+0xcc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007296:	4b23      	ldr	r3, [pc, #140]	; (8007324 <prvAddNewTaskToReadyList+0xc8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d802      	bhi.n	80072aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072a4:	4a1f      	ldr	r2, [pc, #124]	; (8007324 <prvAddNewTaskToReadyList+0xc8>)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072aa:	4b20      	ldr	r3, [pc, #128]	; (800732c <prvAddNewTaskToReadyList+0xd0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3301      	adds	r3, #1
 80072b0:	4a1e      	ldr	r2, [pc, #120]	; (800732c <prvAddNewTaskToReadyList+0xd0>)
 80072b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072b4:	4b1d      	ldr	r3, [pc, #116]	; (800732c <prvAddNewTaskToReadyList+0xd0>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	4b1b      	ldr	r3, [pc, #108]	; (8007330 <prvAddNewTaskToReadyList+0xd4>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d903      	bls.n	80072d0 <prvAddNewTaskToReadyList+0x74>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	4a18      	ldr	r2, [pc, #96]	; (8007330 <prvAddNewTaskToReadyList+0xd4>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4a15      	ldr	r2, [pc, #84]	; (8007334 <prvAddNewTaskToReadyList+0xd8>)
 80072de:	441a      	add	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7ff f92f 	bl	800654a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072ec:	f001 fa0c 	bl	8008708 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072f0:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <prvAddNewTaskToReadyList+0xcc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00e      	beq.n	8007316 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072f8:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <prvAddNewTaskToReadyList+0xc8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	429a      	cmp	r2, r3
 8007304:	d207      	bcs.n	8007316 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007306:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <prvAddNewTaskToReadyList+0xdc>)
 8007308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007316:	bf00      	nop
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000da0 	.word	0x20000da0
 8007324:	200008cc 	.word	0x200008cc
 8007328:	20000dac 	.word	0x20000dac
 800732c:	20000dbc 	.word	0x20000dbc
 8007330:	20000da8 	.word	0x20000da8
 8007334:	200008d0 	.word	0x200008d0
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d016      	beq.n	800737c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <vTaskDelay+0x60>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <vTaskDelay+0x2e>
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	60bb      	str	r3, [r7, #8]
 8007368:	e7fe      	b.n	8007368 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800736a:	f000 f87f 	bl	800746c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800736e:	2100      	movs	r1, #0
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fcd7 	bl	8007d24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007376:	f000 f887 	bl	8007488 <xTaskResumeAll>
 800737a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d107      	bne.n	8007392 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <vTaskDelay+0x64>)
 8007384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000dc8 	.word	0x20000dc8
 80073a0:	e000ed04 	.word	0xe000ed04

080073a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08a      	sub	sp, #40	; 0x28
 80073a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073b2:	463a      	mov	r2, r7
 80073b4:	1d39      	adds	r1, r7, #4
 80073b6:	f107 0308 	add.w	r3, r7, #8
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff f864 	bl	8006488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	9202      	str	r2, [sp, #8]
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	2300      	movs	r3, #0
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	2300      	movs	r3, #0
 80073d0:	460a      	mov	r2, r1
 80073d2:	4920      	ldr	r1, [pc, #128]	; (8007454 <vTaskStartScheduler+0xb0>)
 80073d4:	4820      	ldr	r0, [pc, #128]	; (8007458 <vTaskStartScheduler+0xb4>)
 80073d6:	f7ff fe13 	bl	8007000 <xTaskCreateStatic>
 80073da:	4602      	mov	r2, r0
 80073dc:	4b1f      	ldr	r3, [pc, #124]	; (800745c <vTaskStartScheduler+0xb8>)
 80073de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073e0:	4b1e      	ldr	r3, [pc, #120]	; (800745c <vTaskStartScheduler+0xb8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073e8:	2301      	movs	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	e001      	b.n	80073f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d102      	bne.n	80073fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073f8:	f000 fce8 	bl	8007dcc <xTimerCreateTimerTask>
 80073fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d115      	bne.n	8007430 <vTaskStartScheduler+0x8c>
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007416:	4b12      	ldr	r3, [pc, #72]	; (8007460 <vTaskStartScheduler+0xbc>)
 8007418:	f04f 32ff 	mov.w	r2, #4294967295
 800741c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800741e:	4b11      	ldr	r3, [pc, #68]	; (8007464 <vTaskStartScheduler+0xc0>)
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007424:	4b10      	ldr	r3, [pc, #64]	; (8007468 <vTaskStartScheduler+0xc4>)
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800742a:	f001 f8a1 	bl	8008570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800742e:	e00d      	b.n	800744c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d109      	bne.n	800744c <vTaskStartScheduler+0xa8>
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	e7fe      	b.n	800744a <vTaskStartScheduler+0xa6>
}
 800744c:	bf00      	nop
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	08009fdc 	.word	0x08009fdc
 8007458:	08007a6d 	.word	0x08007a6d
 800745c:	20000dc4 	.word	0x20000dc4
 8007460:	20000dc0 	.word	0x20000dc0
 8007464:	20000dac 	.word	0x20000dac
 8007468:	20000da4 	.word	0x20000da4

0800746c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <vTaskSuspendAll+0x18>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3301      	adds	r3, #1
 8007476:	4a03      	ldr	r2, [pc, #12]	; (8007484 <vTaskSuspendAll+0x18>)
 8007478:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800747a:	bf00      	nop
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	20000dc8 	.word	0x20000dc8

08007488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007492:	2300      	movs	r3, #0
 8007494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007496:	4b41      	ldr	r3, [pc, #260]	; (800759c <xTaskResumeAll+0x114>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d109      	bne.n	80074b2 <xTaskResumeAll+0x2a>
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	e7fe      	b.n	80074b0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074b2:	f001 f8fb 	bl	80086ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074b6:	4b39      	ldr	r3, [pc, #228]	; (800759c <xTaskResumeAll+0x114>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	4a37      	ldr	r2, [pc, #220]	; (800759c <xTaskResumeAll+0x114>)
 80074be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c0:	4b36      	ldr	r3, [pc, #216]	; (800759c <xTaskResumeAll+0x114>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d162      	bne.n	800758e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074c8:	4b35      	ldr	r3, [pc, #212]	; (80075a0 <xTaskResumeAll+0x118>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d05e      	beq.n	800758e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074d0:	e02f      	b.n	8007532 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d2:	4b34      	ldr	r3, [pc, #208]	; (80075a4 <xTaskResumeAll+0x11c>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3318      	adds	r3, #24
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff f890 	bl	8006604 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff f88b 	bl	8006604 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f2:	4b2d      	ldr	r3, [pc, #180]	; (80075a8 <xTaskResumeAll+0x120>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d903      	bls.n	8007502 <xTaskResumeAll+0x7a>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	4a2a      	ldr	r2, [pc, #168]	; (80075a8 <xTaskResumeAll+0x120>)
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4a27      	ldr	r2, [pc, #156]	; (80075ac <xTaskResumeAll+0x124>)
 8007510:	441a      	add	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3304      	adds	r3, #4
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f7ff f816 	bl	800654a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	4b23      	ldr	r3, [pc, #140]	; (80075b0 <xTaskResumeAll+0x128>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	429a      	cmp	r2, r3
 800752a:	d302      	bcc.n	8007532 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800752c:	4b21      	ldr	r3, [pc, #132]	; (80075b4 <xTaskResumeAll+0x12c>)
 800752e:	2201      	movs	r2, #1
 8007530:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007532:	4b1c      	ldr	r3, [pc, #112]	; (80075a4 <xTaskResumeAll+0x11c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1cb      	bne.n	80074d2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007540:	f000 fb46 	bl	8007bd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007544:	4b1c      	ldr	r3, [pc, #112]	; (80075b8 <xTaskResumeAll+0x130>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d010      	beq.n	8007572 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007550:	f000 f846 	bl	80075e0 <xTaskIncrementTick>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800755a:	4b16      	ldr	r3, [pc, #88]	; (80075b4 <xTaskResumeAll+0x12c>)
 800755c:	2201      	movs	r2, #1
 800755e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3b01      	subs	r3, #1
 8007564:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1f1      	bne.n	8007550 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800756c:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <xTaskResumeAll+0x130>)
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007572:	4b10      	ldr	r3, [pc, #64]	; (80075b4 <xTaskResumeAll+0x12c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800757a:	2301      	movs	r3, #1
 800757c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800757e:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <xTaskResumeAll+0x134>)
 8007580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800758e:	f001 f8bb 	bl	8008708 <vPortExitCritical>

	return xAlreadyYielded;
 8007592:	68bb      	ldr	r3, [r7, #8]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20000dc8 	.word	0x20000dc8
 80075a0:	20000da0 	.word	0x20000da0
 80075a4:	20000d60 	.word	0x20000d60
 80075a8:	20000da8 	.word	0x20000da8
 80075ac:	200008d0 	.word	0x200008d0
 80075b0:	200008cc 	.word	0x200008cc
 80075b4:	20000db4 	.word	0x20000db4
 80075b8:	20000db0 	.word	0x20000db0
 80075bc:	e000ed04 	.word	0xe000ed04

080075c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075c6:	4b05      	ldr	r3, [pc, #20]	; (80075dc <xTaskGetTickCount+0x1c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075cc:	687b      	ldr	r3, [r7, #4]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20000da4 	.word	0x20000da4

080075e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ea:	4b4e      	ldr	r3, [pc, #312]	; (8007724 <xTaskIncrementTick+0x144>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f040 8088 	bne.w	8007704 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075f4:	4b4c      	ldr	r3, [pc, #304]	; (8007728 <xTaskIncrementTick+0x148>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3301      	adds	r3, #1
 80075fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075fc:	4a4a      	ldr	r2, [pc, #296]	; (8007728 <xTaskIncrementTick+0x148>)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d11f      	bne.n	8007648 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007608:	4b48      	ldr	r3, [pc, #288]	; (800772c <xTaskIncrementTick+0x14c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d009      	beq.n	8007626 <xTaskIncrementTick+0x46>
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	e7fe      	b.n	8007624 <xTaskIncrementTick+0x44>
 8007626:	4b41      	ldr	r3, [pc, #260]	; (800772c <xTaskIncrementTick+0x14c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	4b40      	ldr	r3, [pc, #256]	; (8007730 <xTaskIncrementTick+0x150>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a3e      	ldr	r2, [pc, #248]	; (800772c <xTaskIncrementTick+0x14c>)
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	4a3e      	ldr	r2, [pc, #248]	; (8007730 <xTaskIncrementTick+0x150>)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	4b3e      	ldr	r3, [pc, #248]	; (8007734 <xTaskIncrementTick+0x154>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3301      	adds	r3, #1
 8007640:	4a3c      	ldr	r2, [pc, #240]	; (8007734 <xTaskIncrementTick+0x154>)
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	f000 fac4 	bl	8007bd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007648:	4b3b      	ldr	r3, [pc, #236]	; (8007738 <xTaskIncrementTick+0x158>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	429a      	cmp	r2, r3
 8007650:	d349      	bcc.n	80076e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007652:	4b36      	ldr	r3, [pc, #216]	; (800772c <xTaskIncrementTick+0x14c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800765c:	4b36      	ldr	r3, [pc, #216]	; (8007738 <xTaskIncrementTick+0x158>)
 800765e:	f04f 32ff 	mov.w	r2, #4294967295
 8007662:	601a      	str	r2, [r3, #0]
					break;
 8007664:	e03f      	b.n	80076e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007666:	4b31      	ldr	r3, [pc, #196]	; (800772c <xTaskIncrementTick+0x14c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	429a      	cmp	r2, r3
 800767c:	d203      	bcs.n	8007686 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800767e:	4a2e      	ldr	r2, [pc, #184]	; (8007738 <xTaskIncrementTick+0x158>)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007684:	e02f      	b.n	80076e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	3304      	adds	r3, #4
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe ffba 	bl	8006604 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	3318      	adds	r3, #24
 800769c:	4618      	mov	r0, r3
 800769e:	f7fe ffb1 	bl	8006604 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a6:	4b25      	ldr	r3, [pc, #148]	; (800773c <xTaskIncrementTick+0x15c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d903      	bls.n	80076b6 <xTaskIncrementTick+0xd6>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	4a22      	ldr	r2, [pc, #136]	; (800773c <xTaskIncrementTick+0x15c>)
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <xTaskIncrementTick+0x160>)
 80076c4:	441a      	add	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	3304      	adds	r3, #4
 80076ca:	4619      	mov	r1, r3
 80076cc:	4610      	mov	r0, r2
 80076ce:	f7fe ff3c 	bl	800654a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d6:	4b1b      	ldr	r3, [pc, #108]	; (8007744 <xTaskIncrementTick+0x164>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	429a      	cmp	r2, r3
 80076de:	d3b8      	bcc.n	8007652 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076e4:	e7b5      	b.n	8007652 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076e6:	4b17      	ldr	r3, [pc, #92]	; (8007744 <xTaskIncrementTick+0x164>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ec:	4914      	ldr	r1, [pc, #80]	; (8007740 <xTaskIncrementTick+0x160>)
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d907      	bls.n	800770e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80076fe:	2301      	movs	r3, #1
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	e004      	b.n	800770e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007704:	4b10      	ldr	r3, [pc, #64]	; (8007748 <xTaskIncrementTick+0x168>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	4a0f      	ldr	r2, [pc, #60]	; (8007748 <xTaskIncrementTick+0x168>)
 800770c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <xTaskIncrementTick+0x16c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800771a:	697b      	ldr	r3, [r7, #20]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20000dc8 	.word	0x20000dc8
 8007728:	20000da4 	.word	0x20000da4
 800772c:	20000d58 	.word	0x20000d58
 8007730:	20000d5c 	.word	0x20000d5c
 8007734:	20000db8 	.word	0x20000db8
 8007738:	20000dc0 	.word	0x20000dc0
 800773c:	20000da8 	.word	0x20000da8
 8007740:	200008d0 	.word	0x200008d0
 8007744:	200008cc 	.word	0x200008cc
 8007748:	20000db0 	.word	0x20000db0
 800774c:	20000db4 	.word	0x20000db4

08007750 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007756:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <vTaskSwitchContext+0xa4>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800775e:	4b26      	ldr	r3, [pc, #152]	; (80077f8 <vTaskSwitchContext+0xa8>)
 8007760:	2201      	movs	r2, #1
 8007762:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007764:	e040      	b.n	80077e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007766:	4b24      	ldr	r3, [pc, #144]	; (80077f8 <vTaskSwitchContext+0xa8>)
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800776c:	4b23      	ldr	r3, [pc, #140]	; (80077fc <vTaskSwitchContext+0xac>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	e00f      	b.n	8007794 <vTaskSwitchContext+0x44>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d109      	bne.n	800778e <vTaskSwitchContext+0x3e>
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	607b      	str	r3, [r7, #4]
 800778c:	e7fe      	b.n	800778c <vTaskSwitchContext+0x3c>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3b01      	subs	r3, #1
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	491a      	ldr	r1, [pc, #104]	; (8007800 <vTaskSwitchContext+0xb0>)
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4613      	mov	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0e5      	beq.n	8007774 <vTaskSwitchContext+0x24>
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4a13      	ldr	r2, [pc, #76]	; (8007800 <vTaskSwitchContext+0xb0>)
 80077b4:	4413      	add	r3, r2
 80077b6:	60bb      	str	r3, [r7, #8]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	605a      	str	r2, [r3, #4]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	3308      	adds	r3, #8
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d104      	bne.n	80077d8 <vTaskSwitchContext+0x88>
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	605a      	str	r2, [r3, #4]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	4a09      	ldr	r2, [pc, #36]	; (8007804 <vTaskSwitchContext+0xb4>)
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	4a06      	ldr	r2, [pc, #24]	; (80077fc <vTaskSwitchContext+0xac>)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6013      	str	r3, [r2, #0]
}
 80077e8:	bf00      	nop
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	20000dc8 	.word	0x20000dc8
 80077f8:	20000db4 	.word	0x20000db4
 80077fc:	20000da8 	.word	0x20000da8
 8007800:	200008d0 	.word	0x200008d0
 8007804:	200008cc 	.word	0x200008cc

08007808 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d109      	bne.n	800782c <vTaskPlaceOnEventList+0x24>
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	e7fe      	b.n	800782a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800782c:	4b07      	ldr	r3, [pc, #28]	; (800784c <vTaskPlaceOnEventList+0x44>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3318      	adds	r3, #24
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7fe feac 	bl	8006592 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800783a:	2101      	movs	r1, #1
 800783c:	6838      	ldr	r0, [r7, #0]
 800783e:	f000 fa71 	bl	8007d24 <prvAddCurrentTaskToDelayedList>
}
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200008cc 	.word	0x200008cc

08007850 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <vTaskPlaceOnEventListRestricted+0x26>
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	e7fe      	b.n	8007874 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007876:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3318      	adds	r3, #24
 800787c:	4619      	mov	r1, r3
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f7fe fe63 	bl	800654a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800788a:	f04f 33ff 	mov.w	r3, #4294967295
 800788e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	68b8      	ldr	r0, [r7, #8]
 8007894:	f000 fa46 	bl	8007d24 <prvAddCurrentTaskToDelayedList>
	}
 8007898:	bf00      	nop
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200008cc 	.word	0x200008cc

080078a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d109      	bne.n	80078ce <xTaskRemoveFromEventList+0x2a>
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e7fe      	b.n	80078cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	3318      	adds	r3, #24
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe fe96 	bl	8006604 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078d8:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <xTaskRemoveFromEventList+0xac>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d11d      	bne.n	800791c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe fe8d 	bl	8006604 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ee:	4b19      	ldr	r3, [pc, #100]	; (8007954 <xTaskRemoveFromEventList+0xb0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d903      	bls.n	80078fe <xTaskRemoveFromEventList+0x5a>
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	4a16      	ldr	r2, [pc, #88]	; (8007954 <xTaskRemoveFromEventList+0xb0>)
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4a13      	ldr	r2, [pc, #76]	; (8007958 <xTaskRemoveFromEventList+0xb4>)
 800790c:	441a      	add	r2, r3
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f7fe fe18 	bl	800654a <vListInsertEnd>
 800791a:	e005      	b.n	8007928 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	3318      	adds	r3, #24
 8007920:	4619      	mov	r1, r3
 8007922:	480e      	ldr	r0, [pc, #56]	; (800795c <xTaskRemoveFromEventList+0xb8>)
 8007924:	f7fe fe11 	bl	800654a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	4b0c      	ldr	r3, [pc, #48]	; (8007960 <xTaskRemoveFromEventList+0xbc>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	429a      	cmp	r2, r3
 8007934:	d905      	bls.n	8007942 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007936:	2301      	movs	r3, #1
 8007938:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800793a:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <xTaskRemoveFromEventList+0xc0>)
 800793c:	2201      	movs	r2, #1
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	e001      	b.n	8007946 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007946:	697b      	ldr	r3, [r7, #20]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000dc8 	.word	0x20000dc8
 8007954:	20000da8 	.word	0x20000da8
 8007958:	200008d0 	.word	0x200008d0
 800795c:	20000d60 	.word	0x20000d60
 8007960:	200008cc 	.word	0x200008cc
 8007964:	20000db4 	.word	0x20000db4

08007968 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007970:	4b06      	ldr	r3, [pc, #24]	; (800798c <vTaskInternalSetTimeOutState+0x24>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <vTaskInternalSetTimeOutState+0x28>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	605a      	str	r2, [r3, #4]
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	20000db8 	.word	0x20000db8
 8007990:	20000da4 	.word	0x20000da4

08007994 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d109      	bne.n	80079b8 <xTaskCheckForTimeOut+0x24>
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	e7fe      	b.n	80079b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d109      	bne.n	80079d2 <xTaskCheckForTimeOut+0x3e>
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e7fe      	b.n	80079d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80079d2:	f000 fe6b 	bl	80086ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079d6:	4b1d      	ldr	r3, [pc, #116]	; (8007a4c <xTaskCheckForTimeOut+0xb8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ee:	d102      	bne.n	80079f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079f0:	2300      	movs	r3, #0
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	e023      	b.n	8007a3e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <xTaskCheckForTimeOut+0xbc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d007      	beq.n	8007a12 <xTaskCheckForTimeOut+0x7e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d302      	bcc.n	8007a12 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	61fb      	str	r3, [r7, #28]
 8007a10:	e015      	b.n	8007a3e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d20b      	bcs.n	8007a34 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	1ad2      	subs	r2, r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ff9d 	bl	8007968 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	e004      	b.n	8007a3e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a3e:	f000 fe63 	bl	8008708 <vPortExitCritical>

	return xReturn;
 8007a42:	69fb      	ldr	r3, [r7, #28]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3720      	adds	r7, #32
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000da4 	.word	0x20000da4
 8007a50:	20000db8 	.word	0x20000db8

08007a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a58:	4b03      	ldr	r3, [pc, #12]	; (8007a68 <vTaskMissedYield+0x14>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
}
 8007a5e:	bf00      	nop
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	20000db4 	.word	0x20000db4

08007a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a74:	f000 f852 	bl	8007b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a78:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <prvIdleTask+0x28>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d9f9      	bls.n	8007a74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a80:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <prvIdleTask+0x2c>)
 8007a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a90:	e7f0      	b.n	8007a74 <prvIdleTask+0x8>
 8007a92:	bf00      	nop
 8007a94:	200008d0 	.word	0x200008d0
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	e00c      	b.n	8007ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4a12      	ldr	r2, [pc, #72]	; (8007afc <prvInitialiseTaskLists+0x60>)
 8007ab4:	4413      	add	r3, r2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe fd1a 	bl	80064f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	607b      	str	r3, [r7, #4]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b37      	cmp	r3, #55	; 0x37
 8007ac6:	d9ef      	bls.n	8007aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ac8:	480d      	ldr	r0, [pc, #52]	; (8007b00 <prvInitialiseTaskLists+0x64>)
 8007aca:	f7fe fd11 	bl	80064f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ace:	480d      	ldr	r0, [pc, #52]	; (8007b04 <prvInitialiseTaskLists+0x68>)
 8007ad0:	f7fe fd0e 	bl	80064f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ad4:	480c      	ldr	r0, [pc, #48]	; (8007b08 <prvInitialiseTaskLists+0x6c>)
 8007ad6:	f7fe fd0b 	bl	80064f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ada:	480c      	ldr	r0, [pc, #48]	; (8007b0c <prvInitialiseTaskLists+0x70>)
 8007adc:	f7fe fd08 	bl	80064f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ae0:	480b      	ldr	r0, [pc, #44]	; (8007b10 <prvInitialiseTaskLists+0x74>)
 8007ae2:	f7fe fd05 	bl	80064f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <prvInitialiseTaskLists+0x78>)
 8007ae8:	4a05      	ldr	r2, [pc, #20]	; (8007b00 <prvInitialiseTaskLists+0x64>)
 8007aea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <prvInitialiseTaskLists+0x7c>)
 8007aee:	4a05      	ldr	r2, [pc, #20]	; (8007b04 <prvInitialiseTaskLists+0x68>)
 8007af0:	601a      	str	r2, [r3, #0]
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	200008d0 	.word	0x200008d0
 8007b00:	20000d30 	.word	0x20000d30
 8007b04:	20000d44 	.word	0x20000d44
 8007b08:	20000d60 	.word	0x20000d60
 8007b0c:	20000d74 	.word	0x20000d74
 8007b10:	20000d8c 	.word	0x20000d8c
 8007b14:	20000d58 	.word	0x20000d58
 8007b18:	20000d5c 	.word	0x20000d5c

08007b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b22:	e019      	b.n	8007b58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b24:	f000 fdc2 	bl	80086ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <prvCheckTasksWaitingTermination+0x4c>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3304      	adds	r3, #4
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe fd65 	bl	8006604 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <prvCheckTasksWaitingTermination+0x50>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	4a0a      	ldr	r2, [pc, #40]	; (8007b6c <prvCheckTasksWaitingTermination+0x50>)
 8007b42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <prvCheckTasksWaitingTermination+0x54>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	4a09      	ldr	r2, [pc, #36]	; (8007b70 <prvCheckTasksWaitingTermination+0x54>)
 8007b4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b4e:	f000 fddb 	bl	8008708 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f80e 	bl	8007b74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b58:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <prvCheckTasksWaitingTermination+0x54>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e1      	bne.n	8007b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b60:	bf00      	nop
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	20000d74 	.word	0x20000d74
 8007b6c:	20000da0 	.word	0x20000da0
 8007b70:	20000d88 	.word	0x20000d88

08007b74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d108      	bne.n	8007b98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 ff6a 	bl	8008a64 <vPortFree>
				vPortFree( pxTCB );
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 ff67 	bl	8008a64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b96:	e017      	b.n	8007bc8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d103      	bne.n	8007baa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 ff5e 	bl	8008a64 <vPortFree>
	}
 8007ba8:	e00e      	b.n	8007bc8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d009      	beq.n	8007bc8 <prvDeleteTCB+0x54>
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e7fe      	b.n	8007bc6 <prvDeleteTCB+0x52>
	}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <prvResetNextTaskUnblockTime+0x38>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d104      	bne.n	8007bea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007be0:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <prvResetNextTaskUnblockTime+0x3c>)
 8007be2:	f04f 32ff 	mov.w	r2, #4294967295
 8007be6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007be8:	e008      	b.n	8007bfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <prvResetNextTaskUnblockTime+0x38>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a04      	ldr	r2, [pc, #16]	; (8007c0c <prvResetNextTaskUnblockTime+0x3c>)
 8007bfa:	6013      	str	r3, [r2, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	20000d58 	.word	0x20000d58
 8007c0c:	20000dc0 	.word	0x20000dc0

08007c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c16:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <xTaskGetSchedulerState+0x34>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d102      	bne.n	8007c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	607b      	str	r3, [r7, #4]
 8007c22:	e008      	b.n	8007c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c24:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <xTaskGetSchedulerState+0x38>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d102      	bne.n	8007c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	607b      	str	r3, [r7, #4]
 8007c30:	e001      	b.n	8007c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c36:	687b      	ldr	r3, [r7, #4]
	}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	20000dac 	.word	0x20000dac
 8007c48:	20000dc8 	.word	0x20000dc8

08007c4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d054      	beq.n	8007d0c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c62:	4b2d      	ldr	r3, [pc, #180]	; (8007d18 <xTaskPriorityDisinherit+0xcc>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d009      	beq.n	8007c80 <xTaskPriorityDisinherit+0x34>
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	e7fe      	b.n	8007c7e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d109      	bne.n	8007c9c <xTaskPriorityDisinherit+0x50>
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	60bb      	str	r3, [r7, #8]
 8007c9a:	e7fe      	b.n	8007c9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca0:	1e5a      	subs	r2, r3, #1
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d02c      	beq.n	8007d0c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d128      	bne.n	8007d0c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fca0 	bl	8006604 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cdc:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <xTaskPriorityDisinherit+0xd0>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d903      	bls.n	8007cec <xTaskPriorityDisinherit+0xa0>
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	4a0c      	ldr	r2, [pc, #48]	; (8007d1c <xTaskPriorityDisinherit+0xd0>)
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <xTaskPriorityDisinherit+0xd4>)
 8007cfa:	441a      	add	r2, r3
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	3304      	adds	r3, #4
 8007d00:	4619      	mov	r1, r3
 8007d02:	4610      	mov	r0, r2
 8007d04:	f7fe fc21 	bl	800654a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d0c:	697b      	ldr	r3, [r7, #20]
	}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	200008cc 	.word	0x200008cc
 8007d1c:	20000da8 	.word	0x20000da8
 8007d20:	200008d0 	.word	0x200008d0

08007d24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d2e:	4b21      	ldr	r3, [pc, #132]	; (8007db4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d34:	4b20      	ldr	r3, [pc, #128]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fc62 	bl	8006604 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d10a      	bne.n	8007d5e <prvAddCurrentTaskToDelayedList+0x3a>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d007      	beq.n	8007d5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d4e:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4819      	ldr	r0, [pc, #100]	; (8007dbc <prvAddCurrentTaskToDelayedList+0x98>)
 8007d58:	f7fe fbf7 	bl	800654a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d5c:	e026      	b.n	8007dac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4413      	add	r3, r2
 8007d64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d66:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d209      	bcs.n	8007d8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4619      	mov	r1, r3
 8007d82:	4610      	mov	r0, r2
 8007d84:	f7fe fc05 	bl	8006592 <vListInsert>
}
 8007d88:	e010      	b.n	8007dac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d8a:	4b0e      	ldr	r3, [pc, #56]	; (8007dc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f7fe fbfb 	bl	8006592 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d202      	bcs.n	8007dac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007da6:	4a08      	ldr	r2, [pc, #32]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	6013      	str	r3, [r2, #0]
}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000da4 	.word	0x20000da4
 8007db8:	200008cc 	.word	0x200008cc
 8007dbc:	20000d8c 	.word	0x20000d8c
 8007dc0:	20000d5c 	.word	0x20000d5c
 8007dc4:	20000d58 	.word	0x20000d58
 8007dc8:	20000dc0 	.word	0x20000dc0

08007dcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08a      	sub	sp, #40	; 0x28
 8007dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dd6:	f000 faff 	bl	80083d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dda:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <xTimerCreateTimerTask+0x80>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d021      	beq.n	8007e26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dea:	1d3a      	adds	r2, r7, #4
 8007dec:	f107 0108 	add.w	r1, r7, #8
 8007df0:	f107 030c 	add.w	r3, r7, #12
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe fb61 	bl	80064bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	9202      	str	r2, [sp, #8]
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	2302      	movs	r3, #2
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	4910      	ldr	r1, [pc, #64]	; (8007e50 <xTimerCreateTimerTask+0x84>)
 8007e0e:	4811      	ldr	r0, [pc, #68]	; (8007e54 <xTimerCreateTimerTask+0x88>)
 8007e10:	f7ff f8f6 	bl	8007000 <xTaskCreateStatic>
 8007e14:	4602      	mov	r2, r0
 8007e16:	4b10      	ldr	r3, [pc, #64]	; (8007e58 <xTimerCreateTimerTask+0x8c>)
 8007e18:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e1a:	4b0f      	ldr	r3, [pc, #60]	; (8007e58 <xTimerCreateTimerTask+0x8c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e22:	2301      	movs	r3, #1
 8007e24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d109      	bne.n	8007e40 <xTimerCreateTimerTask+0x74>
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	613b      	str	r3, [r7, #16]
 8007e3e:	e7fe      	b.n	8007e3e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007e40:	697b      	ldr	r3, [r7, #20]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20000dfc 	.word	0x20000dfc
 8007e50:	08009fe4 	.word	0x08009fe4
 8007e54:	08007f8d 	.word	0x08007f8d
 8007e58:	20000e00 	.word	0x20000e00

08007e5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	; 0x28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d109      	bne.n	8007e88 <xTimerGenericCommand+0x2c>
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	623b      	str	r3, [r7, #32]
 8007e86:	e7fe      	b.n	8007e86 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e88:	4b19      	ldr	r3, [pc, #100]	; (8007ef0 <xTimerGenericCommand+0x94>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d02a      	beq.n	8007ee6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b05      	cmp	r3, #5
 8007ea0:	dc18      	bgt.n	8007ed4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ea2:	f7ff feb5 	bl	8007c10 <xTaskGetSchedulerState>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d109      	bne.n	8007ec0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007eac:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <xTimerGenericCommand+0x94>)
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	f107 0110 	add.w	r1, r7, #16
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb8:	f7fe fccc 	bl	8006854 <xQueueGenericSend>
 8007ebc:	6278      	str	r0, [r7, #36]	; 0x24
 8007ebe:	e012      	b.n	8007ee6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <xTimerGenericCommand+0x94>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	f107 0110 	add.w	r1, r7, #16
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f7fe fcc2 	bl	8006854 <xQueueGenericSend>
 8007ed0:	6278      	str	r0, [r7, #36]	; 0x24
 8007ed2:	e008      	b.n	8007ee6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <xTimerGenericCommand+0x94>)
 8007ed6:	6818      	ldr	r0, [r3, #0]
 8007ed8:	f107 0110 	add.w	r1, r7, #16
 8007edc:	2300      	movs	r3, #0
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	f7fe fdb2 	bl	8006a48 <xQueueGenericSendFromISR>
 8007ee4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3728      	adds	r7, #40	; 0x28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	20000dfc 	.word	0x20000dfc

08007ef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007efe:	4b22      	ldr	r3, [pc, #136]	; (8007f88 <prvProcessExpiredTimer+0x94>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fb79 	bl	8006604 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d021      	beq.n	8007f64 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	699a      	ldr	r2, [r3, #24]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	18d1      	adds	r1, r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	6978      	ldr	r0, [r7, #20]
 8007f2e:	f000 f8d1 	bl	80080d4 <prvInsertTimerInActiveList>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01e      	beq.n	8007f76 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	2100      	movs	r1, #0
 8007f42:	6978      	ldr	r0, [r7, #20]
 8007f44:	f7ff ff8a 	bl	8007e5c <xTimerGenericCommand>
 8007f48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d112      	bne.n	8007f76 <prvProcessExpiredTimer+0x82>
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	e7fe      	b.n	8007f62 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f6a:	f023 0301 	bic.w	r3, r3, #1
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	6978      	ldr	r0, [r7, #20]
 8007f7c:	4798      	blx	r3
}
 8007f7e:	bf00      	nop
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20000df4 	.word	0x20000df4

08007f8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f94:	f107 0308 	add.w	r3, r7, #8
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 f857 	bl	800804c <prvGetNextExpireTime>
 8007f9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 f803 	bl	8007fb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007faa:	f000 f8d5 	bl	8008158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fae:	e7f1      	b.n	8007f94 <prvTimerTask+0x8>

08007fb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fba:	f7ff fa57 	bl	800746c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fbe:	f107 0308 	add.w	r3, r7, #8
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f866 	bl	8008094 <prvSampleTimeNow>
 8007fc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d130      	bne.n	8008032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10a      	bne.n	8007fec <prvProcessTimerOrBlockTask+0x3c>
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d806      	bhi.n	8007fec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fde:	f7ff fa53 	bl	8007488 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ff85 	bl	8007ef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fea:	e024      	b.n	8008036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d008      	beq.n	8008004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ff2:	4b13      	ldr	r3, [pc, #76]	; (8008040 <prvProcessTimerOrBlockTask+0x90>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <prvProcessTimerOrBlockTask+0x50>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e000      	b.n	8008002 <prvProcessTimerOrBlockTask+0x52>
 8008000:	2300      	movs	r3, #0
 8008002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008004:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <prvProcessTimerOrBlockTask+0x94>)
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4619      	mov	r1, r3
 8008012:	f7fe ffc1 	bl	8006f98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008016:	f7ff fa37 	bl	8007488 <xTaskResumeAll>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008020:	4b09      	ldr	r3, [pc, #36]	; (8008048 <prvProcessTimerOrBlockTask+0x98>)
 8008022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
}
 8008030:	e001      	b.n	8008036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008032:	f7ff fa29 	bl	8007488 <xTaskResumeAll>
}
 8008036:	bf00      	nop
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000df8 	.word	0x20000df8
 8008044:	20000dfc 	.word	0x20000dfc
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <prvGetNextExpireTime+0x44>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <prvGetNextExpireTime+0x16>
 800805e:	2201      	movs	r2, #1
 8008060:	e000      	b.n	8008064 <prvGetNextExpireTime+0x18>
 8008062:	2200      	movs	r2, #0
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d105      	bne.n	800807c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <prvGetNextExpireTime+0x44>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	e001      	b.n	8008080 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008080:	68fb      	ldr	r3, [r7, #12]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20000df4 	.word	0x20000df4

08008094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800809c:	f7ff fa90 	bl	80075c0 <xTaskGetTickCount>
 80080a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080a2:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <prvSampleTimeNow+0x3c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d205      	bcs.n	80080b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080ac:	f000 f930 	bl	8008310 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	e002      	b.n	80080be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080be:	4a04      	ldr	r2, [pc, #16]	; (80080d0 <prvSampleTimeNow+0x3c>)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080c4:	68fb      	ldr	r3, [r7, #12]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20000e04 	.word	0x20000e04

080080d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d812      	bhi.n	8008120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	d302      	bcc.n	800810e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008108:	2301      	movs	r3, #1
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	e01b      	b.n	8008146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800810e:	4b10      	ldr	r3, [pc, #64]	; (8008150 <prvInsertTimerInActiveList+0x7c>)
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3304      	adds	r3, #4
 8008116:	4619      	mov	r1, r3
 8008118:	4610      	mov	r0, r2
 800811a:	f7fe fa3a 	bl	8006592 <vListInsert>
 800811e:	e012      	b.n	8008146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	429a      	cmp	r2, r3
 8008126:	d206      	bcs.n	8008136 <prvInsertTimerInActiveList+0x62>
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d302      	bcc.n	8008136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e007      	b.n	8008146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008136:	4b07      	ldr	r3, [pc, #28]	; (8008154 <prvInsertTimerInActiveList+0x80>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3304      	adds	r3, #4
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f7fe fa26 	bl	8006592 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008146:	697b      	ldr	r3, [r7, #20]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20000df8 	.word	0x20000df8
 8008154:	20000df4 	.word	0x20000df4

08008158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08e      	sub	sp, #56	; 0x38
 800815c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800815e:	e0c6      	b.n	80082ee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	da17      	bge.n	8008196 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008166:	1d3b      	adds	r3, r7, #4
 8008168:	3304      	adds	r3, #4
 800816a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <prvProcessReceivedCommands+0x2e>
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	e7fe      	b.n	8008184 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818c:	6850      	ldr	r0, [r2, #4]
 800818e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008190:	6892      	ldr	r2, [r2, #8]
 8008192:	4611      	mov	r1, r2
 8008194:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f2c0 80a7 	blt.w	80082ec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d004      	beq.n	80081b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	3304      	adds	r3, #4
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fa28 	bl	8006604 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081b4:	463b      	mov	r3, r7
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff ff6c 	bl	8008094 <prvSampleTimeNow>
 80081bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b09      	cmp	r3, #9
 80081c2:	f200 8094 	bhi.w	80082ee <prvProcessReceivedCommands+0x196>
 80081c6:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <prvProcessReceivedCommands+0x74>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	080081f5 	.word	0x080081f5
 80081d0:	080081f5 	.word	0x080081f5
 80081d4:	080081f5 	.word	0x080081f5
 80081d8:	08008267 	.word	0x08008267
 80081dc:	0800827b 	.word	0x0800827b
 80081e0:	080082c3 	.word	0x080082c3
 80081e4:	080081f5 	.word	0x080081f5
 80081e8:	080081f5 	.word	0x080081f5
 80081ec:	08008267 	.word	0x08008267
 80081f0:	0800827b 	.word	0x0800827b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	18d1      	adds	r1, r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008214:	f7ff ff5e 	bl	80080d4 <prvInsertTimerInActiveList>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d067      	beq.n	80082ee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008224:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d05c      	beq.n	80082ee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	441a      	add	r2, r3
 800823c:	2300      	movs	r3, #0
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	2300      	movs	r3, #0
 8008242:	2100      	movs	r1, #0
 8008244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008246:	f7ff fe09 	bl	8007e5c <xTimerGenericCommand>
 800824a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d14d      	bne.n	80082ee <prvProcessReceivedCommands+0x196>
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	61bb      	str	r3, [r7, #24]
 8008264:	e7fe      	b.n	8008264 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800826c:	f023 0301 	bic.w	r3, r3, #1
 8008270:	b2da      	uxtb	r2, r3
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008278:	e039      	b.n	80082ee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008280:	f043 0301 	orr.w	r3, r3, #1
 8008284:	b2da      	uxtb	r2, r3
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d109      	bne.n	80082ae <prvProcessReceivedCommands+0x156>
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	617b      	str	r3, [r7, #20]
 80082ac:	e7fe      	b.n	80082ac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	18d1      	adds	r1, r2, r3
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082bc:	f7ff ff0a 	bl	80080d4 <prvInsertTimerInActiveList>
					break;
 80082c0:	e015      	b.n	80082ee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d103      	bne.n	80082d8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80082d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082d2:	f000 fbc7 	bl	8008a64 <vPortFree>
 80082d6:	e00a      	b.n	80082ee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082de:	f023 0301 	bic.w	r3, r3, #1
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082ea:	e000      	b.n	80082ee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082ee:	4b07      	ldr	r3, [pc, #28]	; (800830c <prvProcessReceivedCommands+0x1b4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	1d39      	adds	r1, r7, #4
 80082f4:	2200      	movs	r2, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fc3a 	bl	8006b70 <xQueueReceive>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f47f af2e 	bne.w	8008160 <prvProcessReceivedCommands+0x8>
	}
}
 8008304:	bf00      	nop
 8008306:	3730      	adds	r7, #48	; 0x30
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20000dfc 	.word	0x20000dfc

08008310 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008316:	e047      	b.n	80083a8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008318:	4b2d      	ldr	r3, [pc, #180]	; (80083d0 <prvSwitchTimerLists+0xc0>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008322:	4b2b      	ldr	r3, [pc, #172]	; (80083d0 <prvSwitchTimerLists+0xc0>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3304      	adds	r3, #4
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe f967 	bl	8006604 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d02d      	beq.n	80083a8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	4413      	add	r3, r2
 8008354:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	429a      	cmp	r2, r3
 800835c:	d90e      	bls.n	800837c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800836a:	4b19      	ldr	r3, [pc, #100]	; (80083d0 <prvSwitchTimerLists+0xc0>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3304      	adds	r3, #4
 8008372:	4619      	mov	r1, r3
 8008374:	4610      	mov	r0, r2
 8008376:	f7fe f90c 	bl	8006592 <vListInsert>
 800837a:	e015      	b.n	80083a8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800837c:	2300      	movs	r3, #0
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	2300      	movs	r3, #0
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	2100      	movs	r1, #0
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f7ff fd68 	bl	8007e5c <xTimerGenericCommand>
 800838c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <prvSwitchTimerLists+0x98>
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	603b      	str	r3, [r7, #0]
 80083a6:	e7fe      	b.n	80083a6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083a8:	4b09      	ldr	r3, [pc, #36]	; (80083d0 <prvSwitchTimerLists+0xc0>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1b2      	bne.n	8008318 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083b2:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <prvSwitchTimerLists+0xc0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083b8:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <prvSwitchTimerLists+0xc4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a04      	ldr	r2, [pc, #16]	; (80083d0 <prvSwitchTimerLists+0xc0>)
 80083be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083c0:	4a04      	ldr	r2, [pc, #16]	; (80083d4 <prvSwitchTimerLists+0xc4>)
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	6013      	str	r3, [r2, #0]
}
 80083c6:	bf00      	nop
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000df4 	.word	0x20000df4
 80083d4:	20000df8 	.word	0x20000df8

080083d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083de:	f000 f965 	bl	80086ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083e2:	4b15      	ldr	r3, [pc, #84]	; (8008438 <prvCheckForValidListAndQueue+0x60>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d120      	bne.n	800842c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083ea:	4814      	ldr	r0, [pc, #80]	; (800843c <prvCheckForValidListAndQueue+0x64>)
 80083ec:	f7fe f880 	bl	80064f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083f0:	4813      	ldr	r0, [pc, #76]	; (8008440 <prvCheckForValidListAndQueue+0x68>)
 80083f2:	f7fe f87d 	bl	80064f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083f6:	4b13      	ldr	r3, [pc, #76]	; (8008444 <prvCheckForValidListAndQueue+0x6c>)
 80083f8:	4a10      	ldr	r2, [pc, #64]	; (800843c <prvCheckForValidListAndQueue+0x64>)
 80083fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083fc:	4b12      	ldr	r3, [pc, #72]	; (8008448 <prvCheckForValidListAndQueue+0x70>)
 80083fe:	4a10      	ldr	r2, [pc, #64]	; (8008440 <prvCheckForValidListAndQueue+0x68>)
 8008400:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008402:	2300      	movs	r3, #0
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	4b11      	ldr	r3, [pc, #68]	; (800844c <prvCheckForValidListAndQueue+0x74>)
 8008408:	4a11      	ldr	r2, [pc, #68]	; (8008450 <prvCheckForValidListAndQueue+0x78>)
 800840a:	2110      	movs	r1, #16
 800840c:	200a      	movs	r0, #10
 800840e:	f7fe f98b 	bl	8006728 <xQueueGenericCreateStatic>
 8008412:	4602      	mov	r2, r0
 8008414:	4b08      	ldr	r3, [pc, #32]	; (8008438 <prvCheckForValidListAndQueue+0x60>)
 8008416:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008418:	4b07      	ldr	r3, [pc, #28]	; (8008438 <prvCheckForValidListAndQueue+0x60>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008420:	4b05      	ldr	r3, [pc, #20]	; (8008438 <prvCheckForValidListAndQueue+0x60>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	490b      	ldr	r1, [pc, #44]	; (8008454 <prvCheckForValidListAndQueue+0x7c>)
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe fd8e 	bl	8006f48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800842c:	f000 f96c 	bl	8008708 <vPortExitCritical>
}
 8008430:	bf00      	nop
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000dfc 	.word	0x20000dfc
 800843c:	20000dcc 	.word	0x20000dcc
 8008440:	20000de0 	.word	0x20000de0
 8008444:	20000df4 	.word	0x20000df4
 8008448:	20000df8 	.word	0x20000df8
 800844c:	20000ea8 	.word	0x20000ea8
 8008450:	20000e08 	.word	0x20000e08
 8008454:	08009fec 	.word	0x08009fec

08008458 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3b04      	subs	r3, #4
 8008468:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3b04      	subs	r3, #4
 8008476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f023 0201 	bic.w	r2, r3, #1
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3b04      	subs	r3, #4
 8008486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008488:	4a0c      	ldr	r2, [pc, #48]	; (80084bc <pxPortInitialiseStack+0x64>)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3b14      	subs	r3, #20
 8008492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3b04      	subs	r3, #4
 800849e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f06f 0202 	mvn.w	r2, #2
 80084a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	3b20      	subs	r3, #32
 80084ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084ae:	68fb      	ldr	r3, [r7, #12]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	080084c1 	.word	0x080084c1

080084c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084ca:	4b11      	ldr	r3, [pc, #68]	; (8008510 <prvTaskExitError+0x50>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d2:	d009      	beq.n	80084e8 <prvTaskExitError+0x28>
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	e7fe      	b.n	80084e6 <prvTaskExitError+0x26>
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084fa:	bf00      	nop
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0fc      	beq.n	80084fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008502:	bf00      	nop
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	2000011c 	.word	0x2000011c
	...

08008520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <pxCurrentTCBConst2>)
 8008522:	6819      	ldr	r1, [r3, #0]
 8008524:	6808      	ldr	r0, [r1, #0]
 8008526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852a:	f380 8809 	msr	PSP, r0
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f04f 0000 	mov.w	r0, #0
 8008536:	f380 8811 	msr	BASEPRI, r0
 800853a:	4770      	bx	lr
 800853c:	f3af 8000 	nop.w

08008540 <pxCurrentTCBConst2>:
 8008540:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop

08008548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008548:	4808      	ldr	r0, [pc, #32]	; (800856c <prvPortStartFirstTask+0x24>)
 800854a:	6800      	ldr	r0, [r0, #0]
 800854c:	6800      	ldr	r0, [r0, #0]
 800854e:	f380 8808 	msr	MSP, r0
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8814 	msr	CONTROL, r0
 800855a:	b662      	cpsie	i
 800855c:	b661      	cpsie	f
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	df00      	svc	0
 8008568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800856a:	bf00      	nop
 800856c:	e000ed08 	.word	0xe000ed08

08008570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008576:	4b44      	ldr	r3, [pc, #272]	; (8008688 <xPortStartScheduler+0x118>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a44      	ldr	r2, [pc, #272]	; (800868c <xPortStartScheduler+0x11c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d109      	bne.n	8008594 <xPortStartScheduler+0x24>
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	613b      	str	r3, [r7, #16]
 8008592:	e7fe      	b.n	8008592 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008594:	4b3c      	ldr	r3, [pc, #240]	; (8008688 <xPortStartScheduler+0x118>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a3d      	ldr	r2, [pc, #244]	; (8008690 <xPortStartScheduler+0x120>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d109      	bne.n	80085b2 <xPortStartScheduler+0x42>
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	e7fe      	b.n	80085b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085b2:	4b38      	ldr	r3, [pc, #224]	; (8008694 <xPortStartScheduler+0x124>)
 80085b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	22ff      	movs	r2, #255	; 0xff
 80085c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	4b30      	ldr	r3, [pc, #192]	; (8008698 <xPortStartScheduler+0x128>)
 80085d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085da:	4b30      	ldr	r3, [pc, #192]	; (800869c <xPortStartScheduler+0x12c>)
 80085dc:	2207      	movs	r2, #7
 80085de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085e0:	e009      	b.n	80085f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80085e2:	4b2e      	ldr	r3, [pc, #184]	; (800869c <xPortStartScheduler+0x12c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	4a2c      	ldr	r2, [pc, #176]	; (800869c <xPortStartScheduler+0x12c>)
 80085ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d0ef      	beq.n	80085e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008602:	4b26      	ldr	r3, [pc, #152]	; (800869c <xPortStartScheduler+0x12c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f1c3 0307 	rsb	r3, r3, #7
 800860a:	2b04      	cmp	r3, #4
 800860c:	d009      	beq.n	8008622 <xPortStartScheduler+0xb2>
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	60bb      	str	r3, [r7, #8]
 8008620:	e7fe      	b.n	8008620 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008622:	4b1e      	ldr	r3, [pc, #120]	; (800869c <xPortStartScheduler+0x12c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	4a1c      	ldr	r2, [pc, #112]	; (800869c <xPortStartScheduler+0x12c>)
 800862a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <xPortStartScheduler+0x12c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008634:	4a19      	ldr	r2, [pc, #100]	; (800869c <xPortStartScheduler+0x12c>)
 8008636:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	b2da      	uxtb	r2, r3
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008640:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <xPortStartScheduler+0x130>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a16      	ldr	r2, [pc, #88]	; (80086a0 <xPortStartScheduler+0x130>)
 8008646:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800864a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800864c:	4b14      	ldr	r3, [pc, #80]	; (80086a0 <xPortStartScheduler+0x130>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <xPortStartScheduler+0x130>)
 8008652:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008656:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008658:	f000 f8d6 	bl	8008808 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800865c:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <xPortStartScheduler+0x134>)
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008662:	f000 f8f5 	bl	8008850 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008666:	4b10      	ldr	r3, [pc, #64]	; (80086a8 <xPortStartScheduler+0x138>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a0f      	ldr	r2, [pc, #60]	; (80086a8 <xPortStartScheduler+0x138>)
 800866c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008670:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008672:	f7ff ff69 	bl	8008548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008676:	f7ff f86b 	bl	8007750 <vTaskSwitchContext>
	prvTaskExitError();
 800867a:	f7ff ff21 	bl	80084c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	e000ed00 	.word	0xe000ed00
 800868c:	410fc271 	.word	0x410fc271
 8008690:	410fc270 	.word	0x410fc270
 8008694:	e000e400 	.word	0xe000e400
 8008698:	20000ef8 	.word	0x20000ef8
 800869c:	20000efc 	.word	0x20000efc
 80086a0:	e000ed20 	.word	0xe000ed20
 80086a4:	2000011c 	.word	0x2000011c
 80086a8:	e000ef34 	.word	0xe000ef34

080086ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086c4:	4b0e      	ldr	r3, [pc, #56]	; (8008700 <vPortEnterCritical+0x54>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3301      	adds	r3, #1
 80086ca:	4a0d      	ldr	r2, [pc, #52]	; (8008700 <vPortEnterCritical+0x54>)
 80086cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086ce:	4b0c      	ldr	r3, [pc, #48]	; (8008700 <vPortEnterCritical+0x54>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d10e      	bne.n	80086f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <vPortEnterCritical+0x58>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <vPortEnterCritical+0x48>
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	603b      	str	r3, [r7, #0]
 80086f2:	e7fe      	b.n	80086f2 <vPortEnterCritical+0x46>
	}
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	2000011c 	.word	0x2000011c
 8008704:	e000ed04 	.word	0xe000ed04

08008708 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800870e:	4b11      	ldr	r3, [pc, #68]	; (8008754 <vPortExitCritical+0x4c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <vPortExitCritical+0x22>
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	607b      	str	r3, [r7, #4]
 8008728:	e7fe      	b.n	8008728 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800872a:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <vPortExitCritical+0x4c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3b01      	subs	r3, #1
 8008730:	4a08      	ldr	r2, [pc, #32]	; (8008754 <vPortExitCritical+0x4c>)
 8008732:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <vPortExitCritical+0x4c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d104      	bne.n	8008746 <vPortExitCritical+0x3e>
 800873c:	2300      	movs	r3, #0
 800873e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	2000011c 	.word	0x2000011c
	...

08008760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008760:	f3ef 8009 	mrs	r0, PSP
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	4b15      	ldr	r3, [pc, #84]	; (80087c0 <pxCurrentTCBConst>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	f01e 0f10 	tst.w	lr, #16
 8008770:	bf08      	it	eq
 8008772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877a:	6010      	str	r0, [r2, #0]
 800877c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008784:	f380 8811 	msr	BASEPRI, r0
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f7fe ffde 	bl	8007750 <vTaskSwitchContext>
 8008794:	f04f 0000 	mov.w	r0, #0
 8008798:	f380 8811 	msr	BASEPRI, r0
 800879c:	bc09      	pop	{r0, r3}
 800879e:	6819      	ldr	r1, [r3, #0]
 80087a0:	6808      	ldr	r0, [r1, #0]
 80087a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a6:	f01e 0f10 	tst.w	lr, #16
 80087aa:	bf08      	it	eq
 80087ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087b0:	f380 8809 	msr	PSP, r0
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	f3af 8000 	nop.w

080087c0 <pxCurrentTCBConst>:
 80087c0:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop

080087c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087e0:	f7fe fefe 	bl	80075e0 <xTaskIncrementTick>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087ea:	4b06      	ldr	r3, [pc, #24]	; (8008804 <SysTick_Handler+0x3c>)
 80087ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f0:	601a      	str	r2, [r3, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	e000ed04 	.word	0xe000ed04

08008808 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008808:	b480      	push	{r7}
 800880a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800880c:	4b0b      	ldr	r3, [pc, #44]	; (800883c <vPortSetupTimerInterrupt+0x34>)
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008812:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <vPortSetupTimerInterrupt+0x38>)
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <vPortSetupTimerInterrupt+0x3c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a0a      	ldr	r2, [pc, #40]	; (8008848 <vPortSetupTimerInterrupt+0x40>)
 800881e:	fba2 2303 	umull	r2, r3, r2, r3
 8008822:	099b      	lsrs	r3, r3, #6
 8008824:	4a09      	ldr	r2, [pc, #36]	; (800884c <vPortSetupTimerInterrupt+0x44>)
 8008826:	3b01      	subs	r3, #1
 8008828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800882a:	4b04      	ldr	r3, [pc, #16]	; (800883c <vPortSetupTimerInterrupt+0x34>)
 800882c:	2207      	movs	r2, #7
 800882e:	601a      	str	r2, [r3, #0]
}
 8008830:	bf00      	nop
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	e000e010 	.word	0xe000e010
 8008840:	e000e018 	.word	0xe000e018
 8008844:	20000000 	.word	0x20000000
 8008848:	10624dd3 	.word	0x10624dd3
 800884c:	e000e014 	.word	0xe000e014

08008850 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008850:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008860 <vPortEnableVFP+0x10>
 8008854:	6801      	ldr	r1, [r0, #0]
 8008856:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800885a:	6001      	str	r1, [r0, #0]
 800885c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800885e:	bf00      	nop
 8008860:	e000ed88 	.word	0xe000ed88

08008864 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800886a:	f3ef 8305 	mrs	r3, IPSR
 800886e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b0f      	cmp	r3, #15
 8008874:	d913      	bls.n	800889e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008876:	4a16      	ldr	r2, [pc, #88]	; (80088d0 <vPortValidateInterruptPriority+0x6c>)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4413      	add	r3, r2
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008880:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <vPortValidateInterruptPriority+0x70>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	7afa      	ldrb	r2, [r7, #11]
 8008886:	429a      	cmp	r2, r3
 8008888:	d209      	bcs.n	800889e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	607b      	str	r3, [r7, #4]
 800889c:	e7fe      	b.n	800889c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800889e:	4b0e      	ldr	r3, [pc, #56]	; (80088d8 <vPortValidateInterruptPriority+0x74>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088a6:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <vPortValidateInterruptPriority+0x78>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d909      	bls.n	80088c2 <vPortValidateInterruptPriority+0x5e>
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	e7fe      	b.n	80088c0 <vPortValidateInterruptPriority+0x5c>
	}
 80088c2:	bf00      	nop
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	e000e3f0 	.word	0xe000e3f0
 80088d4:	20000ef8 	.word	0x20000ef8
 80088d8:	e000ed0c 	.word	0xe000ed0c
 80088dc:	20000efc 	.word	0x20000efc

080088e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08a      	sub	sp, #40	; 0x28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088ec:	f7fe fdbe 	bl	800746c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088f0:	4b57      	ldr	r3, [pc, #348]	; (8008a50 <pvPortMalloc+0x170>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088f8:	f000 f90c 	bl	8008b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088fc:	4b55      	ldr	r3, [pc, #340]	; (8008a54 <pvPortMalloc+0x174>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4013      	ands	r3, r2
 8008904:	2b00      	cmp	r3, #0
 8008906:	f040 808c 	bne.w	8008a22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01c      	beq.n	800894a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008910:	2208      	movs	r2, #8
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4413      	add	r3, r2
 8008916:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f003 0307 	and.w	r3, r3, #7
 800891e:	2b00      	cmp	r3, #0
 8008920:	d013      	beq.n	800894a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f023 0307 	bic.w	r3, r3, #7
 8008928:	3308      	adds	r3, #8
 800892a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <pvPortMalloc+0x6a>
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	e7fe      	b.n	8008948 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d068      	beq.n	8008a22 <pvPortMalloc+0x142>
 8008950:	4b41      	ldr	r3, [pc, #260]	; (8008a58 <pvPortMalloc+0x178>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d863      	bhi.n	8008a22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800895a:	4b40      	ldr	r3, [pc, #256]	; (8008a5c <pvPortMalloc+0x17c>)
 800895c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800895e:	4b3f      	ldr	r3, [pc, #252]	; (8008a5c <pvPortMalloc+0x17c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008964:	e004      	b.n	8008970 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d903      	bls.n	8008982 <pvPortMalloc+0xa2>
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f1      	bne.n	8008966 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008982:	4b33      	ldr	r3, [pc, #204]	; (8008a50 <pvPortMalloc+0x170>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008988:	429a      	cmp	r2, r3
 800898a:	d04a      	beq.n	8008a22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2208      	movs	r2, #8
 8008992:	4413      	add	r3, r2
 8008994:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	1ad2      	subs	r2, r2, r3
 80089a6:	2308      	movs	r3, #8
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d91e      	bls.n	80089ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4413      	add	r3, r2
 80089b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <pvPortMalloc+0xf4>
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	613b      	str	r3, [r7, #16]
 80089d2:	e7fe      	b.n	80089d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	1ad2      	subs	r2, r2, r3
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089e6:	69b8      	ldr	r0, [r7, #24]
 80089e8:	f000 f8f6 	bl	8008bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089ec:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <pvPortMalloc+0x178>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	4a18      	ldr	r2, [pc, #96]	; (8008a58 <pvPortMalloc+0x178>)
 80089f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089fa:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <pvPortMalloc+0x178>)
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	4b18      	ldr	r3, [pc, #96]	; (8008a60 <pvPortMalloc+0x180>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d203      	bcs.n	8008a0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a06:	4b14      	ldr	r3, [pc, #80]	; (8008a58 <pvPortMalloc+0x178>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a15      	ldr	r2, [pc, #84]	; (8008a60 <pvPortMalloc+0x180>)
 8008a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <pvPortMalloc+0x174>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	431a      	orrs	r2, r3
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a22:	f7fe fd31 	bl	8007488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d009      	beq.n	8008a44 <pvPortMalloc+0x164>
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	e7fe      	b.n	8008a42 <pvPortMalloc+0x162>
	return pvReturn;
 8008a44:	69fb      	ldr	r3, [r7, #28]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3728      	adds	r7, #40	; 0x28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20004b08 	.word	0x20004b08
 8008a54:	20004b14 	.word	0x20004b14
 8008a58:	20004b0c 	.word	0x20004b0c
 8008a5c:	20004b00 	.word	0x20004b00
 8008a60:	20004b10 	.word	0x20004b10

08008a64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d046      	beq.n	8008b04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a76:	2308      	movs	r3, #8
 8008a78:	425b      	negs	r3, r3
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	4b20      	ldr	r3, [pc, #128]	; (8008b0c <vPortFree+0xa8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d109      	bne.n	8008aa6 <vPortFree+0x42>
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	e7fe      	b.n	8008aa4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <vPortFree+0x5e>
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	60bb      	str	r3, [r7, #8]
 8008ac0:	e7fe      	b.n	8008ac0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	4b11      	ldr	r3, [pc, #68]	; (8008b0c <vPortFree+0xa8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4013      	ands	r3, r2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d019      	beq.n	8008b04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d115      	bne.n	8008b04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <vPortFree+0xa8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	401a      	ands	r2, r3
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ae8:	f7fe fcc0 	bl	800746c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <vPortFree+0xac>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4413      	add	r3, r2
 8008af6:	4a06      	ldr	r2, [pc, #24]	; (8008b10 <vPortFree+0xac>)
 8008af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008afa:	6938      	ldr	r0, [r7, #16]
 8008afc:	f000 f86c 	bl	8008bd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b00:	f7fe fcc2 	bl	8007488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b04:	bf00      	nop
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20004b14 	.word	0x20004b14
 8008b10:	20004b0c 	.word	0x20004b0c

08008b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b20:	4b27      	ldr	r3, [pc, #156]	; (8008bc0 <prvHeapInit+0xac>)
 8008b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00c      	beq.n	8008b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3307      	adds	r3, #7
 8008b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0307 	bic.w	r3, r3, #7
 8008b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	4a1f      	ldr	r2, [pc, #124]	; (8008bc0 <prvHeapInit+0xac>)
 8008b44:	4413      	add	r3, r2
 8008b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b4c:	4a1d      	ldr	r2, [pc, #116]	; (8008bc4 <prvHeapInit+0xb0>)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b52:	4b1c      	ldr	r3, [pc, #112]	; (8008bc4 <prvHeapInit+0xb0>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b60:	2208      	movs	r2, #8
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0307 	bic.w	r3, r3, #7
 8008b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4a15      	ldr	r2, [pc, #84]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b76:	4b14      	ldr	r3, [pc, #80]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b7e:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b94:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <prvHeapInit+0xb8>)
 8008ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	4a09      	ldr	r2, [pc, #36]	; (8008bd0 <prvHeapInit+0xbc>)
 8008baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <prvHeapInit+0xc0>)
 8008bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	20000f00 	.word	0x20000f00
 8008bc4:	20004b00 	.word	0x20004b00
 8008bc8:	20004b08 	.word	0x20004b08
 8008bcc:	20004b10 	.word	0x20004b10
 8008bd0:	20004b0c 	.word	0x20004b0c
 8008bd4:	20004b14 	.word	0x20004b14

08008bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008be0:	4b28      	ldr	r3, [pc, #160]	; (8008c84 <prvInsertBlockIntoFreeList+0xac>)
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e002      	b.n	8008bec <prvInsertBlockIntoFreeList+0x14>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d8f7      	bhi.n	8008be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	4413      	add	r3, r2
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d108      	bne.n	8008c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	441a      	add	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	441a      	add	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d118      	bne.n	8008c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	4b15      	ldr	r3, [pc, #84]	; (8008c88 <prvInsertBlockIntoFreeList+0xb0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d00d      	beq.n	8008c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	441a      	add	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	e008      	b.n	8008c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c56:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <prvInsertBlockIntoFreeList+0xb0>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	e003      	b.n	8008c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d002      	beq.n	8008c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c76:	bf00      	nop
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20004b00 	.word	0x20004b00
 8008c88:	20004b08 	.word	0x20004b08

08008c8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c90:	2200      	movs	r2, #0
 8008c92:	4912      	ldr	r1, [pc, #72]	; (8008cdc <MX_USB_DEVICE_Init+0x50>)
 8008c94:	4812      	ldr	r0, [pc, #72]	; (8008ce0 <MX_USB_DEVICE_Init+0x54>)
 8008c96:	f7fc f9ad 	bl	8004ff4 <USBD_Init>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ca0:	f7f7 fec0 	bl	8000a24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ca4:	490f      	ldr	r1, [pc, #60]	; (8008ce4 <MX_USB_DEVICE_Init+0x58>)
 8008ca6:	480e      	ldr	r0, [pc, #56]	; (8008ce0 <MX_USB_DEVICE_Init+0x54>)
 8008ca8:	f7fc f9da 	bl	8005060 <USBD_RegisterClass>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cb2:	f7f7 feb7 	bl	8000a24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cb6:	490c      	ldr	r1, [pc, #48]	; (8008ce8 <MX_USB_DEVICE_Init+0x5c>)
 8008cb8:	4809      	ldr	r0, [pc, #36]	; (8008ce0 <MX_USB_DEVICE_Init+0x54>)
 8008cba:	f7fc f8ff 	bl	8004ebc <USBD_CDC_RegisterInterface>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cc4:	f7f7 feae 	bl	8000a24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cc8:	4805      	ldr	r0, [pc, #20]	; (8008ce0 <MX_USB_DEVICE_Init+0x54>)
 8008cca:	f7fc f9ea 	bl	80050a2 <USBD_Start>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cd4:	f7f7 fea6 	bl	8000a24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cd8:	bf00      	nop
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20000134 	.word	0x20000134
 8008ce0:	20004bfc 	.word	0x20004bfc
 8008ce4:	20000018 	.word	0x20000018
 8008ce8:	20000120 	.word	0x20000120

08008cec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4905      	ldr	r1, [pc, #20]	; (8008d08 <CDC_Init_FS+0x1c>)
 8008cf4:	4805      	ldr	r0, [pc, #20]	; (8008d0c <CDC_Init_FS+0x20>)
 8008cf6:	f7fc f8f6 	bl	8004ee6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008cfa:	4905      	ldr	r1, [pc, #20]	; (8008d10 <CDC_Init_FS+0x24>)
 8008cfc:	4803      	ldr	r0, [pc, #12]	; (8008d0c <CDC_Init_FS+0x20>)
 8008cfe:	f7fc f90b 	bl	8004f18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20004ef4 	.word	0x20004ef4
 8008d0c:	20004bfc 	.word	0x20004bfc
 8008d10:	20004ecc 	.word	0x20004ecc

08008d14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d14:	b480      	push	{r7}
 8008d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	6039      	str	r1, [r7, #0]
 8008d2e:	71fb      	strb	r3, [r7, #7]
 8008d30:	4613      	mov	r3, r2
 8008d32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d34:	79fb      	ldrb	r3, [r7, #7]
 8008d36:	2b23      	cmp	r3, #35	; 0x23
 8008d38:	d84a      	bhi.n	8008dd0 <CDC_Control_FS+0xac>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <CDC_Control_FS+0x1c>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008dd1 	.word	0x08008dd1
 8008d44:	08008dd1 	.word	0x08008dd1
 8008d48:	08008dd1 	.word	0x08008dd1
 8008d4c:	08008dd1 	.word	0x08008dd1
 8008d50:	08008dd1 	.word	0x08008dd1
 8008d54:	08008dd1 	.word	0x08008dd1
 8008d58:	08008dd1 	.word	0x08008dd1
 8008d5c:	08008dd1 	.word	0x08008dd1
 8008d60:	08008dd1 	.word	0x08008dd1
 8008d64:	08008dd1 	.word	0x08008dd1
 8008d68:	08008dd1 	.word	0x08008dd1
 8008d6c:	08008dd1 	.word	0x08008dd1
 8008d70:	08008dd1 	.word	0x08008dd1
 8008d74:	08008dd1 	.word	0x08008dd1
 8008d78:	08008dd1 	.word	0x08008dd1
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008dd1 	.word	0x08008dd1
 8008d84:	08008dd1 	.word	0x08008dd1
 8008d88:	08008dd1 	.word	0x08008dd1
 8008d8c:	08008dd1 	.word	0x08008dd1
 8008d90:	08008dd1 	.word	0x08008dd1
 8008d94:	08008dd1 	.word	0x08008dd1
 8008d98:	08008dd1 	.word	0x08008dd1
 8008d9c:	08008dd1 	.word	0x08008dd1
 8008da0:	08008dd1 	.word	0x08008dd1
 8008da4:	08008dd1 	.word	0x08008dd1
 8008da8:	08008dd1 	.word	0x08008dd1
 8008dac:	08008dd1 	.word	0x08008dd1
 8008db0:	08008dd1 	.word	0x08008dd1
 8008db4:	08008dd1 	.word	0x08008dd1
 8008db8:	08008dd1 	.word	0x08008dd1
 8008dbc:	08008dd1 	.word	0x08008dd1
 8008dc0:	08008dd1 	.word	0x08008dd1
 8008dc4:	08008dd1 	.word	0x08008dd1
 8008dc8:	08008dd1 	.word	0x08008dd1
 8008dcc:	08008dd1 	.word	0x08008dd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008dd0:	bf00      	nop
  }

  return (USBD_OK);
 8008dd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	4811      	ldr	r0, [pc, #68]	; (8008e34 <CDC_Receive_FS+0x54>)
 8008dee:	f7fc f893 	bl	8004f18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008df2:	4810      	ldr	r0, [pc, #64]	; (8008e34 <CDC_Receive_FS+0x54>)
 8008df4:	f7fc f8d4 	bl	8004fa0 <USBD_CDC_ReceivePacket>
    extern uint8_t ReceivedData[40]; // Tablica przechowujaca odebrane dane
    extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

    // Wyczyszczenie tablicy odebranych danych
    uint8_t iter;
    for(iter = 0; iter<40; ++iter){
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
 8008dfc:	e006      	b.n	8008e0c <CDC_Receive_FS+0x2c>
  	  ReceivedData[iter] = 0;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	4a0d      	ldr	r2, [pc, #52]	; (8008e38 <CDC_Receive_FS+0x58>)
 8008e02:	2100      	movs	r1, #0
 8008e04:	54d1      	strb	r1, [r2, r3]
    for(iter = 0; iter<40; ++iter){
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	73fb      	strb	r3, [r7, #15]
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	2b27      	cmp	r3, #39	; 0x27
 8008e10:	d9f5      	bls.n	8008dfe <CDC_Receive_FS+0x1e>
    }

    strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3301      	adds	r3, #1
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	4806      	ldr	r0, [pc, #24]	; (8008e38 <CDC_Receive_FS+0x58>)
 8008e1e:	f000 fd85 	bl	800992c <strlcpy>
    ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8008e22:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <CDC_Receive_FS+0x5c>)
 8008e24:	2201      	movs	r2, #1
 8008e26:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8008e28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20004bfc 	.word	0x20004bfc
 8008e38:	20004b50 	.word	0x20004b50
 8008e3c:	20000206 	.word	0x20000206

08008e40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e50:	4b0d      	ldr	r3, [pc, #52]	; (8008e88 <CDC_Transmit_FS+0x48>)
 8008e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e00b      	b.n	8008e7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e66:	887b      	ldrh	r3, [r7, #2]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	4806      	ldr	r0, [pc, #24]	; (8008e88 <CDC_Transmit_FS+0x48>)
 8008e6e:	f7fc f83a 	bl	8004ee6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e72:	4805      	ldr	r0, [pc, #20]	; (8008e88 <CDC_Transmit_FS+0x48>)
 8008e74:	f7fc f864 	bl	8004f40 <USBD_CDC_TransmitPacket>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20004bfc 	.word	0x20004bfc

08008e8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	4613      	mov	r3, r2
 8008e98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	6039      	str	r1, [r7, #0]
 8008eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2212      	movs	r2, #18
 8008ec0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ec2:	4b03      	ldr	r3, [pc, #12]	; (8008ed0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	20000150 	.word	0x20000150

08008ed4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	6039      	str	r1, [r7, #0]
 8008ede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2204      	movs	r2, #4
 8008ee4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ee6:	4b03      	ldr	r3, [pc, #12]	; (8008ef4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	20000164 	.word	0x20000164

08008ef8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	6039      	str	r1, [r7, #0]
 8008f02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f04:	79fb      	ldrb	r3, [r7, #7]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d105      	bne.n	8008f16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	4907      	ldr	r1, [pc, #28]	; (8008f2c <USBD_FS_ProductStrDescriptor+0x34>)
 8008f0e:	4808      	ldr	r0, [pc, #32]	; (8008f30 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f10:	f7fd f895 	bl	800603e <USBD_GetString>
 8008f14:	e004      	b.n	8008f20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	4904      	ldr	r1, [pc, #16]	; (8008f2c <USBD_FS_ProductStrDescriptor+0x34>)
 8008f1a:	4805      	ldr	r0, [pc, #20]	; (8008f30 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f1c:	f7fd f88f 	bl	800603e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f20:	4b02      	ldr	r3, [pc, #8]	; (8008f2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20004f1c 	.word	0x20004f1c
 8008f30:	08009ff4 	.word	0x08009ff4

08008f34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	6039      	str	r1, [r7, #0]
 8008f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	4904      	ldr	r1, [pc, #16]	; (8008f54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f44:	4804      	ldr	r0, [pc, #16]	; (8008f58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f46:	f7fd f87a 	bl	800603e <USBD_GetString>
  return USBD_StrDesc;
 8008f4a:	4b02      	ldr	r3, [pc, #8]	; (8008f54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20004f1c 	.word	0x20004f1c
 8008f58:	0800a00c 	.word	0x0800a00c

08008f5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	221a      	movs	r2, #26
 8008f6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f6e:	f000 f843 	bl	8008ff8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f72:	4b02      	ldr	r3, [pc, #8]	; (8008f7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20000168 	.word	0x20000168

08008f80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	6039      	str	r1, [r7, #0]
 8008f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d105      	bne.n	8008f9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	4907      	ldr	r1, [pc, #28]	; (8008fb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f96:	4808      	ldr	r0, [pc, #32]	; (8008fb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f98:	f7fd f851 	bl	800603e <USBD_GetString>
 8008f9c:	e004      	b.n	8008fa8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4904      	ldr	r1, [pc, #16]	; (8008fb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fa2:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fa4:	f7fd f84b 	bl	800603e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20004f1c 	.word	0x20004f1c
 8008fb8:	0800a020 	.word	0x0800a020

08008fbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d105      	bne.n	8008fda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	4907      	ldr	r1, [pc, #28]	; (8008ff0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fd2:	4808      	ldr	r0, [pc, #32]	; (8008ff4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fd4:	f7fd f833 	bl	800603e <USBD_GetString>
 8008fd8:	e004      	b.n	8008fe4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	4904      	ldr	r1, [pc, #16]	; (8008ff0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fde:	4805      	ldr	r0, [pc, #20]	; (8008ff4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fe0:	f7fd f82d 	bl	800603e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe4:	4b02      	ldr	r3, [pc, #8]	; (8008ff0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20004f1c 	.word	0x20004f1c
 8008ff4:	0800a02c 	.word	0x0800a02c

08008ff8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	; (800903c <Get_SerialNum+0x44>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009004:	4b0e      	ldr	r3, [pc, #56]	; (8009040 <Get_SerialNum+0x48>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800900a:	4b0e      	ldr	r3, [pc, #56]	; (8009044 <Get_SerialNum+0x4c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4413      	add	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d009      	beq.n	8009032 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800901e:	2208      	movs	r2, #8
 8009020:	4909      	ldr	r1, [pc, #36]	; (8009048 <Get_SerialNum+0x50>)
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 f814 	bl	8009050 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009028:	2204      	movs	r2, #4
 800902a:	4908      	ldr	r1, [pc, #32]	; (800904c <Get_SerialNum+0x54>)
 800902c:	68b8      	ldr	r0, [r7, #8]
 800902e:	f000 f80f 	bl	8009050 <IntToUnicode>
  }
}
 8009032:	bf00      	nop
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	1fff7a10 	.word	0x1fff7a10
 8009040:	1fff7a14 	.word	0x1fff7a14
 8009044:	1fff7a18 	.word	0x1fff7a18
 8009048:	2000016a 	.word	0x2000016a
 800904c:	2000017a 	.word	0x2000017a

08009050 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009062:	2300      	movs	r3, #0
 8009064:	75fb      	strb	r3, [r7, #23]
 8009066:	e027      	b.n	80090b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	0f1b      	lsrs	r3, r3, #28
 800906c:	2b09      	cmp	r3, #9
 800906e:	d80b      	bhi.n	8009088 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	0f1b      	lsrs	r3, r3, #28
 8009074:	b2da      	uxtb	r2, r3
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	4619      	mov	r1, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	440b      	add	r3, r1
 8009080:	3230      	adds	r2, #48	; 0x30
 8009082:	b2d2      	uxtb	r2, r2
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	e00a      	b.n	800909e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	0f1b      	lsrs	r3, r3, #28
 800908c:	b2da      	uxtb	r2, r3
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	005b      	lsls	r3, r3, #1
 8009092:	4619      	mov	r1, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	440b      	add	r3, r1
 8009098:	3237      	adds	r2, #55	; 0x37
 800909a:	b2d2      	uxtb	r2, r2
 800909c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	011b      	lsls	r3, r3, #4
 80090a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	3301      	adds	r3, #1
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	4413      	add	r3, r2
 80090ae:	2200      	movs	r2, #0
 80090b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	3301      	adds	r3, #1
 80090b6:	75fb      	strb	r3, [r7, #23]
 80090b8:	7dfa      	ldrb	r2, [r7, #23]
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d3d3      	bcc.n	8009068 <IntToUnicode+0x18>
  }
}
 80090c0:	bf00      	nop
 80090c2:	371c      	adds	r7, #28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08a      	sub	sp, #40	; 0x28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090d4:	f107 0314 	add.w	r3, r7, #20
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	605a      	str	r2, [r3, #4]
 80090de:	609a      	str	r2, [r3, #8]
 80090e0:	60da      	str	r2, [r3, #12]
 80090e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090ec:	d147      	bne.n	800917e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090ee:	2300      	movs	r3, #0
 80090f0:	613b      	str	r3, [r7, #16]
 80090f2:	4b25      	ldr	r3, [pc, #148]	; (8009188 <HAL_PCD_MspInit+0xbc>)
 80090f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f6:	4a24      	ldr	r2, [pc, #144]	; (8009188 <HAL_PCD_MspInit+0xbc>)
 80090f8:	f043 0301 	orr.w	r3, r3, #1
 80090fc:	6313      	str	r3, [r2, #48]	; 0x30
 80090fe:	4b22      	ldr	r3, [pc, #136]	; (8009188 <HAL_PCD_MspInit+0xbc>)
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	613b      	str	r3, [r7, #16]
 8009108:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800910a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800910e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009110:	2300      	movs	r3, #0
 8009112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009114:	2300      	movs	r3, #0
 8009116:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009118:	f107 0314 	add.w	r3, r7, #20
 800911c:	4619      	mov	r1, r3
 800911e:	481b      	ldr	r0, [pc, #108]	; (800918c <HAL_PCD_MspInit+0xc0>)
 8009120:	f7f7 fefc 	bl	8000f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009124:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800912a:	2302      	movs	r3, #2
 800912c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800912e:	2300      	movs	r3, #0
 8009130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009132:	2300      	movs	r3, #0
 8009134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009136:	230a      	movs	r3, #10
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800913a:	f107 0314 	add.w	r3, r7, #20
 800913e:	4619      	mov	r1, r3
 8009140:	4812      	ldr	r0, [pc, #72]	; (800918c <HAL_PCD_MspInit+0xc0>)
 8009142:	f7f7 feeb 	bl	8000f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009146:	4b10      	ldr	r3, [pc, #64]	; (8009188 <HAL_PCD_MspInit+0xbc>)
 8009148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914a:	4a0f      	ldr	r2, [pc, #60]	; (8009188 <HAL_PCD_MspInit+0xbc>)
 800914c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009150:	6353      	str	r3, [r2, #52]	; 0x34
 8009152:	2300      	movs	r3, #0
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <HAL_PCD_MspInit+0xbc>)
 8009158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915a:	4a0b      	ldr	r2, [pc, #44]	; (8009188 <HAL_PCD_MspInit+0xbc>)
 800915c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009160:	6453      	str	r3, [r2, #68]	; 0x44
 8009162:	4b09      	ldr	r3, [pc, #36]	; (8009188 <HAL_PCD_MspInit+0xbc>)
 8009164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800916e:	2200      	movs	r2, #0
 8009170:	2100      	movs	r1, #0
 8009172:	2043      	movs	r0, #67	; 0x43
 8009174:	f7f7 fea8 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009178:	2043      	movs	r0, #67	; 0x43
 800917a:	f7f7 fec1 	bl	8000f00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800917e:	bf00      	nop
 8009180:	3728      	adds	r7, #40	; 0x28
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	40023800 	.word	0x40023800
 800918c:	40020000 	.word	0x40020000

08009190 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80091a4:	4619      	mov	r1, r3
 80091a6:	4610      	mov	r0, r2
 80091a8:	f7fb ffc6 	bl	8005138 <USBD_LL_SetupStage>
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	460b      	mov	r3, r1
 80091be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80091c6:	78fa      	ldrb	r2, [r7, #3]
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	1a9b      	subs	r3, r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	440b      	add	r3, r1
 80091d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	4619      	mov	r1, r3
 80091de:	f7fb fffe 	bl	80051de <USBD_LL_DataOutStage>
}
 80091e2:	bf00      	nop
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	4613      	mov	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	1a9b      	subs	r3, r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	440b      	add	r3, r1
 800920a:	3348      	adds	r3, #72	; 0x48
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	78fb      	ldrb	r3, [r7, #3]
 8009210:	4619      	mov	r1, r3
 8009212:	f7fc f847 	bl	80052a4 <USBD_LL_DataInStage>
}
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800922c:	4618      	mov	r0, r3
 800922e:	f7fc f94b 	bl	80054c8 <USBD_LL_SOF>
}
 8009232:	bf00      	nop
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009242:	2301      	movs	r3, #1
 8009244:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]
 8009252:	e008      	b.n	8009266 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d102      	bne.n	8009262 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800925c:	2301      	movs	r3, #1
 800925e:	73fb      	strb	r3, [r7, #15]
 8009260:	e001      	b.n	8009266 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009262:	f7f7 fbdf 	bl	8000a24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800926c:	7bfa      	ldrb	r2, [r7, #15]
 800926e:	4611      	mov	r1, r2
 8009270:	4618      	mov	r0, r3
 8009272:	f7fc f8ee 	bl	8005452 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800927c:	4618      	mov	r0, r3
 800927e:	f7fc f8a7 	bl	80053d0 <USBD_LL_Reset>
}
 8009282:	bf00      	nop
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800929a:	4618      	mov	r0, r3
 800929c:	f7fc f8e9 	bl	8005472 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	6812      	ldr	r2, [r2, #0]
 80092ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092b2:	f043 0301 	orr.w	r3, r3, #1
 80092b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d005      	beq.n	80092cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092c0:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <HAL_PCD_SuspendCallback+0x48>)
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	4a03      	ldr	r2, [pc, #12]	; (80092d4 <HAL_PCD_SuspendCallback+0x48>)
 80092c6:	f043 0306 	orr.w	r3, r3, #6
 80092ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	e000ed00 	.word	0xe000ed00

080092d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fc f8d8 	bl	800549c <USBD_LL_Resume>
}
 80092ec:	bf00      	nop
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009306:	78fa      	ldrb	r2, [r7, #3]
 8009308:	4611      	mov	r1, r2
 800930a:	4618      	mov	r0, r3
 800930c:	f7fc f903 	bl	8005516 <USBD_LL_IsoOUTIncomplete>
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	4611      	mov	r1, r2
 800932e:	4618      	mov	r0, r3
 8009330:	f7fc f8e4 	bl	80054fc <USBD_LL_IsoINIncomplete>
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800934a:	4618      	mov	r0, r3
 800934c:	f7fc f8f0 	bl	8005530 <USBD_LL_DevConnected>
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009366:	4618      	mov	r0, r3
 8009368:	f7fc f8ed 	bl	8005546 <USBD_LL_DevDisconnected>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d13c      	bne.n	80093fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009384:	4a20      	ldr	r2, [pc, #128]	; (8009408 <USBD_LL_Init+0x94>)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a1e      	ldr	r2, [pc, #120]	; (8009408 <USBD_LL_Init+0x94>)
 8009390:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009394:	4b1c      	ldr	r3, [pc, #112]	; (8009408 <USBD_LL_Init+0x94>)
 8009396:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800939a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800939c:	4b1a      	ldr	r3, [pc, #104]	; (8009408 <USBD_LL_Init+0x94>)
 800939e:	2204      	movs	r2, #4
 80093a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093a2:	4b19      	ldr	r3, [pc, #100]	; (8009408 <USBD_LL_Init+0x94>)
 80093a4:	2202      	movs	r2, #2
 80093a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093a8:	4b17      	ldr	r3, [pc, #92]	; (8009408 <USBD_LL_Init+0x94>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093ae:	4b16      	ldr	r3, [pc, #88]	; (8009408 <USBD_LL_Init+0x94>)
 80093b0:	2202      	movs	r2, #2
 80093b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093b4:	4b14      	ldr	r3, [pc, #80]	; (8009408 <USBD_LL_Init+0x94>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093ba:	4b13      	ldr	r3, [pc, #76]	; (8009408 <USBD_LL_Init+0x94>)
 80093bc:	2200      	movs	r2, #0
 80093be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093c0:	4b11      	ldr	r3, [pc, #68]	; (8009408 <USBD_LL_Init+0x94>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <USBD_LL_Init+0x94>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80093cc:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <USBD_LL_Init+0x94>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80093d2:	480d      	ldr	r0, [pc, #52]	; (8009408 <USBD_LL_Init+0x94>)
 80093d4:	f7f7 ffa0 	bl	8001318 <HAL_PCD_Init>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80093de:	f7f7 fb21 	bl	8000a24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80093e2:	2180      	movs	r1, #128	; 0x80
 80093e4:	4808      	ldr	r0, [pc, #32]	; (8009408 <USBD_LL_Init+0x94>)
 80093e6:	f7f9 f8fe 	bl	80025e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80093ea:	2240      	movs	r2, #64	; 0x40
 80093ec:	2100      	movs	r1, #0
 80093ee:	4806      	ldr	r0, [pc, #24]	; (8009408 <USBD_LL_Init+0x94>)
 80093f0:	f7f9 f8b2 	bl	8002558 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80093f4:	2280      	movs	r2, #128	; 0x80
 80093f6:	2101      	movs	r1, #1
 80093f8:	4803      	ldr	r0, [pc, #12]	; (8009408 <USBD_LL_Init+0x94>)
 80093fa:	f7f9 f8ad 	bl	8002558 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	2000511c 	.word	0x2000511c

0800940c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009422:	4618      	mov	r0, r3
 8009424:	f7f8 f895 	bl	8001552 <HAL_PCD_Start>
 8009428:	4603      	mov	r3, r0
 800942a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	4618      	mov	r0, r3
 8009430:	f000 f92a 	bl	8009688 <USBD_Get_USB_Status>
 8009434:	4603      	mov	r3, r0
 8009436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009438:	7bbb      	ldrb	r3, [r7, #14]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	461a      	mov	r2, r3
 8009450:	4603      	mov	r3, r0
 8009452:	70fb      	strb	r3, [r7, #3]
 8009454:	460b      	mov	r3, r1
 8009456:	70bb      	strb	r3, [r7, #2]
 8009458:	4613      	mov	r3, r2
 800945a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800946a:	78bb      	ldrb	r3, [r7, #2]
 800946c:	883a      	ldrh	r2, [r7, #0]
 800946e:	78f9      	ldrb	r1, [r7, #3]
 8009470:	f7f8 fc79 	bl	8001d66 <HAL_PCD_EP_Open>
 8009474:	4603      	mov	r3, r0
 8009476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009478:	7bfb      	ldrb	r3, [r7, #15]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 f904 	bl	8009688 <USBD_Get_USB_Status>
 8009480:	4603      	mov	r3, r0
 8009482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009484:	7bbb      	ldrb	r3, [r7, #14]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094a8:	78fa      	ldrb	r2, [r7, #3]
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7f8 fcc2 	bl	8001e36 <HAL_PCD_EP_Close>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 f8e5 	bl	8009688 <USBD_Get_USB_Status>
 80094be:	4603      	mov	r3, r0
 80094c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7f8 fd9a 	bl	8002024 <HAL_PCD_EP_SetStall>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 f8c6 	bl	8009688 <USBD_Get_USB_Status>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009500:	7bbb      	ldrb	r3, [r7, #14]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009524:	78fa      	ldrb	r2, [r7, #3]
 8009526:	4611      	mov	r1, r2
 8009528:	4618      	mov	r0, r3
 800952a:	f7f8 fddf 	bl	80020ec <HAL_PCD_EP_ClrStall>
 800952e:	4603      	mov	r3, r0
 8009530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	4618      	mov	r0, r3
 8009536:	f000 f8a7 	bl	8009688 <USBD_Get_USB_Status>
 800953a:	4603      	mov	r3, r0
 800953c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800955a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800955c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009560:	2b00      	cmp	r3, #0
 8009562:	da0b      	bge.n	800957c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	4613      	mov	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	1a9b      	subs	r3, r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	440b      	add	r3, r1
 8009576:	333e      	adds	r3, #62	; 0x3e
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	e00b      	b.n	8009594 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009582:	68f9      	ldr	r1, [r7, #12]
 8009584:	4613      	mov	r3, r2
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	1a9b      	subs	r3, r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009592:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7f8 fbac 	bl	8001d1c <HAL_PCD_SetAddress>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f85c 	bl	8009688 <USBD_Get_USB_Status>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b086      	sub	sp, #24
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
 80095ea:	460b      	mov	r3, r1
 80095ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095fc:	7af9      	ldrb	r1, [r7, #11]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	f7f8 fcc5 	bl	8001f90 <HAL_PCD_EP_Transmit>
 8009606:	4603      	mov	r3, r0
 8009608:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f83b 	bl	8009688 <USBD_Get_USB_Status>
 8009612:	4603      	mov	r3, r0
 8009614:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009616:	7dbb      	ldrb	r3, [r7, #22]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	607a      	str	r2, [r7, #4]
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	460b      	mov	r3, r1
 800962e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800963e:	7af9      	ldrb	r1, [r7, #11]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	f7f8 fc41 	bl	8001eca <HAL_PCD_EP_Receive>
 8009648:	4603      	mov	r3, r0
 800964a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800964c:	7dfb      	ldrb	r3, [r7, #23]
 800964e:	4618      	mov	r0, r3
 8009650:	f000 f81a 	bl	8009688 <USBD_Get_USB_Status>
 8009654:	4603      	mov	r3, r0
 8009656:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009658:	7dbb      	ldrb	r3, [r7, #22]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	460b      	mov	r3, r1
 800966c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009674:	78fa      	ldrb	r2, [r7, #3]
 8009676:	4611      	mov	r1, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f7f8 fc71 	bl	8001f60 <HAL_PCD_EP_GetRxCount>
 800967e:	4603      	mov	r3, r0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	2b03      	cmp	r3, #3
 800969a:	d817      	bhi.n	80096cc <USBD_Get_USB_Status+0x44>
 800969c:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <USBD_Get_USB_Status+0x1c>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096b5 	.word	0x080096b5
 80096a8:	080096bb 	.word	0x080096bb
 80096ac:	080096c1 	.word	0x080096c1
 80096b0:	080096c7 	.word	0x080096c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
    break;
 80096b8:	e00b      	b.n	80096d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096ba:	2303      	movs	r3, #3
 80096bc:	73fb      	strb	r3, [r7, #15]
    break;
 80096be:	e008      	b.n	80096d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096c0:	2301      	movs	r3, #1
 80096c2:	73fb      	strb	r3, [r7, #15]
    break;
 80096c4:	e005      	b.n	80096d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096c6:	2303      	movs	r3, #3
 80096c8:	73fb      	strb	r3, [r7, #15]
    break;
 80096ca:	e002      	b.n	80096d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80096cc:	2303      	movs	r3, #3
 80096ce:	73fb      	strb	r3, [r7, #15]
    break;
 80096d0:	bf00      	nop
  }
  return usb_status;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <__errno>:
 80096e0:	4b01      	ldr	r3, [pc, #4]	; (80096e8 <__errno+0x8>)
 80096e2:	6818      	ldr	r0, [r3, #0]
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	20000184 	.word	0x20000184

080096ec <__libc_init_array>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	4e0d      	ldr	r6, [pc, #52]	; (8009724 <__libc_init_array+0x38>)
 80096f0:	4c0d      	ldr	r4, [pc, #52]	; (8009728 <__libc_init_array+0x3c>)
 80096f2:	1ba4      	subs	r4, r4, r6
 80096f4:	10a4      	asrs	r4, r4, #2
 80096f6:	2500      	movs	r5, #0
 80096f8:	42a5      	cmp	r5, r4
 80096fa:	d109      	bne.n	8009710 <__libc_init_array+0x24>
 80096fc:	4e0b      	ldr	r6, [pc, #44]	; (800972c <__libc_init_array+0x40>)
 80096fe:	4c0c      	ldr	r4, [pc, #48]	; (8009730 <__libc_init_array+0x44>)
 8009700:	f000 fc4e 	bl	8009fa0 <_init>
 8009704:	1ba4      	subs	r4, r4, r6
 8009706:	10a4      	asrs	r4, r4, #2
 8009708:	2500      	movs	r5, #0
 800970a:	42a5      	cmp	r5, r4
 800970c:	d105      	bne.n	800971a <__libc_init_array+0x2e>
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009714:	4798      	blx	r3
 8009716:	3501      	adds	r5, #1
 8009718:	e7ee      	b.n	80096f8 <__libc_init_array+0xc>
 800971a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800971e:	4798      	blx	r3
 8009720:	3501      	adds	r5, #1
 8009722:	e7f2      	b.n	800970a <__libc_init_array+0x1e>
 8009724:	0800a0d8 	.word	0x0800a0d8
 8009728:	0800a0d8 	.word	0x0800a0d8
 800972c:	0800a0d8 	.word	0x0800a0d8
 8009730:	0800a0dc 	.word	0x0800a0dc

08009734 <malloc>:
 8009734:	4b02      	ldr	r3, [pc, #8]	; (8009740 <malloc+0xc>)
 8009736:	4601      	mov	r1, r0
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	f000 b86d 	b.w	8009818 <_malloc_r>
 800973e:	bf00      	nop
 8009740:	20000184 	.word	0x20000184

08009744 <free>:
 8009744:	4b02      	ldr	r3, [pc, #8]	; (8009750 <free+0xc>)
 8009746:	4601      	mov	r1, r0
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	f000 b817 	b.w	800977c <_free_r>
 800974e:	bf00      	nop
 8009750:	20000184 	.word	0x20000184

08009754 <memcpy>:
 8009754:	b510      	push	{r4, lr}
 8009756:	1e43      	subs	r3, r0, #1
 8009758:	440a      	add	r2, r1
 800975a:	4291      	cmp	r1, r2
 800975c:	d100      	bne.n	8009760 <memcpy+0xc>
 800975e:	bd10      	pop	{r4, pc}
 8009760:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009764:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009768:	e7f7      	b.n	800975a <memcpy+0x6>

0800976a <memset>:
 800976a:	4402      	add	r2, r0
 800976c:	4603      	mov	r3, r0
 800976e:	4293      	cmp	r3, r2
 8009770:	d100      	bne.n	8009774 <memset+0xa>
 8009772:	4770      	bx	lr
 8009774:	f803 1b01 	strb.w	r1, [r3], #1
 8009778:	e7f9      	b.n	800976e <memset+0x4>
	...

0800977c <_free_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4605      	mov	r5, r0
 8009780:	2900      	cmp	r1, #0
 8009782:	d045      	beq.n	8009810 <_free_r+0x94>
 8009784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009788:	1f0c      	subs	r4, r1, #4
 800978a:	2b00      	cmp	r3, #0
 800978c:	bfb8      	it	lt
 800978e:	18e4      	addlt	r4, r4, r3
 8009790:	f000 f8e1 	bl	8009956 <__malloc_lock>
 8009794:	4a1f      	ldr	r2, [pc, #124]	; (8009814 <_free_r+0x98>)
 8009796:	6813      	ldr	r3, [r2, #0]
 8009798:	4610      	mov	r0, r2
 800979a:	b933      	cbnz	r3, 80097aa <_free_r+0x2e>
 800979c:	6063      	str	r3, [r4, #4]
 800979e:	6014      	str	r4, [r2, #0]
 80097a0:	4628      	mov	r0, r5
 80097a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097a6:	f000 b8d7 	b.w	8009958 <__malloc_unlock>
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	d90c      	bls.n	80097c8 <_free_r+0x4c>
 80097ae:	6821      	ldr	r1, [r4, #0]
 80097b0:	1862      	adds	r2, r4, r1
 80097b2:	4293      	cmp	r3, r2
 80097b4:	bf04      	itt	eq
 80097b6:	681a      	ldreq	r2, [r3, #0]
 80097b8:	685b      	ldreq	r3, [r3, #4]
 80097ba:	6063      	str	r3, [r4, #4]
 80097bc:	bf04      	itt	eq
 80097be:	1852      	addeq	r2, r2, r1
 80097c0:	6022      	streq	r2, [r4, #0]
 80097c2:	6004      	str	r4, [r0, #0]
 80097c4:	e7ec      	b.n	80097a0 <_free_r+0x24>
 80097c6:	4613      	mov	r3, r2
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	b10a      	cbz	r2, 80097d0 <_free_r+0x54>
 80097cc:	42a2      	cmp	r2, r4
 80097ce:	d9fa      	bls.n	80097c6 <_free_r+0x4a>
 80097d0:	6819      	ldr	r1, [r3, #0]
 80097d2:	1858      	adds	r0, r3, r1
 80097d4:	42a0      	cmp	r0, r4
 80097d6:	d10b      	bne.n	80097f0 <_free_r+0x74>
 80097d8:	6820      	ldr	r0, [r4, #0]
 80097da:	4401      	add	r1, r0
 80097dc:	1858      	adds	r0, r3, r1
 80097de:	4282      	cmp	r2, r0
 80097e0:	6019      	str	r1, [r3, #0]
 80097e2:	d1dd      	bne.n	80097a0 <_free_r+0x24>
 80097e4:	6810      	ldr	r0, [r2, #0]
 80097e6:	6852      	ldr	r2, [r2, #4]
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	4401      	add	r1, r0
 80097ec:	6019      	str	r1, [r3, #0]
 80097ee:	e7d7      	b.n	80097a0 <_free_r+0x24>
 80097f0:	d902      	bls.n	80097f8 <_free_r+0x7c>
 80097f2:	230c      	movs	r3, #12
 80097f4:	602b      	str	r3, [r5, #0]
 80097f6:	e7d3      	b.n	80097a0 <_free_r+0x24>
 80097f8:	6820      	ldr	r0, [r4, #0]
 80097fa:	1821      	adds	r1, r4, r0
 80097fc:	428a      	cmp	r2, r1
 80097fe:	bf04      	itt	eq
 8009800:	6811      	ldreq	r1, [r2, #0]
 8009802:	6852      	ldreq	r2, [r2, #4]
 8009804:	6062      	str	r2, [r4, #4]
 8009806:	bf04      	itt	eq
 8009808:	1809      	addeq	r1, r1, r0
 800980a:	6021      	streq	r1, [r4, #0]
 800980c:	605c      	str	r4, [r3, #4]
 800980e:	e7c7      	b.n	80097a0 <_free_r+0x24>
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	bf00      	nop
 8009814:	20004b18 	.word	0x20004b18

08009818 <_malloc_r>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	1ccd      	adds	r5, r1, #3
 800981c:	f025 0503 	bic.w	r5, r5, #3
 8009820:	3508      	adds	r5, #8
 8009822:	2d0c      	cmp	r5, #12
 8009824:	bf38      	it	cc
 8009826:	250c      	movcc	r5, #12
 8009828:	2d00      	cmp	r5, #0
 800982a:	4606      	mov	r6, r0
 800982c:	db01      	blt.n	8009832 <_malloc_r+0x1a>
 800982e:	42a9      	cmp	r1, r5
 8009830:	d903      	bls.n	800983a <_malloc_r+0x22>
 8009832:	230c      	movs	r3, #12
 8009834:	6033      	str	r3, [r6, #0]
 8009836:	2000      	movs	r0, #0
 8009838:	bd70      	pop	{r4, r5, r6, pc}
 800983a:	f000 f88c 	bl	8009956 <__malloc_lock>
 800983e:	4a21      	ldr	r2, [pc, #132]	; (80098c4 <_malloc_r+0xac>)
 8009840:	6814      	ldr	r4, [r2, #0]
 8009842:	4621      	mov	r1, r4
 8009844:	b991      	cbnz	r1, 800986c <_malloc_r+0x54>
 8009846:	4c20      	ldr	r4, [pc, #128]	; (80098c8 <_malloc_r+0xb0>)
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	b91b      	cbnz	r3, 8009854 <_malloc_r+0x3c>
 800984c:	4630      	mov	r0, r6
 800984e:	f000 f83d 	bl	80098cc <_sbrk_r>
 8009852:	6020      	str	r0, [r4, #0]
 8009854:	4629      	mov	r1, r5
 8009856:	4630      	mov	r0, r6
 8009858:	f000 f838 	bl	80098cc <_sbrk_r>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d124      	bne.n	80098aa <_malloc_r+0x92>
 8009860:	230c      	movs	r3, #12
 8009862:	6033      	str	r3, [r6, #0]
 8009864:	4630      	mov	r0, r6
 8009866:	f000 f877 	bl	8009958 <__malloc_unlock>
 800986a:	e7e4      	b.n	8009836 <_malloc_r+0x1e>
 800986c:	680b      	ldr	r3, [r1, #0]
 800986e:	1b5b      	subs	r3, r3, r5
 8009870:	d418      	bmi.n	80098a4 <_malloc_r+0x8c>
 8009872:	2b0b      	cmp	r3, #11
 8009874:	d90f      	bls.n	8009896 <_malloc_r+0x7e>
 8009876:	600b      	str	r3, [r1, #0]
 8009878:	50cd      	str	r5, [r1, r3]
 800987a:	18cc      	adds	r4, r1, r3
 800987c:	4630      	mov	r0, r6
 800987e:	f000 f86b 	bl	8009958 <__malloc_unlock>
 8009882:	f104 000b 	add.w	r0, r4, #11
 8009886:	1d23      	adds	r3, r4, #4
 8009888:	f020 0007 	bic.w	r0, r0, #7
 800988c:	1ac3      	subs	r3, r0, r3
 800988e:	d0d3      	beq.n	8009838 <_malloc_r+0x20>
 8009890:	425a      	negs	r2, r3
 8009892:	50e2      	str	r2, [r4, r3]
 8009894:	e7d0      	b.n	8009838 <_malloc_r+0x20>
 8009896:	428c      	cmp	r4, r1
 8009898:	684b      	ldr	r3, [r1, #4]
 800989a:	bf16      	itet	ne
 800989c:	6063      	strne	r3, [r4, #4]
 800989e:	6013      	streq	r3, [r2, #0]
 80098a0:	460c      	movne	r4, r1
 80098a2:	e7eb      	b.n	800987c <_malloc_r+0x64>
 80098a4:	460c      	mov	r4, r1
 80098a6:	6849      	ldr	r1, [r1, #4]
 80098a8:	e7cc      	b.n	8009844 <_malloc_r+0x2c>
 80098aa:	1cc4      	adds	r4, r0, #3
 80098ac:	f024 0403 	bic.w	r4, r4, #3
 80098b0:	42a0      	cmp	r0, r4
 80098b2:	d005      	beq.n	80098c0 <_malloc_r+0xa8>
 80098b4:	1a21      	subs	r1, r4, r0
 80098b6:	4630      	mov	r0, r6
 80098b8:	f000 f808 	bl	80098cc <_sbrk_r>
 80098bc:	3001      	adds	r0, #1
 80098be:	d0cf      	beq.n	8009860 <_malloc_r+0x48>
 80098c0:	6025      	str	r5, [r4, #0]
 80098c2:	e7db      	b.n	800987c <_malloc_r+0x64>
 80098c4:	20004b18 	.word	0x20004b18
 80098c8:	20004b1c 	.word	0x20004b1c

080098cc <_sbrk_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4c06      	ldr	r4, [pc, #24]	; (80098e8 <_sbrk_r+0x1c>)
 80098d0:	2300      	movs	r3, #0
 80098d2:	4605      	mov	r5, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	f7f7 f964 	bl	8000ba4 <_sbrk>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_sbrk_r+0x1a>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_sbrk_r+0x1a>
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	20005524 	.word	0x20005524

080098ec <siprintf>:
 80098ec:	b40e      	push	{r1, r2, r3}
 80098ee:	b500      	push	{lr}
 80098f0:	b09c      	sub	sp, #112	; 0x70
 80098f2:	ab1d      	add	r3, sp, #116	; 0x74
 80098f4:	9002      	str	r0, [sp, #8]
 80098f6:	9006      	str	r0, [sp, #24]
 80098f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098fc:	4809      	ldr	r0, [pc, #36]	; (8009924 <siprintf+0x38>)
 80098fe:	9107      	str	r1, [sp, #28]
 8009900:	9104      	str	r1, [sp, #16]
 8009902:	4909      	ldr	r1, [pc, #36]	; (8009928 <siprintf+0x3c>)
 8009904:	f853 2b04 	ldr.w	r2, [r3], #4
 8009908:	9105      	str	r1, [sp, #20]
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	a902      	add	r1, sp, #8
 8009910:	f000 f87e 	bl	8009a10 <_svfiprintf_r>
 8009914:	9b02      	ldr	r3, [sp, #8]
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	b01c      	add	sp, #112	; 0x70
 800991c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009920:	b003      	add	sp, #12
 8009922:	4770      	bx	lr
 8009924:	20000184 	.word	0x20000184
 8009928:	ffff0208 	.word	0xffff0208

0800992c <strlcpy>:
 800992c:	b510      	push	{r4, lr}
 800992e:	460b      	mov	r3, r1
 8009930:	b162      	cbz	r2, 800994c <strlcpy+0x20>
 8009932:	3a01      	subs	r2, #1
 8009934:	d008      	beq.n	8009948 <strlcpy+0x1c>
 8009936:	f813 4b01 	ldrb.w	r4, [r3], #1
 800993a:	f800 4b01 	strb.w	r4, [r0], #1
 800993e:	2c00      	cmp	r4, #0
 8009940:	d1f7      	bne.n	8009932 <strlcpy+0x6>
 8009942:	1a58      	subs	r0, r3, r1
 8009944:	3801      	subs	r0, #1
 8009946:	bd10      	pop	{r4, pc}
 8009948:	2200      	movs	r2, #0
 800994a:	7002      	strb	r2, [r0, #0]
 800994c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009950:	2a00      	cmp	r2, #0
 8009952:	d1fb      	bne.n	800994c <strlcpy+0x20>
 8009954:	e7f5      	b.n	8009942 <strlcpy+0x16>

08009956 <__malloc_lock>:
 8009956:	4770      	bx	lr

08009958 <__malloc_unlock>:
 8009958:	4770      	bx	lr

0800995a <__ssputs_r>:
 800995a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800995e:	688e      	ldr	r6, [r1, #8]
 8009960:	429e      	cmp	r6, r3
 8009962:	4682      	mov	sl, r0
 8009964:	460c      	mov	r4, r1
 8009966:	4690      	mov	r8, r2
 8009968:	4699      	mov	r9, r3
 800996a:	d837      	bhi.n	80099dc <__ssputs_r+0x82>
 800996c:	898a      	ldrh	r2, [r1, #12]
 800996e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009972:	d031      	beq.n	80099d8 <__ssputs_r+0x7e>
 8009974:	6825      	ldr	r5, [r4, #0]
 8009976:	6909      	ldr	r1, [r1, #16]
 8009978:	1a6f      	subs	r7, r5, r1
 800997a:	6965      	ldr	r5, [r4, #20]
 800997c:	2302      	movs	r3, #2
 800997e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009982:	fb95 f5f3 	sdiv	r5, r5, r3
 8009986:	f109 0301 	add.w	r3, r9, #1
 800998a:	443b      	add	r3, r7
 800998c:	429d      	cmp	r5, r3
 800998e:	bf38      	it	cc
 8009990:	461d      	movcc	r5, r3
 8009992:	0553      	lsls	r3, r2, #21
 8009994:	d530      	bpl.n	80099f8 <__ssputs_r+0x9e>
 8009996:	4629      	mov	r1, r5
 8009998:	f7ff ff3e 	bl	8009818 <_malloc_r>
 800999c:	4606      	mov	r6, r0
 800999e:	b950      	cbnz	r0, 80099b6 <__ssputs_r+0x5c>
 80099a0:	230c      	movs	r3, #12
 80099a2:	f8ca 3000 	str.w	r3, [sl]
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ac:	81a3      	strh	r3, [r4, #12]
 80099ae:	f04f 30ff 	mov.w	r0, #4294967295
 80099b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b6:	463a      	mov	r2, r7
 80099b8:	6921      	ldr	r1, [r4, #16]
 80099ba:	f7ff fecb 	bl	8009754 <memcpy>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c8:	81a3      	strh	r3, [r4, #12]
 80099ca:	6126      	str	r6, [r4, #16]
 80099cc:	6165      	str	r5, [r4, #20]
 80099ce:	443e      	add	r6, r7
 80099d0:	1bed      	subs	r5, r5, r7
 80099d2:	6026      	str	r6, [r4, #0]
 80099d4:	60a5      	str	r5, [r4, #8]
 80099d6:	464e      	mov	r6, r9
 80099d8:	454e      	cmp	r6, r9
 80099da:	d900      	bls.n	80099de <__ssputs_r+0x84>
 80099dc:	464e      	mov	r6, r9
 80099de:	4632      	mov	r2, r6
 80099e0:	4641      	mov	r1, r8
 80099e2:	6820      	ldr	r0, [r4, #0]
 80099e4:	f000 fa94 	bl	8009f10 <memmove>
 80099e8:	68a3      	ldr	r3, [r4, #8]
 80099ea:	1b9b      	subs	r3, r3, r6
 80099ec:	60a3      	str	r3, [r4, #8]
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	441e      	add	r6, r3
 80099f2:	6026      	str	r6, [r4, #0]
 80099f4:	2000      	movs	r0, #0
 80099f6:	e7dc      	b.n	80099b2 <__ssputs_r+0x58>
 80099f8:	462a      	mov	r2, r5
 80099fa:	f000 faa2 	bl	8009f42 <_realloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d1e2      	bne.n	80099ca <__ssputs_r+0x70>
 8009a04:	6921      	ldr	r1, [r4, #16]
 8009a06:	4650      	mov	r0, sl
 8009a08:	f7ff feb8 	bl	800977c <_free_r>
 8009a0c:	e7c8      	b.n	80099a0 <__ssputs_r+0x46>
	...

08009a10 <_svfiprintf_r>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	461d      	mov	r5, r3
 8009a16:	898b      	ldrh	r3, [r1, #12]
 8009a18:	061f      	lsls	r7, r3, #24
 8009a1a:	b09d      	sub	sp, #116	; 0x74
 8009a1c:	4680      	mov	r8, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	4616      	mov	r6, r2
 8009a22:	d50f      	bpl.n	8009a44 <_svfiprintf_r+0x34>
 8009a24:	690b      	ldr	r3, [r1, #16]
 8009a26:	b96b      	cbnz	r3, 8009a44 <_svfiprintf_r+0x34>
 8009a28:	2140      	movs	r1, #64	; 0x40
 8009a2a:	f7ff fef5 	bl	8009818 <_malloc_r>
 8009a2e:	6020      	str	r0, [r4, #0]
 8009a30:	6120      	str	r0, [r4, #16]
 8009a32:	b928      	cbnz	r0, 8009a40 <_svfiprintf_r+0x30>
 8009a34:	230c      	movs	r3, #12
 8009a36:	f8c8 3000 	str.w	r3, [r8]
 8009a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3e:	e0c8      	b.n	8009bd2 <_svfiprintf_r+0x1c2>
 8009a40:	2340      	movs	r3, #64	; 0x40
 8009a42:	6163      	str	r3, [r4, #20]
 8009a44:	2300      	movs	r3, #0
 8009a46:	9309      	str	r3, [sp, #36]	; 0x24
 8009a48:	2320      	movs	r3, #32
 8009a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a4e:	2330      	movs	r3, #48	; 0x30
 8009a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a54:	9503      	str	r5, [sp, #12]
 8009a56:	f04f 0b01 	mov.w	fp, #1
 8009a5a:	4637      	mov	r7, r6
 8009a5c:	463d      	mov	r5, r7
 8009a5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a62:	b10b      	cbz	r3, 8009a68 <_svfiprintf_r+0x58>
 8009a64:	2b25      	cmp	r3, #37	; 0x25
 8009a66:	d13e      	bne.n	8009ae6 <_svfiprintf_r+0xd6>
 8009a68:	ebb7 0a06 	subs.w	sl, r7, r6
 8009a6c:	d00b      	beq.n	8009a86 <_svfiprintf_r+0x76>
 8009a6e:	4653      	mov	r3, sl
 8009a70:	4632      	mov	r2, r6
 8009a72:	4621      	mov	r1, r4
 8009a74:	4640      	mov	r0, r8
 8009a76:	f7ff ff70 	bl	800995a <__ssputs_r>
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	f000 80a4 	beq.w	8009bc8 <_svfiprintf_r+0x1b8>
 8009a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a82:	4453      	add	r3, sl
 8009a84:	9309      	str	r3, [sp, #36]	; 0x24
 8009a86:	783b      	ldrb	r3, [r7, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 809d 	beq.w	8009bc8 <_svfiprintf_r+0x1b8>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f04f 32ff 	mov.w	r2, #4294967295
 8009a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	9307      	str	r3, [sp, #28]
 8009a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8009aa2:	462f      	mov	r7, r5
 8009aa4:	2205      	movs	r2, #5
 8009aa6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009aaa:	4850      	ldr	r0, [pc, #320]	; (8009bec <_svfiprintf_r+0x1dc>)
 8009aac:	f7f6 fb90 	bl	80001d0 <memchr>
 8009ab0:	9b04      	ldr	r3, [sp, #16]
 8009ab2:	b9d0      	cbnz	r0, 8009aea <_svfiprintf_r+0xda>
 8009ab4:	06d9      	lsls	r1, r3, #27
 8009ab6:	bf44      	itt	mi
 8009ab8:	2220      	movmi	r2, #32
 8009aba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009abe:	071a      	lsls	r2, r3, #28
 8009ac0:	bf44      	itt	mi
 8009ac2:	222b      	movmi	r2, #43	; 0x2b
 8009ac4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ac8:	782a      	ldrb	r2, [r5, #0]
 8009aca:	2a2a      	cmp	r2, #42	; 0x2a
 8009acc:	d015      	beq.n	8009afa <_svfiprintf_r+0xea>
 8009ace:	9a07      	ldr	r2, [sp, #28]
 8009ad0:	462f      	mov	r7, r5
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	250a      	movs	r5, #10
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009adc:	3b30      	subs	r3, #48	; 0x30
 8009ade:	2b09      	cmp	r3, #9
 8009ae0:	d94d      	bls.n	8009b7e <_svfiprintf_r+0x16e>
 8009ae2:	b1b8      	cbz	r0, 8009b14 <_svfiprintf_r+0x104>
 8009ae4:	e00f      	b.n	8009b06 <_svfiprintf_r+0xf6>
 8009ae6:	462f      	mov	r7, r5
 8009ae8:	e7b8      	b.n	8009a5c <_svfiprintf_r+0x4c>
 8009aea:	4a40      	ldr	r2, [pc, #256]	; (8009bec <_svfiprintf_r+0x1dc>)
 8009aec:	1a80      	subs	r0, r0, r2
 8009aee:	fa0b f000 	lsl.w	r0, fp, r0
 8009af2:	4318      	orrs	r0, r3
 8009af4:	9004      	str	r0, [sp, #16]
 8009af6:	463d      	mov	r5, r7
 8009af8:	e7d3      	b.n	8009aa2 <_svfiprintf_r+0x92>
 8009afa:	9a03      	ldr	r2, [sp, #12]
 8009afc:	1d11      	adds	r1, r2, #4
 8009afe:	6812      	ldr	r2, [r2, #0]
 8009b00:	9103      	str	r1, [sp, #12]
 8009b02:	2a00      	cmp	r2, #0
 8009b04:	db01      	blt.n	8009b0a <_svfiprintf_r+0xfa>
 8009b06:	9207      	str	r2, [sp, #28]
 8009b08:	e004      	b.n	8009b14 <_svfiprintf_r+0x104>
 8009b0a:	4252      	negs	r2, r2
 8009b0c:	f043 0302 	orr.w	r3, r3, #2
 8009b10:	9207      	str	r2, [sp, #28]
 8009b12:	9304      	str	r3, [sp, #16]
 8009b14:	783b      	ldrb	r3, [r7, #0]
 8009b16:	2b2e      	cmp	r3, #46	; 0x2e
 8009b18:	d10c      	bne.n	8009b34 <_svfiprintf_r+0x124>
 8009b1a:	787b      	ldrb	r3, [r7, #1]
 8009b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1e:	d133      	bne.n	8009b88 <_svfiprintf_r+0x178>
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	1d1a      	adds	r2, r3, #4
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	9203      	str	r2, [sp, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	bfb8      	it	lt
 8009b2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b30:	3702      	adds	r7, #2
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	4d2e      	ldr	r5, [pc, #184]	; (8009bf0 <_svfiprintf_r+0x1e0>)
 8009b36:	7839      	ldrb	r1, [r7, #0]
 8009b38:	2203      	movs	r2, #3
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f7f6 fb48 	bl	80001d0 <memchr>
 8009b40:	b138      	cbz	r0, 8009b52 <_svfiprintf_r+0x142>
 8009b42:	2340      	movs	r3, #64	; 0x40
 8009b44:	1b40      	subs	r0, r0, r5
 8009b46:	fa03 f000 	lsl.w	r0, r3, r0
 8009b4a:	9b04      	ldr	r3, [sp, #16]
 8009b4c:	4303      	orrs	r3, r0
 8009b4e:	3701      	adds	r7, #1
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	7839      	ldrb	r1, [r7, #0]
 8009b54:	4827      	ldr	r0, [pc, #156]	; (8009bf4 <_svfiprintf_r+0x1e4>)
 8009b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b5a:	2206      	movs	r2, #6
 8009b5c:	1c7e      	adds	r6, r7, #1
 8009b5e:	f7f6 fb37 	bl	80001d0 <memchr>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d038      	beq.n	8009bd8 <_svfiprintf_r+0x1c8>
 8009b66:	4b24      	ldr	r3, [pc, #144]	; (8009bf8 <_svfiprintf_r+0x1e8>)
 8009b68:	bb13      	cbnz	r3, 8009bb0 <_svfiprintf_r+0x1a0>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	3307      	adds	r3, #7
 8009b6e:	f023 0307 	bic.w	r3, r3, #7
 8009b72:	3308      	adds	r3, #8
 8009b74:	9303      	str	r3, [sp, #12]
 8009b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b78:	444b      	add	r3, r9
 8009b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7c:	e76d      	b.n	8009a5a <_svfiprintf_r+0x4a>
 8009b7e:	fb05 3202 	mla	r2, r5, r2, r3
 8009b82:	2001      	movs	r0, #1
 8009b84:	460f      	mov	r7, r1
 8009b86:	e7a6      	b.n	8009ad6 <_svfiprintf_r+0xc6>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	3701      	adds	r7, #1
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	250a      	movs	r5, #10
 8009b92:	4638      	mov	r0, r7
 8009b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b98:	3a30      	subs	r2, #48	; 0x30
 8009b9a:	2a09      	cmp	r2, #9
 8009b9c:	d903      	bls.n	8009ba6 <_svfiprintf_r+0x196>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0c8      	beq.n	8009b34 <_svfiprintf_r+0x124>
 8009ba2:	9105      	str	r1, [sp, #20]
 8009ba4:	e7c6      	b.n	8009b34 <_svfiprintf_r+0x124>
 8009ba6:	fb05 2101 	mla	r1, r5, r1, r2
 8009baa:	2301      	movs	r3, #1
 8009bac:	4607      	mov	r7, r0
 8009bae:	e7f0      	b.n	8009b92 <_svfiprintf_r+0x182>
 8009bb0:	ab03      	add	r3, sp, #12
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <_svfiprintf_r+0x1ec>)
 8009bb8:	a904      	add	r1, sp, #16
 8009bba:	4640      	mov	r0, r8
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009bc4:	4681      	mov	r9, r0
 8009bc6:	d1d6      	bne.n	8009b76 <_svfiprintf_r+0x166>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	065b      	lsls	r3, r3, #25
 8009bcc:	f53f af35 	bmi.w	8009a3a <_svfiprintf_r+0x2a>
 8009bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bd2:	b01d      	add	sp, #116	; 0x74
 8009bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd8:	ab03      	add	r3, sp, #12
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4622      	mov	r2, r4
 8009bde:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <_svfiprintf_r+0x1ec>)
 8009be0:	a904      	add	r1, sp, #16
 8009be2:	4640      	mov	r0, r8
 8009be4:	f000 f882 	bl	8009cec <_printf_i>
 8009be8:	e7ea      	b.n	8009bc0 <_svfiprintf_r+0x1b0>
 8009bea:	bf00      	nop
 8009bec:	0800a09c 	.word	0x0800a09c
 8009bf0:	0800a0a2 	.word	0x0800a0a2
 8009bf4:	0800a0a6 	.word	0x0800a0a6
 8009bf8:	00000000 	.word	0x00000000
 8009bfc:	0800995b 	.word	0x0800995b

08009c00 <_printf_common>:
 8009c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c04:	4691      	mov	r9, r2
 8009c06:	461f      	mov	r7, r3
 8009c08:	688a      	ldr	r2, [r1, #8]
 8009c0a:	690b      	ldr	r3, [r1, #16]
 8009c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	bfb8      	it	lt
 8009c14:	4613      	movlt	r3, r2
 8009c16:	f8c9 3000 	str.w	r3, [r9]
 8009c1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c1e:	4606      	mov	r6, r0
 8009c20:	460c      	mov	r4, r1
 8009c22:	b112      	cbz	r2, 8009c2a <_printf_common+0x2a>
 8009c24:	3301      	adds	r3, #1
 8009c26:	f8c9 3000 	str.w	r3, [r9]
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	0699      	lsls	r1, r3, #26
 8009c2e:	bf42      	ittt	mi
 8009c30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c34:	3302      	addmi	r3, #2
 8009c36:	f8c9 3000 	strmi.w	r3, [r9]
 8009c3a:	6825      	ldr	r5, [r4, #0]
 8009c3c:	f015 0506 	ands.w	r5, r5, #6
 8009c40:	d107      	bne.n	8009c52 <_printf_common+0x52>
 8009c42:	f104 0a19 	add.w	sl, r4, #25
 8009c46:	68e3      	ldr	r3, [r4, #12]
 8009c48:	f8d9 2000 	ldr.w	r2, [r9]
 8009c4c:	1a9b      	subs	r3, r3, r2
 8009c4e:	42ab      	cmp	r3, r5
 8009c50:	dc28      	bgt.n	8009ca4 <_printf_common+0xa4>
 8009c52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c56:	6822      	ldr	r2, [r4, #0]
 8009c58:	3300      	adds	r3, #0
 8009c5a:	bf18      	it	ne
 8009c5c:	2301      	movne	r3, #1
 8009c5e:	0692      	lsls	r2, r2, #26
 8009c60:	d42d      	bmi.n	8009cbe <_printf_common+0xbe>
 8009c62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c66:	4639      	mov	r1, r7
 8009c68:	4630      	mov	r0, r6
 8009c6a:	47c0      	blx	r8
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d020      	beq.n	8009cb2 <_printf_common+0xb2>
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	68e5      	ldr	r5, [r4, #12]
 8009c74:	f8d9 2000 	ldr.w	r2, [r9]
 8009c78:	f003 0306 	and.w	r3, r3, #6
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	bf08      	it	eq
 8009c80:	1aad      	subeq	r5, r5, r2
 8009c82:	68a3      	ldr	r3, [r4, #8]
 8009c84:	6922      	ldr	r2, [r4, #16]
 8009c86:	bf0c      	ite	eq
 8009c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c8c:	2500      	movne	r5, #0
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	bfc4      	itt	gt
 8009c92:	1a9b      	subgt	r3, r3, r2
 8009c94:	18ed      	addgt	r5, r5, r3
 8009c96:	f04f 0900 	mov.w	r9, #0
 8009c9a:	341a      	adds	r4, #26
 8009c9c:	454d      	cmp	r5, r9
 8009c9e:	d11a      	bne.n	8009cd6 <_printf_common+0xd6>
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	e008      	b.n	8009cb6 <_printf_common+0xb6>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4652      	mov	r2, sl
 8009ca8:	4639      	mov	r1, r7
 8009caa:	4630      	mov	r0, r6
 8009cac:	47c0      	blx	r8
 8009cae:	3001      	adds	r0, #1
 8009cb0:	d103      	bne.n	8009cba <_printf_common+0xba>
 8009cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cba:	3501      	adds	r5, #1
 8009cbc:	e7c3      	b.n	8009c46 <_printf_common+0x46>
 8009cbe:	18e1      	adds	r1, r4, r3
 8009cc0:	1c5a      	adds	r2, r3, #1
 8009cc2:	2030      	movs	r0, #48	; 0x30
 8009cc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cc8:	4422      	add	r2, r4
 8009cca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cd2:	3302      	adds	r3, #2
 8009cd4:	e7c5      	b.n	8009c62 <_printf_common+0x62>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4639      	mov	r1, r7
 8009cdc:	4630      	mov	r0, r6
 8009cde:	47c0      	blx	r8
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d0e6      	beq.n	8009cb2 <_printf_common+0xb2>
 8009ce4:	f109 0901 	add.w	r9, r9, #1
 8009ce8:	e7d8      	b.n	8009c9c <_printf_common+0x9c>
	...

08009cec <_printf_i>:
 8009cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cf0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	7e09      	ldrb	r1, [r1, #24]
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	296e      	cmp	r1, #110	; 0x6e
 8009cfc:	4617      	mov	r7, r2
 8009cfe:	4606      	mov	r6, r0
 8009d00:	4698      	mov	r8, r3
 8009d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d04:	f000 80b3 	beq.w	8009e6e <_printf_i+0x182>
 8009d08:	d822      	bhi.n	8009d50 <_printf_i+0x64>
 8009d0a:	2963      	cmp	r1, #99	; 0x63
 8009d0c:	d036      	beq.n	8009d7c <_printf_i+0x90>
 8009d0e:	d80a      	bhi.n	8009d26 <_printf_i+0x3a>
 8009d10:	2900      	cmp	r1, #0
 8009d12:	f000 80b9 	beq.w	8009e88 <_printf_i+0x19c>
 8009d16:	2958      	cmp	r1, #88	; 0x58
 8009d18:	f000 8083 	beq.w	8009e22 <_printf_i+0x136>
 8009d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d24:	e032      	b.n	8009d8c <_printf_i+0xa0>
 8009d26:	2964      	cmp	r1, #100	; 0x64
 8009d28:	d001      	beq.n	8009d2e <_printf_i+0x42>
 8009d2a:	2969      	cmp	r1, #105	; 0x69
 8009d2c:	d1f6      	bne.n	8009d1c <_printf_i+0x30>
 8009d2e:	6820      	ldr	r0, [r4, #0]
 8009d30:	6813      	ldr	r3, [r2, #0]
 8009d32:	0605      	lsls	r5, r0, #24
 8009d34:	f103 0104 	add.w	r1, r3, #4
 8009d38:	d52a      	bpl.n	8009d90 <_printf_i+0xa4>
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6011      	str	r1, [r2, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	da03      	bge.n	8009d4a <_printf_i+0x5e>
 8009d42:	222d      	movs	r2, #45	; 0x2d
 8009d44:	425b      	negs	r3, r3
 8009d46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d4a:	486f      	ldr	r0, [pc, #444]	; (8009f08 <_printf_i+0x21c>)
 8009d4c:	220a      	movs	r2, #10
 8009d4e:	e039      	b.n	8009dc4 <_printf_i+0xd8>
 8009d50:	2973      	cmp	r1, #115	; 0x73
 8009d52:	f000 809d 	beq.w	8009e90 <_printf_i+0x1a4>
 8009d56:	d808      	bhi.n	8009d6a <_printf_i+0x7e>
 8009d58:	296f      	cmp	r1, #111	; 0x6f
 8009d5a:	d020      	beq.n	8009d9e <_printf_i+0xb2>
 8009d5c:	2970      	cmp	r1, #112	; 0x70
 8009d5e:	d1dd      	bne.n	8009d1c <_printf_i+0x30>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	f043 0320 	orr.w	r3, r3, #32
 8009d66:	6023      	str	r3, [r4, #0]
 8009d68:	e003      	b.n	8009d72 <_printf_i+0x86>
 8009d6a:	2975      	cmp	r1, #117	; 0x75
 8009d6c:	d017      	beq.n	8009d9e <_printf_i+0xb2>
 8009d6e:	2978      	cmp	r1, #120	; 0x78
 8009d70:	d1d4      	bne.n	8009d1c <_printf_i+0x30>
 8009d72:	2378      	movs	r3, #120	; 0x78
 8009d74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d78:	4864      	ldr	r0, [pc, #400]	; (8009f0c <_printf_i+0x220>)
 8009d7a:	e055      	b.n	8009e28 <_printf_i+0x13c>
 8009d7c:	6813      	ldr	r3, [r2, #0]
 8009d7e:	1d19      	adds	r1, r3, #4
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6011      	str	r1, [r2, #0]
 8009d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e08c      	b.n	8009eaa <_printf_i+0x1be>
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	6011      	str	r1, [r2, #0]
 8009d94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d98:	bf18      	it	ne
 8009d9a:	b21b      	sxthne	r3, r3
 8009d9c:	e7cf      	b.n	8009d3e <_printf_i+0x52>
 8009d9e:	6813      	ldr	r3, [r2, #0]
 8009da0:	6825      	ldr	r5, [r4, #0]
 8009da2:	1d18      	adds	r0, r3, #4
 8009da4:	6010      	str	r0, [r2, #0]
 8009da6:	0628      	lsls	r0, r5, #24
 8009da8:	d501      	bpl.n	8009dae <_printf_i+0xc2>
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	e002      	b.n	8009db4 <_printf_i+0xc8>
 8009dae:	0668      	lsls	r0, r5, #25
 8009db0:	d5fb      	bpl.n	8009daa <_printf_i+0xbe>
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	4854      	ldr	r0, [pc, #336]	; (8009f08 <_printf_i+0x21c>)
 8009db6:	296f      	cmp	r1, #111	; 0x6f
 8009db8:	bf14      	ite	ne
 8009dba:	220a      	movne	r2, #10
 8009dbc:	2208      	moveq	r2, #8
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dc4:	6865      	ldr	r5, [r4, #4]
 8009dc6:	60a5      	str	r5, [r4, #8]
 8009dc8:	2d00      	cmp	r5, #0
 8009dca:	f2c0 8095 	blt.w	8009ef8 <_printf_i+0x20c>
 8009dce:	6821      	ldr	r1, [r4, #0]
 8009dd0:	f021 0104 	bic.w	r1, r1, #4
 8009dd4:	6021      	str	r1, [r4, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d13d      	bne.n	8009e56 <_printf_i+0x16a>
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	f040 808e 	bne.w	8009efc <_printf_i+0x210>
 8009de0:	4665      	mov	r5, ip
 8009de2:	2a08      	cmp	r2, #8
 8009de4:	d10b      	bne.n	8009dfe <_printf_i+0x112>
 8009de6:	6823      	ldr	r3, [r4, #0]
 8009de8:	07db      	lsls	r3, r3, #31
 8009dea:	d508      	bpl.n	8009dfe <_printf_i+0x112>
 8009dec:	6923      	ldr	r3, [r4, #16]
 8009dee:	6862      	ldr	r2, [r4, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	bfde      	ittt	le
 8009df4:	2330      	movle	r3, #48	; 0x30
 8009df6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dfe:	ebac 0305 	sub.w	r3, ip, r5
 8009e02:	6123      	str	r3, [r4, #16]
 8009e04:	f8cd 8000 	str.w	r8, [sp]
 8009e08:	463b      	mov	r3, r7
 8009e0a:	aa03      	add	r2, sp, #12
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f7ff fef6 	bl	8009c00 <_printf_common>
 8009e14:	3001      	adds	r0, #1
 8009e16:	d14d      	bne.n	8009eb4 <_printf_i+0x1c8>
 8009e18:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1c:	b005      	add	sp, #20
 8009e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e22:	4839      	ldr	r0, [pc, #228]	; (8009f08 <_printf_i+0x21c>)
 8009e24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e28:	6813      	ldr	r3, [r2, #0]
 8009e2a:	6821      	ldr	r1, [r4, #0]
 8009e2c:	1d1d      	adds	r5, r3, #4
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6015      	str	r5, [r2, #0]
 8009e32:	060a      	lsls	r2, r1, #24
 8009e34:	d50b      	bpl.n	8009e4e <_printf_i+0x162>
 8009e36:	07ca      	lsls	r2, r1, #31
 8009e38:	bf44      	itt	mi
 8009e3a:	f041 0120 	orrmi.w	r1, r1, #32
 8009e3e:	6021      	strmi	r1, [r4, #0]
 8009e40:	b91b      	cbnz	r3, 8009e4a <_printf_i+0x15e>
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	f022 0220 	bic.w	r2, r2, #32
 8009e48:	6022      	str	r2, [r4, #0]
 8009e4a:	2210      	movs	r2, #16
 8009e4c:	e7b7      	b.n	8009dbe <_printf_i+0xd2>
 8009e4e:	064d      	lsls	r5, r1, #25
 8009e50:	bf48      	it	mi
 8009e52:	b29b      	uxthmi	r3, r3
 8009e54:	e7ef      	b.n	8009e36 <_printf_i+0x14a>
 8009e56:	4665      	mov	r5, ip
 8009e58:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e5c:	fb02 3311 	mls	r3, r2, r1, r3
 8009e60:	5cc3      	ldrb	r3, [r0, r3]
 8009e62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e66:	460b      	mov	r3, r1
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	d1f5      	bne.n	8009e58 <_printf_i+0x16c>
 8009e6c:	e7b9      	b.n	8009de2 <_printf_i+0xf6>
 8009e6e:	6813      	ldr	r3, [r2, #0]
 8009e70:	6825      	ldr	r5, [r4, #0]
 8009e72:	6961      	ldr	r1, [r4, #20]
 8009e74:	1d18      	adds	r0, r3, #4
 8009e76:	6010      	str	r0, [r2, #0]
 8009e78:	0628      	lsls	r0, r5, #24
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	d501      	bpl.n	8009e82 <_printf_i+0x196>
 8009e7e:	6019      	str	r1, [r3, #0]
 8009e80:	e002      	b.n	8009e88 <_printf_i+0x19c>
 8009e82:	066a      	lsls	r2, r5, #25
 8009e84:	d5fb      	bpl.n	8009e7e <_printf_i+0x192>
 8009e86:	8019      	strh	r1, [r3, #0]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	6123      	str	r3, [r4, #16]
 8009e8c:	4665      	mov	r5, ip
 8009e8e:	e7b9      	b.n	8009e04 <_printf_i+0x118>
 8009e90:	6813      	ldr	r3, [r2, #0]
 8009e92:	1d19      	adds	r1, r3, #4
 8009e94:	6011      	str	r1, [r2, #0]
 8009e96:	681d      	ldr	r5, [r3, #0]
 8009e98:	6862      	ldr	r2, [r4, #4]
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	f7f6 f997 	bl	80001d0 <memchr>
 8009ea2:	b108      	cbz	r0, 8009ea8 <_printf_i+0x1bc>
 8009ea4:	1b40      	subs	r0, r0, r5
 8009ea6:	6060      	str	r0, [r4, #4]
 8009ea8:	6863      	ldr	r3, [r4, #4]
 8009eaa:	6123      	str	r3, [r4, #16]
 8009eac:	2300      	movs	r3, #0
 8009eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb2:	e7a7      	b.n	8009e04 <_printf_i+0x118>
 8009eb4:	6923      	ldr	r3, [r4, #16]
 8009eb6:	462a      	mov	r2, r5
 8009eb8:	4639      	mov	r1, r7
 8009eba:	4630      	mov	r0, r6
 8009ebc:	47c0      	blx	r8
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	d0aa      	beq.n	8009e18 <_printf_i+0x12c>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	079b      	lsls	r3, r3, #30
 8009ec6:	d413      	bmi.n	8009ef0 <_printf_i+0x204>
 8009ec8:	68e0      	ldr	r0, [r4, #12]
 8009eca:	9b03      	ldr	r3, [sp, #12]
 8009ecc:	4298      	cmp	r0, r3
 8009ece:	bfb8      	it	lt
 8009ed0:	4618      	movlt	r0, r3
 8009ed2:	e7a3      	b.n	8009e1c <_printf_i+0x130>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	464a      	mov	r2, r9
 8009ed8:	4639      	mov	r1, r7
 8009eda:	4630      	mov	r0, r6
 8009edc:	47c0      	blx	r8
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d09a      	beq.n	8009e18 <_printf_i+0x12c>
 8009ee2:	3501      	adds	r5, #1
 8009ee4:	68e3      	ldr	r3, [r4, #12]
 8009ee6:	9a03      	ldr	r2, [sp, #12]
 8009ee8:	1a9b      	subs	r3, r3, r2
 8009eea:	42ab      	cmp	r3, r5
 8009eec:	dcf2      	bgt.n	8009ed4 <_printf_i+0x1e8>
 8009eee:	e7eb      	b.n	8009ec8 <_printf_i+0x1dc>
 8009ef0:	2500      	movs	r5, #0
 8009ef2:	f104 0919 	add.w	r9, r4, #25
 8009ef6:	e7f5      	b.n	8009ee4 <_printf_i+0x1f8>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1ac      	bne.n	8009e56 <_printf_i+0x16a>
 8009efc:	7803      	ldrb	r3, [r0, #0]
 8009efe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f06:	e76c      	b.n	8009de2 <_printf_i+0xf6>
 8009f08:	0800a0ad 	.word	0x0800a0ad
 8009f0c:	0800a0be 	.word	0x0800a0be

08009f10 <memmove>:
 8009f10:	4288      	cmp	r0, r1
 8009f12:	b510      	push	{r4, lr}
 8009f14:	eb01 0302 	add.w	r3, r1, r2
 8009f18:	d807      	bhi.n	8009f2a <memmove+0x1a>
 8009f1a:	1e42      	subs	r2, r0, #1
 8009f1c:	4299      	cmp	r1, r3
 8009f1e:	d00a      	beq.n	8009f36 <memmove+0x26>
 8009f20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f24:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009f28:	e7f8      	b.n	8009f1c <memmove+0xc>
 8009f2a:	4283      	cmp	r3, r0
 8009f2c:	d9f5      	bls.n	8009f1a <memmove+0xa>
 8009f2e:	1881      	adds	r1, r0, r2
 8009f30:	1ad2      	subs	r2, r2, r3
 8009f32:	42d3      	cmn	r3, r2
 8009f34:	d100      	bne.n	8009f38 <memmove+0x28>
 8009f36:	bd10      	pop	{r4, pc}
 8009f38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f3c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009f40:	e7f7      	b.n	8009f32 <memmove+0x22>

08009f42 <_realloc_r>:
 8009f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f44:	4607      	mov	r7, r0
 8009f46:	4614      	mov	r4, r2
 8009f48:	460e      	mov	r6, r1
 8009f4a:	b921      	cbnz	r1, 8009f56 <_realloc_r+0x14>
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f52:	f7ff bc61 	b.w	8009818 <_malloc_r>
 8009f56:	b922      	cbnz	r2, 8009f62 <_realloc_r+0x20>
 8009f58:	f7ff fc10 	bl	800977c <_free_r>
 8009f5c:	4625      	mov	r5, r4
 8009f5e:	4628      	mov	r0, r5
 8009f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f62:	f000 f814 	bl	8009f8e <_malloc_usable_size_r>
 8009f66:	42a0      	cmp	r0, r4
 8009f68:	d20f      	bcs.n	8009f8a <_realloc_r+0x48>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff fc53 	bl	8009818 <_malloc_r>
 8009f72:	4605      	mov	r5, r0
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d0f2      	beq.n	8009f5e <_realloc_r+0x1c>
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4622      	mov	r2, r4
 8009f7c:	f7ff fbea 	bl	8009754 <memcpy>
 8009f80:	4631      	mov	r1, r6
 8009f82:	4638      	mov	r0, r7
 8009f84:	f7ff fbfa 	bl	800977c <_free_r>
 8009f88:	e7e9      	b.n	8009f5e <_realloc_r+0x1c>
 8009f8a:	4635      	mov	r5, r6
 8009f8c:	e7e7      	b.n	8009f5e <_realloc_r+0x1c>

08009f8e <_malloc_usable_size_r>:
 8009f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f92:	1f18      	subs	r0, r3, #4
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bfbc      	itt	lt
 8009f98:	580b      	ldrlt	r3, [r1, r0]
 8009f9a:	18c0      	addlt	r0, r0, r3
 8009f9c:	4770      	bx	lr
	...

08009fa0 <_init>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	bf00      	nop
 8009fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa6:	bc08      	pop	{r3}
 8009fa8:	469e      	mov	lr, r3
 8009faa:	4770      	bx	lr

08009fac <_fini>:
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	bf00      	nop
 8009fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb2:	bc08      	pop	{r3}
 8009fb4:	469e      	mov	lr, r3
 8009fb6:	4770      	bx	lr
