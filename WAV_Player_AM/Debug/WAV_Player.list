
WAV_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d930  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800dab8  0800dab8  0001dab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddbc  0800ddbc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddbc  0800ddbc  0001ddbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddc4  0800ddc4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddc4  0800ddc4  0001ddc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddc8  0800ddc8  0001ddc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ddcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a098  20000090  0800de5c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  2000a128  0800de5c  0002a128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000289d6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000525a  00000000  00000000  00048a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001488  00000000  00000000  0004dcf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001278  00000000  00000000  0004f178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000270e9  00000000  00000000  000503f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018c8d  00000000  00000000  000774d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc6fd  00000000  00000000  00090166  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c863  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e4  00000000  00000000  0015c8e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800daa0 	.word	0x0800daa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800daa0 	.word	0x0800daa0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004de:	f107 020c 	add.w	r2, r7, #12
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2302      	movs	r3, #2
 80004e8:	2194      	movs	r1, #148	; 0x94
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <write_register+0x30>)
 80004ec:	f003 fe92 	bl	8004214 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000ac 	.word	0x200000ac

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050c:	f107 020c 	add.w	r2, r7, #12
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <read_register+0x3c>)
 800051a:	f003 fe7b 	bl	8004214 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <read_register+0x3c>)
 800052a:	f003 ff71 	bl	8004410 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac

0800053c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 800053c:	b084      	sub	sp, #16
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	f107 0c10 	add.w	ip, r7, #16
 8000548:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054c:	4b7b      	ldr	r3, [pc, #492]	; (800073c <CS43_Init+0x200>)
 800054e:	2200      	movs	r2, #0
 8000550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000554:	4b79      	ldr	r3, [pc, #484]	; (800073c <CS43_Init+0x200>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	69da      	ldr	r2, [r3, #28]
 800055a:	4b78      	ldr	r3, [pc, #480]	; (800073c <CS43_Init+0x200>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000562:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2110      	movs	r1, #16
 8000568:	4875      	ldr	r0, [pc, #468]	; (8000740 <CS43_Init+0x204>)
 800056a:	f002 f811 	bl	8002590 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800056e:	4b75      	ldr	r3, [pc, #468]	; (8000744 <CS43_Init+0x208>)
 8000570:	4618      	mov	r0, r3
 8000572:	f107 0110 	add.w	r1, r7, #16
 8000576:	2354      	movs	r3, #84	; 0x54
 8000578:	461a      	mov	r2, r3
 800057a:	f00d f9c3 	bl	800d904 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800057e:	2301      	movs	r3, #1
 8000580:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	2002      	movs	r0, #2
 8000588:	f7ff ff9e 	bl	80004c8 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	b2db      	uxtb	r3, r3
 8000598:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800059a:	797b      	ldrb	r3, [r7, #5]
 800059c:	f043 030c 	orr.w	r3, r3, #12
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	f043 0303 	orr.w	r3, r3, #3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	3301      	adds	r3, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	2004      	movs	r0, #4
 80005b6:	f7ff ff87 	bl	80004c8 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	3301      	adds	r3, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	2005      	movs	r0, #5
 80005c6:	f7ff ff7f 	bl	80004c8 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	2006      	movs	r0, #6
 80005d0:	f7ff ff94 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d4:	797b      	ldrb	r3, [r7, #5]
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005f2:	797b      	ldrb	r3, [r7, #5]
 80005f4:	f023 0310 	bic.w	r3, r3, #16
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	f023 0304 	bic.w	r3, r3, #4
 8000602:	b2db      	uxtb	r3, r3
 8000604:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	f043 0303 	orr.w	r3, r3, #3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	3301      	adds	r3, #1
 800061e:	4619      	mov	r1, r3
 8000620:	2006      	movs	r0, #6
 8000622:	f7ff ff51 	bl	80004c8 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	3301      	adds	r3, #1
 800062a:	4619      	mov	r1, r3
 800062c:	2008      	movs	r0, #8
 800062e:	f7ff ff65 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	b2db      	uxtb	r3, r3
 800063a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	3301      	adds	r3, #1
 800064a:	4619      	mov	r1, r3
 800064c:	2008      	movs	r0, #8
 800064e:	f7ff ff3b 	bl	80004c8 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	3301      	adds	r3, #1
 8000656:	4619      	mov	r1, r3
 8000658:	2009      	movs	r0, #9
 800065a:	f7ff ff4f 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800065e:	797b      	ldrb	r3, [r7, #5]
 8000660:	f023 030f 	bic.w	r3, r3, #15
 8000664:	b2db      	uxtb	r3, r3
 8000666:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	3301      	adds	r3, #1
 8000676:	4619      	mov	r1, r3
 8000678:	2009      	movs	r0, #9
 800067a:	f7ff ff25 	bl	80004c8 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	3301      	adds	r3, #1
 8000682:	4619      	mov	r1, r3
 8000684:	200e      	movs	r0, #14
 8000686:	f7ff ff39 	bl	80004fc <read_register>
	if(outputMode == MODE_ANALOG)
 800068a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800068e:	2b01      	cmp	r3, #1
 8000690:	d119      	bne.n	80006c6 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000692:	797b      	ldrb	r3, [r7, #5]
 8000694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000698:	b2db      	uxtb	r3, r3
 800069a:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f023 0320 	bic.w	r3, r3, #32
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f023 0310 	bic.w	r3, r3, #16
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0308 	bic.w	r3, r3, #8
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
 80006c4:	e005      	b.n	80006d2 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006c6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006ce:	2302      	movs	r3, #2
 80006d0:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	3301      	adds	r3, #1
 80006d6:	4619      	mov	r1, r3
 80006d8:	200e      	movs	r0, #14
 80006da:	f7ff fef5 	bl	80004c8 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	3301      	adds	r3, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	200f      	movs	r0, #15
 80006e6:	f7ff ff09 	bl	80004fc <read_register>
	iData[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	200f      	movs	r0, #15
 80006f6:	f7ff fee7 	bl	80004c8 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	3301      	adds	r3, #1
 8000702:	4619      	mov	r1, r3
 8000704:	2014      	movs	r0, #20
 8000706:	f7ff fedf 	bl	80004c8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	3301      	adds	r3, #1
 800070e:	4619      	mov	r1, r3
 8000710:	2015      	movs	r0, #21
 8000712:	f7ff fed9 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	3301      	adds	r3, #1
 800071a:	4619      	mov	r1, r3
 800071c:	201a      	movs	r0, #26
 800071e:	f7ff fed3 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	3301      	adds	r3, #1
 8000726:	4619      	mov	r1, r3
 8000728:	201b      	movs	r0, #27
 800072a:	f7ff fecd 	bl	80004c8 <write_register>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000738:	b004      	add	sp, #16
 800073a:	4770      	bx	lr
 800073c:	200095d4 	.word	0x200095d4
 8000740:	40020c00 	.word	0x40020c00
 8000744:	200000ac 	.word	0x200000ac

08000748 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d82b      	bhi.n	80007b0 <CS43_Enable_RightLeft+0x68>
 8000758:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <CS43_Enable_RightLeft+0x18>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000771 	.word	0x08000771
 8000764:	08000781 	.word	0x08000781
 8000768:	08000791 	.word	0x08000791
 800076c:	080007a1 	.word	0x080007a1
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000770:	23c0      	movs	r3, #192	; 0xc0
 8000772:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000774:	7b7b      	ldrb	r3, [r7, #13]
 8000776:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800077a:	b2db      	uxtb	r3, r3
 800077c:	737b      	strb	r3, [r7, #13]
			break;
 800077e:	e018      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078a:	b2db      	uxtb	r3, r3
 800078c:	737b      	strb	r3, [r7, #13]
			break;
 800078e:	e010      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	23c0      	movs	r3, #192	; 0xc0
 8000792:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	b2db      	uxtb	r3, r3
 800079c:	737b      	strb	r3, [r7, #13]
			break;
 800079e:	e008      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	737b      	strb	r3, [r7, #13]
			break;
 80007ae:	e000      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007b0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	f043 030c 	orr.w	r3, r3, #12
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007bc:	7b7b      	ldrb	r3, [r7, #13]
 80007be:	f043 0303 	orr.w	r3, r3, #3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	3301      	adds	r3, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	2004      	movs	r0, #4
 80007d0:	f7ff fe7a 	bl	80004c8 <write_register>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3319      	adds	r3, #25
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	3301      	adds	r3, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	2020      	movs	r0, #32
 80007f8:	f7ff fe66 	bl	80004c8 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	3301      	adds	r3, #1
 8000802:	4619      	mov	r1, r3
 8000804:	2021      	movs	r0, #33	; 0x21
 8000806:	f7ff fe5f 	bl	80004c8 <write_register>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d019      	beq.n	8000856 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8000822:	23ff      	movs	r3, #255	; 0xff
 8000824:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	3301      	adds	r3, #1
 800082c:	4619      	mov	r1, r3
 800082e:	2004      	movs	r0, #4
 8000830:	f7ff fe4a 	bl	80004c8 <write_register>
    iData[1] = 0x01;
 8000834:	2301      	movs	r3, #1
 8000836:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	3301      	adds	r3, #1
 800083e:	4619      	mov	r1, r3
 8000840:	2022      	movs	r0, #34	; 0x22
 8000842:	f7ff fe41 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	3301      	adds	r3, #1
 800084c:	4619      	mov	r1, r3
 800084e:	2023      	movs	r0, #35	; 0x23
 8000850:	f7ff fe3a 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000854:	e018      	b.n	8000888 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	3301      	adds	r3, #1
 8000860:	4619      	mov	r1, r3
 8000862:	2022      	movs	r0, #34	; 0x22
 8000864:	f7ff fe30 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	3301      	adds	r3, #1
 800086e:	4619      	mov	r1, r3
 8000870:	2023      	movs	r0, #35	; 0x23
 8000872:	f7ff fe29 	bl	80004c8 <write_register>
    iData[1] = 0xAF;
 8000876:	23af      	movs	r3, #175	; 0xaf
 8000878:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	3301      	adds	r3, #1
 8000880:	4619      	mov	r1, r3
 8000882:	2004      	movs	r0, #4
 8000884:	f7ff fe20 	bl	80004c8 <write_register>
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff ffbb 	bl	8000812 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800089c:	2399      	movs	r3, #153	; 0x99
 800089e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	3301      	adds	r3, #1
 80008a4:	4619      	mov	r1, r3
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe0e 	bl	80004c8 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	3301      	adds	r3, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	2047      	movs	r0, #71	; 0x47
 80008b8:	f7ff fe06 	bl	80004c8 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	3301      	adds	r3, #1
 80008c0:	4619      	mov	r1, r3
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f7ff fe1a 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	3301      	adds	r3, #1
 80008d6:	4619      	mov	r1, r3
 80008d8:	2032      	movs	r0, #50	; 0x32
 80008da:	f7ff fdf5 	bl	80004c8 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	3301      	adds	r3, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	797b      	ldrb	r3, [r7, #5]
 80008ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	3301      	adds	r3, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde4 	bl	80004c8 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	2300      	movs	r3, #0
 8000902:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	3301      	adds	r3, #1
 8000908:	4619      	mov	r1, r3
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fddc 	bl	80004c8 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000910:	239e      	movs	r3, #158	; 0x9e
 8000912:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	3301      	adds	r3, #1
 8000918:	4619      	mov	r1, r3
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fdd4 	bl	80004c8 <write_register>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <CS43_Stop>:

void CS43_Stop(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff ff6f 	bl	8000812 <CS43_SetMute>
  iData[1] = 0x04;
 8000934:	2304      	movs	r3, #4
 8000936:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	3301      	adds	r3, #1
 800093c:	4619      	mov	r1, r3
 800093e:	200e      	movs	r0, #14
 8000940:	f7ff fdc2 	bl	80004c8 <write_register>
	iData[1] = 0x9F;
 8000944:	239f      	movs	r3, #159	; 0x9f
 8000946:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	3301      	adds	r3, #1
 800094c:	4619      	mov	r1, r3
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff fdba 	bl	80004c8 <write_register>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
 8000968:	23ff      	movs	r3, #255	; 0xff
 800096a:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 800096c:	2300      	movs	r3, #0
 800096e:	77fb      	strb	r3, [r7, #31]
 8000970:	e00b      	b.n	800098a <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000972:	7ffb      	ldrb	r3, [r7, #31]
 8000974:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <audioI2S_pllClockConfig+0x8c>)
 8000976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d101      	bne.n	8000984 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	3301      	adds	r3, #1
 8000988:	77fb      	strb	r3, [r7, #31]
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d9f0      	bls.n	8000972 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4618      	mov	r0, r3
 8000996:	f006 f85b 	bl	8006a50 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800099a:	7fbb      	ldrb	r3, [r7, #30]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d111      	bne.n	80009c8 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009a8:	7fbb      	ldrb	r3, [r7, #30]
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <audioI2S_pllClockConfig+0x90>)
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009b2:	7fbb      	ldrb	r3, [r7, #30]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <audioI2S_pllClockConfig+0x94>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f005 ff63 	bl	800688c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009c6:	e00b      	b.n	80009e0 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009cc:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009d0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009d2:	2303      	movs	r3, #3
 80009d4:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 ff56 	bl	800688c <HAL_RCCEx_PeriphCLKConfig>
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	0800db10 	.word	0x0800db10
 80009ec:	0800db30 	.word	0x0800db30
 80009f0:	0800db50 	.word	0x0800db50

080009f4 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <I2S3_freqUpdate+0x80>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <I2S3_freqUpdate+0x84>)
 8000a02:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a16:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fa2d 	bl	8004eb8 <HAL_I2S_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e000      	b.n	8000a6a <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a68:	2301      	movs	r3, #1
  }
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000100 	.word	0x20000100
 8000a78:	40003c00 	.word	0x40003c00

08000a7c <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <audioI2S_setHandle+0x1c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000100 	.word	0x20000100

08000a9c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff59 	bl	800095c <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffa2 	bl	80009f4 <I2S3_freqUpdate>
  return true;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000ac6:	f7ff fee3 	bl	8000890 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <audioI2S_play+0x38>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ad4:	d203      	bcs.n	8000ade <audioI2S_play+0x22>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	e001      	b.n	8000ae2 <audioI2S_play+0x26>
 8000ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	f004 fb27 	bl	8005138 <HAL_I2S_Transmit_DMA>
  return true;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000100 	.word	0x20000100

08000af8 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000afc:	f7ff ff14 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <audioI2S_pause+0x18>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fbbf 	bl	8005288 <HAL_I2S_DMAPause>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000100 	.word	0x20000100

08000b14 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b18:	f7ff feba 	bl	8000890 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <audioI2S_resume+0x18>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 fc13 	bl	800534c <HAL_I2S_DMAResume>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000100 	.word	0x20000100

08000b30 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b34:	f7ff fef8 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <audioI2S_stop+0x18>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 fc99 	bl	8005474 <HAL_I2S_DMAStop>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000100 	.word	0x20000100

08000b4c <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_I2S_TxCpltCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b5e:	f000 f99f 	bl	8000ea0 <audioI2S_fullTransfer_Callback>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40003c00 	.word	0x40003c00

08000b70 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b82:	f000 f981 	bl	8000e88 <audioI2S_halfTransfer_Callback>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40003c00 	.word	0x40003c00

08000b94 <util_calculate_filter>:
static signed int firState[NUM_TAPS + BLOCK_SIZE -1];
const double firCoeffs[51] = {
		0.0026527,0.00044098,0.00023411,0.0035268,0.0083258,0.0093808,0.004099,-0.001319,0.0038038,0.02015,0.031623,0.021405,-0.0027628,-0.0086009,0.024022,0.068304,0.069045,0.0093564,-0.049304,-0.019233,0.1042,0.1964,0.098338,-0.21817,-0.58207,1.4123,-0.58207,-0.21817,0.098338,0.1964,0.1042,-0.019233,-0.049304,0.0093564,0.069045,0.068304,0.024022,-0.0086009,-0.0027628,0.021405,0.031623,0.02015,0.0038038,-0.001319,0.004099,0.0093808,0.0083258,0.0035268,0.00023411,0.00044098,0.0026527
			};
void util_calculate_filter(uint16_t *buffer, uint32_t len)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]

    // Create filter instance
    arm_fir_instance_q31 instance;

    // Ensure that the buffer length isn't longer than the sample size
    if (len > FILTER_SAMPLES)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ba4:	d902      	bls.n	8000bac <util_calculate_filter+0x18>
        len = FILTER_SAMPLES;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	603b      	str	r3, [r7, #0]

   for (i = 0; i < len ; i++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	82fb      	strh	r3, [r7, #22]
 8000bb0:	e00c      	b.n	8000bcc <util_calculate_filter+0x38>
    {
        firInput[i] = (int)buffer[i];
 8000bb2:	8afb      	ldrh	r3, [r7, #22]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	881a      	ldrh	r2, [r3, #0]
 8000bbc:	8afb      	ldrh	r3, [r7, #22]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <util_calculate_filter+0xc0>)
 8000bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for (i = 0; i < len ; i++)
 8000bc6:	8afb      	ldrh	r3, [r7, #22]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	82fb      	strh	r3, [r7, #22]
 8000bcc:	8afb      	ldrh	r3, [r7, #22]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8ee      	bhi.n	8000bb2 <util_calculate_filter+0x1e>
    }

    // Call Initialization function for the filter
    arm_fir_init_q31(&instance, NUM_TAPS, &firCoeffs, &firState, BLOCK_SIZE);
 8000bd4:	f107 0008 	add.w	r0, r7, #8
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <util_calculate_filter+0xc4>)
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <util_calculate_filter+0xc8>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	f007 f833 	bl	8007c4c <arm_fir_init_q31>

    // Call the FIR process function, num of blocks to process = (FILTER_SAMPLES / BLOCK_SIZE)
    for (i = 0; i < (FILTER_SAMPLES / BLOCK_SIZE); i++) //
 8000be6:	2300      	movs	r3, #0
 8000be8:	82fb      	strh	r3, [r7, #22]
 8000bea:	e015      	b.n	8000c18 <util_calculate_filter+0x84>
    {
        // BLOCK_SIZE = samples to process per call
        //arm_fir_q31(&instance, &firInput[i * BLOCK_SIZE], &firOutput[i * BLOCK_SIZE], BLOCK_SIZE);
        arm_fir_q31(&instance, &firInput[i * BLOCK_SIZE], &firOutput[i * BLOCK_SIZE], BLOCK_SIZE);
 8000bec:	8afb      	ldrh	r3, [r7, #22]
 8000bee:	2264      	movs	r2, #100	; 0x64
 8000bf0:	fb02 f303 	mul.w	r3, r2, r3
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <util_calculate_filter+0xc0>)
 8000bf8:	1899      	adds	r1, r3, r2
 8000bfa:	8afb      	ldrh	r3, [r7, #22]
 8000bfc:	2264      	movs	r2, #100	; 0x64
 8000bfe:	fb02 f303 	mul.w	r3, r2, r3
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4a16      	ldr	r2, [pc, #88]	; (8000c60 <util_calculate_filter+0xcc>)
 8000c06:	441a      	add	r2, r3
 8000c08:	f107 0008 	add.w	r0, r7, #8
 8000c0c:	2364      	movs	r3, #100	; 0x64
 8000c0e:	f007 f83e 	bl	8007c8e <arm_fir_q31>
    for (i = 0; i < (FILTER_SAMPLES / BLOCK_SIZE); i++) //
 8000c12:	8afb      	ldrh	r3, [r7, #22]
 8000c14:	3301      	adds	r3, #1
 8000c16:	82fb      	strh	r3, [r7, #22]
 8000c18:	8afb      	ldrh	r3, [r7, #22]
 8000c1a:	2b27      	cmp	r3, #39	; 0x27
 8000c1c:	d9e6      	bls.n	8000bec <util_calculate_filter+0x58>
    }


    // Convert output back to uint16 for plotting
    for (i = 0; i < (len); i++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	82fb      	strh	r3, [r7, #22]
 8000c22:	e00f      	b.n	8000c44 <util_calculate_filter+0xb0>
    {
        buffer[i] = (uint16_t)(firOutput[i] - 63500);
 8000c24:	8afb      	ldrh	r3, [r7, #22]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <util_calculate_filter+0xcc>)
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	8afb      	ldrh	r3, [r7, #22]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	440b      	add	r3, r1
 8000c36:	f202 72f4 	addw	r2, r2, #2036	; 0x7f4
 8000c3a:	b292      	uxth	r2, r2
 8000c3c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < (len); i++)
 8000c3e:	8afb      	ldrh	r3, [r7, #22]
 8000c40:	3301      	adds	r3, #1
 8000c42:	82fb      	strh	r3, [r7, #22]
 8000c44:	8afb      	ldrh	r3, [r7, #22]
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8eb      	bhi.n	8000c24 <util_calculate_filter+0x90>
    }

}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20001348 	.word	0x20001348
 8000c58:	20009348 	.word	0x20009348
 8000c5c:	0800db70 	.word	0x0800db70
 8000c60:	20005348 	.word	0x20005348

08000c64 <wavPlayer_reset>:



static void wavPlayer_reset(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <wavPlayer_reset+0x1c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <wavPlayer_reset+0x20>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20001338 	.word	0x20001338
 8000c84:	20001340 	.word	0x20001340

08000c88 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	; 0x38
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000c94:	2201      	movs	r2, #1
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <wavPlayer_fileSelect+0x48>)
 8000c9a:	f00b fcd9 	bl	800c650 <f_open>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e00e      	b.n	8000cc6 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	f107 010c 	add.w	r1, r7, #12
 8000cb0:	222c      	movs	r2, #44	; 0x2c
 8000cb2:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <wavPlayer_fileSelect+0x48>)
 8000cb4:	f00b fe8a 	bl	800c9cc <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <wavPlayer_fileSelect+0x4c>)
 8000cbc:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <wavPlayer_fileSelect+0x50>)
 8000cc2:	6013      	str	r3, [r2, #0]
  return true;
 8000cc4:	2301      	movs	r3, #1
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3738      	adds	r7, #56	; 0x38
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000104 	.word	0x20000104
 8000cd4:	20000334 	.word	0x20000334
 8000cd8:	2000133c 	.word	0x2000133c

08000cdc <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  isFinished = false;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <wavPlayer_play+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <wavPlayer_play+0x54>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fed6 	bl	8000a9c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4810      	ldr	r0, [pc, #64]	; (8000d34 <wavPlayer_play+0x58>)
 8000cf4:	f00c f851 	bl	800cd9a <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <wavPlayer_play+0x5c>)
 8000cfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfe:	490f      	ldr	r1, [pc, #60]	; (8000d3c <wavPlayer_play+0x60>)
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <wavPlayer_play+0x58>)
 8000d02:	f00b fe63 	bl	800c9cc <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <wavPlayer_play+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <wavPlayer_play+0x5c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <wavPlayer_play+0x68>)
 8000d12:	6013      	str	r3, [r2, #0]
  //Start playing the WAV

  util_calculate_filter((uint16_t *)&audioBuffer[0],AUDIO_BUFFER_SIZE);
 8000d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <wavPlayer_play+0x60>)
 8000d1a:	f7ff ff3b 	bl	8000b94 <util_calculate_filter>

  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <wavPlayer_play+0x60>)
 8000d24:	f7ff feca 	bl	8000abc <audioI2S_play>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20001344 	.word	0x20001344
 8000d30:	2000133c 	.word	0x2000133c
 8000d34:	20000104 	.word	0x20000104
 8000d38:	20001340 	.word	0x20001340
 8000d3c:	20000338 	.word	0x20000338
 8000d40:	20000334 	.word	0x20000334
 8000d44:	20001338 	.word	0x20001338

08000d48 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000d4c:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <wavPlayer_process+0xdc>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d863      	bhi.n	8000e1e <wavPlayer_process+0xd6>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <wavPlayer_process+0x14>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000e1d 	.word	0x08000e1d
 8000d60:	08000d6d 	.word	0x08000d6d
 8000d64:	08000db9 	.word	0x08000db9
 8000d68:	08000e05 	.word	0x08000e05
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <wavPlayer_process+0xe0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d72:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <wavPlayer_process+0xdc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000d78:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <wavPlayer_process+0xe0>)
 8000d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d7e:	492b      	ldr	r1, [pc, #172]	; (8000e2c <wavPlayer_process+0xe4>)
 8000d80:	482b      	ldr	r0, [pc, #172]	; (8000e30 <wavPlayer_process+0xe8>)
 8000d82:	f00b fe23 	bl	800c9cc <f_read>

    util_calculate_filter((uint16_t *)&audioBuffer[0],AUDIO_BUFFER_SIZE);
 8000d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8a:	4828      	ldr	r0, [pc, #160]	; (8000e2c <wavPlayer_process+0xe4>)
 8000d8c:	f7ff ff02 	bl	8000b94 <util_calculate_filter>

    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <wavPlayer_process+0xec>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d98:	d907      	bls.n	8000daa <wavPlayer_process+0x62>
    {
      audioRemainSize -= playerReadBytes;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <wavPlayer_process+0xec>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <wavPlayer_process+0xe0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <wavPlayer_process+0xec>)
 8000da6:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000da8:	e039      	b.n	8000e1e <wavPlayer_process+0xd6>
      audioRemainSize = 0;
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <wavPlayer_process+0xec>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <wavPlayer_process+0xdc>)
 8000db2:	2203      	movs	r2, #3
 8000db4:	701a      	strb	r2, [r3, #0]
    break;
 8000db6:	e032      	b.n	8000e1e <wavPlayer_process+0xd6>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <wavPlayer_process+0xe0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <wavPlayer_process+0xdc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <wavPlayer_process+0xe0>)
 8000dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dca:	491b      	ldr	r1, [pc, #108]	; (8000e38 <wavPlayer_process+0xf0>)
 8000dcc:	4818      	ldr	r0, [pc, #96]	; (8000e30 <wavPlayer_process+0xe8>)
 8000dce:	f00b fdfd 	bl	800c9cc <f_read>

    util_calculate_filter((uint16_t *)&audioBuffer[0],AUDIO_BUFFER_SIZE);
 8000dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <wavPlayer_process+0xe4>)
 8000dd8:	f7ff fedc 	bl	8000b94 <util_calculate_filter>

    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <wavPlayer_process+0xec>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000de4:	d907      	bls.n	8000df6 <wavPlayer_process+0xae>
    {
      audioRemainSize -= playerReadBytes;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <wavPlayer_process+0xec>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <wavPlayer_process+0xe0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <wavPlayer_process+0xec>)
 8000df2:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000df4:	e013      	b.n	8000e1e <wavPlayer_process+0xd6>
      audioRemainSize = 0;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <wavPlayer_process+0xec>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <wavPlayer_process+0xdc>)
 8000dfe:	2203      	movs	r2, #3
 8000e00:	701a      	strb	r2, [r3, #0]
    break;
 8000e02:	e00c      	b.n	8000e1e <wavPlayer_process+0xd6>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000e04:	480a      	ldr	r0, [pc, #40]	; (8000e30 <wavPlayer_process+0xe8>)
 8000e06:	f00b ff9e 	bl	800cd46 <f_close>
    wavPlayer_reset();
 8000e0a:	f7ff ff2b 	bl	8000c64 <wavPlayer_reset>
    isFinished = true;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <wavPlayer_process+0xf4>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <wavPlayer_process+0xdc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
    break;
 8000e1a:	e000      	b.n	8000e1e <wavPlayer_process+0xd6>
    break;
 8000e1c:	bf00      	nop
  }
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20001345 	.word	0x20001345
 8000e28:	20001340 	.word	0x20001340
 8000e2c:	20000338 	.word	0x20000338
 8000e30:	20000104 	.word	0x20000104
 8000e34:	20001338 	.word	0x20001338
 8000e38:	20000b38 	.word	0x20000b38
 8000e3c:	20001344 	.word	0x20001344

08000e40 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000e44:	f7ff fe74 	bl	8000b30 <audioI2S_stop>
  isFinished = true;
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <wavPlayer_stop+0x14>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20001344 	.word	0x20001344

08000e58 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8000e5c:	f7ff fe4c 	bl	8000af8 <audioI2S_pause>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8000e68:	f7ff fe54 	bl	8000b14 <audioI2S_resume>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return isFinished;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <wavPlayer_isFinished+0x14>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20001344 	.word	0x20001344

08000e88 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <audioI2S_halfTransfer_Callback+0x14>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20001345 	.word	0x20001345

08000ea0 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <audioI2S_fullTransfer_Callback+0x14>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	20001345 	.word	0x20001345

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b095      	sub	sp, #84	; 0x54
 8000ebc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebe:	f000 fc31 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec2:	f000 f8c9 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec6:	f000 f9c5 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eca:	f000 f9a3 	bl	8001214 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ece:	f000 f945 	bl	800115c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ed2:	f000 f971 	bl	80011b8 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000ed6:	f006 fd91 	bl	80079fc <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000eda:	f00c f9c3 	bl	800d264 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  CS43_Init(hi2c1, MODE_I2S);
 8000ede:	4c55      	ldr	r4, [pc, #340]	; (8001034 <main+0x17c>)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9311      	str	r3, [sp, #68]	; 0x44
 8000ee4:	4668      	mov	r0, sp
 8000ee6:	f104 0310 	add.w	r3, r4, #16
 8000eea:	2244      	movs	r2, #68	; 0x44
 8000eec:	4619      	mov	r1, r3
 8000eee:	f00c fd09 	bl	800d904 <memcpy>
 8000ef2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ef6:	f7ff fb21 	bl	800053c <CS43_Init>
  CS43_SetVolume(250);//0-255
 8000efa:	20fa      	movs	r0, #250	; 0xfa
 8000efc:	f7ff fc6e 	bl	80007dc <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f7ff fc21 	bl	8000748 <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 8000f06:	484c      	ldr	r0, [pc, #304]	; (8001038 <main+0x180>)
 8000f08:	f7ff fdb8 	bl	8000a7c <audioI2S_setHandle>

  bool isSdCardMounted=0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle=0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f14:	f00c f9cc 	bl	800d2b0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000f18:	4b48      	ldr	r3, [pc, #288]	; (800103c <main+0x184>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d106      	bne.n	8000f2e <main+0x76>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f26:	4846      	ldr	r0, [pc, #280]	; (8001040 <main+0x188>)
 8000f28:	f001 fb32 	bl	8002590 <HAL_GPIO_WritePin>
 8000f2c:	e010      	b.n	8000f50 <main+0x98>
    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000f2e:	4b43      	ldr	r3, [pc, #268]	; (800103c <main+0x184>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d10c      	bne.n	8000f50 <main+0x98>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3c:	4840      	ldr	r0, [pc, #256]	; (8001040 <main+0x188>)
 8000f3e:	f001 fb27 	bl	8002590 <HAL_GPIO_WritePin>
      f_mount(NULL, (TCHAR const*)"", 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	493f      	ldr	r1, [pc, #252]	; (8001044 <main+0x18c>)
 8000f46:	2000      	movs	r0, #0
 8000f48:	f00b fb3c 	bl	800c5c4 <f_mount>
      isSdCardMounted = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	71fb      	strb	r3, [r7, #7]
    }

    if(Appli_state == APPLICATION_READY)
 8000f50:	4b3a      	ldr	r3, [pc, #232]	; (800103c <main+0x184>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d1dd      	bne.n	8000f14 <main+0x5c>
    {
      if(!isSdCardMounted)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f083 0301 	eor.w	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <main+0xba>
      {
        f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	4938      	ldr	r1, [pc, #224]	; (8001048 <main+0x190>)
 8000f68:	4838      	ldr	r0, [pc, #224]	; (800104c <main+0x194>)
 8000f6a:	f00b fb2b 	bl	800c5c4 <f_mount>
        isSdCardMounted = 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	71fb      	strb	r3, [r7, #7]
      }
      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f72:	2101      	movs	r1, #1
 8000f74:	4836      	ldr	r0, [pc, #216]	; (8001050 <main+0x198>)
 8000f76:	f001 faf3 	bl	8002560 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0c9      	beq.n	8000f14 <main+0x5c>
      {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f86:	482e      	ldr	r0, [pc, #184]	; (8001040 <main+0x188>)
 8000f88:	f001 fb02 	bl	8002590 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000f8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f90:	f000 fc3a 	bl	8001808 <HAL_Delay>
        wavPlayer_fileSelect(WAV_FILE1);
 8000f94:	482f      	ldr	r0, [pc, #188]	; (8001054 <main+0x19c>)
 8000f96:	f7ff fe77 	bl	8000c88 <wavPlayer_fileSelect>
        wavPlayer_play();
 8000f9a:	f7ff fe9f 	bl	8000cdc <wavPlayer_play>

        while(!wavPlayer_isFinished())
 8000f9e:	e035      	b.n	800100c <main+0x154>
        {
          wavPlayer_process();
 8000fa0:	f7ff fed2 	bl	8000d48 <wavPlayer_process>
          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	482a      	ldr	r0, [pc, #168]	; (8001050 <main+0x198>)
 8000fa8:	f001 fada 	bl	8002560 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d02c      	beq.n	800100c <main+0x154>
          {
            pauseResumeToggle^=1;
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	f083 0301 	eor.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bf14      	ite	ne
 8000fbe:	2301      	movne	r3, #1
 8000fc0:	2300      	moveq	r3, #0
 8000fc2:	71bb      	strb	r3, [r7, #6]
            if(pauseResumeToggle)
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <main+0x12a>
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd0:	481b      	ldr	r0, [pc, #108]	; (8001040 <main+0x188>)
 8000fd2:	f001 fadd 	bl	8002590 <HAL_GPIO_WritePin>
              wavPlayer_pause();
 8000fd6:	f7ff ff3f 	bl	8000e58 <wavPlayer_pause>
              HAL_Delay(200);
 8000fda:	20c8      	movs	r0, #200	; 0xc8
 8000fdc:	f000 fc14 	bl	8001808 <HAL_Delay>
 8000fe0:	e014      	b.n	800100c <main+0x154>
            }
            else
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe8:	4815      	ldr	r0, [pc, #84]	; (8001040 <main+0x188>)
 8000fea:	f001 fad1 	bl	8002590 <HAL_GPIO_WritePin>
              HAL_Delay(1000);
 8000fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff2:	f000 fc09 	bl	8001808 <HAL_Delay>
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4815      	ldr	r0, [pc, #84]	; (8001050 <main+0x198>)
 8000ffa:	f001 fab1 	bl	8002560 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <main+0x150>
              {
                wavPlayer_stop();
 8001004:	f7ff ff1c 	bl	8000e40 <wavPlayer_stop>
              }
              {
                wavPlayer_resume();
 8001008:	f7ff ff2c 	bl	8000e64 <wavPlayer_resume>
        while(!wavPlayer_isFinished())
 800100c:	f7ff ff30 	bl	8000e70 <wavPlayer_isFinished>
 8001010:	4603      	mov	r3, r0
 8001012:	f083 0301 	eor.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1c1      	bne.n	8000fa0 <main+0xe8>
              }
            }
          }
        }
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001022:	4807      	ldr	r0, [pc, #28]	; (8001040 <main+0x188>)
 8001024:	f001 fab4 	bl	8002590 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8001028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102c:	f000 fbec 	bl	8001808 <HAL_Delay>
    MX_USB_HOST_Process();
 8001030:	e770      	b.n	8000f14 <main+0x5c>
 8001032:	bf00      	nop
 8001034:	20009520 	.word	0x20009520
 8001038:	200095d4 	.word	0x200095d4
 800103c:	20009514 	.word	0x20009514
 8001040:	40020c00 	.word	0x40020c00
 8001044:	0800dab8 	.word	0x0800dab8
 8001048:	20009620 	.word	0x20009620
 800104c:	20009854 	.word	0x20009854
 8001050:	40020000 	.word	0x40020000
 8001054:	0800dabc 	.word	0x0800dabc

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b098      	sub	sp, #96	; 0x60
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f00c fc57 	bl	800d91a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <SystemClock_Config+0xfc>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a30      	ldr	r2, [pc, #192]	; (8001154 <SystemClock_Config+0xfc>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <SystemClock_Config+0xfc>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <SystemClock_Config+0x100>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a2a      	ldr	r2, [pc, #168]	; (8001158 <SystemClock_Config+0x100>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <SystemClock_Config+0x100>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c2:	2301      	movs	r3, #1
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010cc:	2302      	movs	r3, #2
 80010ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d6:	2308      	movs	r3, #8
 80010d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010da:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e4:	2307      	movs	r3, #7
 80010e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 ff7f 	bl	8005ff0 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010f8:	f000 f93e 	bl	8001378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001108:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	2105      	movs	r1, #5
 800111a:	4618      	mov	r0, r3
 800111c:	f005 f9d8 	bl	80064d0 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001126:	f000 f927 	bl	8001378 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800112a:	2301      	movs	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 800112e:	f240 130f 	movw	r3, #271	; 0x10f
 8001132:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001134:	2306      	movs	r3, #6
 8001136:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4618      	mov	r0, r3
 800113e:	f005 fba5 	bl	800688c <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001148:	f000 f916 	bl	8001378 <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3760      	adds	r7, #96	; 0x60
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x50>)
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <MX_I2C1_Init+0x54>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x50>)
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_I2C1_Init+0x58>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_I2C1_Init+0x50>)
 800117a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_I2C1_Init+0x50>)
 800119a:	f002 ff03 	bl	8003fa4 <HAL_I2C_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 f8e8 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20009520 	.word	0x20009520
 80011b0:	40005400 	.word	0x40005400
 80011b4:	000186a0 	.word	0x000186a0

080011b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_I2S3_Init+0x54>)
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <MX_I2S3_Init+0x58>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_I2S3_Init+0x54>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_I2S3_Init+0x54>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_I2S3_Init+0x54>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <MX_I2S3_Init+0x54>)
 80011d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_I2S3_Init+0x54>)
 80011e0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80011e4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_I2S3_Init+0x54>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <MX_I2S3_Init+0x54>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_I2S3_Init+0x54>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_I2S3_Init+0x54>)
 80011fa:	f003 fe5d 	bl	8004eb8 <HAL_I2S_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001204:	f000 f8b8 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200095d4 	.word	0x200095d4
 8001210:	40003c00 	.word	0x40003c00

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_DMA_Init+0x3c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <MX_DMA_Init+0x3c>)
 8001224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_DMA_Init+0x3c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2010      	movs	r0, #16
 800123c:	f000 fbe1 	bl	8001a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001240:	2010      	movs	r0, #16
 8001242:	f000 fbfa 	bl	8001a3a <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b3e      	ldr	r3, [pc, #248]	; (8001368 <MX_GPIO_Init+0x114>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a3d      	ldr	r2, [pc, #244]	; (8001368 <MX_GPIO_Init+0x114>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <MX_GPIO_Init+0x114>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <MX_GPIO_Init+0x114>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a36      	ldr	r2, [pc, #216]	; (8001368 <MX_GPIO_Init+0x114>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b34      	ldr	r3, [pc, #208]	; (8001368 <MX_GPIO_Init+0x114>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <MX_GPIO_Init+0x114>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <MX_GPIO_Init+0x114>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <MX_GPIO_Init+0x114>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <MX_GPIO_Init+0x114>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a28      	ldr	r2, [pc, #160]	; (8001368 <MX_GPIO_Init+0x114>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <MX_GPIO_Init+0x114>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_GPIO_Init+0x114>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a21      	ldr	r2, [pc, #132]	; (8001368 <MX_GPIO_Init+0x114>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_GPIO_Init+0x114>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2101      	movs	r1, #1
 80012fa:	481c      	ldr	r0, [pc, #112]	; (800136c <MX_GPIO_Init+0x118>)
 80012fc:	f001 f948 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001300:	2200      	movs	r2, #0
 8001302:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001306:	481a      	ldr	r0, [pc, #104]	; (8001370 <MX_GPIO_Init+0x11c>)
 8001308:	f001 f942 	bl	8002590 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130c:	2301      	movs	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4812      	ldr	r0, [pc, #72]	; (800136c <MX_GPIO_Init+0x118>)
 8001324:	f000 ff82 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	480e      	ldr	r0, [pc, #56]	; (8001374 <MX_GPIO_Init+0x120>)
 800133c:	f000 ff76 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001340:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001344:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_GPIO_Init+0x11c>)
 800135a:	f000 ff67 	bl	800222c <HAL_GPIO_Init>

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40020000 	.word	0x40020000

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_MspInit+0x4c>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_MspInit+0x4c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_MspInit+0x4c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f000 fb10 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_I2C_MspInit+0x84>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12c      	bne.n	8001454 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_I2C_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_I2C_MspInit+0x88>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_I2C_MspInit+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001416:	f44f 7310 	mov.w	r3, #576	; 0x240
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001420:	2301      	movs	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001428:	2304      	movs	r3, #4
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	480c      	ldr	r0, [pc, #48]	; (8001464 <HAL_I2C_MspInit+0x8c>)
 8001434:	f000 fefa 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_I2C_MspInit+0x88>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_I2C_MspInit+0x88>)
 8001442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_I2C_MspInit+0x88>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40005400 	.word	0x40005400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020400 	.word	0x40020400

08001468 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a45      	ldr	r2, [pc, #276]	; (800159c <HAL_I2S_MspInit+0x134>)
 8001486:	4293      	cmp	r3, r2
 8001488:	f040 8084 	bne.w	8001594 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_I2S_MspInit+0x138>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a42      	ldr	r2, [pc, #264]	; (80015a0 <HAL_I2S_MspInit+0x138>)
 8001496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HAL_I2S_MspInit+0x138>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <HAL_I2S_MspInit+0x138>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4a3b      	ldr	r2, [pc, #236]	; (80015a0 <HAL_I2S_MspInit+0x138>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_I2S_MspInit+0x138>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <HAL_I2S_MspInit+0x138>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4a34      	ldr	r2, [pc, #208]	; (80015a0 <HAL_I2S_MspInit+0x138>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6313      	str	r3, [r2, #48]	; 0x30
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <HAL_I2S_MspInit+0x138>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014e0:	2310      	movs	r3, #16
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014f0:	2306      	movs	r3, #6
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	482a      	ldr	r0, [pc, #168]	; (80015a4 <HAL_I2S_MspInit+0x13c>)
 80014fc:	f000 fe96 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001500:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001512:	2306      	movs	r3, #6
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4822      	ldr	r0, [pc, #136]	; (80015a8 <HAL_I2S_MspInit+0x140>)
 800151e:	f000 fe85 	bl	800222c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_I2S_MspInit+0x144>)
 8001524:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <HAL_I2S_MspInit+0x148>)
 8001526:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001528:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_I2S_MspInit+0x144>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_I2S_MspInit+0x144>)
 8001530:	2240      	movs	r2, #64	; 0x40
 8001532:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <HAL_I2S_MspInit+0x144>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_I2S_MspInit+0x144>)
 800153c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001540:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_I2S_MspInit+0x144>)
 8001544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001548:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_I2S_MspInit+0x144>)
 800154c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001550:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_I2S_MspInit+0x144>)
 8001554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001558:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_I2S_MspInit+0x144>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_I2S_MspInit+0x144>)
 8001562:	2204      	movs	r2, #4
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_I2S_MspInit+0x144>)
 8001568:	2203      	movs	r2, #3
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_I2S_MspInit+0x144>)
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_I2S_MspInit+0x144>)
 8001574:	2200      	movs	r2, #0
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <HAL_I2S_MspInit+0x144>)
 800157a:	f000 fa79 	bl	8001a70 <HAL_DMA_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8001584:	f7ff fef8 	bl	8001378 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_I2S_MspInit+0x144>)
 800158c:	639a      	str	r2, [r3, #56]	; 0x38
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_I2S_MspInit+0x144>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40003c00 	.word	0x40003c00
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020800 	.word	0x40020800
 80015ac:	20009574 	.word	0x20009574
 80015b0:	40026088 	.word	0x40026088

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <MemManage_Handler+0x4>

080015ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <UsageFault_Handler+0x4>

080015da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001608:	f000 f8de 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}

08001610 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <DMA1_Stream5_IRQHandler+0x10>)
 8001616:	f000 fba1 	bl	8001d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20009574 	.word	0x20009574

08001624 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <OTG_FS_IRQHandler+0x10>)
 800162a:	f001 fa59 	bl	8002ae0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20009e60 	.word	0x20009e60

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f00c f912 	bl	800d890 <__errno>
 800166c:	4602      	mov	r2, r0
 800166e:	230c      	movs	r3, #12
 8001670:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20020000 	.word	0x20020000
 8001698:	00002000 	.word	0x00002000
 800169c:	200094d8 	.word	0x200094d8
 80016a0:	2000a128 	.word	0x2000a128

080016a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <SystemInit+0x28>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <SystemInit+0x28>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <SystemInit+0x28>)
 80016ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016be:	609a      	str	r2, [r3, #8]
#endif
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016d6:	e003      	b.n	80016e0 <LoopCopyDataInit>

080016d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016de:	3104      	adds	r1, #4

080016e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016e8:	d3f6      	bcc.n	80016d8 <CopyDataInit>
  ldr  r2, =_sbss
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016ec:	e002      	b.n	80016f4 <LoopFillZerobss>

080016ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016f0:	f842 3b04 	str.w	r3, [r2], #4

080016f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016f8:	d3f9      	bcc.n	80016ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016fa:	f7ff ffd3 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f00c f8cd 	bl	800d89c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7ff fbd9 	bl	8000eb8 <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001708:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800170c:	0800ddcc 	.word	0x0800ddcc
  ldr  r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001714:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001718:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800171c:	2000a128 	.word	0x2000a128

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_Init+0x40>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_Init+0x40>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x40>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f94d 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fe16 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f965 	bl	8001a56 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f92d 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20000004 	.word	0x20000004

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008
 80017ec:	2000961c 	.word	0x2000961c

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2000961c 	.word	0x2000961c

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_Delay+0x40>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000008 	.word	0x20000008

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f7ff ff8e 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff29 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff3e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff8e 	bl	8001940 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5d 	bl	80018ec <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff31 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff feb8 	bl	80017f0 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e099      	b.n	8001bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aac:	e00f      	b.n	8001ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aae:	f7ff fe9f 	bl	80017f0 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d908      	bls.n	8001ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e078      	b.n	8001bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e8      	bne.n	8001aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	4b38      	ldr	r3, [pc, #224]	; (8001bc8 <HAL_DMA_Init+0x158>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d107      	bne.n	8001b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4313      	orrs	r3, r2
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f023 0307 	bic.w	r3, r3, #7
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d117      	bne.n	8001b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00e      	beq.n	8001b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fadf 	bl	8002138 <DMA_CheckFifoParam>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e016      	b.n	8001bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fa96 	bl	80020cc <DMA_CalcBaseAndBitshift>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	223f      	movs	r2, #63	; 0x3f
 8001baa:	409a      	lsls	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	f010803f 	.word	0xf010803f

08001bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_DMA_Start_IT+0x26>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e040      	b.n	8001c74 <HAL_DMA_Start_IT+0xa8>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d12f      	bne.n	8001c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 fa28 	bl	8002070 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	223f      	movs	r2, #63	; 0x3f
 8001c26:	409a      	lsls	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0216 	orr.w	r2, r2, #22
 8001c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0208 	orr.w	r2, r2, #8
 8001c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e005      	b.n	8001c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c8a:	f7ff fdb1 	bl	80017f0 <HAL_GetTick>
 8001c8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d008      	beq.n	8001cae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e052      	b.n	8001d54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0216 	bic.w	r2, r2, #22
 8001cbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ccc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <HAL_DMA_Abort+0x62>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0208 	bic.w	r2, r2, #8
 8001cec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfe:	e013      	b.n	8001d28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d00:	f7ff fd76 	bl	80017f0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d90c      	bls.n	8001d28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2220      	movs	r2, #32
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2203      	movs	r2, #3
 8001d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e015      	b.n	8001d54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1e4      	bne.n	8001d00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3a:	223f      	movs	r2, #63	; 0x3f
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <HAL_DMA_IRQHandler+0x258>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a92      	ldr	r2, [pc, #584]	; (8001fb8 <HAL_DMA_IRQHandler+0x25c>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0a9b      	lsrs	r3, r3, #10
 8001d74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	2208      	movs	r2, #8
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01a      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0204 	bic.w	r2, r2, #4
 8001dae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	2208      	movs	r2, #8
 8001db6:	409a      	lsls	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	2201      	movs	r2, #1
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d012      	beq.n	8001dfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	2201      	movs	r2, #1
 8001dec:	409a      	lsls	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2204      	movs	r2, #4
 8001e04:	409a      	lsls	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d012      	beq.n	8001e34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	2204      	movs	r2, #4
 8001e22:	409a      	lsls	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f043 0204 	orr.w	r2, r3, #4
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2210      	movs	r2, #16
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d043      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d03c      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	2210      	movs	r2, #16
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d018      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d108      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d024      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
 8001e8a:	e01f      	b.n	8001ecc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
 8001e9c:	e016      	b.n	8001ecc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d107      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0208 	bic.w	r2, r2, #8
 8001eba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 808e 	beq.w	8001ffa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8086 	beq.w	8001ffa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d136      	bne.n	8001f74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0216 	bic.w	r2, r2, #22
 8001f14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d103      	bne.n	8001f36 <HAL_DMA_IRQHandler+0x1da>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0208 	bic.w	r2, r2, #8
 8001f44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	223f      	movs	r2, #63	; 0x3f
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d07d      	beq.n	8002066 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	4798      	blx	r3
        }
        return;
 8001f72:	e078      	b.n	8002066 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d01c      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d108      	bne.n	8001fa2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d030      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	4798      	blx	r3
 8001fa0:	e02b      	b.n	8001ffa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d027      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4798      	blx	r3
 8001fb2:	e022      	b.n	8001ffa <HAL_DMA_IRQHandler+0x29e>
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10f      	bne.n	8001fea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0210 	bic.w	r2, r2, #16
 8001fd8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d032      	beq.n	8002068 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d022      	beq.n	8002054 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2205      	movs	r2, #5
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	3301      	adds	r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	429a      	cmp	r2, r3
 8002030:	d307      	bcc.n	8002042 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f2      	bne.n	8002026 <HAL_DMA_IRQHandler+0x2ca>
 8002040:	e000      	b.n	8002044 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002042:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e000      	b.n	8002068 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002066:	bf00      	nop
    }
  }
}
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop

08002070 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800208c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d108      	bne.n	80020b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ae:	e007      	b.n	80020c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	60da      	str	r2, [r3, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	3b10      	subs	r3, #16
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <DMA_CalcBaseAndBitshift+0x64>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020e6:	4a13      	ldr	r2, [pc, #76]	; (8002134 <DMA_CalcBaseAndBitshift+0x68>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d909      	bls.n	800210e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	1d1a      	adds	r2, r3, #4
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	659a      	str	r2, [r3, #88]	; 0x58
 800210c:	e007      	b.n	800211e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	aaaaaaab 	.word	0xaaaaaaab
 8002134:	0800dd20 	.word	0x0800dd20

08002138 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d11f      	bne.n	8002192 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d855      	bhi.n	8002204 <DMA_CheckFifoParam+0xcc>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <DMA_CheckFifoParam+0x28>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002171 	.word	0x08002171
 8002164:	08002183 	.word	0x08002183
 8002168:	08002171 	.word	0x08002171
 800216c:	08002205 	.word	0x08002205
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d045      	beq.n	8002208 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002180:	e042      	b.n	8002208 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800218a:	d13f      	bne.n	800220c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002190:	e03c      	b.n	800220c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219a:	d121      	bne.n	80021e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d836      	bhi.n	8002210 <DMA_CheckFifoParam+0xd8>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <DMA_CheckFifoParam+0x70>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021bf 	.word	0x080021bf
 80021b0:	080021b9 	.word	0x080021b9
 80021b4:	080021d1 	.word	0x080021d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      break;
 80021bc:	e02f      	b.n	800221e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d024      	beq.n	8002214 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ce:	e021      	b.n	8002214 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021d8:	d11e      	bne.n	8002218 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021de:	e01b      	b.n	8002218 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d902      	bls.n	80021ec <DMA_CheckFifoParam+0xb4>
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d003      	beq.n	80021f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021ea:	e018      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      break;
 80021f0:	e015      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00e      	beq.n	800221c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
      break;
 8002202:	e00b      	b.n	800221c <DMA_CheckFifoParam+0xe4>
      break;
 8002204:	bf00      	nop
 8002206:	e00a      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      break;
 8002208:	bf00      	nop
 800220a:	e008      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      break;
 800220c:	bf00      	nop
 800220e:	e006      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      break;
 8002210:	bf00      	nop
 8002212:	e004      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      break;
 8002214:	bf00      	nop
 8002216:	e002      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      break;   
 8002218:	bf00      	nop
 800221a:	e000      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      break;
 800221c:	bf00      	nop
    }
  } 
  
  return status; 
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e16b      	b.n	8002520 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 815a 	bne.w	800251a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d00b      	beq.n	8002286 <HAL_GPIO_Init+0x5a>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d007      	beq.n	8002286 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800227a:	2b11      	cmp	r3, #17
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b12      	cmp	r3, #18
 8002284:	d130      	bne.n	80022e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 0201 	and.w	r2, r3, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2203      	movs	r2, #3
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0xfc>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b12      	cmp	r3, #18
 8002326:	d123      	bne.n	8002370 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	69b9      	ldr	r1, [r7, #24]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80b4 	beq.w	800251a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <HAL_GPIO_Init+0x308>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4a5e      	ldr	r2, [pc, #376]	; (8002534 <HAL_GPIO_Init+0x308>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	; 0x44
 80023c2:	4b5c      	ldr	r3, [pc, #368]	; (8002534 <HAL_GPIO_Init+0x308>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ce:	4a5a      	ldr	r2, [pc, #360]	; (8002538 <HAL_GPIO_Init+0x30c>)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a51      	ldr	r2, [pc, #324]	; (800253c <HAL_GPIO_Init+0x310>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d02b      	beq.n	8002452 <HAL_GPIO_Init+0x226>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_GPIO_Init+0x314>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d025      	beq.n	800244e <HAL_GPIO_Init+0x222>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_GPIO_Init+0x318>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01f      	beq.n	800244a <HAL_GPIO_Init+0x21e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_GPIO_Init+0x31c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d019      	beq.n	8002446 <HAL_GPIO_Init+0x21a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4d      	ldr	r2, [pc, #308]	; (800254c <HAL_GPIO_Init+0x320>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_GPIO_Init+0x216>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <HAL_GPIO_Init+0x324>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00d      	beq.n	800243e <HAL_GPIO_Init+0x212>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4b      	ldr	r2, [pc, #300]	; (8002554 <HAL_GPIO_Init+0x328>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <HAL_GPIO_Init+0x20e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4a      	ldr	r2, [pc, #296]	; (8002558 <HAL_GPIO_Init+0x32c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_GPIO_Init+0x20a>
 8002432:	2307      	movs	r3, #7
 8002434:	e00e      	b.n	8002454 <HAL_GPIO_Init+0x228>
 8002436:	2308      	movs	r3, #8
 8002438:	e00c      	b.n	8002454 <HAL_GPIO_Init+0x228>
 800243a:	2306      	movs	r3, #6
 800243c:	e00a      	b.n	8002454 <HAL_GPIO_Init+0x228>
 800243e:	2305      	movs	r3, #5
 8002440:	e008      	b.n	8002454 <HAL_GPIO_Init+0x228>
 8002442:	2304      	movs	r3, #4
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x228>
 8002446:	2303      	movs	r3, #3
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x228>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x228>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x228>
 8002452:	2300      	movs	r3, #0
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f002 0203 	and.w	r2, r2, #3
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	4093      	lsls	r3, r2
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002464:	4934      	ldr	r1, [pc, #208]	; (8002538 <HAL_GPIO_Init+0x30c>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002472:	4b3a      	ldr	r3, [pc, #232]	; (800255c <HAL_GPIO_Init+0x330>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002496:	4a31      	ldr	r2, [pc, #196]	; (800255c <HAL_GPIO_Init+0x330>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800249c:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_GPIO_Init+0x330>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c0:	4a26      	ldr	r2, [pc, #152]	; (800255c <HAL_GPIO_Init+0x330>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c6:	4b25      	ldr	r3, [pc, #148]	; (800255c <HAL_GPIO_Init+0x330>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_GPIO_Init+0x330>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_GPIO_Init+0x330>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002514:	4a11      	ldr	r2, [pc, #68]	; (800255c <HAL_GPIO_Init+0x330>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	f67f ae90 	bls.w	8002248 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002528:	bf00      	nop
 800252a:	3724      	adds	r7, #36	; 0x24
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40021400 	.word	0x40021400
 8002554:	40021800 	.word	0x40021800
 8002558:	40021c00 	.word	0x40021c00
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e001      	b.n	8002582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80025c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c4:	b08f      	sub	sp, #60	; 0x3c
 80025c6:	af0a      	add	r7, sp, #40	; 0x28
 80025c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e054      	b.n	800267e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f00a fe96 	bl	800d320 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2203      	movs	r2, #3
 80025f8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fb16 	bl	8006c44 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	687e      	ldr	r6, [r7, #4]
 8002620:	466d      	mov	r5, sp
 8002622:	f106 0410 	add.w	r4, r6, #16
 8002626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002632:	e885 0003 	stmia.w	r5, {r0, r1}
 8002636:	1d33      	adds	r3, r6, #4
 8002638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800263a:	6838      	ldr	r0, [r7, #0]
 800263c:	f004 fa90 	bl	8006b60 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f004 fb0d 	bl	8006c66 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	687e      	ldr	r6, [r7, #4]
 8002654:	466d      	mov	r5, sp
 8002656:	f106 0410 	add.w	r4, r6, #16
 800265a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002666:	e885 0003 	stmia.w	r5, {r0, r1}
 800266a:	1d33      	adds	r3, r6, #4
 800266c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266e:	6838      	ldr	r0, [r7, #0]
 8002670:	f004 fc20 	bl	8006eb4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002686 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002686:	b590      	push	{r4, r7, lr}
 8002688:	b089      	sub	sp, #36	; 0x24
 800268a:	af04      	add	r7, sp, #16
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	4608      	mov	r0, r1
 8002690:	4611      	mov	r1, r2
 8002692:	461a      	mov	r2, r3
 8002694:	4603      	mov	r3, r0
 8002696:	70fb      	strb	r3, [r7, #3]
 8002698:	460b      	mov	r3, r1
 800269a:	70bb      	strb	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_HCD_HC_Init+0x28>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e07f      	b.n	80027ae <HAL_HCD_HC_Init+0x128>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	333d      	adds	r3, #61	; 0x3d
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	3338      	adds	r3, #56	; 0x38
 80026da:	787a      	ldrb	r2, [r7, #1]
 80026dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	440b      	add	r3, r1
 80026ec:	3340      	adds	r3, #64	; 0x40
 80026ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026f0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	440b      	add	r3, r1
 8002700:	3339      	adds	r3, #57	; 0x39
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	333f      	adds	r3, #63	; 0x3f
 8002716:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800271a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	78bb      	ldrb	r3, [r7, #2]
 8002720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002724:	b2d8      	uxtb	r0, r3
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	333a      	adds	r3, #58	; 0x3a
 8002734:	4602      	mov	r2, r0
 8002736:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002738:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800273c:	2b00      	cmp	r3, #0
 800273e:	da0a      	bge.n	8002756 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	440b      	add	r3, r1
 800274e:	333b      	adds	r3, #59	; 0x3b
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e009      	b.n	800276a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	440b      	add	r3, r1
 8002764:	333b      	adds	r3, #59	; 0x3b
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	333c      	adds	r3, #60	; 0x3c
 800277a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800277e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	787c      	ldrb	r4, [r7, #1]
 8002786:	78ba      	ldrb	r2, [r7, #2]
 8002788:	78f9      	ldrb	r1, [r7, #3]
 800278a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4623      	mov	r3, r4
 800279c:	f004 fd0c 	bl	80071b8 <USB_HC_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}

080027b6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_HCD_HC_Halt+0x1e>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e00f      	b.n	80027f4 <HAL_HCD_HC_Halt+0x3e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f004 ff48 	bl	800767a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	4608      	mov	r0, r1
 8002806:	4611      	mov	r1, r2
 8002808:	461a      	mov	r2, r3
 800280a:	4603      	mov	r3, r0
 800280c:	70fb      	strb	r3, [r7, #3]
 800280e:	460b      	mov	r3, r1
 8002810:	70bb      	strb	r3, [r7, #2]
 8002812:	4613      	mov	r3, r2
 8002814:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	333b      	adds	r3, #59	; 0x3b
 8002826:	78ba      	ldrb	r2, [r7, #2]
 8002828:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	333f      	adds	r3, #63	; 0x3f
 800283a:	787a      	ldrb	r2, [r7, #1]
 800283c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800283e:	7c3b      	ldrb	r3, [r7, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d114      	bne.n	800286e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	3342      	adds	r3, #66	; 0x42
 8002854:	2203      	movs	r2, #3
 8002856:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	333d      	adds	r3, #61	; 0x3d
 8002868:	7f3a      	ldrb	r2, [r7, #28]
 800286a:	701a      	strb	r2, [r3, #0]
 800286c:	e009      	b.n	8002882 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	3342      	adds	r3, #66	; 0x42
 800287e:	2202      	movs	r2, #2
 8002880:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002882:	787b      	ldrb	r3, [r7, #1]
 8002884:	2b03      	cmp	r3, #3
 8002886:	f200 80d6 	bhi.w	8002a36 <HAL_HCD_HC_SubmitRequest+0x23a>
 800288a:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <HAL_HCD_HC_SubmitRequest+0x94>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	080028a1 	.word	0x080028a1
 8002894:	08002a21 	.word	0x08002a21
 8002898:	0800290d 	.word	0x0800290d
 800289c:	08002997 	.word	0x08002997
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80028a0:	7c3b      	ldrb	r3, [r7, #16]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 80c9 	bne.w	8002a3a <HAL_HCD_HC_SubmitRequest+0x23e>
 80028a8:	78bb      	ldrb	r3, [r7, #2]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 80c5 	bne.w	8002a3a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80028b0:	8b3b      	ldrh	r3, [r7, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	3351      	adds	r3, #81	; 0x51
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	3351      	adds	r3, #81	; 0x51
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3342      	adds	r3, #66	; 0x42
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028f4:	e0a1      	b.n	8002a3a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	3342      	adds	r3, #66	; 0x42
 8002906:	2202      	movs	r2, #2
 8002908:	701a      	strb	r2, [r3, #0]
      break;
 800290a:	e096      	b.n	8002a3a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800290c:	78bb      	ldrb	r3, [r7, #2]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d120      	bne.n	8002954 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	3351      	adds	r3, #81	; 0x51
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	440b      	add	r3, r1
 8002936:	3342      	adds	r3, #66	; 0x42
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800293c:	e07e      	b.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	3342      	adds	r3, #66	; 0x42
 800294e:	2202      	movs	r2, #2
 8002950:	701a      	strb	r2, [r3, #0]
      break;
 8002952:	e073      	b.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	3350      	adds	r3, #80	; 0x50
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	3342      	adds	r3, #66	; 0x42
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
      break;
 800297e:	e05d      	b.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	3342      	adds	r3, #66	; 0x42
 8002990:	2202      	movs	r2, #2
 8002992:	701a      	strb	r2, [r3, #0]
      break;
 8002994:	e052      	b.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002996:	78bb      	ldrb	r3, [r7, #2]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d120      	bne.n	80029de <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	3351      	adds	r3, #81	; 0x51
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	440b      	add	r3, r1
 80029c0:	3342      	adds	r3, #66	; 0x42
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029c6:	e039      	b.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	3342      	adds	r3, #66	; 0x42
 80029d8:	2202      	movs	r2, #2
 80029da:	701a      	strb	r2, [r3, #0]
      break;
 80029dc:	e02e      	b.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	3350      	adds	r3, #80	; 0x50
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	3342      	adds	r3, #66	; 0x42
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
      break;
 8002a08:	e018      	b.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	3342      	adds	r3, #66	; 0x42
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	701a      	strb	r2, [r3, #0]
      break;
 8002a1e:	e00d      	b.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3342      	adds	r3, #66	; 0x42
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
      break;
 8002a34:	e002      	b.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002a36:	bf00      	nop
 8002a38:	e000      	b.n	8002a3c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002a3a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	3344      	adds	r3, #68	; 0x44
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	8b39      	ldrh	r1, [r7, #24]
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4403      	add	r3, r0
 8002a60:	3348      	adds	r3, #72	; 0x48
 8002a62:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	335c      	adds	r3, #92	; 0x5c
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	334c      	adds	r3, #76	; 0x4c
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	3339      	adds	r3, #57	; 0x39
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	335d      	adds	r3, #93	; 0x5d
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	3338      	adds	r3, #56	; 0x38
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	18d1      	adds	r1, r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f004 fc7c 	bl	80073cc <USB_HC_StartXfer>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop

08002ae0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 f999 	bl	8006e2e <USB_GetMode>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	f040 80ef 	bne.w	8002ce2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 f97d 	bl	8006e08 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80e5 	beq.w	8002ce0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 f974 	bl	8006e08 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2a:	d104      	bne.n	8002b36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 f964 	bl	8006e08 <USB_ReadInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b4a:	d104      	bne.n	8002b56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f004 f954 	bl	8006e08 <USB_ReadInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b6a:	d104      	bne.n	8002b76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f004 f944 	bl	8006e08 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d103      	bne.n	8002b92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 f936 	bl	8006e08 <USB_ReadInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba6:	d115      	bne.n	8002bd4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bb0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f00a fc2a 	bl	800d41c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 fa2c 	bl	800702c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 f915 	bl	8006e08 <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d102      	bne.n	8002bf0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f001 f966 	bl	8003ebc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f004 f907 	bl	8006e08 <USB_ReadInterrupts>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d106      	bne.n	8002c12 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f00a fbed 	bl	800d3e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2208      	movs	r2, #8
 8002c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f004 f8f6 	bl	8006e08 <USB_ReadInterrupts>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c26:	d138      	bne.n	8002c9a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f004 fd13 	bl	8007658 <USB_HC_ReadInterrupt>
 8002c32:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e025      	b.n	8002c86 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c64:	d106      	bne.n	8002c74 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f8cf 	bl	8002e10 <HCD_HC_IN_IRQHandler>
 8002c72:	e005      	b.n	8002c80 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fcfd 	bl	800367a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3301      	adds	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3d4      	bcc.n	8002c3a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 f8b2 	bl	8006e08 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d101      	bne.n	8002cb2 <HAL_HCD_IRQHandler+0x1d2>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_HCD_IRQHandler+0x1d4>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d014      	beq.n	8002ce2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0210 	bic.w	r2, r2, #16
 8002cc6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f001 f84b 	bl	8003d64 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0210 	orr.w	r2, r2, #16
 8002cdc:	619a      	str	r2, [r3, #24]
 8002cde:	e000      	b.n	8002ce2 <HAL_HCD_IRQHandler+0x202>
      return;
 8002ce0:	bf00      	nop
    }
  }
}
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_HCD_Start+0x16>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e013      	b.n	8002d26 <HAL_HCD_Start+0x3e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 ff89 	bl	8006c22 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 f9ec 	bl	80070f4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_HCD_Stop+0x16>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e00d      	b.n	8002d60 <HAL_HCD_Stop+0x32>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f004 fdcd 	bl	80078f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f004 f993 	bl	80070a0 <USB_ResetPort>
 8002d7a:	4603      	mov	r3, r0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	335c      	adds	r3, #92	; 0x5c
 8002da0:	781b      	ldrb	r3, [r3, #0]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	334c      	adds	r3, #76	; 0x4c
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f004 f9d5 	bl	8007194 <USB_GetCurrentFrame>
 8002dea:	4603      	mov	r3, r0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 f9b0 	bl	8007166 <USB_GetHostSpeed>
 8002e06:	4603      	mov	r3, r0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d119      	bne.n	8002e74 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2304      	movs	r3, #4
 8002e50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	0151      	lsls	r1, r2, #5
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	440a      	add	r2, r1
 8002e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	60d3      	str	r3, [r2, #12]
 8002e72:	e0ce      	b.n	8003012 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e8a:	d12c      	bne.n	8002ee6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	335d      	adds	r3, #93	; 0x5d
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	0151      	lsls	r1, r2, #5
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	440a      	add	r2, r1
 8002eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ece:	f043 0302 	orr.w	r3, r3, #2
 8002ed2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f004 fbcb 	bl	800767a <USB_HC_Halt>
 8002ee4:	e095      	b.n	8003012 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d109      	bne.n	8002f10 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	6093      	str	r3, [r2, #8]
 8002f0e:	e080      	b.n	8003012 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d134      	bne.n	8002f90 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	0151      	lsls	r1, r2, #5
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	440a      	add	r2, r1
 8002f3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	440b      	add	r3, r1
 8002f54:	335d      	adds	r3, #93	; 0x5d
 8002f56:	2205      	movs	r2, #5
 8002f58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	461a      	mov	r2, r3
 8002f68:	2310      	movs	r3, #16
 8002f6a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 fb76 	bl	800767a <USB_HC_Halt>
 8002f8e:	e040      	b.n	8003012 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa6:	d134      	bne.n	8003012 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	0151      	lsls	r1, r2, #5
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	440a      	add	r2, r1
 8002fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fc2:	f043 0302 	orr.w	r3, r3, #2
 8002fc6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 fb51 	bl	800767a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	335d      	adds	r3, #93	; 0x5d
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	461a      	mov	r2, r3
 800300c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003010:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003028:	d122      	bne.n	8003070 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	0151      	lsls	r1, r2, #5
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	440a      	add	r2, r1
 8003040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fb10 	bl	800767a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	461a      	mov	r2, r3
 8003068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800306c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800306e:	e300      	b.n	8003672 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	f040 80fd 	bne.w	8003282 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01b      	beq.n	80030c8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	3348      	adds	r3, #72	; 0x48
 80030a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0159      	lsls	r1, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	440b      	add	r3, r1
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80030b4:	1ad1      	subs	r1, r2, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4403      	add	r3, r0
 80030c4:	334c      	adds	r3, #76	; 0x4c
 80030c6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	335d      	adds	r3, #93	; 0x5d
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	3358      	adds	r3, #88	; 0x58
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	461a      	mov	r2, r3
 80030fe:	2301      	movs	r3, #1
 8003100:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	333f      	adds	r3, #63	; 0x3f
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	333f      	adds	r3, #63	; 0x3f
 8003128:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800312a:	2b02      	cmp	r3, #2
 800312c:	d121      	bne.n	8003172 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	0151      	lsls	r1, r2, #5
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	440a      	add	r2, r1
 8003144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003148:	f043 0302 	orr.w	r3, r3, #2
 800314c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f004 fa8e 	bl	800767a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	2310      	movs	r3, #16
 800316e:	6093      	str	r3, [r2, #8]
 8003170:	e070      	b.n	8003254 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	333f      	adds	r3, #63	; 0x3f
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d12a      	bne.n	80031de <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	0151      	lsls	r1, r2, #5
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	440a      	add	r2, r1
 800319e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	335c      	adds	r3, #92	; 0x5c
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	b2d8      	uxtb	r0, r3
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	335c      	adds	r3, #92	; 0x5c
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	4601      	mov	r1, r0
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f00a f92e 	bl	800d438 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031dc:	e03a      	b.n	8003254 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	333f      	adds	r3, #63	; 0x3f
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d12f      	bne.n	8003254 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	335c      	adds	r3, #92	; 0x5c
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	440b      	add	r3, r1
 8003216:	3350      	adds	r3, #80	; 0x50
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	f083 0301 	eor.w	r3, r3, #1
 800321e:	b2d8      	uxtb	r0, r3
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	3350      	adds	r3, #80	; 0x50
 8003230:	4602      	mov	r2, r0
 8003232:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	b2d8      	uxtb	r0, r3
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	440b      	add	r3, r1
 8003246:	335c      	adds	r3, #92	; 0x5c
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	4601      	mov	r1, r0
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f00a f8f2 	bl	800d438 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	3350      	adds	r3, #80	; 0x50
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	f083 0301 	eor.w	r3, r3, #1
 800326a:	b2d8      	uxtb	r0, r3
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	440b      	add	r3, r1
 800327a:	3350      	adds	r3, #80	; 0x50
 800327c:	4602      	mov	r2, r0
 800327e:	701a      	strb	r2, [r3, #0]
}
 8003280:	e1f7      	b.n	8003672 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b02      	cmp	r3, #2
 8003296:	f040 811a 	bne.w	80034ce <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	0151      	lsls	r1, r2, #5
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	440a      	add	r2, r1
 80032b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b4:	f023 0302 	bic.w	r3, r3, #2
 80032b8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	440b      	add	r3, r1
 80032c8:	335d      	adds	r3, #93	; 0x5d
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10a      	bne.n	80032e6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	335c      	adds	r3, #92	; 0x5c
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e0d9      	b.n	800349a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	335d      	adds	r3, #93	; 0x5d
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d10a      	bne.n	8003312 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	335c      	adds	r3, #92	; 0x5c
 800330c:	2205      	movs	r2, #5
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e0c3      	b.n	800349a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	335d      	adds	r3, #93	; 0x5d
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b06      	cmp	r3, #6
 8003326:	d00a      	beq.n	800333e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	335d      	adds	r3, #93	; 0x5d
 8003338:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800333a:	2b08      	cmp	r3, #8
 800333c:	d156      	bne.n	80033ec <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	3358      	adds	r3, #88	; 0x58
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	1c59      	adds	r1, r3, #1
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4403      	add	r3, r0
 8003360:	3358      	adds	r3, #88	; 0x58
 8003362:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	3358      	adds	r3, #88	; 0x58
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d914      	bls.n	80033a4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	3358      	adds	r3, #88	; 0x58
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	335c      	adds	r3, #92	; 0x5c
 800339e:	2204      	movs	r2, #4
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e009      	b.n	80033b8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	335c      	adds	r3, #92	; 0x5c
 80033b4:	2202      	movs	r2, #2
 80033b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e056      	b.n	800349a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	335d      	adds	r3, #93	; 0x5d
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d123      	bne.n	800344a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	335c      	adds	r3, #92	; 0x5c
 8003412:	2202      	movs	r2, #2
 8003414:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800342c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003434:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	e027      	b.n	800349a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	335d      	adds	r3, #93	; 0x5d
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b07      	cmp	r3, #7
 800345e:	d11c      	bne.n	800349a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	440b      	add	r3, r1
 800346e:	3358      	adds	r3, #88	; 0x58
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1c59      	adds	r1, r3, #1
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4403      	add	r3, r0
 8003482:	3358      	adds	r3, #88	; 0x58
 8003484:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	440b      	add	r3, r1
 8003494:	335c      	adds	r3, #92	; 0x5c
 8003496:	2204      	movs	r2, #4
 8003498:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	461a      	mov	r2, r3
 80034a8:	2302      	movs	r3, #2
 80034aa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	b2d8      	uxtb	r0, r3
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	335c      	adds	r3, #92	; 0x5c
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	4601      	mov	r1, r0
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f009 ffb6 	bl	800d438 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034cc:	e0d1      	b.n	8003672 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d13e      	bne.n	8003562 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	0151      	lsls	r1, r2, #5
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	440a      	add	r2, r1
 80034fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034fe:	f043 0302 	orr.w	r3, r3, #2
 8003502:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	3358      	adds	r3, #88	; 0x58
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	1c59      	adds	r1, r3, #1
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4403      	add	r3, r0
 8003526:	3358      	adds	r3, #88	; 0x58
 8003528:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	440b      	add	r3, r1
 8003538:	335d      	adds	r3, #93	; 0x5d
 800353a:	2206      	movs	r2, #6
 800353c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f004 f896 	bl	800767a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355a:	461a      	mov	r2, r3
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	6093      	str	r3, [r2, #8]
}
 8003560:	e087      	b.n	8003672 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b10      	cmp	r3, #16
 8003576:	d17c      	bne.n	8003672 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	440b      	add	r3, r1
 8003586:	333f      	adds	r3, #63	; 0x3f
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d122      	bne.n	80035d4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	3358      	adds	r3, #88	; 0x58
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	0151      	lsls	r1, r2, #5
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	440a      	add	r2, r1
 80035b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f004 f854 	bl	800767a <USB_HC_Halt>
 80035d2:	e045      	b.n	8003660 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	440b      	add	r3, r1
 80035e2:	333f      	adds	r3, #63	; 0x3f
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	333f      	adds	r3, #63	; 0x3f
 80035fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d12f      	bne.n	8003660 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	3358      	adds	r3, #88	; 0x58
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d121      	bne.n	8003660 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	440b      	add	r3, r1
 800362a:	335d      	adds	r3, #93	; 0x5d
 800362c:	2203      	movs	r2, #3
 800362e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	0151      	lsls	r1, r2, #5
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	440a      	add	r2, r1
 8003646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800364a:	f043 0302 	orr.w	r3, r3, #2
 800364e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f004 f80d 	bl	800767a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366c:	461a      	mov	r2, r3
 800366e:	2310      	movs	r3, #16
 8003670:	6093      	str	r3, [r2, #8]
}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d119      	bne.n	80036de <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b6:	461a      	mov	r2, r3
 80036b8:	2304      	movs	r3, #4
 80036ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	0151      	lsls	r1, r2, #5
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	440a      	add	r2, r1
 80036d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80036dc:	e33e      	b.n	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d141      	bne.n	8003778 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003700:	461a      	mov	r2, r3
 8003702:	2320      	movs	r3, #32
 8003704:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	333d      	adds	r3, #61	; 0x3d
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	f040 831f 	bne.w	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	440b      	add	r3, r1
 800372c:	333d      	adds	r3, #61	; 0x3d
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	440b      	add	r3, r1
 8003740:	335c      	adds	r3, #92	; 0x5c
 8003742:	2202      	movs	r2, #2
 8003744:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	440a      	add	r2, r1
 800375c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f003 ff82 	bl	800767a <USB_HC_Halt>
}
 8003776:	e2f1      	b.n	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378a:	2b40      	cmp	r3, #64	; 0x40
 800378c:	d13f      	bne.n	800380e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	335d      	adds	r3, #93	; 0x5d
 800379e:	2204      	movs	r2, #4
 80037a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	440b      	add	r3, r1
 80037b0:	333d      	adds	r3, #61	; 0x3d
 80037b2:	2201      	movs	r2, #1
 80037b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	440b      	add	r3, r1
 80037c4:	3358      	adds	r3, #88	; 0x58
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 ff40 	bl	800767a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4413      	add	r3, r2
 8003802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003806:	461a      	mov	r2, r3
 8003808:	2340      	movs	r3, #64	; 0x40
 800380a:	6093      	str	r3, [r2, #8]
}
 800380c:	e2a6      	b.n	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4413      	add	r3, r2
 8003816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003824:	d122      	bne.n	800386c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	0151      	lsls	r1, r2, #5
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	440a      	add	r2, r1
 800383c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f003 ff12 	bl	800767a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003862:	461a      	mov	r2, r3
 8003864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003868:	6093      	str	r3, [r2, #8]
}
 800386a:	e277      	b.n	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d135      	bne.n	80038ee <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	440b      	add	r3, r1
 8003890:	3358      	adds	r3, #88	; 0x58
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4413      	add	r3, r2
 800389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	0151      	lsls	r1, r2, #5
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	440a      	add	r2, r1
 80038ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f003 feda 	bl	800767a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	461a      	mov	r2, r3
 80038d4:	2301      	movs	r3, #1
 80038d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	440b      	add	r3, r1
 80038e6:	335d      	adds	r3, #93	; 0x5d
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
}
 80038ec:	e236      	b.n	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b08      	cmp	r3, #8
 8003902:	d12b      	bne.n	800395c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	461a      	mov	r2, r3
 8003912:	2308      	movs	r3, #8
 8003914:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4413      	add	r3, r2
 800391e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	0151      	lsls	r1, r2, #5
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	440a      	add	r2, r1
 800392c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f003 fe9a 	bl	800767a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	440b      	add	r3, r1
 8003954:	335d      	adds	r3, #93	; 0x5d
 8003956:	2205      	movs	r2, #5
 8003958:	701a      	strb	r2, [r3, #0]
}
 800395a:	e1ff      	b.n	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b10      	cmp	r3, #16
 8003970:	d155      	bne.n	8003a1e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	440b      	add	r3, r1
 8003980:	3358      	adds	r3, #88	; 0x58
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	440b      	add	r3, r1
 8003994:	335d      	adds	r3, #93	; 0x5d
 8003996:	2203      	movs	r2, #3
 8003998:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	440b      	add	r3, r1
 80039a8:	333d      	adds	r3, #61	; 0x3d
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d114      	bne.n	80039da <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	440b      	add	r3, r1
 80039be:	333c      	adds	r3, #60	; 0x3c
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	440b      	add	r3, r1
 80039d4:	333d      	adds	r3, #61	; 0x3d
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039f4:	f043 0302 	orr.w	r3, r3, #2
 80039f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f003 fe38 	bl	800767a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	461a      	mov	r2, r3
 8003a18:	2310      	movs	r3, #16
 8003a1a:	6093      	str	r3, [r2, #8]
}
 8003a1c:	e19e      	b.n	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d12b      	bne.n	8003a8c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	0151      	lsls	r1, r2, #5
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	440a      	add	r2, r1
 8003a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a4e:	f043 0302 	orr.w	r3, r3, #2
 8003a52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 fe0b 	bl	800767a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	335d      	adds	r3, #93	; 0x5d
 8003a74:	2206      	movs	r2, #6
 8003a76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	461a      	mov	r2, r3
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	6093      	str	r3, [r2, #8]
}
 8003a8a:	e167      	b.n	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d135      	bne.n	8003b10 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	0151      	lsls	r1, r2, #5
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	440a      	add	r2, r1
 8003aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f003 fdd3 	bl	800767a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2310      	movs	r3, #16
 8003ae4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	461a      	mov	r2, r3
 8003af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	440b      	add	r3, r1
 8003b08:	335d      	adds	r3, #93	; 0x5d
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	701a      	strb	r2, [r3, #0]
}
 8003b0e:	e125      	b.n	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	f040 811a 	bne.w	8003d5c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	0151      	lsls	r1, r2, #5
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b42:	f023 0302 	bic.w	r3, r3, #2
 8003b46:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	440b      	add	r3, r1
 8003b56:	335d      	adds	r3, #93	; 0x5d
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d137      	bne.n	8003bce <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	440b      	add	r3, r1
 8003b6c:	335c      	adds	r3, #92	; 0x5c
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	440b      	add	r3, r1
 8003b80:	333f      	adds	r3, #63	; 0x3f
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d00b      	beq.n	8003ba0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	440b      	add	r3, r1
 8003b96:	333f      	adds	r3, #63	; 0x3f
 8003b98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	f040 80c5 	bne.w	8003d2a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	3351      	adds	r3, #81	; 0x51
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	f083 0301 	eor.w	r3, r3, #1
 8003bb6:	b2d8      	uxtb	r0, r3
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3351      	adds	r3, #81	; 0x51
 8003bc8:	4602      	mov	r2, r0
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e0ad      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	335d      	adds	r3, #93	; 0x5d
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d10a      	bne.n	8003bfa <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	440b      	add	r3, r1
 8003bf2:	335c      	adds	r3, #92	; 0x5c
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	e097      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	440b      	add	r3, r1
 8003c08:	335d      	adds	r3, #93	; 0x5d
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d10a      	bne.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	440b      	add	r3, r1
 8003c1e:	335c      	adds	r3, #92	; 0x5c
 8003c20:	2202      	movs	r2, #2
 8003c22:	701a      	strb	r2, [r3, #0]
 8003c24:	e081      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	440b      	add	r3, r1
 8003c34:	335d      	adds	r3, #93	; 0x5d
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d10a      	bne.n	8003c52 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	440b      	add	r3, r1
 8003c4a:	335c      	adds	r3, #92	; 0x5c
 8003c4c:	2205      	movs	r2, #5
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	e06b      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	440b      	add	r3, r1
 8003c60:	335d      	adds	r3, #93	; 0x5d
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b06      	cmp	r3, #6
 8003c66:	d00a      	beq.n	8003c7e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	440b      	add	r3, r1
 8003c76:	335d      	adds	r3, #93	; 0x5d
 8003c78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d155      	bne.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3358      	adds	r3, #88	; 0x58
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	1c59      	adds	r1, r3, #1
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4403      	add	r3, r0
 8003ca0:	3358      	adds	r3, #88	; 0x58
 8003ca2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3358      	adds	r3, #88	; 0x58
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d914      	bls.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3358      	adds	r3, #88	; 0x58
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	440b      	add	r3, r1
 8003cdc:	335c      	adds	r3, #92	; 0x5c
 8003cde:	2204      	movs	r2, #4
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e009      	b.n	8003cf8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	440b      	add	r3, r1
 8003cf2:	335c      	adds	r3, #92	; 0x5c
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d0e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d24:	461a      	mov	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d36:	461a      	mov	r2, r3
 8003d38:	2302      	movs	r3, #2
 8003d3a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	b2d8      	uxtb	r0, r3
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	440b      	add	r3, r1
 8003d4e:	335c      	adds	r3, #92	; 0x5c
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	4601      	mov	r1, r0
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f009 fb6e 	bl	800d438 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d5c:	bf00      	nop
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	; 0x28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	0c5b      	lsrs	r3, r3, #17
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d98:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d003      	beq.n	8003da8 <HCD_RXQLVL_IRQHandler+0x44>
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	f000 8082 	beq.w	8003eaa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003da6:	e083      	b.n	8003eb0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d07f      	beq.n	8003eae <HCD_RXQLVL_IRQHandler+0x14a>
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	3344      	adds	r3, #68	; 0x44
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d074      	beq.n	8003eae <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3344      	adds	r3, #68	; 0x44
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	b292      	uxth	r2, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	f002 ffe9 	bl	8006db6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	3344      	adds	r3, #68	; 0x44
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	18d1      	adds	r1, r2, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4403      	add	r3, r0
 8003e08:	3344      	adds	r3, #68	; 0x44
 8003e0a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	440b      	add	r3, r1
 8003e1a:	334c      	adds	r3, #76	; 0x4c
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	18d1      	adds	r1, r2, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4403      	add	r3, r0
 8003e30:	334c      	adds	r3, #76	; 0x4c
 8003e32:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HCD_RXQLVL_IRQHandler+0x154>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d031      	beq.n	8003eae <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e68:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e76:	461a      	mov	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	440b      	add	r3, r1
 8003e8a:	3350      	adds	r3, #80	; 0x50
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	f083 0301 	eor.w	r3, r3, #1
 8003e92:	b2d8      	uxtb	r0, r3
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3350      	adds	r3, #80	; 0x50
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	701a      	strb	r2, [r3, #0]
      break;
 8003ea8:	e001      	b.n	8003eae <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003eae:	bf00      	nop
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	3728      	adds	r7, #40	; 0x28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	1ff80000 	.word	0x1ff80000

08003ebc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ee8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d10b      	bne.n	8003f0c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d102      	bne.n	8003f04 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f009 fa7e 	bl	800d400 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f043 0302 	orr.w	r3, r3, #2
 8003f0a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d132      	bne.n	8003f7c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f043 0308 	orr.w	r3, r3, #8
 8003f1c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d126      	bne.n	8003f76 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d113      	bne.n	8003f58 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f3a:	d106      	bne.n	8003f4a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2102      	movs	r1, #2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f003 f872 	bl	800702c <USB_InitFSLSPClkSel>
 8003f48:	e011      	b.n	8003f6e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f003 f86b 	bl	800702c <USB_InitFSLSPClkSel>
 8003f56:	e00a      	b.n	8003f6e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f66:	461a      	mov	r2, r3
 8003f68:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f6c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f009 fa70 	bl	800d454 <HAL_HCD_PortEnabled_Callback>
 8003f74:	e002      	b.n	8003f7c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f009 fa7a 	bl	800d470 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d103      	bne.n	8003f8e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f043 0320 	orr.w	r3, r3, #32
 8003f8c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f94:	461a      	mov	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6013      	str	r3, [r2, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e11f      	b.n	80041f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd fa04 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	; 0x24
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ff6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004006:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004008:	f002 fc2c 	bl	8006864 <HAL_RCC_GetPCLK1Freq>
 800400c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4a7b      	ldr	r2, [pc, #492]	; (8004200 <HAL_I2C_Init+0x25c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d807      	bhi.n	8004028 <HAL_I2C_Init+0x84>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a7a      	ldr	r2, [pc, #488]	; (8004204 <HAL_I2C_Init+0x260>)
 800401c:	4293      	cmp	r3, r2
 800401e:	bf94      	ite	ls
 8004020:	2301      	movls	r3, #1
 8004022:	2300      	movhi	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e006      	b.n	8004036 <HAL_I2C_Init+0x92>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a77      	ldr	r2, [pc, #476]	; (8004208 <HAL_I2C_Init+0x264>)
 800402c:	4293      	cmp	r3, r2
 800402e:	bf94      	ite	ls
 8004030:	2301      	movls	r3, #1
 8004032:	2300      	movhi	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0db      	b.n	80041f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a72      	ldr	r2, [pc, #456]	; (800420c <HAL_I2C_Init+0x268>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	0c9b      	lsrs	r3, r3, #18
 8004048:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4a64      	ldr	r2, [pc, #400]	; (8004200 <HAL_I2C_Init+0x25c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d802      	bhi.n	8004078 <HAL_I2C_Init+0xd4>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	3301      	adds	r3, #1
 8004076:	e009      	b.n	800408c <HAL_I2C_Init+0xe8>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	4a63      	ldr	r2, [pc, #396]	; (8004210 <HAL_I2C_Init+0x26c>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	3301      	adds	r3, #1
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	430b      	orrs	r3, r1
 8004092:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800409e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4956      	ldr	r1, [pc, #344]	; (8004200 <HAL_I2C_Init+0x25c>)
 80040a8:	428b      	cmp	r3, r1
 80040aa:	d80d      	bhi.n	80040c8 <HAL_I2C_Init+0x124>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1e59      	subs	r1, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	bf38      	it	cc
 80040c4:	2304      	movcc	r3, #4
 80040c6:	e04f      	b.n	8004168 <HAL_I2C_Init+0x1c4>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d111      	bne.n	80040f4 <HAL_I2C_Init+0x150>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1e58      	subs	r0, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	440b      	add	r3, r1
 80040de:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e2:	3301      	adds	r3, #1
 80040e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e012      	b.n	800411a <HAL_I2C_Init+0x176>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1e58      	subs	r0, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	0099      	lsls	r1, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	fbb0 f3f3 	udiv	r3, r0, r3
 800410a:	3301      	adds	r3, #1
 800410c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Init+0x17e>
 800411e:	2301      	movs	r3, #1
 8004120:	e022      	b.n	8004168 <HAL_I2C_Init+0x1c4>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10e      	bne.n	8004148 <HAL_I2C_Init+0x1a4>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e58      	subs	r0, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	440b      	add	r3, r1
 8004138:	fbb0 f3f3 	udiv	r3, r0, r3
 800413c:	3301      	adds	r3, #1
 800413e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004146:	e00f      	b.n	8004168 <HAL_I2C_Init+0x1c4>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1e58      	subs	r0, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	0099      	lsls	r1, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	6809      	ldr	r1, [r1, #0]
 800416c:	4313      	orrs	r3, r2
 800416e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6911      	ldr	r1, [r2, #16]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68d2      	ldr	r2, [r2, #12]
 80041a2:	4311      	orrs	r1, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	000186a0 	.word	0x000186a0
 8004204:	001e847f 	.word	0x001e847f
 8004208:	003d08ff 	.word	0x003d08ff
 800420c:	431bde83 	.word	0x431bde83
 8004210:	10624dd3 	.word	0x10624dd3

08004214 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	461a      	mov	r2, r3
 8004220:	460b      	mov	r3, r1
 8004222:	817b      	strh	r3, [r7, #10]
 8004224:	4613      	mov	r3, r2
 8004226:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004228:	f7fd fae2 	bl	80017f0 <HAL_GetTick>
 800422c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b20      	cmp	r3, #32
 8004238:	f040 80e0 	bne.w	80043fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2319      	movs	r3, #25
 8004242:	2201      	movs	r2, #1
 8004244:	4970      	ldr	r1, [pc, #448]	; (8004408 <HAL_I2C_Master_Transmit+0x1f4>)
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fc58 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004252:	2302      	movs	r3, #2
 8004254:	e0d3      	b.n	80043fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_I2C_Master_Transmit+0x50>
 8004260:	2302      	movs	r3, #2
 8004262:	e0cc      	b.n	80043fe <HAL_I2C_Master_Transmit+0x1ea>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d007      	beq.n	800428a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004298:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2221      	movs	r2, #33	; 0x21
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2210      	movs	r2, #16
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	893a      	ldrh	r2, [r7, #8]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a50      	ldr	r2, [pc, #320]	; (800440c <HAL_I2C_Master_Transmit+0x1f8>)
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042cc:	8979      	ldrh	r1, [r7, #10]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fac2 	bl	800485c <I2C_MasterRequestWrite>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e08d      	b.n	80043fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042f8:	e066      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	6a39      	ldr	r1, [r7, #32]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fcd2 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	2b04      	cmp	r3, #4
 8004310:	d107      	bne.n	8004322 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004320:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e06b      	b.n	80043fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b04      	cmp	r3, #4
 8004362:	d11b      	bne.n	800439c <HAL_I2C_Master_Transmit+0x188>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d017      	beq.n	800439c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	6a39      	ldr	r1, [r7, #32]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fcc2 	bl	8004d2a <I2C_WaitOnBTFFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d107      	bne.n	80043c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e01a      	b.n	80043fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d194      	bne.n	80042fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e000      	b.n	80043fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	00100002 	.word	0x00100002
 800440c:	ffff0000 	.word	0xffff0000

08004410 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08c      	sub	sp, #48	; 0x30
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	461a      	mov	r2, r3
 800441c:	460b      	mov	r3, r1
 800441e:	817b      	strh	r3, [r7, #10]
 8004420:	4613      	mov	r3, r2
 8004422:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004424:	f7fd f9e4 	bl	80017f0 <HAL_GetTick>
 8004428:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b20      	cmp	r3, #32
 8004434:	f040 820b 	bne.w	800484e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2319      	movs	r3, #25
 800443e:	2201      	movs	r2, #1
 8004440:	497c      	ldr	r1, [pc, #496]	; (8004634 <HAL_I2C_Master_Receive+0x224>)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fb5a 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
 8004450:	e1fe      	b.n	8004850 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_I2C_Master_Receive+0x50>
 800445c:	2302      	movs	r3, #2
 800445e:	e1f7      	b.n	8004850 <HAL_I2C_Master_Receive+0x440>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d007      	beq.n	8004486 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004494:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2222      	movs	r2, #34	; 0x22
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2210      	movs	r2, #16
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	893a      	ldrh	r2, [r7, #8]
 80044b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a5c      	ldr	r2, [pc, #368]	; (8004638 <HAL_I2C_Master_Receive+0x228>)
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044c8:	8979      	ldrh	r1, [r7, #10]
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fa46 	bl	8004960 <I2C_MasterRequestRead>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e1b8      	b.n	8004850 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d113      	bne.n	800450e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e6:	2300      	movs	r3, #0
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	623b      	str	r3, [r7, #32]
 80044fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e18c      	b.n	8004828 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004512:	2b01      	cmp	r3, #1
 8004514:	d11b      	bne.n	800454e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e16c      	b.n	8004828 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004552:	2b02      	cmp	r3, #2
 8004554:	d11b      	bne.n	800458e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	e14c      	b.n	8004828 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045b4:	e138      	b.n	8004828 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	f200 80f1 	bhi.w	80047a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d123      	bne.n	8004610 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fbed 	bl	8004dac <I2C_WaitOnRXNEFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e139      	b.n	8004850 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800460e:	e10b      	b.n	8004828 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	2b02      	cmp	r3, #2
 8004616:	d14e      	bne.n	80046b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	2200      	movs	r2, #0
 8004620:	4906      	ldr	r1, [pc, #24]	; (800463c <HAL_I2C_Master_Receive+0x22c>)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa6a 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e10e      	b.n	8004850 <HAL_I2C_Master_Receive+0x440>
 8004632:	bf00      	nop
 8004634:	00100002 	.word	0x00100002
 8004638:	ffff0000 	.word	0xffff0000
 800463c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046b4:	e0b8      	b.n	8004828 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	2200      	movs	r2, #0
 80046be:	4966      	ldr	r1, [pc, #408]	; (8004858 <HAL_I2C_Master_Receive+0x448>)
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fa1b 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0bf      	b.n	8004850 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2200      	movs	r2, #0
 800471a:	494f      	ldr	r1, [pc, #316]	; (8004858 <HAL_I2C_Master_Receive+0x448>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f9ed 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e091      	b.n	8004850 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047a0:	e042      	b.n	8004828 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fb00 	bl	8004dac <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e04c      	b.n	8004850 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d118      	bne.n	8004828 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f aec2 	bne.w	80045b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3728      	adds	r7, #40	; 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	00010004 	.word	0x00010004

0800485c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	460b      	mov	r3, r1
 800486a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d006      	beq.n	8004886 <I2C_MasterRequestWrite+0x2a>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d003      	beq.n	8004886 <I2C_MasterRequestWrite+0x2a>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004884:	d108      	bne.n	8004898 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e00b      	b.n	80048b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	2b12      	cmp	r3, #18
 800489e:	d107      	bne.n	80048b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f91d 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00d      	beq.n	80048e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	d103      	bne.n	80048e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e035      	b.n	8004950 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ec:	d108      	bne.n	8004900 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ee:	897b      	ldrh	r3, [r7, #10]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048fc:	611a      	str	r2, [r3, #16]
 80048fe:	e01b      	b.n	8004938 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004900:	897b      	ldrh	r3, [r7, #10]
 8004902:	11db      	asrs	r3, r3, #7
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f003 0306 	and.w	r3, r3, #6
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f063 030f 	orn	r3, r3, #15
 8004910:	b2da      	uxtb	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	490e      	ldr	r1, [pc, #56]	; (8004958 <I2C_MasterRequestWrite+0xfc>)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f943 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e010      	b.n	8004950 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800492e:	897b      	ldrh	r3, [r7, #10]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4907      	ldr	r1, [pc, #28]	; (800495c <I2C_MasterRequestWrite+0x100>)
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f933 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	00010008 	.word	0x00010008
 800495c:	00010002 	.word	0x00010002

08004960 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	607a      	str	r2, [r7, #4]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	460b      	mov	r3, r1
 800496e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004984:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d006      	beq.n	800499a <I2C_MasterRequestRead+0x3a>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d003      	beq.n	800499a <I2C_MasterRequestRead+0x3a>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004998:	d108      	bne.n	80049ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e00b      	b.n	80049c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	2b11      	cmp	r3, #17
 80049b2:	d107      	bne.n	80049c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f893 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00d      	beq.n	80049f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ea:	d103      	bne.n	80049f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e079      	b.n	8004aec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a00:	d108      	bne.n	8004a14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a02:	897b      	ldrh	r3, [r7, #10]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	611a      	str	r2, [r3, #16]
 8004a12:	e05f      	b.n	8004ad4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a14:	897b      	ldrh	r3, [r7, #10]
 8004a16:	11db      	asrs	r3, r3, #7
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f003 0306 	and.w	r3, r3, #6
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f063 030f 	orn	r3, r3, #15
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4930      	ldr	r1, [pc, #192]	; (8004af4 <I2C_MasterRequestRead+0x194>)
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f8b9 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e054      	b.n	8004aec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a42:	897b      	ldrh	r3, [r7, #10]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4929      	ldr	r1, [pc, #164]	; (8004af8 <I2C_MasterRequestRead+0x198>)
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f8a9 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e044      	b.n	8004aec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a62:	2300      	movs	r3, #0
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f831 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00d      	beq.n	8004abc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aae:	d103      	bne.n	8004ab8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e017      	b.n	8004aec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004abc:	897b      	ldrh	r3, [r7, #10]
 8004abe:	11db      	asrs	r3, r3, #7
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 0306 	and.w	r3, r3, #6
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f063 030e 	orn	r3, r3, #14
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4907      	ldr	r1, [pc, #28]	; (8004af8 <I2C_MasterRequestRead+0x198>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f865 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	00010008 	.word	0x00010008
 8004af8:	00010002 	.word	0x00010002

08004afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b0c:	e025      	b.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d021      	beq.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b16:	f7fc fe6b 	bl	80017f0 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d302      	bcc.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e023      	b.n	8004ba2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10d      	bne.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	e00c      	b.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	43da      	mvns	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bf0c      	ite	eq
 8004b92:	2301      	moveq	r3, #1
 8004b94:	2300      	movne	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d0b6      	beq.n	8004b0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb8:	e051      	b.n	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc8:	d123      	bne.n	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004be2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f043 0204 	orr.w	r2, r3, #4
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e046      	b.n	8004ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d021      	beq.n	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1a:	f7fc fde9 	bl	80017f0 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e020      	b.n	8004ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	0c1b      	lsrs	r3, r3, #16
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d10c      	bne.n	8004c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bf14      	ite	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	2300      	moveq	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	e00b      	b.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	43da      	mvns	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d18d      	bne.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb4:	e02d      	b.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f8ce 	bl	8004e58 <I2C_IsAcknowledgeFailed>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e02d      	b.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d021      	beq.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cce:	f7fc fd8f 	bl	80017f0 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d116      	bne.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e007      	b.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1c:	2b80      	cmp	r3, #128	; 0x80
 8004d1e:	d1ca      	bne.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d36:	e02d      	b.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f88d 	bl	8004e58 <I2C_IsAcknowledgeFailed>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e02d      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d021      	beq.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d50:	f7fc fd4e 	bl	80017f0 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d116      	bne.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e007      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d1ca      	bne.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db8:	e042      	b.n	8004e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d119      	bne.n	8004dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0210 	mvn.w	r2, #16
 8004dd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e029      	b.n	8004e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfc:	f7fc fcf8 	bl	80017f0 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d116      	bne.n	8004e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	f043 0220 	orr.w	r2, r3, #32
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e007      	b.n	8004e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d1b5      	bne.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	d11b      	bne.n	8004ea8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	f043 0204 	orr.w	r2, r3, #4
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e128      	b.n	800511c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a90      	ldr	r2, [pc, #576]	; (8005124 <HAL_I2S_Init+0x26c>)
 8004ee2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fc fabf 	bl	8001468 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f00:	f023 030f 	bic.w	r3, r3, #15
 8004f04:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d060      	beq.n	8004fd8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f1e:	2310      	movs	r3, #16
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e001      	b.n	8004f28 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f24:	2320      	movs	r3, #32
 8004f26:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d802      	bhi.n	8004f36 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004f36:	2001      	movs	r0, #1
 8004f38:	f001 fdb6 	bl	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f3c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f46:	d125      	bne.n	8004f94 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d010      	beq.n	8004f72 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	3305      	adds	r3, #5
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	e01f      	b.n	8004fb2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	461a      	mov	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	3305      	adds	r3, #5
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e00e      	b.n	8004fb2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fae:	3305      	adds	r3, #5
 8004fb0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4a5c      	ldr	r2, [pc, #368]	; (8005128 <HAL_I2S_Init+0x270>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	08db      	lsrs	r3, r3, #3
 8004fbc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	e003      	b.n	8004fe0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d902      	bls.n	8004fec <HAL_I2S_Init+0x134>
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	2bff      	cmp	r3, #255	; 0xff
 8004fea:	d907      	bls.n	8004ffc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff0:	f043 0210 	orr.w	r2, r3, #16
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e08f      	b.n	800511c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	ea42 0103 	orr.w	r1, r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	430a      	orrs	r2, r1
 800500e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800501a:	f023 030f 	bic.w	r3, r3, #15
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6851      	ldr	r1, [r2, #4]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6892      	ldr	r2, [r2, #8]
 8005026:	4311      	orrs	r1, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68d2      	ldr	r2, [r2, #12]
 800502c:	4311      	orrs	r1, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6992      	ldr	r2, [r2, #24]
 8005032:	430a      	orrs	r2, r1
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d161      	bne.n	800510c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a38      	ldr	r2, [pc, #224]	; (800512c <HAL_I2S_Init+0x274>)
 800504c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a37      	ldr	r2, [pc, #220]	; (8005130 <HAL_I2S_Init+0x278>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d101      	bne.n	800505c <HAL_I2S_Init+0x1a4>
 8005058:	4b36      	ldr	r3, [pc, #216]	; (8005134 <HAL_I2S_Init+0x27c>)
 800505a:	e001      	b.n	8005060 <HAL_I2S_Init+0x1a8>
 800505c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	4932      	ldr	r1, [pc, #200]	; (8005130 <HAL_I2S_Init+0x278>)
 8005068:	428a      	cmp	r2, r1
 800506a:	d101      	bne.n	8005070 <HAL_I2S_Init+0x1b8>
 800506c:	4a31      	ldr	r2, [pc, #196]	; (8005134 <HAL_I2S_Init+0x27c>)
 800506e:	e001      	b.n	8005074 <HAL_I2S_Init+0x1bc>
 8005070:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005074:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005078:	f023 030f 	bic.w	r3, r3, #15
 800507c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <HAL_I2S_Init+0x278>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d101      	bne.n	800508c <HAL_I2S_Init+0x1d4>
 8005088:	4b2a      	ldr	r3, [pc, #168]	; (8005134 <HAL_I2S_Init+0x27c>)
 800508a:	e001      	b.n	8005090 <HAL_I2S_Init+0x1d8>
 800508c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005090:	2202      	movs	r2, #2
 8005092:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a25      	ldr	r2, [pc, #148]	; (8005130 <HAL_I2S_Init+0x278>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d101      	bne.n	80050a2 <HAL_I2S_Init+0x1ea>
 800509e:	4b25      	ldr	r3, [pc, #148]	; (8005134 <HAL_I2S_Init+0x27c>)
 80050a0:	e001      	b.n	80050a6 <HAL_I2S_Init+0x1ee>
 80050a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b2:	d003      	beq.n	80050bc <HAL_I2S_Init+0x204>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80050bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	e001      	b.n	80050c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	b299      	uxth	r1, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80050de:	4303      	orrs	r3, r0
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	430b      	orrs	r3, r1
 80050e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80050e6:	4313      	orrs	r3, r2
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	897b      	ldrh	r3, [r7, #10]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <HAL_I2S_Init+0x278>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d101      	bne.n	8005104 <HAL_I2S_Init+0x24c>
 8005100:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <HAL_I2S_Init+0x27c>)
 8005102:	e001      	b.n	8005108 <HAL_I2S_Init+0x250>
 8005104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005108:	897a      	ldrh	r2, [r7, #10]
 800510a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	080059b5 	.word	0x080059b5
 8005128:	cccccccd 	.word	0xcccccccd
 800512c:	08005b3d 	.word	0x08005b3d
 8005130:	40003800 	.word	0x40003800
 8005134:	40003400 	.word	0x40003400

08005138 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	4613      	mov	r3, r2
 8005144:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_I2S_Transmit_DMA+0x1a>
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e08e      	b.n	8005274 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_I2S_Transmit_DMA+0x2e>
 8005162:	2302      	movs	r3, #2
 8005164:	e086      	b.n	8005274 <HAL_I2S_Transmit_DMA+0x13c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b01      	cmp	r3, #1
 8005178:	d005      	beq.n	8005186 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
 8005184:	e076      	b.n	8005274 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2203      	movs	r2, #3
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d002      	beq.n	80051b2 <HAL_I2S_Transmit_DMA+0x7a>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d10a      	bne.n	80051c8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051c6:	e005      	b.n	80051d4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	88fa      	ldrh	r2, [r7, #6]
 80051d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	4a28      	ldr	r2, [pc, #160]	; (800527c <HAL_I2S_Transmit_DMA+0x144>)
 80051da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	4a27      	ldr	r2, [pc, #156]	; (8005280 <HAL_I2S_Transmit_DMA+0x148>)
 80051e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	4a26      	ldr	r2, [pc, #152]	; (8005284 <HAL_I2S_Transmit_DMA+0x14c>)
 80051ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80051f4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80051fc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005202:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005204:	f7fc fce2 	bl	8001bcc <HAL_DMA_Start_IT>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00f      	beq.n	800522e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	f043 0208 	orr.w	r2, r3, #8
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e022      	b.n	8005274 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005238:	2b00      	cmp	r3, #0
 800523a:	d107      	bne.n	800524c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69da      	ldr	r2, [r3, #28]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800524a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d107      	bne.n	800526a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0202 	orr.w	r2, r2, #2
 8005268:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	08005893 	.word	0x08005893
 8005280:	08005851 	.word	0x08005851
 8005284:	080058af 	.word	0x080058af

08005288 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_I2S_DMAPause+0x18>
 800529c:	2302      	movs	r3, #2
 800529e:	e04a      	b.n	8005336 <HAL_I2S_DMAPause+0xae>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d108      	bne.n	80052c6 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0202 	bic.w	r2, r2, #2
 80052c2:	605a      	str	r2, [r3, #4]
 80052c4:	e032      	b.n	800532c <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d108      	bne.n	80052e4 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	605a      	str	r2, [r3, #4]
 80052e2:	e023      	b.n	800532c <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b05      	cmp	r3, #5
 80052ee:	d11d      	bne.n	800532c <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0203 	bic.w	r2, r2, #3
 80052fe:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a0f      	ldr	r2, [pc, #60]	; (8005344 <HAL_I2S_DMAPause+0xbc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d101      	bne.n	800530e <HAL_I2S_DMAPause+0x86>
 800530a:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <HAL_I2S_DMAPause+0xc0>)
 800530c:	e001      	b.n	8005312 <HAL_I2S_DMAPause+0x8a>
 800530e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	490a      	ldr	r1, [pc, #40]	; (8005344 <HAL_I2S_DMAPause+0xbc>)
 800531a:	428b      	cmp	r3, r1
 800531c:	d101      	bne.n	8005322 <HAL_I2S_DMAPause+0x9a>
 800531e:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <HAL_I2S_DMAPause+0xc0>)
 8005320:	e001      	b.n	8005326 <HAL_I2S_DMAPause+0x9e>
 8005322:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005326:	f022 0203 	bic.w	r2, r2, #3
 800532a:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40003800 	.word	0x40003800
 8005348:	40003400 	.word	0x40003400

0800534c <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_I2S_DMAResume+0x18>
 8005360:	2302      	movs	r3, #2
 8005362:	e07d      	b.n	8005460 <HAL_I2S_DMAResume+0x114>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b03      	cmp	r3, #3
 8005376:	d108      	bne.n	800538a <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0202 	orr.w	r2, r2, #2
 8005386:	605a      	str	r2, [r3, #4]
 8005388:	e056      	b.n	8005438 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b04      	cmp	r3, #4
 8005394:	d108      	bne.n	80053a8 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0201 	orr.w	r2, r2, #1
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	e047      	b.n	8005438 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d141      	bne.n	8005438 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0203 	orr.w	r2, r2, #3
 80053c2:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a28      	ldr	r2, [pc, #160]	; (800546c <HAL_I2S_DMAResume+0x120>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d101      	bne.n	80053d2 <HAL_I2S_DMAResume+0x86>
 80053ce:	4b28      	ldr	r3, [pc, #160]	; (8005470 <HAL_I2S_DMAResume+0x124>)
 80053d0:	e001      	b.n	80053d6 <HAL_I2S_DMAResume+0x8a>
 80053d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4923      	ldr	r1, [pc, #140]	; (800546c <HAL_I2S_DMAResume+0x120>)
 80053de:	428b      	cmp	r3, r1
 80053e0:	d101      	bne.n	80053e6 <HAL_I2S_DMAResume+0x9a>
 80053e2:	4b23      	ldr	r3, [pc, #140]	; (8005470 <HAL_I2S_DMAResume+0x124>)
 80053e4:	e001      	b.n	80053ea <HAL_I2S_DMAResume+0x9e>
 80053e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053ea:	f042 0203 	orr.w	r2, r2, #3
 80053ee:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1d      	ldr	r2, [pc, #116]	; (800546c <HAL_I2S_DMAResume+0x120>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d101      	bne.n	80053fe <HAL_I2S_DMAResume+0xb2>
 80053fa:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <HAL_I2S_DMAResume+0x124>)
 80053fc:	e001      	b.n	8005402 <HAL_I2S_DMAResume+0xb6>
 80053fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d115      	bne.n	8005438 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a16      	ldr	r2, [pc, #88]	; (800546c <HAL_I2S_DMAResume+0x120>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <HAL_I2S_DMAResume+0xce>
 8005416:	4b16      	ldr	r3, [pc, #88]	; (8005470 <HAL_I2S_DMAResume+0x124>)
 8005418:	e001      	b.n	800541e <HAL_I2S_DMAResume+0xd2>
 800541a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4911      	ldr	r1, [pc, #68]	; (800546c <HAL_I2S_DMAResume+0x120>)
 8005426:	428b      	cmp	r3, r1
 8005428:	d101      	bne.n	800542e <HAL_I2S_DMAResume+0xe2>
 800542a:	4b11      	ldr	r3, [pc, #68]	; (8005470 <HAL_I2S_DMAResume+0x124>)
 800542c:	e001      	b.n	8005432 <HAL_I2S_DMAResume+0xe6>
 800542e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005432:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005436:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005442:	2b00      	cmp	r3, #0
 8005444:	d107      	bne.n	8005456 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005454:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	40003800 	.word	0x40003800
 8005470:	40003400 	.word	0x40003400

08005474 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005488:	d004      	beq.n	8005494 <HAL_I2S_DMAStop+0x20>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f040 80d1 	bne.w	8005636 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00f      	beq.n	80054bc <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fc fbeb 	bl	8001c7c <HAL_DMA_Abort>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	f043 0208 	orr.w	r2, r3, #8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80054bc:	2364      	movs	r3, #100	; 0x64
 80054be:	2201      	movs	r2, #1
 80054c0:	2102      	movs	r1, #2
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fb00 	bl	8005ac8 <I2S_WaitFlagStateUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	f043 0201 	orr.w	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80054e6:	2364      	movs	r3, #100	; 0x64
 80054e8:	2200      	movs	r2, #0
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 faeb 	bl	8005ac8 <I2S_WaitFlagStateUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fc:	f043 0201 	orr.w	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0202 	bic.w	r2, r2, #2
 800553c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b05      	cmp	r3, #5
 8005548:	f040 8165 	bne.w	8005816 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00f      	beq.n	8005574 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005558:	4618      	mov	r0, r3
 800555a:	f7fc fb8f 	bl	8001c7c <HAL_DMA_Abort>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	f043 0208 	orr.w	r2, r3, #8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a8a      	ldr	r2, [pc, #552]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d101      	bne.n	8005582 <HAL_I2S_DMAStop+0x10e>
 800557e:	4b8a      	ldr	r3, [pc, #552]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 8005580:	e001      	b.n	8005586 <HAL_I2S_DMAStop+0x112>
 8005582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4985      	ldr	r1, [pc, #532]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 800558e:	428b      	cmp	r3, r1
 8005590:	d101      	bne.n	8005596 <HAL_I2S_DMAStop+0x122>
 8005592:	4b85      	ldr	r3, [pc, #532]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 8005594:	e001      	b.n	800559a <HAL_I2S_DMAStop+0x126>
 8005596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800559a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a7e      	ldr	r2, [pc, #504]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d101      	bne.n	80055b2 <HAL_I2S_DMAStop+0x13e>
 80055ae:	4b7e      	ldr	r3, [pc, #504]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 80055b0:	e001      	b.n	80055b6 <HAL_I2S_DMAStop+0x142>
 80055b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a79      	ldr	r2, [pc, #484]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <HAL_I2S_DMAStop+0x154>
 80055c4:	4b78      	ldr	r3, [pc, #480]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 80055c6:	e001      	b.n	80055cc <HAL_I2S_DMAStop+0x158>
 80055c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a73      	ldr	r2, [pc, #460]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d101      	bne.n	80055e0 <HAL_I2S_DMAStop+0x16c>
 80055dc:	4b72      	ldr	r3, [pc, #456]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 80055de:	e001      	b.n	80055e4 <HAL_I2S_DMAStop+0x170>
 80055e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	496e      	ldr	r1, [pc, #440]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 80055ec:	428b      	cmp	r3, r1
 80055ee:	d101      	bne.n	80055f4 <HAL_I2S_DMAStop+0x180>
 80055f0:	4b6d      	ldr	r3, [pc, #436]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 80055f2:	e001      	b.n	80055f8 <HAL_I2S_DMAStop+0x184>
 80055f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10c      	bne.n	8005620 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800561e:	e0fa      	b.n	8005816 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a5f      	ldr	r2, [pc, #380]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d101      	bne.n	800562e <HAL_I2S_DMAStop+0x1ba>
 800562a:	4b5f      	ldr	r3, [pc, #380]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 800562c:	e001      	b.n	8005632 <HAL_I2S_DMAStop+0x1be>
 800562e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005632:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005634:	e0ef      	b.n	8005816 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800563e:	d005      	beq.n	800564c <HAL_I2S_DMAStop+0x1d8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005648:	f040 80e5 	bne.w	8005816 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00f      	beq.n	8005674 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	4618      	mov	r0, r3
 800565a:	f7fc fb0f 	bl	8001c7c <HAL_DMA_Abort>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005668:	f043 0208 	orr.w	r2, r3, #8
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b05      	cmp	r3, #5
 800567e:	f040 809a 	bne.w	80057b6 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00f      	beq.n	80056aa <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	4618      	mov	r0, r3
 8005690:	f7fc faf4 	bl	8001c7c <HAL_DMA_Abort>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	f043 0208 	orr.w	r2, r3, #8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80056aa:	f7fc f8a1 	bl	80017f0 <HAL_GetTick>
 80056ae:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80056b0:	e012      	b.n	80056d8 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80056b2:	f7fc f89d 	bl	80017f0 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b64      	cmp	r3, #100	; 0x64
 80056be:	d90b      	bls.n	80056d8 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	f043 0201 	orr.w	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a31      	ldr	r2, [pc, #196]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d101      	bne.n	80056e6 <HAL_I2S_DMAStop+0x272>
 80056e2:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 80056e4:	e001      	b.n	80056ea <HAL_I2S_DMAStop+0x276>
 80056e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d1de      	bne.n	80056b2 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80056f4:	e012      	b.n	800571c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80056f6:	f7fc f87b 	bl	80017f0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b64      	cmp	r3, #100	; 0x64
 8005702:	d90b      	bls.n	800571c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	f043 0201 	orr.w	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a20      	ldr	r2, [pc, #128]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d101      	bne.n	800572a <HAL_I2S_DMAStop+0x2b6>
 8005726:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 8005728:	e001      	b.n	800572e <HAL_I2S_DMAStop+0x2ba>
 800572a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005734:	2b80      	cmp	r3, #128	; 0x80
 8005736:	d0de      	beq.n	80056f6 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a19      	ldr	r2, [pc, #100]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_I2S_DMAStop+0x2d2>
 8005742:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 8005744:	e001      	b.n	800574a <HAL_I2S_DMAStop+0x2d6>
 8005746:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4914      	ldr	r1, [pc, #80]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 8005752:	428b      	cmp	r3, r1
 8005754:	d101      	bne.n	800575a <HAL_I2S_DMAStop+0x2e6>
 8005756:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 8005758:	e001      	b.n	800575e <HAL_I2S_DMAStop+0x2ea>
 800575a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800575e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005762:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a0d      	ldr	r2, [pc, #52]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d101      	bne.n	8005776 <HAL_I2S_DMAStop+0x302>
 8005772:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 8005774:	e001      	b.n	800577a <HAL_I2S_DMAStop+0x306>
 8005776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a07      	ldr	r2, [pc, #28]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d101      	bne.n	800578e <HAL_I2S_DMAStop+0x31a>
 800578a:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 800578c:	e001      	b.n	8005792 <HAL_I2S_DMAStop+0x31e>
 800578e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4902      	ldr	r1, [pc, #8]	; (80057a4 <HAL_I2S_DMAStop+0x330>)
 800579a:	428b      	cmp	r3, r1
 800579c:	d106      	bne.n	80057ac <HAL_I2S_DMAStop+0x338>
 800579e:	4b02      	ldr	r3, [pc, #8]	; (80057a8 <HAL_I2S_DMAStop+0x334>)
 80057a0:	e006      	b.n	80057b0 <HAL_I2S_DMAStop+0x33c>
 80057a2:	bf00      	nop
 80057a4:	40003800 	.word	0x40003800
 80057a8:	40003400 	.word	0x40003400
 80057ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b0:	f022 0202 	bic.w	r2, r2, #2
 80057b4:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80057c6:	2300      	movs	r3, #0
 80057c8:	60bb      	str	r3, [r7, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0201 	bic.w	r2, r2, #1
 80057ea:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f4:	d10c      	bne.n	8005810 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e002      	b.n	8005816 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800581e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10e      	bne.n	8005884 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0202 	bic.w	r2, r2, #2
 8005874:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7fb f961 	bl	8000b4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7fb f965 	bl	8000b70 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0203 	bic.w	r2, r2, #3
 80058ca:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e4:	f043 0208 	orr.w	r2, r3, #8
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff ffa5 	bl	800583c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	881a      	ldrh	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	1c9a      	adds	r2, r3, #2
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10e      	bne.n	800594e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800593e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fb f8ff 	bl	8000b4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	b292      	uxth	r2, r2
 800596a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	1c9a      	adds	r2, r3, #2
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10e      	bne.n	80059ac <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800599c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff ff3e 	bl	8005828 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d13a      	bne.n	8005a46 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d109      	bne.n	80059ee <I2S_IRQHandler+0x3a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d102      	bne.n	80059ee <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff ffb4 	bl	8005956 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	2b40      	cmp	r3, #64	; 0x40
 80059f6:	d126      	bne.n	8005a46 <I2S_IRQHandler+0x92>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d11f      	bne.n	8005a46 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a14:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a16:	2300      	movs	r3, #0
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	f043 0202 	orr.w	r2, r3, #2
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff fefb 	bl	800583c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d136      	bne.n	8005ac0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d109      	bne.n	8005a70 <I2S_IRQHandler+0xbc>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	d102      	bne.n	8005a70 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff ff45 	bl	80058fa <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d122      	bne.n	8005ac0 <I2S_IRQHandler+0x10c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d11b      	bne.n	8005ac0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a96:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab2:	f043 0204 	orr.w	r2, r3, #4
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff febe 	bl	800583c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ac0:	bf00      	nop
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ad8:	f7fb fe8a 	bl	80017f0 <HAL_GetTick>
 8005adc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005ade:	e018      	b.n	8005b12 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d014      	beq.n	8005b12 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005ae8:	f7fb fe82 	bl	80017f0 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d902      	bls.n	8005afe <I2S_WaitFlagStateUntilTimeout+0x36>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e00f      	b.n	8005b32 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d1d7      	bne.n	8005ae0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4aa2      	ldr	r2, [pc, #648]	; (8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d101      	bne.n	8005b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005b56:	4ba2      	ldr	r3, [pc, #648]	; (8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b58:	e001      	b.n	8005b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a9b      	ldr	r2, [pc, #620]	; (8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d101      	bne.n	8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005b74:	4b9a      	ldr	r3, [pc, #616]	; (8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b76:	e001      	b.n	8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b88:	d004      	beq.n	8005b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f040 8099 	bne.w	8005cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d107      	bne.n	8005bae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f925 	bl	8005df8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d107      	bne.n	8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f9c8 	bl	8005f58 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	d13a      	bne.n	8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d035      	beq.n	8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a7e      	ldr	r2, [pc, #504]	; (8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d101      	bne.n	8005bea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005be6:	4b7e      	ldr	r3, [pc, #504]	; (8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005be8:	e001      	b.n	8005bee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005bea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4979      	ldr	r1, [pc, #484]	; (8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005bf6:	428b      	cmp	r3, r1
 8005bf8:	d101      	bne.n	8005bfe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005bfa:	4b79      	ldr	r3, [pc, #484]	; (8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005bfc:	e001      	b.n	8005c02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c06:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	f043 0202 	orr.w	r2, r3, #2
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff fdfa 	bl	800583c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	f040 80be 	bne.w	8005dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 80b8 	beq.w	8005dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c6e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a59      	ldr	r2, [pc, #356]	; (8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005c7a:	4b59      	ldr	r3, [pc, #356]	; (8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c7c:	e001      	b.n	8005c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005c7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4954      	ldr	r1, [pc, #336]	; (8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c8a:	428b      	cmp	r3, r1
 8005c8c:	d101      	bne.n	8005c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005c8e:	4b54      	ldr	r3, [pc, #336]	; (8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c90:	e001      	b.n	8005c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c9a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	f043 0204 	orr.w	r2, r3, #4
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fdbc 	bl	800583c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005cc4:	e084      	b.n	8005dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d107      	bne.n	8005ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f8be 	bl	8005e5c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d107      	bne.n	8005cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f8fd 	bl	8005ef4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d12f      	bne.n	8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d02a      	beq.n	8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d1c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2e      	ldr	r2, [pc, #184]	; (8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d101      	bne.n	8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005d28:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d2a:	e001      	b.n	8005d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005d2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4929      	ldr	r1, [pc, #164]	; (8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d38:	428b      	cmp	r3, r1
 8005d3a:	d101      	bne.n	8005d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005d3c:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d3e:	e001      	b.n	8005d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d56:	f043 0202 	orr.w	r2, r3, #2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff fd6c 	bl	800583c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d131      	bne.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d02c      	beq.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d101      	bne.n	8005d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005d82:	4b17      	ldr	r3, [pc, #92]	; (8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d84:	e001      	b.n	8005d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005d86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4912      	ldr	r1, [pc, #72]	; (8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d92:	428b      	cmp	r3, r1
 8005d94:	d101      	bne.n	8005d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d98:	e001      	b.n	8005d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005da2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005db2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	f043 0204 	orr.w	r2, r3, #4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fd37 	bl	800583c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dce:	e000      	b.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dd0:	bf00      	nop
}
 8005dd2:	bf00      	nop
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40003800 	.word	0x40003800
 8005de0:	40003400 	.word	0x40003400

08005de4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	1c99      	adds	r1, r3, #2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6251      	str	r1, [r2, #36]	; 0x24
 8005e0a:	881a      	ldrh	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d113      	bne.n	8005e52 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ffc9 	bl	8005de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	1c99      	adds	r1, r3, #2
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6251      	str	r1, [r2, #36]	; 0x24
 8005e6e:	8819      	ldrh	r1, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <I2SEx_TxISR_I2SExt+0x90>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d101      	bne.n	8005e7e <I2SEx_TxISR_I2SExt+0x22>
 8005e7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <I2SEx_TxISR_I2SExt+0x94>)
 8005e7c:	e001      	b.n	8005e82 <I2SEx_TxISR_I2SExt+0x26>
 8005e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e82:	460a      	mov	r2, r1
 8005e84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d121      	bne.n	8005ee2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <I2SEx_TxISR_I2SExt+0x90>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d101      	bne.n	8005eac <I2SEx_TxISR_I2SExt+0x50>
 8005ea8:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <I2SEx_TxISR_I2SExt+0x94>)
 8005eaa:	e001      	b.n	8005eb0 <I2SEx_TxISR_I2SExt+0x54>
 8005eac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	490d      	ldr	r1, [pc, #52]	; (8005eec <I2SEx_TxISR_I2SExt+0x90>)
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	d101      	bne.n	8005ec0 <I2SEx_TxISR_I2SExt+0x64>
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <I2SEx_TxISR_I2SExt+0x94>)
 8005ebe:	e001      	b.n	8005ec4 <I2SEx_TxISR_I2SExt+0x68>
 8005ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ec4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ec8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff ff81 	bl	8005de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40003800 	.word	0x40003800
 8005ef0:	40003400 	.word	0x40003400

08005ef4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68d8      	ldr	r0, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f06:	1c99      	adds	r1, r3, #2
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f0c:	b282      	uxth	r2, r0
 8005f0e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d113      	bne.n	8005f50 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f36:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff ff4a 	bl	8005de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a20      	ldr	r2, [pc, #128]	; (8005fe8 <I2SEx_RxISR_I2SExt+0x90>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d101      	bne.n	8005f6e <I2SEx_RxISR_I2SExt+0x16>
 8005f6a:	4b20      	ldr	r3, [pc, #128]	; (8005fec <I2SEx_RxISR_I2SExt+0x94>)
 8005f6c:	e001      	b.n	8005f72 <I2SEx_RxISR_I2SExt+0x1a>
 8005f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f72:	68d8      	ldr	r0, [r3, #12]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	1c99      	adds	r1, r3, #2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f7e:	b282      	uxth	r2, r0
 8005f80:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d121      	bne.n	8005fde <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <I2SEx_RxISR_I2SExt+0x90>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d101      	bne.n	8005fa8 <I2SEx_RxISR_I2SExt+0x50>
 8005fa4:	4b11      	ldr	r3, [pc, #68]	; (8005fec <I2SEx_RxISR_I2SExt+0x94>)
 8005fa6:	e001      	b.n	8005fac <I2SEx_RxISR_I2SExt+0x54>
 8005fa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	490d      	ldr	r1, [pc, #52]	; (8005fe8 <I2SEx_RxISR_I2SExt+0x90>)
 8005fb4:	428b      	cmp	r3, r1
 8005fb6:	d101      	bne.n	8005fbc <I2SEx_RxISR_I2SExt+0x64>
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <I2SEx_RxISR_I2SExt+0x94>)
 8005fba:	e001      	b.n	8005fc0 <I2SEx_RxISR_I2SExt+0x68>
 8005fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fc4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d106      	bne.n	8005fde <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff ff03 	bl	8005de4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40003800 	.word	0x40003800
 8005fec:	40003400 	.word	0x40003400

08005ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e25b      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d075      	beq.n	80060fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800600e:	4ba3      	ldr	r3, [pc, #652]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
 8006016:	2b04      	cmp	r3, #4
 8006018:	d00c      	beq.n	8006034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800601a:	4ba0      	ldr	r3, [pc, #640]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006022:	2b08      	cmp	r3, #8
 8006024:	d112      	bne.n	800604c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006026:	4b9d      	ldr	r3, [pc, #628]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006032:	d10b      	bne.n	800604c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006034:	4b99      	ldr	r3, [pc, #612]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d05b      	beq.n	80060f8 <HAL_RCC_OscConfig+0x108>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d157      	bne.n	80060f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e236      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006054:	d106      	bne.n	8006064 <HAL_RCC_OscConfig+0x74>
 8006056:	4b91      	ldr	r3, [pc, #580]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a90      	ldr	r2, [pc, #576]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 800605c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e01d      	b.n	80060a0 <HAL_RCC_OscConfig+0xb0>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800606c:	d10c      	bne.n	8006088 <HAL_RCC_OscConfig+0x98>
 800606e:	4b8b      	ldr	r3, [pc, #556]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a8a      	ldr	r2, [pc, #552]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	4b88      	ldr	r3, [pc, #544]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a87      	ldr	r2, [pc, #540]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	e00b      	b.n	80060a0 <HAL_RCC_OscConfig+0xb0>
 8006088:	4b84      	ldr	r3, [pc, #528]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a83      	ldr	r2, [pc, #524]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 800608e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	4b81      	ldr	r3, [pc, #516]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a80      	ldr	r2, [pc, #512]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 800609a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800609e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d013      	beq.n	80060d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a8:	f7fb fba2 	bl	80017f0 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b0:	f7fb fb9e 	bl	80017f0 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b64      	cmp	r3, #100	; 0x64
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e1fb      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c2:	4b76      	ldr	r3, [pc, #472]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0f0      	beq.n	80060b0 <HAL_RCC_OscConfig+0xc0>
 80060ce:	e014      	b.n	80060fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d0:	f7fb fb8e 	bl	80017f0 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060d8:	f7fb fb8a 	bl	80017f0 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b64      	cmp	r3, #100	; 0x64
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e1e7      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ea:	4b6c      	ldr	r3, [pc, #432]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0xe8>
 80060f6:	e000      	b.n	80060fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d063      	beq.n	80061ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006106:	4b65      	ldr	r3, [pc, #404]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006112:	4b62      	ldr	r3, [pc, #392]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800611a:	2b08      	cmp	r3, #8
 800611c:	d11c      	bne.n	8006158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800611e:	4b5f      	ldr	r3, [pc, #380]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d116      	bne.n	8006158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800612a:	4b5c      	ldr	r3, [pc, #368]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <HAL_RCC_OscConfig+0x152>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d001      	beq.n	8006142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e1bb      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006142:	4b56      	ldr	r3, [pc, #344]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4952      	ldr	r1, [pc, #328]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006152:	4313      	orrs	r3, r2
 8006154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006156:	e03a      	b.n	80061ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d020      	beq.n	80061a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006160:	4b4f      	ldr	r3, [pc, #316]	; (80062a0 <HAL_RCC_OscConfig+0x2b0>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006166:	f7fb fb43 	bl	80017f0 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800616c:	e008      	b.n	8006180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800616e:	f7fb fb3f 	bl	80017f0 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e19c      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006180:	4b46      	ldr	r3, [pc, #280]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0f0      	beq.n	800616e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800618c:	4b43      	ldr	r3, [pc, #268]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4940      	ldr	r1, [pc, #256]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 800619c:	4313      	orrs	r3, r2
 800619e:	600b      	str	r3, [r1, #0]
 80061a0:	e015      	b.n	80061ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061a2:	4b3f      	ldr	r3, [pc, #252]	; (80062a0 <HAL_RCC_OscConfig+0x2b0>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a8:	f7fb fb22 	bl	80017f0 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b0:	f7fb fb1e 	bl	80017f0 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e17b      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061c2:	4b36      	ldr	r3, [pc, #216]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d030      	beq.n	800623c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061e2:	4b30      	ldr	r3, [pc, #192]	; (80062a4 <HAL_RCC_OscConfig+0x2b4>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e8:	f7fb fb02 	bl	80017f0 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061f0:	f7fb fafe 	bl	80017f0 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e15b      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006202:	4b26      	ldr	r3, [pc, #152]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f0      	beq.n	80061f0 <HAL_RCC_OscConfig+0x200>
 800620e:	e015      	b.n	800623c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006210:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <HAL_RCC_OscConfig+0x2b4>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006216:	f7fb faeb 	bl	80017f0 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800621e:	f7fb fae7 	bl	80017f0 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e144      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006230:	4b1a      	ldr	r3, [pc, #104]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1f0      	bne.n	800621e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80a0 	beq.w	800638a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800624a:	2300      	movs	r3, #0
 800624c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800624e:	4b13      	ldr	r3, [pc, #76]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10f      	bne.n	800627a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	4b0f      	ldr	r3, [pc, #60]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	4a0e      	ldr	r2, [pc, #56]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 8006264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006268:	6413      	str	r3, [r2, #64]	; 0x40
 800626a:	4b0c      	ldr	r3, [pc, #48]	; (800629c <HAL_RCC_OscConfig+0x2ac>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006272:	60bb      	str	r3, [r7, #8]
 8006274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627a:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <HAL_RCC_OscConfig+0x2b8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006282:	2b00      	cmp	r3, #0
 8006284:	d121      	bne.n	80062ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006286:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <HAL_RCC_OscConfig+0x2b8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a07      	ldr	r2, [pc, #28]	; (80062a8 <HAL_RCC_OscConfig+0x2b8>)
 800628c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006292:	f7fb faad 	bl	80017f0 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006298:	e011      	b.n	80062be <HAL_RCC_OscConfig+0x2ce>
 800629a:	bf00      	nop
 800629c:	40023800 	.word	0x40023800
 80062a0:	42470000 	.word	0x42470000
 80062a4:	42470e80 	.word	0x42470e80
 80062a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ac:	f7fb faa0 	bl	80017f0 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e0fd      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062be:	4b81      	ldr	r3, [pc, #516]	; (80064c4 <HAL_RCC_OscConfig+0x4d4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0f0      	beq.n	80062ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d106      	bne.n	80062e0 <HAL_RCC_OscConfig+0x2f0>
 80062d2:	4b7d      	ldr	r3, [pc, #500]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	4a7c      	ldr	r2, [pc, #496]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	6713      	str	r3, [r2, #112]	; 0x70
 80062de:	e01c      	b.n	800631a <HAL_RCC_OscConfig+0x32a>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b05      	cmp	r3, #5
 80062e6:	d10c      	bne.n	8006302 <HAL_RCC_OscConfig+0x312>
 80062e8:	4b77      	ldr	r3, [pc, #476]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 80062ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ec:	4a76      	ldr	r2, [pc, #472]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 80062ee:	f043 0304 	orr.w	r3, r3, #4
 80062f2:	6713      	str	r3, [r2, #112]	; 0x70
 80062f4:	4b74      	ldr	r3, [pc, #464]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 80062f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f8:	4a73      	ldr	r2, [pc, #460]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 80062fa:	f043 0301 	orr.w	r3, r3, #1
 80062fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006300:	e00b      	b.n	800631a <HAL_RCC_OscConfig+0x32a>
 8006302:	4b71      	ldr	r3, [pc, #452]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 8006304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006306:	4a70      	ldr	r2, [pc, #448]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 8006308:	f023 0301 	bic.w	r3, r3, #1
 800630c:	6713      	str	r3, [r2, #112]	; 0x70
 800630e:	4b6e      	ldr	r3, [pc, #440]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	4a6d      	ldr	r2, [pc, #436]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 8006314:	f023 0304 	bic.w	r3, r3, #4
 8006318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d015      	beq.n	800634e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006322:	f7fb fa65 	bl	80017f0 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006328:	e00a      	b.n	8006340 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800632a:	f7fb fa61 	bl	80017f0 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	f241 3288 	movw	r2, #5000	; 0x1388
 8006338:	4293      	cmp	r3, r2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e0bc      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006340:	4b61      	ldr	r3, [pc, #388]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 8006342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0ee      	beq.n	800632a <HAL_RCC_OscConfig+0x33a>
 800634c:	e014      	b.n	8006378 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800634e:	f7fb fa4f 	bl	80017f0 <HAL_GetTick>
 8006352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006354:	e00a      	b.n	800636c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006356:	f7fb fa4b 	bl	80017f0 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	f241 3288 	movw	r2, #5000	; 0x1388
 8006364:	4293      	cmp	r3, r2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e0a6      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800636c:	4b56      	ldr	r3, [pc, #344]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 800636e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1ee      	bne.n	8006356 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d105      	bne.n	800638a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637e:	4b52      	ldr	r3, [pc, #328]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	4a51      	ldr	r2, [pc, #324]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 8006384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006388:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8092 	beq.w	80064b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006394:	4b4c      	ldr	r3, [pc, #304]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 030c 	and.w	r3, r3, #12
 800639c:	2b08      	cmp	r3, #8
 800639e:	d05c      	beq.n	800645a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d141      	bne.n	800642c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a8:	4b48      	ldr	r3, [pc, #288]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ae:	f7fb fa1f 	bl	80017f0 <HAL_GetTick>
 80063b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b4:	e008      	b.n	80063c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b6:	f7fb fa1b 	bl	80017f0 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d901      	bls.n	80063c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e078      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c8:	4b3f      	ldr	r3, [pc, #252]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1f0      	bne.n	80063b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	019b      	lsls	r3, r3, #6
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	3b01      	subs	r3, #1
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	061b      	lsls	r3, r3, #24
 80063f8:	4933      	ldr	r1, [pc, #204]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063fe:	4b33      	ldr	r3, [pc, #204]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006400:	2201      	movs	r2, #1
 8006402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006404:	f7fb f9f4 	bl	80017f0 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800640c:	f7fb f9f0 	bl	80017f0 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e04d      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800641e:	4b2a      	ldr	r3, [pc, #168]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCC_OscConfig+0x41c>
 800642a:	e045      	b.n	80064b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800642c:	4b27      	ldr	r3, [pc, #156]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006432:	f7fb f9dd 	bl	80017f0 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800643a:	f7fb f9d9 	bl	80017f0 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e036      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644c:	4b1e      	ldr	r3, [pc, #120]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1f0      	bne.n	800643a <HAL_RCC_OscConfig+0x44a>
 8006458:	e02e      	b.n	80064b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e029      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006466:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <HAL_RCC_OscConfig+0x4d8>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	429a      	cmp	r2, r3
 8006478:	d11c      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006484:	429a      	cmp	r2, r3
 8006486:	d115      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800648e:	4013      	ands	r3, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006494:	4293      	cmp	r3, r2
 8006496:	d10d      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d106      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d001      	beq.n	80064b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	40007000 	.word	0x40007000
 80064c8:	40023800 	.word	0x40023800
 80064cc:	42470060 	.word	0x42470060

080064d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0cc      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064e4:	4b68      	ldr	r3, [pc, #416]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d90c      	bls.n	800650c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f2:	4b65      	ldr	r3, [pc, #404]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fa:	4b63      	ldr	r3, [pc, #396]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d001      	beq.n	800650c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0b8      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d020      	beq.n	800655a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006524:	4b59      	ldr	r3, [pc, #356]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	4a58      	ldr	r2, [pc, #352]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800652e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800653c:	4b53      	ldr	r3, [pc, #332]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	4a52      	ldr	r2, [pc, #328]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006548:	4b50      	ldr	r3, [pc, #320]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	494d      	ldr	r1, [pc, #308]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	4313      	orrs	r3, r2
 8006558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d044      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d107      	bne.n	800657e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	4b47      	ldr	r3, [pc, #284]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d119      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e07f      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d003      	beq.n	800658e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800658a:	2b03      	cmp	r3, #3
 800658c:	d107      	bne.n	800659e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800658e:	4b3f      	ldr	r3, [pc, #252]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e06f      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659e:	4b3b      	ldr	r3, [pc, #236]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e067      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ae:	4b37      	ldr	r3, [pc, #220]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f023 0203 	bic.w	r2, r3, #3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4934      	ldr	r1, [pc, #208]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c0:	f7fb f916 	bl	80017f0 <HAL_GetTick>
 80065c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c6:	e00a      	b.n	80065de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c8:	f7fb f912 	bl	80017f0 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e04f      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065de:	4b2b      	ldr	r3, [pc, #172]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 020c 	and.w	r2, r3, #12
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d1eb      	bne.n	80065c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f0:	4b25      	ldr	r3, [pc, #148]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d20c      	bcs.n	8006618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fe:	4b22      	ldr	r3, [pc, #136]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006606:	4b20      	ldr	r3, [pc, #128]	; (8006688 <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d001      	beq.n	8006618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e032      	b.n	800667e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006624:	4b19      	ldr	r3, [pc, #100]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4916      	ldr	r1, [pc, #88]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006632:	4313      	orrs	r3, r2
 8006634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	490e      	ldr	r1, [pc, #56]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	4313      	orrs	r3, r2
 8006654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006656:	f000 f821 	bl	800669c <HAL_RCC_GetSysClockFreq>
 800665a:	4601      	mov	r1, r0
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	091b      	lsrs	r3, r3, #4
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	4a0a      	ldr	r2, [pc, #40]	; (8006690 <HAL_RCC_ClockConfig+0x1c0>)
 8006668:	5cd3      	ldrb	r3, [r2, r3]
 800666a:	fa21 f303 	lsr.w	r3, r1, r3
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <HAL_RCC_ClockConfig+0x1c4>)
 8006670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <HAL_RCC_ClockConfig+0x1c8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fb f876 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40023c00 	.word	0x40023c00
 800668c:	40023800 	.word	0x40023800
 8006690:	0800dd08 	.word	0x0800dd08
 8006694:	20000000 	.word	0x20000000
 8006698:	20000004 	.word	0x20000004

0800669c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800669c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	607b      	str	r3, [r7, #4]
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	2300      	movs	r3, #0
 80066ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066b2:	4b63      	ldr	r3, [pc, #396]	; (8006840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 030c 	and.w	r3, r3, #12
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d007      	beq.n	80066ce <HAL_RCC_GetSysClockFreq+0x32>
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d008      	beq.n	80066d4 <HAL_RCC_GetSysClockFreq+0x38>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f040 80b4 	bne.w	8006830 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066c8:	4b5e      	ldr	r3, [pc, #376]	; (8006844 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80066ca:	60bb      	str	r3, [r7, #8]
       break;
 80066cc:	e0b3      	b.n	8006836 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ce:	4b5e      	ldr	r3, [pc, #376]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80066d0:	60bb      	str	r3, [r7, #8]
      break;
 80066d2:	e0b0      	b.n	8006836 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066d4:	4b5a      	ldr	r3, [pc, #360]	; (8006840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066de:	4b58      	ldr	r3, [pc, #352]	; (8006840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d04a      	beq.n	8006780 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ea:	4b55      	ldr	r3, [pc, #340]	; (8006840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	099b      	lsrs	r3, r3, #6
 80066f0:	f04f 0400 	mov.w	r4, #0
 80066f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	ea03 0501 	and.w	r5, r3, r1
 8006700:	ea04 0602 	and.w	r6, r4, r2
 8006704:	4629      	mov	r1, r5
 8006706:	4632      	mov	r2, r6
 8006708:	f04f 0300 	mov.w	r3, #0
 800670c:	f04f 0400 	mov.w	r4, #0
 8006710:	0154      	lsls	r4, r2, #5
 8006712:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006716:	014b      	lsls	r3, r1, #5
 8006718:	4619      	mov	r1, r3
 800671a:	4622      	mov	r2, r4
 800671c:	1b49      	subs	r1, r1, r5
 800671e:	eb62 0206 	sbc.w	r2, r2, r6
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	f04f 0400 	mov.w	r4, #0
 800672a:	0194      	lsls	r4, r2, #6
 800672c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006730:	018b      	lsls	r3, r1, #6
 8006732:	1a5b      	subs	r3, r3, r1
 8006734:	eb64 0402 	sbc.w	r4, r4, r2
 8006738:	f04f 0100 	mov.w	r1, #0
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	00e2      	lsls	r2, r4, #3
 8006742:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006746:	00d9      	lsls	r1, r3, #3
 8006748:	460b      	mov	r3, r1
 800674a:	4614      	mov	r4, r2
 800674c:	195b      	adds	r3, r3, r5
 800674e:	eb44 0406 	adc.w	r4, r4, r6
 8006752:	f04f 0100 	mov.w	r1, #0
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	0262      	lsls	r2, r4, #9
 800675c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006760:	0259      	lsls	r1, r3, #9
 8006762:	460b      	mov	r3, r1
 8006764:	4614      	mov	r4, r2
 8006766:	4618      	mov	r0, r3
 8006768:	4621      	mov	r1, r4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f04f 0400 	mov.w	r4, #0
 8006770:	461a      	mov	r2, r3
 8006772:	4623      	mov	r3, r4
 8006774:	f7f9 fd28 	bl	80001c8 <__aeabi_uldivmod>
 8006778:	4603      	mov	r3, r0
 800677a:	460c      	mov	r4, r1
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e049      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006780:	4b2f      	ldr	r3, [pc, #188]	; (8006840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	099b      	lsrs	r3, r3, #6
 8006786:	f04f 0400 	mov.w	r4, #0
 800678a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	ea03 0501 	and.w	r5, r3, r1
 8006796:	ea04 0602 	and.w	r6, r4, r2
 800679a:	4629      	mov	r1, r5
 800679c:	4632      	mov	r2, r6
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	f04f 0400 	mov.w	r4, #0
 80067a6:	0154      	lsls	r4, r2, #5
 80067a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067ac:	014b      	lsls	r3, r1, #5
 80067ae:	4619      	mov	r1, r3
 80067b0:	4622      	mov	r2, r4
 80067b2:	1b49      	subs	r1, r1, r5
 80067b4:	eb62 0206 	sbc.w	r2, r2, r6
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	f04f 0400 	mov.w	r4, #0
 80067c0:	0194      	lsls	r4, r2, #6
 80067c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80067c6:	018b      	lsls	r3, r1, #6
 80067c8:	1a5b      	subs	r3, r3, r1
 80067ca:	eb64 0402 	sbc.w	r4, r4, r2
 80067ce:	f04f 0100 	mov.w	r1, #0
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	00e2      	lsls	r2, r4, #3
 80067d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80067dc:	00d9      	lsls	r1, r3, #3
 80067de:	460b      	mov	r3, r1
 80067e0:	4614      	mov	r4, r2
 80067e2:	195b      	adds	r3, r3, r5
 80067e4:	eb44 0406 	adc.w	r4, r4, r6
 80067e8:	f04f 0100 	mov.w	r1, #0
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	02a2      	lsls	r2, r4, #10
 80067f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80067f6:	0299      	lsls	r1, r3, #10
 80067f8:	460b      	mov	r3, r1
 80067fa:	4614      	mov	r4, r2
 80067fc:	4618      	mov	r0, r3
 80067fe:	4621      	mov	r1, r4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f04f 0400 	mov.w	r4, #0
 8006806:	461a      	mov	r2, r3
 8006808:	4623      	mov	r3, r4
 800680a:	f7f9 fcdd 	bl	80001c8 <__aeabi_uldivmod>
 800680e:	4603      	mov	r3, r0
 8006810:	460c      	mov	r4, r1
 8006812:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006814:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	0c1b      	lsrs	r3, r3, #16
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	3301      	adds	r3, #1
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	60bb      	str	r3, [r7, #8]
      break;
 800682e:	e002      	b.n	8006836 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006830:	4b04      	ldr	r3, [pc, #16]	; (8006844 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006832:	60bb      	str	r3, [r7, #8]
      break;
 8006834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006836:	68bb      	ldr	r3, [r7, #8]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006840:	40023800 	.word	0x40023800
 8006844:	00f42400 	.word	0x00f42400
 8006848:	007a1200 	.word	0x007a1200

0800684c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006850:	4b03      	ldr	r3, [pc, #12]	; (8006860 <HAL_RCC_GetHCLKFreq+0x14>)
 8006852:	681b      	ldr	r3, [r3, #0]
}
 8006854:	4618      	mov	r0, r3
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	20000000 	.word	0x20000000

08006864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006868:	f7ff fff0 	bl	800684c <HAL_RCC_GetHCLKFreq>
 800686c:	4601      	mov	r1, r0
 800686e:	4b05      	ldr	r3, [pc, #20]	; (8006884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	0a9b      	lsrs	r3, r3, #10
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	4a03      	ldr	r2, [pc, #12]	; (8006888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800687a:	5cd3      	ldrb	r3, [r2, r3]
 800687c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006880:	4618      	mov	r0, r3
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40023800 	.word	0x40023800
 8006888:	0800dd18 	.word	0x0800dd18

0800688c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d105      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d035      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068b4:	4b62      	ldr	r3, [pc, #392]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068ba:	f7fa ff99 	bl	80017f0 <HAL_GetTick>
 80068be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068c0:	e008      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068c2:	f7fa ff95 	bl	80017f0 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e0b0      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068d4:	4b5b      	ldr	r3, [pc, #364]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f0      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	019a      	lsls	r2, r3, #6
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	071b      	lsls	r3, r3, #28
 80068ec:	4955      	ldr	r1, [pc, #340]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068f4:	4b52      	ldr	r3, [pc, #328]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068fa:	f7fa ff79 	bl	80017f0 <HAL_GetTick>
 80068fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006900:	e008      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006902:	f7fa ff75 	bl	80017f0 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d901      	bls.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e090      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006914:	4b4b      	ldr	r3, [pc, #300]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0f0      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8083 	beq.w	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	4b44      	ldr	r3, [pc, #272]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	4a43      	ldr	r2, [pc, #268]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693c:	6413      	str	r3, [r2, #64]	; 0x40
 800693e:	4b41      	ldr	r3, [pc, #260]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800694a:	4b3f      	ldr	r3, [pc, #252]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a3e      	ldr	r2, [pc, #248]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006954:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006956:	f7fa ff4b 	bl	80017f0 <HAL_GetTick>
 800695a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800695c:	e008      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800695e:	f7fa ff47 	bl	80017f0 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e062      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006970:	4b35      	ldr	r3, [pc, #212]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0f0      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800697c:	4b31      	ldr	r3, [pc, #196]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006984:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d02f      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x160>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	429a      	cmp	r2, r3
 8006998:	d028      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800699a:	4b2a      	ldr	r3, [pc, #168]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069a4:	4b29      	ldr	r3, [pc, #164]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069aa:	4b28      	ldr	r3, [pc, #160]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069b0:	4a24      	ldr	r2, [pc, #144]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069b6:	4b23      	ldr	r3, [pc, #140]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d114      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069c2:	f7fa ff15 	bl	80017f0 <HAL_GetTick>
 80069c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c8:	e00a      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ca:	f7fa ff11 	bl	80017f0 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d901      	bls.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e02a      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e0:	4b18      	ldr	r3, [pc, #96]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0ee      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f8:	d10d      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0e:	490d      	ldr	r1, [pc, #52]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	608b      	str	r3, [r1, #8]
 8006a14:	e005      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	4a0a      	ldr	r2, [pc, #40]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a20:	6093      	str	r3, [r2, #8]
 8006a22:	4b08      	ldr	r3, [pc, #32]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a2e:	4905      	ldr	r1, [pc, #20]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	42470068 	.word	0x42470068
 8006a44:	40023800 	.word	0x40023800
 8006a48:	40007000 	.word	0x40007000
 8006a4c:	42470e40 	.word	0x42470e40

08006a50 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006a5e:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a64:	099b      	lsrs	r3, r3, #6
 8006a66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a74:	0f1b      	lsrs	r3, r3, #28
 8006a76:	f003 0207 	and.w	r2, r3, #7
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006a86:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006a88:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	40023800 	.word	0x40023800

08006aa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d13d      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ac6:	4b22      	ldr	r3, [pc, #136]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ace:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d12f      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ada:	4b1e      	ldr	r3, [pc, #120]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006adc:	617b      	str	r3, [r7, #20]
          break;
 8006ade:	e02f      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ae0:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aec:	d108      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006aee:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af6:	4a18      	ldr	r2, [pc, #96]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	e007      	b.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b00:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b08:	4a14      	ldr	r2, [pc, #80]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	fb02 f303 	mul.w	r3, r2, r3
 8006b22:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b24:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2a:	0f1b      	lsrs	r3, r3, #28
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b36:	617b      	str	r3, [r7, #20]
          break;
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]
          break;
 8006b3e:	bf00      	nop
        }
      }
      break;
 8006b40:	bf00      	nop
    }
  }
  return frequency;
 8006b42:	697b      	ldr	r3, [r7, #20]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	371c      	adds	r7, #28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	40023800 	.word	0x40023800
 8006b54:	00bb8000 	.word	0x00bb8000
 8006b58:	007a1200 	.word	0x007a1200
 8006b5c:	00f42400 	.word	0x00f42400

08006b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b60:	b084      	sub	sp, #16
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	f107 001c 	add.w	r0, r7, #28
 8006b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d122      	bne.n	8006bbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d105      	bne.n	8006bb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f94a 	bl	8006e4c <USB_CoreReset>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]
 8006bbc:	e01a      	b.n	8006bf4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f93e 	bl	8006e4c <USB_CoreReset>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38
 8006be6:	e005      	b.n	8006bf4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d10b      	bne.n	8006c12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f043 0206 	orr.w	r2, r3, #6
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f043 0220 	orr.w	r2, r3, #32
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c1e:	b004      	add	sp, #16
 8006c20:	4770      	bx	lr

08006c22 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f043 0201 	orr.w	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f023 0201 	bic.w	r2, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d106      	bne.n	8006c92 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	60da      	str	r2, [r3, #12]
 8006c90:	e00b      	b.n	8006caa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c92:	78fb      	ldrb	r3, [r7, #3]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]
 8006ca4:	e001      	b.n	8006caa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e003      	b.n	8006cb2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006caa:	2032      	movs	r0, #50	; 0x32
 8006cac:	f7fa fdac 	bl	8001808 <HAL_Delay>

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	019b      	lsls	r3, r3, #6
 8006cce:	f043 0220 	orr.w	r2, r3, #32
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a09      	ldr	r2, [pc, #36]	; (8006d04 <USB_FlushTxFifo+0x48>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d901      	bls.n	8006ce8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e006      	b.n	8006cf6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	d0f0      	beq.n	8006cd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	00030d40 	.word	0x00030d40

08006d08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2210      	movs	r2, #16
 8006d18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4a09      	ldr	r2, [pc, #36]	; (8006d48 <USB_FlushRxFifo+0x40>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d901      	bls.n	8006d2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e006      	b.n	8006d3a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	f003 0310 	and.w	r3, r3, #16
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	d0f0      	beq.n	8006d1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	00030d40 	.word	0x00030d40

08006d4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b089      	sub	sp, #36	; 0x24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4611      	mov	r1, r2
 8006d58:	461a      	mov	r2, r3
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	71fb      	strb	r3, [r7, #7]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006d6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d11a      	bne.n	8006da8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d72:	88bb      	ldrh	r3, [r7, #4]
 8006d74:	3303      	adds	r3, #3
 8006d76:	089b      	lsrs	r3, r3, #2
 8006d78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	e00f      	b.n	8006da0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	031a      	lsls	r2, r3, #12
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	3304      	adds	r3, #4
 8006d98:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	61bb      	str	r3, [r7, #24]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d3eb      	bcc.n	8006d80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3724      	adds	r7, #36	; 0x24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b089      	sub	sp, #36	; 0x24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	3303      	adds	r3, #3
 8006dd0:	089b      	lsrs	r3, r3, #2
 8006dd2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
 8006dd8:	e00b      	b.n	8006df2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	601a      	str	r2, [r3, #0]
    pDest++;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	3304      	adds	r3, #4
 8006dea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	3301      	adds	r3, #1
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d3ef      	bcc.n	8006dda <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006dfa:	69fb      	ldr	r3, [r7, #28]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3724      	adds	r7, #36	; 0x24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e20:	68fb      	ldr	r3, [r7, #12]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <USB_CoreReset+0x64>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d901      	bls.n	8006e6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e01b      	b.n	8006ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	daf2      	bge.n	8006e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f043 0201 	orr.w	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <USB_CoreReset+0x64>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d901      	bls.n	8006e94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e006      	b.n	8006ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d0f0      	beq.n	8006e82 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	00030d40 	.word	0x00030d40

08006eb4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	f107 001c 	add.w	r0, r7, #28
 8006ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d018      	beq.n	8006f38 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d10a      	bne.n	8006f22 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f1a:	f043 0304 	orr.w	r3, r3, #4
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	e014      	b.n	8006f4c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f30:	f023 0304 	bic.w	r3, r3, #4
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	e009      	b.n	8006f4c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f46:	f023 0304 	bic.w	r3, r3, #4
 8006f4a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006f4c:	2110      	movs	r1, #16
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff feb4 	bl	8006cbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff fed7 	bl	8006d08 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	e015      	b.n	8006f8c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f72:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f80:	461a      	mov	r2, r3
 8006f82:	2300      	movs	r3, #0
 8006f84:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d3e5      	bcc.n	8006f60 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006f94:	2101      	movs	r1, #1
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f8ac 	bl	80070f4 <USB_DriveVbus>

  HAL_Delay(200U);
 8006f9c:	20c8      	movs	r0, #200	; 0xc8
 8006f9e:	f7fa fc33 	bl	8001808 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f04f 32ff 	mov.w	r2, #4294967295
 8006fae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00b      	beq.n	8006fd4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fc2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a14      	ldr	r2, [pc, #80]	; (8007018 <USB_HostInit+0x164>)
 8006fc8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a13      	ldr	r2, [pc, #76]	; (800701c <USB_HostInit+0x168>)
 8006fce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006fd2:	e009      	b.n	8006fe8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2280      	movs	r2, #128	; 0x80
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a10      	ldr	r2, [pc, #64]	; (8007020 <USB_HostInit+0x16c>)
 8006fde:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a10      	ldr	r2, [pc, #64]	; (8007024 <USB_HostInit+0x170>)
 8006fe4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d105      	bne.n	8006ffa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f043 0210 	orr.w	r2, r3, #16
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <USB_HostInit+0x174>)
 8007000:	4313      	orrs	r3, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007012:	b004      	add	sp, #16
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	01000200 	.word	0x01000200
 800701c:	00e00300 	.word	0x00e00300
 8007020:	00600080 	.word	0x00600080
 8007024:	004000e0 	.word	0x004000e0
 8007028:	a3200008 	.word	0xa3200008

0800702c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800704a:	f023 0303 	bic.w	r3, r3, #3
 800704e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007064:	4313      	orrs	r3, r2
 8007066:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d107      	bne.n	800707e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007074:	461a      	mov	r2, r3
 8007076:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800707a:	6053      	str	r3, [r2, #4]
 800707c:	e009      	b.n	8007092 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d106      	bne.n	8007092 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800708a:	461a      	mov	r2, r3
 800708c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007090:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80070c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80070d0:	2064      	movs	r0, #100	; 0x64
 80070d2:	f7fa fb99 	bl	8001808 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070e4:	200a      	movs	r0, #10
 80070e6:	f7fa fb8f 	bl	8001808 <HAL_Delay>

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007118:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d109      	bne.n	8007138 <USB_DriveVbus+0x44>
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d106      	bne.n	8007138 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007132:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007136:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800713e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007142:	d109      	bne.n	8007158 <USB_DriveVbus+0x64>
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007156:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	0c5b      	lsrs	r3, r3, #17
 8007184:	f003 0303 	and.w	r3, r3, #3
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	b29b      	uxth	r3, r3
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
	...

080071b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	4608      	mov	r0, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	70fb      	strb	r3, [r7, #3]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70bb      	strb	r3, [r7, #2]
 80071ce:	4613      	mov	r3, r2
 80071d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e6:	461a      	mov	r2, r3
 80071e8:	f04f 33ff 	mov.w	r3, #4294967295
 80071ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d87e      	bhi.n	80072f4 <USB_HC_Init+0x13c>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <USB_HC_Init+0x44>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	080072b7 	.word	0x080072b7
 8007204:	0800720d 	.word	0x0800720d
 8007208:	08007279 	.word	0x08007279
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4413      	add	r3, r2
 8007214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007218:	461a      	mov	r2, r3
 800721a:	f240 439d 	movw	r3, #1181	; 0x49d
 800721e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007220:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007224:	2b00      	cmp	r3, #0
 8007226:	da10      	bge.n	800724a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	440a      	add	r2, r1
 800723e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007246:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007248:	e057      	b.n	80072fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007252:	2b00      	cmp	r3, #0
 8007254:	d051      	beq.n	80072fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	4413      	add	r3, r2
 800725e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	78fa      	ldrb	r2, [r7, #3]
 8007266:	0151      	lsls	r1, r2, #5
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	440a      	add	r2, r1
 800726c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007270:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007274:	60d3      	str	r3, [r2, #12]
      break;
 8007276:	e040      	b.n	80072fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4413      	add	r3, r2
 8007280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007284:	461a      	mov	r2, r3
 8007286:	f240 639d 	movw	r3, #1693	; 0x69d
 800728a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800728c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007290:	2b00      	cmp	r3, #0
 8007292:	da34      	bge.n	80072fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	4413      	add	r3, r2
 800729c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80072b4:	e023      	b.n	80072fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c2:	461a      	mov	r2, r3
 80072c4:	f240 2325 	movw	r3, #549	; 0x225
 80072c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da17      	bge.n	8007302 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	78fa      	ldrb	r2, [r7, #3]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80072f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072f2:	e006      	b.n	8007302 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	75fb      	strb	r3, [r7, #23]
      break;
 80072f8:	e004      	b.n	8007304 <USB_HC_Init+0x14c>
      break;
 80072fa:	bf00      	nop
 80072fc:	e002      	b.n	8007304 <USB_HC_Init+0x14c>
      break;
 80072fe:	bf00      	nop
 8007300:	e000      	b.n	8007304 <USB_HC_Init+0x14c>
      break;
 8007302:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	2101      	movs	r1, #1
 8007314:	fa01 f303 	lsl.w	r3, r1, r3
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800731e:	4313      	orrs	r3, r2
 8007320:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800732e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007332:	2b00      	cmp	r3, #0
 8007334:	da03      	bge.n	800733e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	e001      	b.n	8007342 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007342:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007346:	2b02      	cmp	r3, #2
 8007348:	d103      	bne.n	8007352 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800734a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	e001      	b.n	8007356 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007356:	787b      	ldrb	r3, [r7, #1]
 8007358:	059b      	lsls	r3, r3, #22
 800735a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800735e:	78bb      	ldrb	r3, [r7, #2]
 8007360:	02db      	lsls	r3, r3, #11
 8007362:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007366:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007368:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800736c:	049b      	lsls	r3, r3, #18
 800736e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007372:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007374:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007376:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800737a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	0159      	lsls	r1, r3, #5
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	440b      	add	r3, r1
 8007388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007392:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007394:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007398:	2b03      	cmp	r3, #3
 800739a:	d10f      	bne.n	80073bc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	78fa      	ldrb	r2, [r7, #3]
 80073ac:	0151      	lsls	r1, r2, #5
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	440a      	add	r2, r1
 80073b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073ba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop

080073cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08c      	sub	sp, #48	; 0x30
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	4613      	mov	r3, r2
 80073d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	785b      	ldrb	r3, [r3, #1]
 80073e2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80073e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073e8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d028      	beq.n	8007448 <USB_HC_StartXfer+0x7c>
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	791b      	ldrb	r3, [r3, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d124      	bne.n	8007448 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10b      	bne.n	800741c <USB_HC_StartXfer+0x50>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	795b      	ldrb	r3, [r3, #5]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d107      	bne.n	800741c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	4619      	mov	r1, r3
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fa30 	bl	8007878 <USB_DoPing>
      return HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	e114      	b.n	8007646 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800741c:	79fb      	ldrb	r3, [r7, #7]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d112      	bne.n	8007448 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	4413      	add	r3, r2
 800742a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	6a3a      	ldr	r2, [r7, #32]
 8007436:	440a      	add	r2, r1
 8007438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800743c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007440:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2200      	movs	r2, #0
 8007446:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d018      	beq.n	8007482 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	8912      	ldrh	r2, [r2, #8]
 8007458:	4413      	add	r3, r2
 800745a:	3b01      	subs	r3, #1
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	8912      	ldrh	r2, [r2, #8]
 8007460:	fbb3 f3f2 	udiv	r3, r3, r2
 8007464:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007466:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007468:	8b7b      	ldrh	r3, [r7, #26]
 800746a:	429a      	cmp	r2, r3
 800746c:	d90b      	bls.n	8007486 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800746e:	8b7b      	ldrh	r3, [r7, #26]
 8007470:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	8912      	ldrh	r2, [r2, #8]
 8007478:	fb02 f203 	mul.w	r2, r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	611a      	str	r2, [r3, #16]
 8007480:	e001      	b.n	8007486 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007482:	2301      	movs	r3, #1
 8007484:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	78db      	ldrb	r3, [r3, #3]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d006      	beq.n	800749c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800748e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	8912      	ldrh	r2, [r2, #8]
 8007494:	fb02 f203 	mul.w	r2, r2, r3
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074a6:	04d9      	lsls	r1, r3, #19
 80074a8:	4b69      	ldr	r3, [pc, #420]	; (8007650 <USB_HC_StartXfer+0x284>)
 80074aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	7a9b      	ldrb	r3, [r3, #10]
 80074b2:	075b      	lsls	r3, r3, #29
 80074b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074b8:	69f9      	ldr	r1, [r7, #28]
 80074ba:	0148      	lsls	r0, r1, #5
 80074bc:	6a39      	ldr	r1, [r7, #32]
 80074be:	4401      	add	r1, r0
 80074c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	68d9      	ldr	r1, [r3, #12]
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074de:	460a      	mov	r2, r1
 80074e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bf0c      	ite	eq
 80074f2:	2301      	moveq	r3, #1
 80074f4:	2300      	movne	r3, #0
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	4413      	add	r3, r2
 8007502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	6a3a      	ldr	r2, [r7, #32]
 800750e:	440a      	add	r2, r1
 8007510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007514:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007518:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	4413      	add	r3, r2
 8007522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	7e7b      	ldrb	r3, [r7, #25]
 800752a:	075b      	lsls	r3, r3, #29
 800752c:	69f9      	ldr	r1, [r7, #28]
 800752e:	0148      	lsls	r0, r1, #5
 8007530:	6a39      	ldr	r1, [r7, #32]
 8007532:	4401      	add	r1, r0
 8007534:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007538:	4313      	orrs	r3, r2
 800753a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	4413      	add	r3, r2
 8007544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a42      	ldr	r2, [pc, #264]	; (8007654 <USB_HC_StartXfer+0x288>)
 800754c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800754e:	4b41      	ldr	r3, [pc, #260]	; (8007654 <USB_HC_StartXfer+0x288>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007556:	4a3f      	ldr	r2, [pc, #252]	; (8007654 <USB_HC_StartXfer+0x288>)
 8007558:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	78db      	ldrb	r3, [r3, #3]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d006      	beq.n	8007570 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007562:	4b3c      	ldr	r3, [pc, #240]	; (8007654 <USB_HC_StartXfer+0x288>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756a:	4a3a      	ldr	r2, [pc, #232]	; (8007654 <USB_HC_StartXfer+0x288>)
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e005      	b.n	800757c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007570:	4b38      	ldr	r3, [pc, #224]	; (8007654 <USB_HC_StartXfer+0x288>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007578:	4a36      	ldr	r2, [pc, #216]	; (8007654 <USB_HC_StartXfer+0x288>)
 800757a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800757c:	4b35      	ldr	r3, [pc, #212]	; (8007654 <USB_HC_StartXfer+0x288>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007584:	4a33      	ldr	r2, [pc, #204]	; (8007654 <USB_HC_StartXfer+0x288>)
 8007586:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	4413      	add	r3, r2
 8007590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007594:	461a      	mov	r2, r3
 8007596:	4b2f      	ldr	r3, [pc, #188]	; (8007654 <USB_HC_StartXfer+0x288>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	e04f      	b.n	8007646 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	78db      	ldrb	r3, [r3, #3]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d14a      	bne.n	8007644 <USB_HC_StartXfer+0x278>
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d046      	beq.n	8007644 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	79db      	ldrb	r3, [r3, #7]
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d830      	bhi.n	8007620 <USB_HC_StartXfer+0x254>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USB_HC_StartXfer+0x1f8>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075f9 	.word	0x080075f9
 80075cc:	080075d5 	.word	0x080075d5
 80075d0:	080075f9 	.word	0x080075f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	3303      	adds	r3, #3
 80075da:	089b      	lsrs	r3, r3, #2
 80075dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80075de:	8afa      	ldrh	r2, [r7, #22]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d91c      	bls.n	8007624 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	f043 0220 	orr.w	r2, r3, #32
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80075f6:	e015      	b.n	8007624 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	3303      	adds	r3, #3
 80075fe:	089b      	lsrs	r3, r3, #2
 8007600:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007602:	8afa      	ldrh	r2, [r7, #22]
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	b29b      	uxth	r3, r3
 800760e:	429a      	cmp	r2, r3
 8007610:	d90a      	bls.n	8007628 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	619a      	str	r2, [r3, #24]
        }
        break;
 800761e:	e003      	b.n	8007628 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007620:	bf00      	nop
 8007622:	e002      	b.n	800762a <USB_HC_StartXfer+0x25e>
        break;
 8007624:	bf00      	nop
 8007626:	e000      	b.n	800762a <USB_HC_StartXfer+0x25e>
        break;
 8007628:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	68d9      	ldr	r1, [r3, #12]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	785a      	ldrb	r2, [r3, #1]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	b298      	uxth	r0, r3
 8007638:	2300      	movs	r3, #0
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	4603      	mov	r3, r0
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7ff fb84 	bl	8006d4c <USB_WritePacket>
  }

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3728      	adds	r7, #40	; 0x28
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	1ff80000 	.word	0x1ff80000
 8007654:	200094dc 	.word	0x200094dc

08007658 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	b29b      	uxth	r3, r3
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800767a:	b480      	push	{r7}
 800767c:	b087      	sub	sp, #28
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	0c9b      	lsrs	r3, r3, #18
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <USB_HC_Halt+0x3a>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d16c      	bne.n	800778e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	0151      	lsls	r1, r2, #5
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	440a      	add	r2, r1
 80076ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076d2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d143      	bne.n	8007768 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4413      	add	r3, r2
 8007708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	0151      	lsls	r1, r2, #5
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	440a      	add	r2, r1
 8007716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800771a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800771e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	4413      	add	r3, r2
 8007728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	440a      	add	r2, r1
 8007736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800773a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800773e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	3301      	adds	r3, #1
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800774c:	d81d      	bhi.n	800778a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	4413      	add	r3, r2
 8007756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007764:	d0ec      	beq.n	8007740 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007766:	e080      	b.n	800786a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	4413      	add	r3, r2
 8007770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	0151      	lsls	r1, r2, #5
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	440a      	add	r2, r1
 800777e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007786:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007788:	e06f      	b.n	800786a <USB_HC_Halt+0x1f0>
          break;
 800778a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800778c:	e06d      	b.n	800786a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	4413      	add	r3, r2
 8007796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	0151      	lsls	r1, r2, #5
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	440a      	add	r2, r1
 80077a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077ac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d143      	bne.n	8007846 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	0151      	lsls	r1, r2, #5
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	440a      	add	r2, r1
 80077f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077fc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	4413      	add	r3, r2
 8007806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	0151      	lsls	r1, r2, #5
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	440a      	add	r2, r1
 8007814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007818:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800781c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	3301      	adds	r3, #1
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800782a:	d81d      	bhi.n	8007868 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	4413      	add	r3, r2
 8007834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800783e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007842:	d0ec      	beq.n	800781e <USB_HC_Halt+0x1a4>
 8007844:	e011      	b.n	800786a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	4413      	add	r3, r2
 800784e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	440a      	add	r2, r1
 800785c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	e000      	b.n	800786a <USB_HC_Halt+0x1f0>
          break;
 8007868:	bf00      	nop
    }
  }

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800788c:	2301      	movs	r3, #1
 800788e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	04da      	lsls	r2, r3, #19
 8007894:	4b15      	ldr	r3, [pc, #84]	; (80078ec <USB_DoPing+0x74>)
 8007896:	4013      	ands	r3, r2
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078a8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078c0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078c8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d6:	461a      	mov	r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	371c      	adds	r7, #28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	1ff80000 	.word	0x1ff80000

080078f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff f99f 	bl	8006c44 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007906:	2110      	movs	r1, #16
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff f9d7 	bl	8006cbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7ff f9fa 	bl	8006d08 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007914:	2300      	movs	r3, #0
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	e01f      	b.n	800795a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007930:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007938:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007940:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794e:	461a      	mov	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	3301      	adds	r3, #1
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b0f      	cmp	r3, #15
 800795e:	d9dc      	bls.n	800791a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007960:	2300      	movs	r3, #0
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	e034      	b.n	80079d0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4413      	add	r3, r2
 800796e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800797c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007984:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800798c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4413      	add	r3, r2
 8007996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800799a:	461a      	mov	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	3301      	adds	r3, #1
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079ac:	d80c      	bhi.n	80079c8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c4:	d0ec      	beq.n	80079a0 <USB_StopHost+0xb0>
 80079c6:	e000      	b.n	80079ca <USB_StopHost+0xda>
        break;
 80079c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	3301      	adds	r3, #1
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	2b0f      	cmp	r3, #15
 80079d4:	d9c7      	bls.n	8007966 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079dc:	461a      	mov	r2, r3
 80079de:	f04f 33ff 	mov.w	r3, #4294967295
 80079e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff f918 	bl	8006c22 <USB_EnableGlobalInt>

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007a00:	4904      	ldr	r1, [pc, #16]	; (8007a14 <MX_FATFS_Init+0x18>)
 8007a02:	4805      	ldr	r0, [pc, #20]	; (8007a18 <MX_FATFS_Init+0x1c>)
 8007a04:	f005 fc1e 	bl	800d244 <FATFS_LinkDriver>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	4b03      	ldr	r3, [pc, #12]	; (8007a1c <MX_FATFS_Init+0x20>)
 8007a0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007a10:	bf00      	nop
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20009620 	.word	0x20009620
 8007a18:	0800dd28 	.word	0x0800dd28
 8007a1c:	20009a84 	.word	0x20009a84

08007a20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007a24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4808      	ldr	r0, [pc, #32]	; (8007a7c <USBH_status+0x34>)
 8007a5c:	f000 feb5 	bl	80087ca <USBH_MSC_UnitIsReady>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <USBH_status+0x24>
  {
    res = RES_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
 8007a6a:	e001      	b.n	8007a70 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20009a88 	.word	0x20009a88

08007a80 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b094      	sub	sp, #80	; 0x50
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	607a      	str	r2, [r7, #4]
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007a96:	7bf9      	ldrb	r1, [r7, #15]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4812      	ldr	r0, [pc, #72]	; (8007aec <USBH_read+0x6c>)
 8007aa2:	f000 fedc 	bl	800885e <USBH_MSC_Read>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d103      	bne.n	8007ab4 <USBH_read+0x34>
  {
    res = RES_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007ab2:	e015      	b.n	8007ae0 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007ab4:	f107 0210 	add.w	r2, r7, #16
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	4619      	mov	r1, r3
 8007abc:	480b      	ldr	r0, [pc, #44]	; (8007aec <USBH_read+0x6c>)
 8007abe:	f000 feaa 	bl	8008816 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007ac2:	7f7b      	ldrb	r3, [r7, #29]
 8007ac4:	2b28      	cmp	r3, #40	; 0x28
 8007ac6:	d003      	beq.n	8007ad0 <USBH_read+0x50>
 8007ac8:	2b3a      	cmp	r3, #58	; 0x3a
 8007aca:	d001      	beq.n	8007ad0 <USBH_read+0x50>
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d103      	bne.n	8007ad8 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007ad6:	e003      	b.n	8007ae0 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007ade:	bf00      	nop
    }
  }

  return res;
 8007ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3748      	adds	r7, #72	; 0x48
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20009a88 	.word	0x20009a88

08007af0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b094      	sub	sp, #80	; 0x50
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	607a      	str	r2, [r7, #4]
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007b06:	7bf9      	ldrb	r1, [r7, #15]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	4817      	ldr	r0, [pc, #92]	; (8007b70 <USBH_write+0x80>)
 8007b12:	f000 ff0d 	bl	8008930 <USBH_MSC_Write>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d103      	bne.n	8007b24 <USBH_write+0x34>
  {
    res = RES_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007b22:	e01f      	b.n	8007b64 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007b24:	f107 0210 	add.w	r2, r7, #16
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4810      	ldr	r0, [pc, #64]	; (8007b70 <USBH_write+0x80>)
 8007b2e:	f000 fe72 	bl	8008816 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007b32:	7f7b      	ldrb	r3, [r7, #29]
 8007b34:	2b27      	cmp	r3, #39	; 0x27
 8007b36:	d009      	beq.n	8007b4c <USBH_write+0x5c>
 8007b38:	2b27      	cmp	r3, #39	; 0x27
 8007b3a:	dc02      	bgt.n	8007b42 <USBH_write+0x52>
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d009      	beq.n	8007b54 <USBH_write+0x64>
 8007b40:	e00c      	b.n	8007b5c <USBH_write+0x6c>
 8007b42:	2b28      	cmp	r3, #40	; 0x28
 8007b44:	d006      	beq.n	8007b54 <USBH_write+0x64>
 8007b46:	2b3a      	cmp	r3, #58	; 0x3a
 8007b48:	d004      	beq.n	8007b54 <USBH_write+0x64>
 8007b4a:	e007      	b.n	8007b5c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b52:	e007      	b.n	8007b64 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007b54:	2303      	movs	r3, #3
 8007b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b5a:	e003      	b.n	8007b64 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b62:	bf00      	nop
    }
  }

  return res;
 8007b64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3748      	adds	r7, #72	; 0x48
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20009a88 	.word	0x20009a88

08007b74 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b090      	sub	sp, #64	; 0x40
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	603a      	str	r2, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
 8007b80:	460b      	mov	r3, r1
 8007b82:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007b8a:	79bb      	ldrb	r3, [r7, #6]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d852      	bhi.n	8007c36 <USBH_ioctl+0xc2>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <USBH_ioctl+0x24>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007ba9 	.word	0x08007ba9
 8007b9c:	08007bb1 	.word	0x08007bb1
 8007ba0:	08007bdb 	.word	0x08007bdb
 8007ba4:	08007c07 	.word	0x08007c07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007bae:	e045      	b.n	8007c3c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007bb0:	f107 0208 	add.w	r2, r7, #8
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4823      	ldr	r0, [pc, #140]	; (8007c48 <USBH_ioctl+0xd4>)
 8007bba:	f000 fe2c 	bl	8008816 <USBH_MSC_GetLUNInfo>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d106      	bne.n	8007bd2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007bd0:	e034      	b.n	8007c3c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007bd8:	e030      	b.n	8007c3c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007bda:	f107 0208 	add.w	r2, r7, #8
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	4619      	mov	r1, r3
 8007be2:	4819      	ldr	r0, [pc, #100]	; (8007c48 <USBH_ioctl+0xd4>)
 8007be4:	f000 fe17 	bl	8008816 <USBH_MSC_GetLUNInfo>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d107      	bne.n	8007bfe <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007bee:	8a3b      	ldrh	r3, [r7, #16]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007bfc:	e01e      	b.n	8007c3c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007c04:	e01a      	b.n	8007c3c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007c06:	f107 0208 	add.w	r2, r7, #8
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	480e      	ldr	r0, [pc, #56]	; (8007c48 <USBH_ioctl+0xd4>)
 8007c10:	f000 fe01 	bl	8008816 <USBH_MSC_GetLUNInfo>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d109      	bne.n	8007c2e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007c1a:	8a3b      	ldrh	r3, [r7, #16]
 8007c1c:	0a5b      	lsrs	r3, r3, #9
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007c2c:	e006      	b.n	8007c3c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007c34:	e002      	b.n	8007c3c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007c36:	2304      	movs	r3, #4
 8007c38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3740      	adds	r7, #64	; 0x40
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20009a88 	.word	0x20009a88

08007c4c <arm_fir_init_q31>:
        arm_fir_instance_q31 * S,
        uint16_t numTaps,
  const q31_t * pCoeffs,
        q31_t * pState,
        uint32_t blockSize)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	607a      	str	r2, [r7, #4]
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	897a      	ldrh	r2, [r7, #10]
 8007c60:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(q31_t));
 8007c68:	897a      	ldrh	r2, [r7, #10]
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c72:	3b01      	subs	r3, #1
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	461a      	mov	r2, r3
 8007c78:	2100      	movs	r1, #0
 8007c7a:	6838      	ldr	r0, [r7, #0]
 8007c7c:	f005 fe4d 	bl	800d91a <memset>

  /* Assign state pointer */
  S->pState = pState;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	605a      	str	r2, [r3, #4]
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <arm_fir_q31>:
void arm_fir_q31(
  const arm_fir_instance_q31 * S,
  const q31_t * pSrc,
        q31_t * pDst,
        uint32_t blockSize)
{
 8007c8e:	b4f0      	push	{r4, r5, r6, r7}
 8007c90:	b090      	sub	sp, #64	; 0x40
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	607a      	str	r2, [r7, #4]
 8007c9a:	603b      	str	r3, [r7, #0]
        q31_t *pState = S->pState;                     /* State pointer */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	61bb      	str	r3, [r7, #24]
        q31_t *pStateCurnt;                            /* Points to the current sample of the state */
        q31_t *px;                                     /* Temporary pointer for state buffer */
  const q31_t *pb;                                     /* Temporary pointer for coefficient buffer */
        q63_t acc0;                                    /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	617b      	str	r3, [r7, #20]
        q31_t c0;                                      /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  blkCnt = blockSize % 0x3U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8007cc4:	e04a      	b.n	8007d5c <arm_fir_q31+0xce>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	1d13      	adds	r3, r2, #4
 8007cca:	60bb      	str	r3, [r7, #8]
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	1d19      	adds	r1, r3, #4
 8007cd0:	63b9      	str	r1, [r7, #56]	; 0x38
 8007cd2:	6812      	ldr	r2, [r2, #0]
 8007cd4:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0;
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	f04f 0400 	mov.w	r4, #0
 8007cde:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    /* Initialize state pointer */
    px = pState;
 8007ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	633b      	str	r3, [r7, #48]	; 0x30

    i = numTaps;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Perform the multiply-accumulates */
    do
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += (q63_t) *px++ * *pb++;
 8007cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf0:	1d1a      	adds	r2, r3, #4
 8007cf2:	637a      	str	r2, [r7, #52]	; 0x34
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	1d18      	adds	r0, r3, #4
 8007d00:	6338      	str	r0, [r7, #48]	; 0x30
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8007d08:	fb03 f502 	mul.w	r5, r3, r2
 8007d0c:	fb01 f004 	mul.w	r0, r1, r4
 8007d10:	4428      	add	r0, r5
 8007d12:	fba1 5603 	umull	r5, r6, r1, r3
 8007d16:	1982      	adds	r2, r0, r6
 8007d18:	4616      	mov	r6, r2
 8007d1a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007d1e:	186b      	adds	r3, r5, r1
 8007d20:	eb46 0402 	adc.w	r4, r6, r2
 8007d24:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

      i--;
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
    } while (i > 0U);
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1dc      	bne.n	8007cee <arm_fir_q31+0x60>

    /* Result is in 2.62 format. Convert to 1.31 and store in destination buffer. */
    *pDst++ = (q31_t) (acc0 >> 31U);
 8007d34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	f04f 0400 	mov.w	r4, #0
 8007d40:	0fcb      	lsrs	r3, r1, #31
 8007d42:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8007d46:	17d4      	asrs	r4, r2, #31
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	1d11      	adds	r1, r2, #4
 8007d4c:	6079      	str	r1, [r7, #4]
 8007d4e:	6013      	str	r3, [r2, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8007d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d52:	3304      	adds	r3, #4
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Decrement loop counter */
    blkCnt--;
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1b1      	bne.n	8007cc6 <arm_fir_q31+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	63bb      	str	r3, [r7, #56]	; 0x38
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	623b      	str	r3, [r7, #32]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8007d6e:	e00a      	b.n	8007d86 <arm_fir_q31+0xf8>
  {
    *pStateCurnt++ = *pState++;
 8007d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d72:	1d13      	adds	r3, r2, #4
 8007d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	1d19      	adds	r1, r3, #4
 8007d7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d7c:	6812      	ldr	r2, [r2, #0]
 8007d7e:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	623b      	str	r3, [r7, #32]
  while (tapCnt > 0U)
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1f1      	bne.n	8007d70 <arm_fir_q31+0xe2>
  }

}
 8007d8c:	bf00      	nop
 8007d8e:	3740      	adds	r7, #64	; 0x40
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bcf0      	pop	{r4, r5, r6, r7}
 8007d94:	4770      	bx	lr

08007d96 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007d96:	b590      	push	{r4, r7, lr}
 8007d98:	b089      	sub	sp, #36	; 0x24
 8007d9a:	af04      	add	r7, sp, #16
 8007d9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007da4:	7919      	ldrb	r1, [r3, #4]
 8007da6:	2350      	movs	r3, #80	; 0x50
 8007da8:	2206      	movs	r2, #6
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fc4e 	bl	800964c <USBH_FindInterface>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	2bff      	cmp	r3, #255	; 0xff
 8007db8:	d002      	beq.n	8007dc0 <USBH_MSC_InterfaceInit+0x2a>
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d901      	bls.n	8007dc4 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e0ef      	b.n	8007fa4 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 fc23 	bl	8009614 <USBH_SelectInterface>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e0e3      	b.n	8007fa4 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007de2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007de6:	f005 fd7d 	bl	800d8e4 <malloc>
 8007dea:	4603      	mov	r3, r0
 8007dec:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e0d0      	b.n	8007fa4 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e06:	2100      	movs	r1, #0
 8007e08:	68b8      	ldr	r0, [r7, #8]
 8007e0a:	f005 fd86 	bl	800d91a <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	211a      	movs	r1, #26
 8007e14:	fb01 f303 	mul.w	r3, r1, r3
 8007e18:	4413      	add	r3, r2
 8007e1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	b25b      	sxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	da16      	bge.n	8007e54 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	211a      	movs	r1, #26
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	4413      	add	r3, r2
 8007e32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e36:	781a      	ldrb	r2, [r3, #0]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	211a      	movs	r1, #26
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e4c:	881a      	ldrh	r2, [r3, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	815a      	strh	r2, [r3, #10]
 8007e52:	e015      	b.n	8007e80 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	211a      	movs	r1, #26
 8007e5a:	fb01 f303 	mul.w	r3, r1, r3
 8007e5e:	4413      	add	r3, r2
 8007e60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e64:	781a      	ldrb	r2, [r3, #0]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	211a      	movs	r1, #26
 8007e70:	fb01 f303 	mul.w	r3, r1, r3
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e7a:	881a      	ldrh	r2, [r3, #0]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	211a      	movs	r1, #26
 8007e86:	fb01 f303 	mul.w	r3, r1, r3
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	b25b      	sxtb	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	da16      	bge.n	8007ec6 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	211a      	movs	r1, #26
 8007e9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	211a      	movs	r1, #26
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ebe:	881a      	ldrh	r2, [r3, #0]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	815a      	strh	r2, [r3, #10]
 8007ec4:	e015      	b.n	8007ef2 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	211a      	movs	r1, #26
 8007ecc:	fb01 f303 	mul.w	r3, r1, r3
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ed6:	781a      	ldrb	r2, [r3, #0]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	211a      	movs	r1, #26
 8007ee2:	fb01 f303 	mul.w	r3, r1, r3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007eec:	881a      	ldrh	r2, [r3, #0]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2200      	movs	r2, #0
 8007efc:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2200      	movs	r2, #0
 8007f02:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	799b      	ldrb	r3, [r3, #6]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f002 fdc1 	bl	800aa92 <USBH_AllocPipe>
 8007f10:	4603      	mov	r3, r0
 8007f12:	461a      	mov	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	79db      	ldrb	r3, [r3, #7]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f002 fdb7 	bl	800aa92 <USBH_AllocPipe>
 8007f24:	4603      	mov	r3, r0
 8007f26:	461a      	mov	r2, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fda3 	bl	8008a78 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	7959      	ldrb	r1, [r3, #5]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	7998      	ldrb	r0, [r3, #6]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	8912      	ldrh	r2, [r2, #8]
 8007f4a:	9202      	str	r2, [sp, #8]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	9201      	str	r2, [sp, #4]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	4623      	mov	r3, r4
 8007f54:	4602      	mov	r2, r0
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f002 fd6c 	bl	800aa34 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	7919      	ldrb	r1, [r3, #4]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	79d8      	ldrb	r0, [r3, #7]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	8952      	ldrh	r2, [r2, #10]
 8007f74:	9202      	str	r2, [sp, #8]
 8007f76:	2202      	movs	r2, #2
 8007f78:	9201      	str	r2, [sp, #4]
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	4623      	mov	r3, r4
 8007f7e:	4602      	mov	r2, r0
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f002 fd57 	bl	800aa34 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	791b      	ldrb	r3, [r3, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f005 fbe1 	bl	800d756 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	795b      	ldrb	r3, [r3, #5]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f005 fbda 	bl	800d756 <USBH_LL_SetToggle>

  return USBH_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd90      	pop	{r4, r7, pc}

08007fac <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	795b      	ldrb	r3, [r3, #5]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00e      	beq.n	8007fe4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	795b      	ldrb	r3, [r3, #5]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 fd50 	bl	800aa72 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	795b      	ldrb	r3, [r3, #5]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f002 fd7b 	bl	800aad4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	791b      	ldrb	r3, [r3, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00e      	beq.n	800800a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	791b      	ldrb	r3, [r3, #4]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f002 fd3d 	bl	800aa72 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	791b      	ldrb	r3, [r3, #4]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f002 fd68 	bl	800aad4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00b      	beq.n	800802e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	4618      	mov	r0, r3
 8008020:	f005 fc68 	bl	800d8f4 <free>
    phost->pActiveClass->pData = 0U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800802a:	2200      	movs	r2, #0
 800802c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800804a:	2301      	movs	r3, #1
 800804c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	7b9b      	ldrb	r3, [r3, #14]
 8008052:	2b02      	cmp	r3, #2
 8008054:	d004      	beq.n	8008060 <USBH_MSC_ClassRequest+0x28>
 8008056:	2b03      	cmp	r3, #3
 8008058:	d03e      	beq.n	80080d8 <USBH_MSC_ClassRequest+0xa0>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d000      	beq.n	8008060 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800805e:	e04a      	b.n	80080f6 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fce9 	bl	8008a3c <USBH_MSC_BOT_REQ_GetMaxLUN>
 800806a:	4603      	mov	r3, r0
 800806c:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	2b03      	cmp	r3, #3
 8008072:	d104      	bne.n	800807e <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d135      	bne.n	80080f0 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b02      	cmp	r3, #2
 800808a:	d804      	bhi.n	8008096 <USBH_MSC_ClassRequest+0x5e>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	3301      	adds	r3, #1
 8008092:	b2da      	uxtb	r2, r3
 8008094:	e000      	b.n	8008098 <USBH_MSC_ClassRequest+0x60>
 8008096:	2202      	movs	r2, #2
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800809c:	2300      	movs	r3, #0
 800809e:	73bb      	strb	r3, [r7, #14]
 80080a0:	e014      	b.n	80080cc <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	2134      	movs	r1, #52	; 0x34
 80080a8:	fb01 f303 	mul.w	r3, r1, r3
 80080ac:	4413      	add	r3, r2
 80080ae:	3392      	adds	r3, #146	; 0x92
 80080b0:	2202      	movs	r2, #2
 80080b2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	2134      	movs	r1, #52	; 0x34
 80080ba:	fb01 f303 	mul.w	r3, r1, r3
 80080be:	4413      	add	r3, r2
 80080c0:	33c1      	adds	r3, #193	; 0xc1
 80080c2:	2200      	movs	r2, #0
 80080c4:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	3301      	adds	r3, #1
 80080ca:	73bb      	strb	r3, [r7, #14]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	7bba      	ldrb	r2, [r7, #14]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d3e5      	bcc.n	80080a2 <USBH_MSC_ClassRequest+0x6a>
      break;
 80080d6:	e00b      	b.n	80080f0 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f002 f877 	bl	800a1ce <USBH_ClrFeature>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d106      	bne.n	80080f4 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	7bda      	ldrb	r2, [r3, #15]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	739a      	strb	r2, [r3, #14]
      break;
 80080ee:	e001      	b.n	80080f4 <USBH_MSC_ClassRequest+0xbc>
      break;
 80080f0:	bf00      	nop
 80080f2:	e000      	b.n	80080f6 <USBH_MSC_ClassRequest+0xbe>
      break;
 80080f4:	bf00      	nop
  }

  return status;
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008112:	2301      	movs	r3, #1
 8008114:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008116:	2301      	movs	r3, #1
 8008118:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800811a:	2301      	movs	r3, #1
 800811c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	7b1b      	ldrb	r3, [r3, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <USBH_MSC_Process+0x2e>
 8008126:	2b01      	cmp	r3, #1
 8008128:	f000 8271 	beq.w	800860e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800812c:	e272      	b.n	8008614 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	b29b      	uxth	r3, r3
 800813a:	429a      	cmp	r2, r3
 800813c:	f080 824f 	bcs.w	80085de <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008146:	4619      	mov	r1, r3
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	2334      	movs	r3, #52	; 0x34
 800814c:	fb03 f301 	mul.w	r3, r3, r1
 8008150:	4413      	add	r3, r2
 8008152:	3391      	adds	r3, #145	; 0x91
 8008154:	2201      	movs	r2, #1
 8008156:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800815e:	4619      	mov	r1, r3
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	2334      	movs	r3, #52	; 0x34
 8008164:	fb03 f301 	mul.w	r3, r3, r1
 8008168:	4413      	add	r3, r2
 800816a:	3390      	adds	r3, #144	; 0x90
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b08      	cmp	r3, #8
 8008170:	f200 8243 	bhi.w	80085fa <USBH_MSC_Process+0x4fa>
 8008174:	a201      	add	r2, pc, #4	; (adr r2, 800817c <USBH_MSC_Process+0x7c>)
 8008176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817a:	bf00      	nop
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080085fb 	.word	0x080085fb
 8008184:	08008269 	.word	0x08008269
 8008188:	080083ed 	.word	0x080083ed
 800818c:	080081c7 	.word	0x080081c7
 8008190:	080084b9 	.word	0x080084b9
 8008194:	080085fb 	.word	0x080085fb
 8008198:	080085fb 	.word	0x080085fb
 800819c:	080085cd 	.word	0x080085cd
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081a6:	4619      	mov	r1, r3
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	2334      	movs	r3, #52	; 0x34
 80081ac:	fb03 f301 	mul.w	r3, r3, r1
 80081b0:	4413      	add	r3, r2
 80081b2:	3390      	adds	r3, #144	; 0x90
 80081b4:	2204      	movs	r2, #4
 80081b6:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80081c4:	e222      	b.n	800860c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081cc:	b2d9      	uxtb	r1, r3
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081d4:	461a      	mov	r2, r3
 80081d6:	2334      	movs	r3, #52	; 0x34
 80081d8:	fb03 f302 	mul.w	r3, r3, r2
 80081dc:	3398      	adds	r3, #152	; 0x98
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	4413      	add	r3, r2
 80081e2:	3307      	adds	r3, #7
 80081e4:	461a      	mov	r2, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 ff68 	bl	80090bc <USBH_MSC_SCSI_Inquiry>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10b      	bne.n	800820e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081fc:	4619      	mov	r1, r3
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	2334      	movs	r3, #52	; 0x34
 8008202:	fb03 f301 	mul.w	r3, r3, r1
 8008206:	4413      	add	r3, r2
 8008208:	3390      	adds	r3, #144	; 0x90
 800820a:	2202      	movs	r2, #2
 800820c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d10c      	bne.n	800822e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800821a:	4619      	mov	r1, r3
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	2334      	movs	r3, #52	; 0x34
 8008220:	fb03 f301 	mul.w	r3, r3, r1
 8008224:	4413      	add	r3, r2
 8008226:	3390      	adds	r3, #144	; 0x90
 8008228:	2205      	movs	r2, #5
 800822a:	701a      	strb	r2, [r3, #0]
            break;
 800822c:	e1e7      	b.n	80085fe <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	2b04      	cmp	r3, #4
 8008232:	f040 81e4 	bne.w	80085fe <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800823c:	4619      	mov	r1, r3
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	2334      	movs	r3, #52	; 0x34
 8008242:	fb03 f301 	mul.w	r3, r3, r1
 8008246:	4413      	add	r3, r2
 8008248:	3390      	adds	r3, #144	; 0x90
 800824a:	2201      	movs	r2, #1
 800824c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008254:	4619      	mov	r1, r3
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	2334      	movs	r3, #52	; 0x34
 800825a:	fb03 f301 	mul.w	r3, r3, r1
 800825e:	4413      	add	r3, r2
 8008260:	3391      	adds	r3, #145	; 0x91
 8008262:	2202      	movs	r2, #2
 8008264:	701a      	strb	r2, [r3, #0]
            break;
 8008266:	e1ca      	b.n	80085fe <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800826e:	b2db      	uxtb	r3, r3
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fe64 	bl	8008f40 <USBH_MSC_SCSI_TestUnitReady>
 8008278:	4603      	mov	r3, r0
 800827a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800827c:	7bbb      	ldrb	r3, [r7, #14]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d149      	bne.n	8008316 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008288:	4619      	mov	r1, r3
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	2334      	movs	r3, #52	; 0x34
 800828e:	fb03 f301 	mul.w	r3, r3, r1
 8008292:	4413      	add	r3, r2
 8008294:	3392      	adds	r3, #146	; 0x92
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00c      	beq.n	80082b6 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082a2:	4619      	mov	r1, r3
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	2334      	movs	r3, #52	; 0x34
 80082a8:	fb03 f301 	mul.w	r3, r3, r1
 80082ac:	4413      	add	r3, r2
 80082ae:	33c1      	adds	r3, #193	; 0xc1
 80082b0:	2201      	movs	r2, #1
 80082b2:	701a      	strb	r2, [r3, #0]
 80082b4:	e00b      	b.n	80082ce <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082bc:	4619      	mov	r1, r3
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	2334      	movs	r3, #52	; 0x34
 80082c2:	fb03 f301 	mul.w	r3, r3, r1
 80082c6:	4413      	add	r3, r2
 80082c8:	33c1      	adds	r3, #193	; 0xc1
 80082ca:	2200      	movs	r2, #0
 80082cc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082d4:	4619      	mov	r1, r3
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	2334      	movs	r3, #52	; 0x34
 80082da:	fb03 f301 	mul.w	r3, r3, r1
 80082de:	4413      	add	r3, r2
 80082e0:	3390      	adds	r3, #144	; 0x90
 80082e2:	2203      	movs	r2, #3
 80082e4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082ec:	4619      	mov	r1, r3
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	2334      	movs	r3, #52	; 0x34
 80082f2:	fb03 f301 	mul.w	r3, r3, r1
 80082f6:	4413      	add	r3, r2
 80082f8:	3391      	adds	r3, #145	; 0x91
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008304:	4619      	mov	r1, r3
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	2334      	movs	r3, #52	; 0x34
 800830a:	fb03 f301 	mul.w	r3, r3, r1
 800830e:	4413      	add	r3, r2
 8008310:	3392      	adds	r3, #146	; 0x92
 8008312:	2200      	movs	r2, #0
 8008314:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b02      	cmp	r3, #2
 800831a:	d14a      	bne.n	80083b2 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008322:	4619      	mov	r1, r3
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	2334      	movs	r3, #52	; 0x34
 8008328:	fb03 f301 	mul.w	r3, r3, r1
 800832c:	4413      	add	r3, r2
 800832e:	3392      	adds	r3, #146	; 0x92
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d00c      	beq.n	8008350 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800833c:	4619      	mov	r1, r3
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	2334      	movs	r3, #52	; 0x34
 8008342:	fb03 f301 	mul.w	r3, r3, r1
 8008346:	4413      	add	r3, r2
 8008348:	33c1      	adds	r3, #193	; 0xc1
 800834a:	2201      	movs	r2, #1
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	e00b      	b.n	8008368 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008356:	4619      	mov	r1, r3
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	2334      	movs	r3, #52	; 0x34
 800835c:	fb03 f301 	mul.w	r3, r3, r1
 8008360:	4413      	add	r3, r2
 8008362:	33c1      	adds	r3, #193	; 0xc1
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800836e:	4619      	mov	r1, r3
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	2334      	movs	r3, #52	; 0x34
 8008374:	fb03 f301 	mul.w	r3, r3, r1
 8008378:	4413      	add	r3, r2
 800837a:	3390      	adds	r3, #144	; 0x90
 800837c:	2205      	movs	r2, #5
 800837e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008386:	4619      	mov	r1, r3
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	2334      	movs	r3, #52	; 0x34
 800838c:	fb03 f301 	mul.w	r3, r3, r1
 8008390:	4413      	add	r3, r2
 8008392:	3391      	adds	r3, #145	; 0x91
 8008394:	2201      	movs	r2, #1
 8008396:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800839e:	4619      	mov	r1, r3
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	2334      	movs	r3, #52	; 0x34
 80083a4:	fb03 f301 	mul.w	r3, r3, r1
 80083a8:	4413      	add	r3, r2
 80083aa:	3392      	adds	r3, #146	; 0x92
 80083ac:	2202      	movs	r2, #2
 80083ae:	701a      	strb	r2, [r3, #0]
            break;
 80083b0:	e127      	b.n	8008602 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	f040 8124 	bne.w	8008602 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083c0:	4619      	mov	r1, r3
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	2334      	movs	r3, #52	; 0x34
 80083c6:	fb03 f301 	mul.w	r3, r3, r1
 80083ca:	4413      	add	r3, r2
 80083cc:	3390      	adds	r3, #144	; 0x90
 80083ce:	2201      	movs	r2, #1
 80083d0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083d8:	4619      	mov	r1, r3
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	2334      	movs	r3, #52	; 0x34
 80083de:	fb03 f301 	mul.w	r3, r3, r1
 80083e2:	4413      	add	r3, r2
 80083e4:	3391      	adds	r3, #145	; 0x91
 80083e6:	2202      	movs	r2, #2
 80083e8:	701a      	strb	r2, [r3, #0]
            break;
 80083ea:	e10a      	b.n	8008602 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083f2:	b2d9      	uxtb	r1, r3
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083fa:	461a      	mov	r2, r3
 80083fc:	2334      	movs	r3, #52	; 0x34
 80083fe:	fb03 f302 	mul.w	r3, r3, r2
 8008402:	3390      	adds	r3, #144	; 0x90
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	4413      	add	r3, r2
 8008408:	3304      	adds	r3, #4
 800840a:	461a      	mov	r2, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fdda 	bl	8008fc6 <USBH_MSC_SCSI_ReadCapacity>
 8008412:	4603      	mov	r3, r0
 8008414:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d120      	bne.n	800845e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008422:	4619      	mov	r1, r3
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	2334      	movs	r3, #52	; 0x34
 8008428:	fb03 f301 	mul.w	r3, r3, r1
 800842c:	4413      	add	r3, r2
 800842e:	3390      	adds	r3, #144	; 0x90
 8008430:	2201      	movs	r2, #1
 8008432:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800843a:	4619      	mov	r1, r3
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	2334      	movs	r3, #52	; 0x34
 8008440:	fb03 f301 	mul.w	r3, r3, r1
 8008444:	4413      	add	r3, r2
 8008446:	3391      	adds	r3, #145	; 0x91
 8008448:	2200      	movs	r2, #0
 800844a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008452:	3301      	adds	r3, #1
 8008454:	b29a      	uxth	r2, r3
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800845c:	e0d3      	b.n	8008606 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d10c      	bne.n	800847e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800846a:	4619      	mov	r1, r3
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	2334      	movs	r3, #52	; 0x34
 8008470:	fb03 f301 	mul.w	r3, r3, r1
 8008474:	4413      	add	r3, r2
 8008476:	3390      	adds	r3, #144	; 0x90
 8008478:	2205      	movs	r2, #5
 800847a:	701a      	strb	r2, [r3, #0]
            break;
 800847c:	e0c3      	b.n	8008606 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800847e:	7bfb      	ldrb	r3, [r7, #15]
 8008480:	2b04      	cmp	r3, #4
 8008482:	f040 80c0 	bne.w	8008606 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800848c:	4619      	mov	r1, r3
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	2334      	movs	r3, #52	; 0x34
 8008492:	fb03 f301 	mul.w	r3, r3, r1
 8008496:	4413      	add	r3, r2
 8008498:	3390      	adds	r3, #144	; 0x90
 800849a:	2201      	movs	r2, #1
 800849c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084a4:	4619      	mov	r1, r3
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	2334      	movs	r3, #52	; 0x34
 80084aa:	fb03 f301 	mul.w	r3, r3, r1
 80084ae:	4413      	add	r3, r2
 80084b0:	3391      	adds	r3, #145	; 0x91
 80084b2:	2202      	movs	r2, #2
 80084b4:	701a      	strb	r2, [r3, #0]
            break;
 80084b6:	e0a6      	b.n	8008606 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084be:	b2d9      	uxtb	r1, r3
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084c6:	461a      	mov	r2, r3
 80084c8:	2334      	movs	r3, #52	; 0x34
 80084ca:	fb03 f302 	mul.w	r3, r3, r2
 80084ce:	3398      	adds	r3, #152	; 0x98
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	4413      	add	r3, r2
 80084d4:	3304      	adds	r3, #4
 80084d6:	461a      	mov	r2, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fe94 	bl	8009206 <USBH_MSC_SCSI_RequestSense>
 80084de:	4603      	mov	r3, r0
 80084e0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d145      	bne.n	8008574 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084ee:	4619      	mov	r1, r3
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	2334      	movs	r3, #52	; 0x34
 80084f4:	fb03 f301 	mul.w	r3, r3, r1
 80084f8:	4413      	add	r3, r2
 80084fa:	339c      	adds	r3, #156	; 0x9c
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b06      	cmp	r3, #6
 8008500:	d00c      	beq.n	800851c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008508:	4619      	mov	r1, r3
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	2334      	movs	r3, #52	; 0x34
 800850e:	fb03 f301 	mul.w	r3, r3, r1
 8008512:	4413      	add	r3, r2
 8008514:	339c      	adds	r3, #156	; 0x9c
 8008516:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008518:	2b02      	cmp	r3, #2
 800851a:	d117      	bne.n	800854c <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	f242 720f 	movw	r2, #9999	; 0x270f
 800852e:	4293      	cmp	r3, r2
 8008530:	d80c      	bhi.n	800854c <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008538:	4619      	mov	r1, r3
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	2334      	movs	r3, #52	; 0x34
 800853e:	fb03 f301 	mul.w	r3, r3, r1
 8008542:	4413      	add	r3, r2
 8008544:	3390      	adds	r3, #144	; 0x90
 8008546:	2202      	movs	r2, #2
 8008548:	701a      	strb	r2, [r3, #0]
                  break;
 800854a:	e05f      	b.n	800860c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008552:	4619      	mov	r1, r3
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	2334      	movs	r3, #52	; 0x34
 8008558:	fb03 f301 	mul.w	r3, r3, r1
 800855c:	4413      	add	r3, r2
 800855e:	3390      	adds	r3, #144	; 0x90
 8008560:	2201      	movs	r2, #1
 8008562:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800856a:	3301      	adds	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d10c      	bne.n	8008594 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008580:	4619      	mov	r1, r3
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	2334      	movs	r3, #52	; 0x34
 8008586:	fb03 f301 	mul.w	r3, r3, r1
 800858a:	4413      	add	r3, r2
 800858c:	3390      	adds	r3, #144	; 0x90
 800858e:	2208      	movs	r2, #8
 8008590:	701a      	strb	r2, [r3, #0]
            break;
 8008592:	e03a      	b.n	800860a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	2b04      	cmp	r3, #4
 8008598:	d137      	bne.n	800860a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085a0:	4619      	mov	r1, r3
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	2334      	movs	r3, #52	; 0x34
 80085a6:	fb03 f301 	mul.w	r3, r3, r1
 80085aa:	4413      	add	r3, r2
 80085ac:	3390      	adds	r3, #144	; 0x90
 80085ae:	2201      	movs	r2, #1
 80085b0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085b8:	4619      	mov	r1, r3
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	2334      	movs	r3, #52	; 0x34
 80085be:	fb03 f301 	mul.w	r3, r3, r1
 80085c2:	4413      	add	r3, r2
 80085c4:	3391      	adds	r3, #145	; 0x91
 80085c6:	2202      	movs	r2, #2
 80085c8:	701a      	strb	r2, [r3, #0]
            break;
 80085ca:	e01e      	b.n	800860a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085d2:	3301      	adds	r3, #1
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80085dc:	e016      	b.n	800860c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	2201      	movs	r2, #1
 80085ea:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085f2:	2102      	movs	r1, #2
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	4798      	blx	r3
      break;
 80085f8:	e00c      	b.n	8008614 <USBH_MSC_Process+0x514>
            break;
 80085fa:	bf00      	nop
 80085fc:	e00a      	b.n	8008614 <USBH_MSC_Process+0x514>
            break;
 80085fe:	bf00      	nop
 8008600:	e008      	b.n	8008614 <USBH_MSC_Process+0x514>
            break;
 8008602:	bf00      	nop
 8008604:	e006      	b.n	8008614 <USBH_MSC_Process+0x514>
            break;
 8008606:	bf00      	nop
 8008608:	e004      	b.n	8008614 <USBH_MSC_Process+0x514>
            break;
 800860a:	bf00      	nop
      break;
 800860c:	e002      	b.n	8008614 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	75fb      	strb	r3, [r7, #23]
      break;
 8008612:	bf00      	nop
  }
  return error;
 8008614:	7dfb      	ldrb	r3, [r7, #23]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop

08008620 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b088      	sub	sp, #32
 800863a:	af02      	add	r7, sp, #8
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800864c:	2301      	movs	r3, #1
 800864e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	2134      	movs	r1, #52	; 0x34
 800865a:	fb01 f303 	mul.w	r3, r1, r3
 800865e:	4413      	add	r3, r2
 8008660:	3390      	adds	r3, #144	; 0x90
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b06      	cmp	r3, #6
 8008666:	d004      	beq.n	8008672 <USBH_MSC_RdWrProcess+0x3c>
 8008668:	2b07      	cmp	r3, #7
 800866a:	d037      	beq.n	80086dc <USBH_MSC_RdWrProcess+0xa6>
 800866c:	2b05      	cmp	r3, #5
 800866e:	d06a      	beq.n	8008746 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8008670:	e0a6      	b.n	80087c0 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008672:	78f9      	ldrb	r1, [r7, #3]
 8008674:	2300      	movs	r3, #0
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	2300      	movs	r3, #0
 800867a:	2200      	movs	r2, #0
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fea6 	bl	80093ce <USBH_MSC_SCSI_Read>
 8008682:	4603      	mov	r3, r0
 8008684:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10b      	bne.n	80086a4 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	2134      	movs	r1, #52	; 0x34
 8008692:	fb01 f303 	mul.w	r3, r1, r3
 8008696:	4413      	add	r3, r2
 8008698:	3390      	adds	r3, #144	; 0x90
 800869a:	2201      	movs	r2, #1
 800869c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	75fb      	strb	r3, [r7, #23]
      break;
 80086a2:	e088      	b.n	80087b6 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d109      	bne.n	80086be <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80086aa:	78fb      	ldrb	r3, [r7, #3]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	2134      	movs	r1, #52	; 0x34
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	4413      	add	r3, r2
 80086b6:	3390      	adds	r3, #144	; 0x90
 80086b8:	2205      	movs	r2, #5
 80086ba:	701a      	strb	r2, [r3, #0]
      break;
 80086bc:	e07b      	b.n	80087b6 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d178      	bne.n	80087b6 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	2134      	movs	r1, #52	; 0x34
 80086ca:	fb01 f303 	mul.w	r3, r1, r3
 80086ce:	4413      	add	r3, r2
 80086d0:	3390      	adds	r3, #144	; 0x90
 80086d2:	2208      	movs	r2, #8
 80086d4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80086d6:	2302      	movs	r3, #2
 80086d8:	75fb      	strb	r3, [r7, #23]
      break;
 80086da:	e06c      	b.n	80087b6 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80086dc:	78f9      	ldrb	r1, [r7, #3]
 80086de:	2300      	movs	r3, #0
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	2300      	movs	r3, #0
 80086e4:	2200      	movs	r2, #0
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fe06 	bl	80092f8 <USBH_MSC_SCSI_Write>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	2134      	movs	r1, #52	; 0x34
 80086fc:	fb01 f303 	mul.w	r3, r1, r3
 8008700:	4413      	add	r3, r2
 8008702:	3390      	adds	r3, #144	; 0x90
 8008704:	2201      	movs	r2, #1
 8008706:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	75fb      	strb	r3, [r7, #23]
      break;
 800870c:	e055      	b.n	80087ba <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d109      	bne.n	8008728 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	2134      	movs	r1, #52	; 0x34
 800871a:	fb01 f303 	mul.w	r3, r1, r3
 800871e:	4413      	add	r3, r2
 8008720:	3390      	adds	r3, #144	; 0x90
 8008722:	2205      	movs	r2, #5
 8008724:	701a      	strb	r2, [r3, #0]
      break;
 8008726:	e048      	b.n	80087ba <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	2b04      	cmp	r3, #4
 800872c:	d145      	bne.n	80087ba <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800872e:	78fb      	ldrb	r3, [r7, #3]
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	2134      	movs	r1, #52	; 0x34
 8008734:	fb01 f303 	mul.w	r3, r1, r3
 8008738:	4413      	add	r3, r2
 800873a:	3390      	adds	r3, #144	; 0x90
 800873c:	2208      	movs	r2, #8
 800873e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008740:	2302      	movs	r3, #2
 8008742:	75fb      	strb	r3, [r7, #23]
      break;
 8008744:	e039      	b.n	80087ba <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	2234      	movs	r2, #52	; 0x34
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	3398      	adds	r3, #152	; 0x98
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4413      	add	r3, r2
 8008754:	1d1a      	adds	r2, r3, #4
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fd53 	bl	8009206 <USBH_MSC_SCSI_RequestSense>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d113      	bne.n	8008792 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	2134      	movs	r1, #52	; 0x34
 8008770:	fb01 f303 	mul.w	r3, r1, r3
 8008774:	4413      	add	r3, r2
 8008776:	3390      	adds	r3, #144	; 0x90
 8008778:	2201      	movs	r2, #1
 800877a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	2134      	movs	r1, #52	; 0x34
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	4413      	add	r3, r2
 8008788:	3391      	adds	r3, #145	; 0x91
 800878a:	2202      	movs	r2, #2
 800878c:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800878e:	2302      	movs	r3, #2
 8008790:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d012      	beq.n	80087be <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	2b04      	cmp	r3, #4
 800879c:	d10f      	bne.n	80087be <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	2134      	movs	r1, #52	; 0x34
 80087a4:	fb01 f303 	mul.w	r3, r1, r3
 80087a8:	4413      	add	r3, r2
 80087aa:	3390      	adds	r3, #144	; 0x90
 80087ac:	2208      	movs	r2, #8
 80087ae:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80087b0:	2302      	movs	r3, #2
 80087b2:	75fb      	strb	r3, [r7, #23]
      break;
 80087b4:	e003      	b.n	80087be <USBH_MSC_RdWrProcess+0x188>
      break;
 80087b6:	bf00      	nop
 80087b8:	e002      	b.n	80087c0 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80087ba:	bf00      	nop
 80087bc:	e000      	b.n	80087c0 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80087be:	bf00      	nop

  }
  return error;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b085      	sub	sp, #20
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	460b      	mov	r3, r1
 80087d4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b0b      	cmp	r3, #11
 80087e8:	d10c      	bne.n	8008804 <USBH_MSC_UnitIsReady+0x3a>
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	2134      	movs	r1, #52	; 0x34
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	4413      	add	r3, r2
 80087f6:	3391      	adds	r3, #145	; 0x91
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80087fe:	2301      	movs	r3, #1
 8008800:	73fb      	strb	r3, [r7, #15]
 8008802:	e001      	b.n	8008808 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b086      	sub	sp, #24
 800881a:	af00      	add	r7, sp, #0
 800881c:	60f8      	str	r0, [r7, #12]
 800881e:	460b      	mov	r3, r1
 8008820:	607a      	str	r2, [r7, #4]
 8008822:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800882a:	69db      	ldr	r3, [r3, #28]
 800882c:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b0b      	cmp	r3, #11
 8008836:	d10d      	bne.n	8008854 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008838:	7afb      	ldrb	r3, [r7, #11]
 800883a:	2234      	movs	r2, #52	; 0x34
 800883c:	fb02 f303 	mul.w	r3, r2, r3
 8008840:	3390      	adds	r3, #144	; 0x90
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4413      	add	r3, r2
 8008846:	2234      	movs	r2, #52	; 0x34
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f005 f85a 	bl	800d904 <memcpy>
    return USBH_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	e000      	b.n	8008856 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008854:	2302      	movs	r3, #2
  }
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b088      	sub	sp, #32
 8008862:	af02      	add	r7, sp, #8
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
 800886a:	460b      	mov	r3, r1
 800886c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00e      	beq.n	80088a2 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800888a:	2b0b      	cmp	r3, #11
 800888c:	d109      	bne.n	80088a2 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	2134      	movs	r1, #52	; 0x34
 8008894:	fb01 f303 	mul.w	r3, r1, r3
 8008898:	4413      	add	r3, r2
 800889a:	3390      	adds	r3, #144	; 0x90
 800889c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d001      	beq.n	80088a6 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80088a2:	2302      	movs	r3, #2
 80088a4:	e040      	b.n	8008928 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2206      	movs	r2, #6
 80088aa:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80088ac:	7afb      	ldrb	r3, [r7, #11]
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	2134      	movs	r1, #52	; 0x34
 80088b2:	fb01 f303 	mul.w	r3, r1, r3
 80088b6:	4413      	add	r3, r2
 80088b8:	3390      	adds	r3, #144	; 0x90
 80088ba:	2206      	movs	r2, #6
 80088bc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80088be:	7afb      	ldrb	r3, [r7, #11]
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80088c8:	7af9      	ldrb	r1, [r7, #11]
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 fd7b 	bl	80093ce <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088de:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80088e0:	e016      	b.n	8008910 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	1ad2      	subs	r2, r2, r3
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	f242 7110 	movw	r1, #10000	; 0x2710
 80088f2:	fb01 f303 	mul.w	r3, r1, r3
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d805      	bhi.n	8008906 <USBH_MSC_Read+0xa8>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2201      	movs	r2, #1
 800890a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800890c:	2302      	movs	r3, #2
 800890e:	e00b      	b.n	8008928 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008910:	7afb      	ldrb	r3, [r7, #11]
 8008912:	4619      	mov	r1, r3
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7ff fe8e 	bl	8008636 <USBH_MSC_RdWrProcess>
 800891a:	4603      	mov	r3, r0
 800891c:	2b01      	cmp	r3, #1
 800891e:	d0e0      	beq.n	80088e2 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2201      	movs	r2, #1
 8008924:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b088      	sub	sp, #32
 8008934:	af02      	add	r7, sp, #8
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	603b      	str	r3, [r7, #0]
 800893c:	460b      	mov	r3, r1
 800893e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00e      	beq.n	8008974 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800895c:	2b0b      	cmp	r3, #11
 800895e:	d109      	bne.n	8008974 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	2134      	movs	r1, #52	; 0x34
 8008966:	fb01 f303 	mul.w	r3, r1, r3
 800896a:	4413      	add	r3, r2
 800896c:	3390      	adds	r3, #144	; 0x90
 800896e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008970:	2b01      	cmp	r3, #1
 8008972:	d001      	beq.n	8008978 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008974:	2302      	movs	r3, #2
 8008976:	e040      	b.n	80089fa <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2207      	movs	r2, #7
 800897c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800897e:	7afb      	ldrb	r3, [r7, #11]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	2134      	movs	r1, #52	; 0x34
 8008984:	fb01 f303 	mul.w	r3, r1, r3
 8008988:	4413      	add	r3, r2
 800898a:	3390      	adds	r3, #144	; 0x90
 800898c:	2207      	movs	r2, #7
 800898e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	b29a      	uxth	r2, r3
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800899a:	7af9      	ldrb	r1, [r7, #11]
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fca7 	bl	80092f8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089b0:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80089b2:	e016      	b.n	80089e2 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	1ad2      	subs	r2, r2, r3
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	f242 7110 	movw	r1, #10000	; 0x2710
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d805      	bhi.n	80089d8 <USBH_MSC_Write+0xa8>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2201      	movs	r2, #1
 80089dc:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80089de:	2302      	movs	r3, #2
 80089e0:	e00b      	b.n	80089fa <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80089e2:	7afb      	ldrb	r3, [r7, #11]
 80089e4:	4619      	mov	r1, r3
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f7ff fe25 	bl	8008636 <USBH_MSC_RdWrProcess>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d0e0      	beq.n	80089b4 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2201      	movs	r2, #1
 80089f6:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2221      	movs	r2, #33	; 0x21
 8008a0e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	22ff      	movs	r2, #255	; 0xff
 8008a14:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 fdae 	bl	800a58e <USBH_CtlReq>
 8008a32:	4603      	mov	r3, r0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	22a1      	movs	r2, #161	; 0xa1
 8008a4a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	22fe      	movs	r2, #254	; 0xfe
 8008a50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008a64:	2201      	movs	r2, #1
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 fd90 	bl	800a58e <USBH_CtlReq>
 8008a6e:	4603      	mov	r3, r0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4a09      	ldr	r2, [pc, #36]	; (8008ab4 <USBH_MSC_BOT_Init+0x3c>)
 8008a8e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4a09      	ldr	r2, [pc, #36]	; (8008ab8 <USBH_MSC_BOT_Init+0x40>)
 8008a94:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	43425355 	.word	0x43425355
 8008ab8:	20304050 	.word	0x20304050

08008abc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af02      	add	r7, sp, #8
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008acc:	2301      	movs	r3, #1
 8008ace:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008aec:	3b01      	subs	r3, #1
 8008aee:	2b0a      	cmp	r3, #10
 8008af0:	f200 81a1 	bhi.w	8008e36 <USBH_MSC_BOT_Process+0x37a>
 8008af4:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <USBH_MSC_BOT_Process+0x40>)
 8008af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afa:	bf00      	nop
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	08008b53 	.word	0x08008b53
 8008b04:	08008bbd 	.word	0x08008bbd
 8008b08:	08008bdb 	.word	0x08008bdb
 8008b0c:	08008c5f 	.word	0x08008c5f
 8008b10:	08008c83 	.word	0x08008c83
 8008b14:	08008d1d 	.word	0x08008d1d
 8008b18:	08008d39 	.word	0x08008d39
 8008b1c:	08008d8b 	.word	0x08008d8b
 8008b20:	08008dbb 	.word	0x08008dbb
 8008b24:	08008e1d 	.word	0x08008e1d
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	795a      	ldrb	r2, [r3, #5]
 8008b42:	2301      	movs	r3, #1
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	4613      	mov	r3, r2
 8008b48:	221f      	movs	r2, #31
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f001 ff2f 	bl	800a9ae <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008b50:	e180      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	795b      	ldrb	r3, [r3, #5]
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f004 fddb 	bl	800d714 <USBH_LL_GetURBState>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008b62:	7d3b      	ldrb	r3, [r7, #20]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d118      	bne.n	8008b9a <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00f      	beq.n	8008b90 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	da04      	bge.n	8008b86 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2203      	movs	r2, #3
 8008b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b84:	e159      	b.n	8008e3a <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2205      	movs	r2, #5
 8008b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b8e:	e154      	b.n	8008e3a <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2207      	movs	r2, #7
 8008b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b98:	e14f      	b.n	8008e3a <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b9a:	7d3b      	ldrb	r3, [r7, #20]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d104      	bne.n	8008baa <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ba8:	e147      	b.n	8008e3a <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8008baa:	7d3b      	ldrb	r3, [r7, #20]
 8008bac:	2b05      	cmp	r3, #5
 8008bae:	f040 8144 	bne.w	8008e3a <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	220a      	movs	r2, #10
 8008bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008bba:	e13e      	b.n	8008e3a <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	895a      	ldrh	r2, [r3, #10]
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	791b      	ldrb	r3, [r3, #4]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f001 ff14 	bl	800a9f8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	2204      	movs	r2, #4
 8008bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008bd8:	e13c      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	791b      	ldrb	r3, [r3, #4]
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f004 fd97 	bl	800d714 <USBH_LL_GetURBState>
 8008be6:	4603      	mov	r3, r0
 8008be8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008bea:	7d3b      	ldrb	r3, [r7, #20]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d12d      	bne.n	8008c4c <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	8952      	ldrh	r2, [r2, #10]
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d910      	bls.n	8008c1e <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	8952      	ldrh	r2, [r2, #10]
 8008c06:	441a      	add	r2, r3
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	8952      	ldrh	r2, [r2, #10]
 8008c16:	1a9a      	subs	r2, r3, r2
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c1c:	e002      	b.n	8008c24 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2200      	movs	r2, #0
 8008c22:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00a      	beq.n	8008c42 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	895a      	ldrh	r2, [r3, #10]
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	791b      	ldrb	r3, [r3, #4]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 fedc 	bl	800a9f8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008c40:	e0fd      	b.n	8008e3e <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2207      	movs	r2, #7
 8008c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c4a:	e0f8      	b.n	8008e3e <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8008c4c:	7d3b      	ldrb	r3, [r7, #20]
 8008c4e:	2b05      	cmp	r3, #5
 8008c50:	f040 80f5 	bne.w	8008e3e <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2209      	movs	r2, #9
 8008c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c5c:	e0ef      	b.n	8008e3e <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	891a      	ldrh	r2, [r3, #8]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	7958      	ldrb	r0, [r3, #5]
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	4603      	mov	r3, r0
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f001 fe9b 	bl	800a9ae <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2206      	movs	r2, #6
 8008c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c80:	e0e8      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	795b      	ldrb	r3, [r3, #5]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f004 fd43 	bl	800d714 <USBH_LL_GetURBState>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008c92:	7d3b      	ldrb	r3, [r7, #20]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d130      	bne.n	8008cfa <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	8912      	ldrh	r2, [r2, #8]
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d910      	bls.n	8008cc6 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	8912      	ldrh	r2, [r2, #8]
 8008cae:	441a      	add	r2, r3
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	8912      	ldrh	r2, [r2, #8]
 8008cbe:	1a9a      	subs	r2, r3, r2
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8008cc4:	e002      	b.n	8008ccc <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00d      	beq.n	8008cf0 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	891a      	ldrh	r2, [r3, #8]
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	7958      	ldrb	r0, [r3, #5]
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 fe60 	bl	800a9ae <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008cee:	e0a8      	b.n	8008e42 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2207      	movs	r2, #7
 8008cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008cf8:	e0a3      	b.n	8008e42 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008cfa:	7d3b      	ldrb	r3, [r7, #20]
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d104      	bne.n	8008d0a <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	2205      	movs	r2, #5
 8008d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d08:	e09b      	b.n	8008e42 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8008d0a:	7d3b      	ldrb	r3, [r7, #20]
 8008d0c:	2b05      	cmp	r3, #5
 8008d0e:	f040 8098 	bne.w	8008e42 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	220a      	movs	r2, #10
 8008d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d1a:	e092      	b.n	8008e42 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	791b      	ldrb	r3, [r3, #4]
 8008d26:	220d      	movs	r2, #13
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 fe65 	bl	800a9f8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	2208      	movs	r2, #8
 8008d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d36:	e08d      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	791b      	ldrb	r3, [r3, #4]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f004 fce8 	bl	800d714 <USBH_LL_GetURBState>
 8008d44:	4603      	mov	r3, r0
 8008d46:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008d48:	7d3b      	ldrb	r3, [r7, #20]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d115      	bne.n	8008d7a <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f8aa 	bl	8008eb8 <USBH_MSC_DecodeCSW>
 8008d64:	4603      	mov	r3, r0
 8008d66:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008d68:	7d7b      	ldrb	r3, [r7, #21]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d102      	bne.n	8008d74 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008d72:	e068      	b.n	8008e46 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8008d74:	2302      	movs	r3, #2
 8008d76:	75fb      	strb	r3, [r7, #23]
      break;
 8008d78:	e065      	b.n	8008e46 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8008d7a:	7d3b      	ldrb	r3, [r7, #20]
 8008d7c:	2b05      	cmp	r3, #5
 8008d7e:	d162      	bne.n	8008e46 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2209      	movs	r2, #9
 8008d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d88:	e05d      	b.n	8008e46 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f865 	bl	8008e60 <USBH_MSC_BOT_Abort>
 8008d96:	4603      	mov	r3, r0
 8008d98:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008d9a:	7dbb      	ldrb	r3, [r7, #22]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d104      	bne.n	8008daa <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	2207      	movs	r2, #7
 8008da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008da8:	e04f      	b.n	8008e4a <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008daa:	7dbb      	ldrb	r3, [r7, #22]
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d14c      	bne.n	8008e4a <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	220b      	movs	r2, #11
 8008db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008db8:	e047      	b.n	8008e4a <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008dba:	78fb      	ldrb	r3, [r7, #3]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f84d 	bl	8008e60 <USBH_MSC_BOT_Abort>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008dca:	7dbb      	ldrb	r3, [r7, #22]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d11d      	bne.n	8008e0c <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	795b      	ldrb	r3, [r3, #5]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f004 fcf0 	bl	800d7bc <USBH_LL_GetToggle>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	7959      	ldrb	r1, [r3, #5]
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
 8008de6:	f1c3 0301 	rsb	r3, r3, #1
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f004 fcb1 	bl	800d756 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	791b      	ldrb	r3, [r3, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f004 fcaa 	bl	800d756 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2209      	movs	r2, #9
 8008e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008e0a:	e020      	b.n	8008e4e <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8008e0c:	7dbb      	ldrb	r3, [r7, #22]
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d11d      	bne.n	8008e4e <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	220b      	movs	r2, #11
 8008e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008e1a:	e018      	b.n	8008e4e <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff fdf0 	bl	8008a02 <USBH_MSC_BOT_REQ_Reset>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d112      	bne.n	8008e52 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008e34:	e00d      	b.n	8008e52 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8008e36:	bf00      	nop
 8008e38:	e00c      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>
      break;
 8008e3a:	bf00      	nop
 8008e3c:	e00a      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>
      break;
 8008e3e:	bf00      	nop
 8008e40:	e008      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>
      break;
 8008e42:	bf00      	nop
 8008e44:	e006      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>
      break;
 8008e46:	bf00      	nop
 8008e48:	e004      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>
      break;
 8008e4a:	bf00      	nop
 8008e4c:	e002      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>
      break;
 8008e4e:	bf00      	nop
 8008e50:	e000      	b.n	8008e54 <USBH_MSC_BOT_Process+0x398>
      break;
 8008e52:	bf00      	nop
  }
  return status;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop

08008e60 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008e70:	2302      	movs	r3, #2
 8008e72:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008e7e:	78bb      	ldrb	r3, [r7, #2]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <USBH_MSC_BOT_Abort+0x2a>
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d009      	beq.n	8008e9c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008e88:	e011      	b.n	8008eae <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	79db      	ldrb	r3, [r3, #7]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f001 f99c 	bl	800a1ce <USBH_ClrFeature>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73fb      	strb	r3, [r7, #15]
      break;
 8008e9a:	e008      	b.n	8008eae <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	799b      	ldrb	r3, [r3, #6]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f001 f993 	bl	800a1ce <USBH_ClrFeature>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8008eac:	bf00      	nop
  }
  return status;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	791b      	ldrb	r3, [r3, #4]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f004 fb8b 	bl	800d5f0 <USBH_LL_GetLastXferSize>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b0d      	cmp	r3, #13
 8008ede:	d002      	beq.n	8008ee6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	73fb      	strb	r3, [r7, #15]
 8008ee4:	e024      	b.n	8008f30 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eea:	4a14      	ldr	r2, [pc, #80]	; (8008f3c <USBH_MSC_DecodeCSW+0x84>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d11d      	bne.n	8008f2c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d119      	bne.n	8008f30 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d102      	bne.n	8008f0c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008f06:	2300      	movs	r3, #0
 8008f08:	73fb      	strb	r3, [r7, #15]
 8008f0a:	e011      	b.n	8008f30 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d102      	bne.n	8008f1c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008f16:	2301      	movs	r3, #1
 8008f18:	73fb      	strb	r3, [r7, #15]
 8008f1a:	e009      	b.n	8008f30 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d104      	bne.n	8008f30 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008f26:	2302      	movs	r3, #2
 8008f28:	73fb      	strb	r3, [r7, #15]
 8008f2a:	e001      	b.n	8008f30 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	53425355 	.word	0x53425355

08008f40 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f56:	69db      	ldr	r3, [r3, #28]
 8008f58:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d002      	beq.n	8008f6a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d021      	beq.n	8008fac <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008f68:	e028      	b.n	8008fbc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	220a      	movs	r2, #10
 8008f7c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	3363      	adds	r3, #99	; 0x63
 8008f84:	2210      	movs	r2, #16
 8008f86:	2100      	movs	r1, #0
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f004 fcc6 	bl	800d91a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8008faa:	e007      	b.n	8008fbc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff fd83 	bl	8008abc <USBH_MSC_BOT_Process>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8008fba:	bf00      	nop
  }

  return error;
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b086      	sub	sp, #24
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	607a      	str	r2, [r7, #4]
 8008fd2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d002      	beq.n	8008ff2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d027      	beq.n	8009040 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008ff0:	e05f      	b.n	80090b2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2208      	movs	r2, #8
 8008ff6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2280      	movs	r2, #128	; 0x80
 8008ffc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	220a      	movs	r2, #10
 8009004:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	3363      	adds	r3, #99	; 0x63
 800900c:	2210      	movs	r2, #16
 800900e:	2100      	movs	r1, #0
 8009010:	4618      	mov	r0, r3
 8009012:	f004 fc82 	bl	800d91a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2225      	movs	r2, #37	; 0x25
 800901a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2202      	movs	r2, #2
 800902a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f103 0210 	add.w	r2, r3, #16
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800903a:	2301      	movs	r3, #1
 800903c:	75fb      	strb	r3, [r7, #23]
      break;
 800903e:	e038      	b.n	80090b2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009040:	7afb      	ldrb	r3, [r7, #11]
 8009042:	4619      	mov	r1, r3
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f7ff fd39 	bl	8008abc <USBH_MSC_BOT_Process>
 800904a:	4603      	mov	r3, r0
 800904c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d12d      	bne.n	80090b0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800905a:	3303      	adds	r3, #3
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009066:	3302      	adds	r3, #2
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	021b      	lsls	r3, r3, #8
 800906c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009074:	3301      	adds	r3, #1
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800907a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	061b      	lsls	r3, r3, #24
 8009086:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009092:	3307      	adds	r3, #7
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	b29a      	uxth	r2, r3
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909e:	3306      	adds	r3, #6
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	021b      	lsls	r3, r3, #8
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	4313      	orrs	r3, r2
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	809a      	strh	r2, [r3, #4]
      break;
 80090b0:	bf00      	nop
  }

  return error;
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	460b      	mov	r3, r1
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80090ca:	2302      	movs	r3, #2
 80090cc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d002      	beq.n	80090e8 <USBH_MSC_SCSI_Inquiry+0x2c>
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d03d      	beq.n	8009162 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80090e6:	e089      	b.n	80091fc <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	2224      	movs	r2, #36	; 0x24
 80090ec:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2280      	movs	r2, #128	; 0x80
 80090f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	220a      	movs	r2, #10
 80090fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	3363      	adds	r3, #99	; 0x63
 8009102:	220a      	movs	r2, #10
 8009104:	2100      	movs	r1, #0
 8009106:	4618      	mov	r0, r3
 8009108:	f004 fc07 	bl	800d91a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	2212      	movs	r2, #18
 8009110:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009114:	7afb      	ldrb	r3, [r7, #11]
 8009116:	015b      	lsls	r3, r3, #5
 8009118:	b2da      	uxtb	r2, r3
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2224      	movs	r2, #36	; 0x24
 8009134:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f103 0210 	add.w	r2, r3, #16
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800915c:	2301      	movs	r3, #1
 800915e:	75fb      	strb	r3, [r7, #23]
      break;
 8009160:	e04c      	b.n	80091fc <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009162:	7afb      	ldrb	r3, [r7, #11]
 8009164:	4619      	mov	r1, r3
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f7ff fca8 	bl	8008abc <USBH_MSC_BOT_Process>
 800916c:	4603      	mov	r3, r0
 800916e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009170:	7dfb      	ldrb	r3, [r7, #23]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d141      	bne.n	80091fa <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009176:	2222      	movs	r2, #34	; 0x22
 8009178:	2100      	movs	r1, #0
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f004 fbcd 	bl	800d91a <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	f003 031f 	and.w	r3, r3, #31
 800918c:	b2da      	uxtb	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	095b      	lsrs	r3, r3, #5
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a8:	3301      	adds	r3, #1
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	b25b      	sxtb	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	da03      	bge.n	80091ba <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	709a      	strb	r2, [r3, #2]
 80091b8:	e002      	b.n	80091c0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	1cd8      	adds	r0, r3, #3
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091ca:	3308      	adds	r3, #8
 80091cc:	2208      	movs	r2, #8
 80091ce:	4619      	mov	r1, r3
 80091d0:	f004 fb98 	bl	800d904 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f103 000c 	add.w	r0, r3, #12
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e0:	3310      	adds	r3, #16
 80091e2:	2210      	movs	r2, #16
 80091e4:	4619      	mov	r1, r3
 80091e6:	f004 fb8d 	bl	800d904 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	331d      	adds	r3, #29
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80091f4:	3220      	adds	r2, #32
 80091f6:	6812      	ldr	r2, [r2, #0]
 80091f8:	601a      	str	r2, [r3, #0]
      break;
 80091fa:	bf00      	nop
  }

  return error;
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b086      	sub	sp, #24
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	460b      	mov	r3, r1
 8009210:	607a      	str	r2, [r7, #4]
 8009212:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009214:	2302      	movs	r3, #2
 8009216:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009228:	2b01      	cmp	r3, #1
 800922a:	d002      	beq.n	8009232 <USBH_MSC_SCSI_RequestSense+0x2c>
 800922c:	2b02      	cmp	r3, #2
 800922e:	d03d      	beq.n	80092ac <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009230:	e05d      	b.n	80092ee <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	220e      	movs	r2, #14
 8009236:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	2280      	movs	r2, #128	; 0x80
 800923c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	220a      	movs	r2, #10
 8009244:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	3363      	adds	r3, #99	; 0x63
 800924c:	2210      	movs	r2, #16
 800924e:	2100      	movs	r1, #0
 8009250:	4618      	mov	r0, r3
 8009252:	f004 fb62 	bl	800d91a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2203      	movs	r2, #3
 800925a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800925e:	7afb      	ldrb	r3, [r7, #11]
 8009260:	015b      	lsls	r3, r3, #5
 8009262:	b2da      	uxtb	r2, r3
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	220e      	movs	r2, #14
 800927e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2202      	movs	r2, #2
 8009296:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f103 0210 	add.w	r2, r3, #16
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80092a6:	2301      	movs	r3, #1
 80092a8:	75fb      	strb	r3, [r7, #23]
      break;
 80092aa:	e020      	b.n	80092ee <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80092ac:	7afb      	ldrb	r3, [r7, #11]
 80092ae:	4619      	mov	r1, r3
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f7ff fc03 	bl	8008abc <USBH_MSC_BOT_Process>
 80092b6:	4603      	mov	r3, r0
 80092b8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d115      	bne.n	80092ec <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092c6:	3302      	adds	r3, #2
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	f003 030f 	and.w	r3, r3, #15
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092da:	7b1a      	ldrb	r2, [r3, #12]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092e6:	7b5a      	ldrb	r2, [r3, #13]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	709a      	strb	r2, [r3, #2]
      break;
 80092ec:	bf00      	nop
  }

  return error;
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	607a      	str	r2, [r7, #4]
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	460b      	mov	r3, r1
 8009306:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009308:	2302      	movs	r3, #2
 800930a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800931c:	2b01      	cmp	r3, #1
 800931e:	d002      	beq.n	8009326 <USBH_MSC_SCSI_Write+0x2e>
 8009320:	2b02      	cmp	r3, #2
 8009322:	d047      	beq.n	80093b4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009324:	e04e      	b.n	80093c4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800932c:	461a      	mov	r2, r3
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	fb03 f202 	mul.w	r2, r3, r2
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	220a      	movs	r2, #10
 8009344:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	3363      	adds	r3, #99	; 0x63
 800934c:	2210      	movs	r2, #16
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f004 fae2 	bl	800d91a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	222a      	movs	r2, #42	; 0x2a
 800935a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800935e:	79fa      	ldrb	r2, [r7, #7]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009366:	79ba      	ldrb	r2, [r7, #6]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800936e:	797a      	ldrb	r2, [r7, #5]
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009376:	1d3b      	adds	r3, r7, #4
 8009378:	781a      	ldrb	r2, [r3, #0]
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009380:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800938a:	f107 0320 	add.w	r3, r7, #32
 800938e:	781a      	ldrb	r2, [r3, #0]
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2202      	movs	r2, #2
 80093a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80093ae:	2301      	movs	r3, #1
 80093b0:	75fb      	strb	r3, [r7, #23]
      break;
 80093b2:	e007      	b.n	80093c4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80093b4:	7afb      	ldrb	r3, [r7, #11]
 80093b6:	4619      	mov	r1, r3
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f7ff fb7f 	bl	8008abc <USBH_MSC_BOT_Process>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]
      break;
 80093c2:	bf00      	nop
  }

  return error;
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b086      	sub	sp, #24
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	603b      	str	r3, [r7, #0]
 80093da:	460b      	mov	r3, r1
 80093dc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80093de:	2302      	movs	r3, #2
 80093e0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d002      	beq.n	80093fc <USBH_MSC_SCSI_Read+0x2e>
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d047      	beq.n	800948a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80093fa:	e04e      	b.n	800949a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009402:	461a      	mov	r2, r3
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	fb03 f202 	mul.w	r2, r3, r2
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2280      	movs	r2, #128	; 0x80
 8009412:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	220a      	movs	r2, #10
 800941a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	3363      	adds	r3, #99	; 0x63
 8009422:	2210      	movs	r2, #16
 8009424:	2100      	movs	r1, #0
 8009426:	4618      	mov	r0, r3
 8009428:	f004 fa77 	bl	800d91a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2228      	movs	r2, #40	; 0x28
 8009430:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009434:	79fa      	ldrb	r2, [r7, #7]
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800943c:	79ba      	ldrb	r2, [r7, #6]
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009444:	797a      	ldrb	r2, [r7, #5]
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800944c:	1d3b      	adds	r3, r7, #4
 800944e:	781a      	ldrb	r2, [r3, #0]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009456:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009460:	f107 0320 	add.w	r3, r7, #32
 8009464:	781a      	ldrb	r2, [r3, #0]
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009484:	2301      	movs	r3, #1
 8009486:	75fb      	strb	r3, [r7, #23]
      break;
 8009488:	e007      	b.n	800949a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800948a:	7afb      	ldrb	r3, [r7, #11]
 800948c:	4619      	mov	r1, r3
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f7ff fb14 	bl	8008abc <USBH_MSC_BOT_Process>
 8009494:	4603      	mov	r3, r0
 8009496:	75fb      	strb	r3, [r7, #23]
      break;
 8009498:	bf00      	nop
  }

  return error;
 800949a:	7dfb      	ldrb	r3, [r7, #23]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80094b8:	2302      	movs	r3, #2
 80094ba:	e029      	b.n	8009510 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	79fa      	ldrb	r2, [r7, #7]
 80094c0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 f81f 	bl	8009518 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f003 ffbf 	bl	800d48c <USBH_LL_Init>

  return USBH_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009524:	2300      	movs	r3, #0
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	e009      	b.n	800953e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	33e0      	adds	r3, #224	; 0xe0
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	2200      	movs	r2, #0
 8009536:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3301      	adds	r3, #1
 800953c:	60fb      	str	r3, [r7, #12]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b0e      	cmp	r3, #14
 8009542:	d9f2      	bls.n	800952a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009544:	2300      	movs	r3, #0
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	e009      	b.n	800955e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	4413      	add	r3, r2
 8009550:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3301      	adds	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009564:	d3f1      	bcc.n	800954a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2240      	movs	r2, #64	; 0x40
 800958a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d016      	beq.n	8009602 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10e      	bne.n	80095fc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095e4:	1c59      	adds	r1, r3, #1
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	33de      	adds	r3, #222	; 0xde
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
 80095fa:	e004      	b.n	8009606 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80095fc:	2302      	movs	r3, #2
 80095fe:	73fb      	strb	r3, [r7, #15]
 8009600:	e001      	b.n	8009606 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009602:	2302      	movs	r3, #2
 8009604:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009606:	7bfb      	ldrb	r3, [r7, #15]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800962a:	78fa      	ldrb	r2, [r7, #3]
 800962c:	429a      	cmp	r2, r3
 800962e:	d204      	bcs.n	800963a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009638:	e001      	b.n	800963e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800963a:	2302      	movs	r3, #2
 800963c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800963e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	4608      	mov	r0, r1
 8009656:	4611      	mov	r1, r2
 8009658:	461a      	mov	r2, r3
 800965a:	4603      	mov	r3, r0
 800965c:	70fb      	strb	r3, [r7, #3]
 800965e:	460b      	mov	r3, r1
 8009660:	70bb      	strb	r3, [r7, #2]
 8009662:	4613      	mov	r3, r2
 8009664:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800966a:	2300      	movs	r3, #0
 800966c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009674:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009676:	e025      	b.n	80096c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009678:	7dfb      	ldrb	r3, [r7, #23]
 800967a:	221a      	movs	r2, #26
 800967c:	fb02 f303 	mul.w	r3, r2, r3
 8009680:	3308      	adds	r3, #8
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	4413      	add	r3, r2
 8009686:	3302      	adds	r3, #2
 8009688:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	795b      	ldrb	r3, [r3, #5]
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	429a      	cmp	r2, r3
 8009692:	d002      	beq.n	800969a <USBH_FindInterface+0x4e>
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	2bff      	cmp	r3, #255	; 0xff
 8009698:	d111      	bne.n	80096be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800969e:	78ba      	ldrb	r2, [r7, #2]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d002      	beq.n	80096aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80096a4:	78bb      	ldrb	r3, [r7, #2]
 80096a6:	2bff      	cmp	r3, #255	; 0xff
 80096a8:	d109      	bne.n	80096be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80096ae:	787a      	ldrb	r2, [r7, #1]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d002      	beq.n	80096ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80096b4:	787b      	ldrb	r3, [r7, #1]
 80096b6:	2bff      	cmp	r3, #255	; 0xff
 80096b8:	d101      	bne.n	80096be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	e006      	b.n	80096cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
 80096c0:	3301      	adds	r3, #1
 80096c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d9d6      	bls.n	8009678 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80096ca:	23ff      	movs	r3, #255	; 0xff
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	371c      	adds	r7, #28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f003 ff0f 	bl	800d504 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80096e6:	2101      	movs	r1, #1
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f004 f826 	bl	800d73a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af04      	add	r7, sp, #16
 80096fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009700:	2302      	movs	r3, #2
 8009702:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b01      	cmp	r3, #1
 8009712:	d102      	bne.n	800971a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2203      	movs	r2, #3
 8009718:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b0b      	cmp	r3, #11
 8009722:	f200 81b3 	bhi.w	8009a8c <USBH_Process+0x394>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <USBH_Process+0x34>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	0800975d 	.word	0x0800975d
 8009730:	0800978f 	.word	0x0800978f
 8009734:	080097f7 	.word	0x080097f7
 8009738:	08009a27 	.word	0x08009a27
 800973c:	08009a8d 	.word	0x08009a8d
 8009740:	0800989b 	.word	0x0800989b
 8009744:	080099cd 	.word	0x080099cd
 8009748:	080098d1 	.word	0x080098d1
 800974c:	080098f1 	.word	0x080098f1
 8009750:	08009911 	.word	0x08009911
 8009754:	0800993f 	.word	0x0800993f
 8009758:	08009a0f 	.word	0x08009a0f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 8193 	beq.w	8009a90 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009770:	20c8      	movs	r0, #200	; 0xc8
 8009772:	f004 f856 	bl	800d822 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f003 ff1f 	bl	800d5ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800978c:	e180      	b.n	8009a90 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009794:	2b01      	cmp	r3, #1
 8009796:	d107      	bne.n	80097a8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097a6:	e182      	b.n	8009aae <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80097ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097b2:	d914      	bls.n	80097de <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097ba:	3301      	adds	r3, #1
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d903      	bls.n	80097d6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	220d      	movs	r2, #13
 80097d2:	701a      	strb	r2, [r3, #0]
      break;
 80097d4:	e16b      	b.n	8009aae <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	701a      	strb	r2, [r3, #0]
      break;
 80097dc:	e167      	b.n	8009aae <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80097e4:	f103 020a 	add.w	r2, r3, #10
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80097ee:	200a      	movs	r0, #10
 80097f0:	f004 f817 	bl	800d822 <USBH_Delay>
      break;
 80097f4:	e15b      	b.n	8009aae <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d005      	beq.n	800980c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009806:	2104      	movs	r1, #4
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800980c:	2064      	movs	r0, #100	; 0x64
 800980e:	f004 f808 	bl	800d822 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f003 feac 	bl	800d570 <USBH_LL_GetSpeed>
 8009818:	4603      	mov	r3, r0
 800981a:	461a      	mov	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2205      	movs	r2, #5
 8009826:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009828:	2100      	movs	r1, #0
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 f931 	bl	800aa92 <USBH_AllocPipe>
 8009830:	4603      	mov	r3, r0
 8009832:	461a      	mov	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009838:	2180      	movs	r1, #128	; 0x80
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f001 f929 	bl	800aa92 <USBH_AllocPipe>
 8009840:	4603      	mov	r3, r0
 8009842:	461a      	mov	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	7919      	ldrb	r1, [r3, #4]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800985c:	b292      	uxth	r2, r2
 800985e:	9202      	str	r2, [sp, #8]
 8009860:	2200      	movs	r2, #0
 8009862:	9201      	str	r2, [sp, #4]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	4603      	mov	r3, r0
 8009868:	2280      	movs	r2, #128	; 0x80
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 f8e2 	bl	800aa34 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	7959      	ldrb	r1, [r3, #5]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009884:	b292      	uxth	r2, r2
 8009886:	9202      	str	r2, [sp, #8]
 8009888:	2200      	movs	r2, #0
 800988a:	9201      	str	r2, [sp, #4]
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	4603      	mov	r3, r0
 8009890:	2200      	movs	r2, #0
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f001 f8ce 	bl	800aa34 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009898:	e109      	b.n	8009aae <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f90c 	bl	8009ab8 <USBH_HandleEnum>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f040 80f3 	bne.w	8009a94 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d103      	bne.n	80098c8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2208      	movs	r2, #8
 80098c4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80098c6:	e0e5      	b.n	8009a94 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2207      	movs	r2, #7
 80098cc:	701a      	strb	r2, [r3, #0]
      break;
 80098ce:	e0e1      	b.n	8009a94 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 80de 	beq.w	8009a98 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098e2:	2101      	movs	r1, #1
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2208      	movs	r2, #8
 80098ec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80098ee:	e0d3      	b.n	8009a98 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fc20 	bl	800a140 <USBH_SetCfg>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	f040 80ca 	bne.w	8009a9c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2209      	movs	r2, #9
 800990c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800990e:	e0c5      	b.n	8009a9c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009916:	f003 0320 	and.w	r3, r3, #32
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00b      	beq.n	8009936 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800991e:	2101      	movs	r1, #1
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fc30 	bl	800a186 <USBH_SetFeature>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	f040 80b9 	bne.w	8009aa0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	220a      	movs	r2, #10
 8009932:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009934:	e0b4      	b.n	8009aa0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	220a      	movs	r2, #10
 800993a:	701a      	strb	r2, [r3, #0]
      break;
 800993c:	e0b0      	b.n	8009aa0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 80ad 	beq.w	8009aa4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009952:	2300      	movs	r3, #0
 8009954:	73fb      	strb	r3, [r7, #15]
 8009956:	e016      	b.n	8009986 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009958:	7bfa      	ldrb	r2, [r7, #15]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	32de      	adds	r2, #222	; 0xde
 800995e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009962:	791a      	ldrb	r2, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800996a:	429a      	cmp	r2, r3
 800996c:	d108      	bne.n	8009980 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800996e:	7bfa      	ldrb	r2, [r7, #15]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	32de      	adds	r2, #222	; 0xde
 8009974:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800997e:	e005      	b.n	800998c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	3301      	adds	r3, #1
 8009984:	73fb      	strb	r3, [r7, #15]
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d0e5      	beq.n	8009958 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009992:	2b00      	cmp	r3, #0
 8009994:	d016      	beq.n	80099c4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	4798      	blx	r3
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d109      	bne.n	80099bc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2206      	movs	r2, #6
 80099ac:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099b4:	2103      	movs	r1, #3
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80099ba:	e073      	b.n	8009aa4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	220d      	movs	r2, #13
 80099c0:	701a      	strb	r2, [r3, #0]
      break;
 80099c2:	e06f      	b.n	8009aa4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	220d      	movs	r2, #13
 80099c8:	701a      	strb	r2, [r3, #0]
      break;
 80099ca:	e06b      	b.n	8009aa4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d017      	beq.n	8009a06 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	4798      	blx	r3
 80099e2:	4603      	mov	r3, r0
 80099e4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80099e6:	7bbb      	ldrb	r3, [r7, #14]
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d103      	bne.n	80099f6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	220b      	movs	r2, #11
 80099f2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80099f4:	e058      	b.n	8009aa8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d154      	bne.n	8009aa8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	220d      	movs	r2, #13
 8009a02:	701a      	strb	r2, [r3, #0]
      break;
 8009a04:	e050      	b.n	8009aa8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	220d      	movs	r2, #13
 8009a0a:	701a      	strb	r2, [r3, #0]
      break;
 8009a0c:	e04c      	b.n	8009aa8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d049      	beq.n	8009aac <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	4798      	blx	r3
      }
      break;
 8009a24:	e042      	b.n	8009aac <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff fd72 	bl	8009518 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d009      	beq.n	8009a52 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d005      	beq.n	8009a68 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a62:	2105      	movs	r1, #5
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d107      	bne.n	8009a84 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff fe2b 	bl	80096d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009a82:	e014      	b.n	8009aae <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f003 fd3d 	bl	800d504 <USBH_LL_Start>
      break;
 8009a8a:	e010      	b.n	8009aae <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009a8c:	bf00      	nop
 8009a8e:	e00e      	b.n	8009aae <USBH_Process+0x3b6>
      break;
 8009a90:	bf00      	nop
 8009a92:	e00c      	b.n	8009aae <USBH_Process+0x3b6>
      break;
 8009a94:	bf00      	nop
 8009a96:	e00a      	b.n	8009aae <USBH_Process+0x3b6>
    break;
 8009a98:	bf00      	nop
 8009a9a:	e008      	b.n	8009aae <USBH_Process+0x3b6>
      break;
 8009a9c:	bf00      	nop
 8009a9e:	e006      	b.n	8009aae <USBH_Process+0x3b6>
      break;
 8009aa0:	bf00      	nop
 8009aa2:	e004      	b.n	8009aae <USBH_Process+0x3b6>
      break;
 8009aa4:	bf00      	nop
 8009aa6:	e002      	b.n	8009aae <USBH_Process+0x3b6>
      break;
 8009aa8:	bf00      	nop
 8009aaa:	e000      	b.n	8009aae <USBH_Process+0x3b6>
      break;
 8009aac:	bf00      	nop
  }
  return USBH_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af04      	add	r7, sp, #16
 8009abe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	2b07      	cmp	r3, #7
 8009ace:	f200 81c1 	bhi.w	8009e54 <USBH_HandleEnum+0x39c>
 8009ad2:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <USBH_HandleEnum+0x20>)
 8009ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad8:	08009af9 	.word	0x08009af9
 8009adc:	08009bb7 	.word	0x08009bb7
 8009ae0:	08009c21 	.word	0x08009c21
 8009ae4:	08009caf 	.word	0x08009caf
 8009ae8:	08009d19 	.word	0x08009d19
 8009aec:	08009d89 	.word	0x08009d89
 8009af0:	08009dcf 	.word	0x08009dcf
 8009af4:	08009e15 	.word	0x08009e15
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009af8:	2108      	movs	r1, #8
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa50 	bl	8009fa0 <USBH_Get_DevDesc>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d130      	bne.n	8009b6c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	7919      	ldrb	r1, [r3, #4]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b2e:	b292      	uxth	r2, r2
 8009b30:	9202      	str	r2, [sp, #8]
 8009b32:	2200      	movs	r2, #0
 8009b34:	9201      	str	r2, [sp, #4]
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2280      	movs	r2, #128	; 0x80
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 ff79 	bl	800aa34 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	7959      	ldrb	r1, [r3, #5]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b56:	b292      	uxth	r2, r2
 8009b58:	9202      	str	r2, [sp, #8]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	9201      	str	r2, [sp, #4]
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	4603      	mov	r3, r0
 8009b62:	2200      	movs	r2, #0
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 ff65 	bl	800aa34 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b6a:	e175      	b.n	8009e58 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b6c:	7bbb      	ldrb	r3, [r7, #14]
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	f040 8172 	bne.w	8009e58 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d903      	bls.n	8009b96 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	220d      	movs	r2, #13
 8009b92:	701a      	strb	r2, [r3, #0]
      break;
 8009b94:	e160      	b.n	8009e58 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	795b      	ldrb	r3, [r3, #5]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 ff99 	bl	800aad4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	791b      	ldrb	r3, [r3, #4]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 ff93 	bl	800aad4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
      break;
 8009bb4:	e150      	b.n	8009e58 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009bb6:	2112      	movs	r1, #18
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f9f1 	bl	8009fa0 <USBH_Get_DevDesc>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d103      	bne.n	8009bd0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009bce:	e145      	b.n	8009e5c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	f040 8142 	bne.w	8009e5c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bde:	3301      	adds	r3, #1
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d903      	bls.n	8009bfa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	220d      	movs	r2, #13
 8009bf6:	701a      	strb	r2, [r3, #0]
      break;
 8009bf8:	e130      	b.n	8009e5c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	795b      	ldrb	r3, [r3, #5]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 ff67 	bl	800aad4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	791b      	ldrb	r3, [r3, #4]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 ff61 	bl	800aad4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	701a      	strb	r2, [r3, #0]
      break;
 8009c1e:	e11d      	b.n	8009e5c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009c20:	2101      	movs	r1, #1
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa68 	bl	800a0f8 <USBH_SetAddress>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d132      	bne.n	8009c98 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009c32:	2002      	movs	r0, #2
 8009c34:	f003 fdf5 	bl	800d822 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2203      	movs	r2, #3
 8009c44:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7919      	ldrb	r1, [r3, #4]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c5a:	b292      	uxth	r2, r2
 8009c5c:	9202      	str	r2, [sp, #8]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	9201      	str	r2, [sp, #4]
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	4603      	mov	r3, r0
 8009c66:	2280      	movs	r2, #128	; 0x80
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fee3 	bl	800aa34 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	7959      	ldrb	r1, [r3, #5]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c82:	b292      	uxth	r2, r2
 8009c84:	9202      	str	r2, [sp, #8]
 8009c86:	2200      	movs	r2, #0
 8009c88:	9201      	str	r2, [sp, #4]
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2200      	movs	r2, #0
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fecf 	bl	800aa34 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009c96:	e0e3      	b.n	8009e60 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	2b03      	cmp	r3, #3
 8009c9c:	f040 80e0 	bne.w	8009e60 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	220d      	movs	r2, #13
 8009ca4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	705a      	strb	r2, [r3, #1]
      break;
 8009cac:	e0d8      	b.n	8009e60 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009cae:	2109      	movs	r1, #9
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f99d 	bl	8009ff0 <USBH_Get_CfgDesc>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d103      	bne.n	8009cc8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2204      	movs	r2, #4
 8009cc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009cc6:	e0cd      	b.n	8009e64 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cc8:	7bbb      	ldrb	r3, [r7, #14]
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	f040 80ca 	bne.w	8009e64 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ce6:	2b03      	cmp	r3, #3
 8009ce8:	d903      	bls.n	8009cf2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	220d      	movs	r2, #13
 8009cee:	701a      	strb	r2, [r3, #0]
      break;
 8009cf0:	e0b8      	b.n	8009e64 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	795b      	ldrb	r3, [r3, #5]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 feeb 	bl	800aad4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	791b      	ldrb	r3, [r3, #4]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fee5 	bl	800aad4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	701a      	strb	r2, [r3, #0]
      break;
 8009d16:	e0a5      	b.n	8009e64 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f965 	bl	8009ff0 <USBH_Get_CfgDesc>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d103      	bne.n	8009d38 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2205      	movs	r2, #5
 8009d34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d36:	e097      	b.n	8009e68 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	f040 8094 	bne.w	8009e68 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d46:	3301      	adds	r3, #1
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d903      	bls.n	8009d62 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	220d      	movs	r2, #13
 8009d5e:	701a      	strb	r2, [r3, #0]
      break;
 8009d60:	e082      	b.n	8009e68 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	795b      	ldrb	r3, [r3, #5]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 feb3 	bl	800aad4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	791b      	ldrb	r3, [r3, #4]
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fead 	bl	800aad4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	701a      	strb	r2, [r3, #0]
      break;
 8009d86:	e06f      	b.n	8009e68 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d019      	beq.n	8009dc6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d9e:	23ff      	movs	r3, #255	; 0xff
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f949 	bl	800a038 <USBH_Get_StringDesc>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d103      	bne.n	8009db8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2206      	movs	r2, #6
 8009db4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009db6:	e059      	b.n	8009e6c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d156      	bne.n	8009e6c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2206      	movs	r2, #6
 8009dc2:	705a      	strb	r2, [r3, #1]
      break;
 8009dc4:	e052      	b.n	8009e6c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2206      	movs	r2, #6
 8009dca:	705a      	strb	r2, [r3, #1]
      break;
 8009dcc:	e04e      	b.n	8009e6c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d019      	beq.n	8009e0c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009de4:	23ff      	movs	r3, #255	; 0xff
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f926 	bl	800a038 <USBH_Get_StringDesc>
 8009dec:	4603      	mov	r3, r0
 8009dee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d103      	bne.n	8009dfe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2207      	movs	r2, #7
 8009dfa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009dfc:	e038      	b.n	8009e70 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d135      	bne.n	8009e70 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2207      	movs	r2, #7
 8009e08:	705a      	strb	r2, [r3, #1]
      break;
 8009e0a:	e031      	b.n	8009e70 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2207      	movs	r2, #7
 8009e10:	705a      	strb	r2, [r3, #1]
      break;
 8009e12:	e02d      	b.n	8009e70 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d017      	beq.n	8009e4e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e2a:	23ff      	movs	r3, #255	; 0xff
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f903 	bl	800a038 <USBH_Get_StringDesc>
 8009e32:	4603      	mov	r3, r0
 8009e34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009e40:	e018      	b.n	8009e74 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	d115      	bne.n	8009e74 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e4c:	e012      	b.n	8009e74 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	73fb      	strb	r3, [r7, #15]
      break;
 8009e52:	e00f      	b.n	8009e74 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009e54:	bf00      	nop
 8009e56:	e00e      	b.n	8009e76 <USBH_HandleEnum+0x3be>
      break;
 8009e58:	bf00      	nop
 8009e5a:	e00c      	b.n	8009e76 <USBH_HandleEnum+0x3be>
      break;
 8009e5c:	bf00      	nop
 8009e5e:	e00a      	b.n	8009e76 <USBH_HandleEnum+0x3be>
      break;
 8009e60:	bf00      	nop
 8009e62:	e008      	b.n	8009e76 <USBH_HandleEnum+0x3be>
      break;
 8009e64:	bf00      	nop
 8009e66:	e006      	b.n	8009e76 <USBH_HandleEnum+0x3be>
      break;
 8009e68:	bf00      	nop
 8009e6a:	e004      	b.n	8009e76 <USBH_HandleEnum+0x3be>
      break;
 8009e6c:	bf00      	nop
 8009e6e:	e002      	b.n	8009e76 <USBH_HandleEnum+0x3be>
      break;
 8009e70:	bf00      	nop
 8009e72:	e000      	b.n	8009e76 <USBH_HandleEnum+0x3be>
      break;
 8009e74:	bf00      	nop
  }
  return Status;
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009e92:	bf00      	nop
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eac:	1c5a      	adds	r2, r3, #1
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f804 	bl	8009ec2 <USBH_HandleSof>
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b0b      	cmp	r3, #11
 8009ed2:	d10a      	bne.n	8009eea <USBH_HandleSof+0x28>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d005      	beq.n	8009eea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	4798      	blx	r3
  }
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009f02:	bf00      	nop
}
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009f1e:	bf00      	nop
}
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f003 fade 	bl	800d53a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	791b      	ldrb	r3, [r3, #4]
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fda5 	bl	800aad4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	795b      	ldrb	r3, [r3, #5]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fd9f 	bl	800aad4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af02      	add	r7, sp, #8
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009fb2:	78fb      	ldrb	r3, [r7, #3]
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f864 	bl	800a08e <USBH_GetDescriptor>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	73fb      	strb	r3, [r7, #15]
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fdc:	78fa      	ldrb	r2, [r7, #3]
 8009fde:	b292      	uxth	r2, r2
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	f000 f918 	bl	800a216 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af02      	add	r7, sp, #8
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	331c      	adds	r3, #28
 800a000:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a002:	887b      	ldrh	r3, [r7, #2]
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a00c:	2100      	movs	r1, #0
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f83d 	bl	800a08e <USBH_GetDescriptor>
 800a014:	4603      	mov	r3, r0
 800a016:	72fb      	strb	r3, [r7, #11]
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d107      	bne.n	800a02e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a024:	887a      	ldrh	r2, [r7, #2]
 800a026:	68f9      	ldr	r1, [r7, #12]
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 f964 	bl	800a2f6 <USBH_ParseCfgDesc>
  }

  return status;
 800a02e:	7afb      	ldrb	r3, [r7, #11]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af02      	add	r7, sp, #8
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	461a      	mov	r2, r3
 800a044:	460b      	mov	r3, r1
 800a046:	72fb      	strb	r3, [r7, #11]
 800a048:	4613      	mov	r3, r2
 800a04a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a04c:	7afb      	ldrb	r3, [r7, #11]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a054:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a05c:	893b      	ldrh	r3, [r7, #8]
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	460b      	mov	r3, r1
 800a062:	2100      	movs	r1, #0
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f812 	bl	800a08e <USBH_GetDescriptor>
 800a06a:	4603      	mov	r3, r0
 800a06c:	75fb      	strb	r3, [r7, #23]
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d107      	bne.n	800a084 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a07a:	893a      	ldrh	r2, [r7, #8]
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fa37 	bl	800a4f2 <USBH_ParseStringDesc>
  }

  return status;
 800a084:	7dfb      	ldrb	r3, [r7, #23]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	607b      	str	r3, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	72fb      	strb	r3, [r7, #11]
 800a09c:	4613      	mov	r3, r2
 800a09e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	789b      	ldrb	r3, [r3, #2]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d11c      	bne.n	800a0e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a0a8:	7afb      	ldrb	r3, [r7, #11]
 800a0aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2206      	movs	r2, #6
 800a0b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	893a      	ldrh	r2, [r7, #8]
 800a0be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a0c0:	893b      	ldrh	r3, [r7, #8]
 800a0c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a0c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0ca:	d104      	bne.n	800a0d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f240 4209 	movw	r2, #1033	; 0x409
 800a0d2:	829a      	strh	r2, [r3, #20]
 800a0d4:	e002      	b.n	800a0dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	8b3a      	ldrh	r2, [r7, #24]
 800a0e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a0e2:	8b3b      	ldrh	r3, [r7, #24]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 fa50 	bl	800a58e <USBH_CtlReq>
 800a0ee:	4603      	mov	r3, r0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	789b      	ldrb	r3, [r3, #2]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d10f      	bne.n	800a12c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2205      	movs	r2, #5
 800a116:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a12c:	2200      	movs	r2, #0
 800a12e:	2100      	movs	r1, #0
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fa2c 	bl	800a58e <USBH_CtlReq>
 800a136:	4603      	mov	r3, r0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	789b      	ldrb	r3, [r3, #2]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d10e      	bne.n	800a172 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2209      	movs	r2, #9
 800a15e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	887a      	ldrh	r2, [r7, #2]
 800a164:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a172:	2200      	movs	r2, #0
 800a174:	2100      	movs	r1, #0
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa09 	bl	800a58e <USBH_CtlReq>
 800a17c:	4603      	mov	r3, r0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	460b      	mov	r3, r1
 800a190:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	789b      	ldrb	r3, [r3, #2]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d10f      	bne.n	800a1ba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2203      	movs	r2, #3
 800a1a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a1a6:	78fb      	ldrb	r3, [r7, #3]
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2100      	movs	r1, #0
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f9e5 	bl	800a58e <USBH_CtlReq>
 800a1c4:	4603      	mov	r3, r0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	789b      	ldrb	r3, [r3, #2]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d10f      	bne.n	800a202 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2202      	movs	r2, #2
 800a1e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a202:	2200      	movs	r2, #0
 800a204:	2100      	movs	r1, #0
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f9c1 	bl	800a58e <USBH_CtlReq>
 800a20c:	4603      	mov	r3, r0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a216:	b480      	push	{r7}
 800a218:	b085      	sub	sp, #20
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	4613      	mov	r3, r2
 800a222:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	781a      	ldrb	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	785a      	ldrb	r2, [r3, #1]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	3302      	adds	r3, #2
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	3303      	adds	r3, #3
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	b29b      	uxth	r3, r3
 800a244:	021b      	lsls	r3, r3, #8
 800a246:	b29b      	uxth	r3, r3
 800a248:	4313      	orrs	r3, r2
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	791a      	ldrb	r2, [r3, #4]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	795a      	ldrb	r2, [r3, #5]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	799a      	ldrb	r2, [r3, #6]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	79da      	ldrb	r2, [r3, #7]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a270:	88fb      	ldrh	r3, [r7, #6]
 800a272:	2b08      	cmp	r3, #8
 800a274:	d939      	bls.n	800a2ea <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	3308      	adds	r3, #8
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	3309      	adds	r3, #9
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	b29b      	uxth	r3, r3
 800a286:	021b      	lsls	r3, r3, #8
 800a288:	b29b      	uxth	r3, r3
 800a28a:	4313      	orrs	r3, r2
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	330a      	adds	r3, #10
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	b29a      	uxth	r2, r3
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	330b      	adds	r3, #11
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	021b      	lsls	r3, r3, #8
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	330c      	adds	r3, #12
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	330d      	adds	r3, #13
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	021b      	lsls	r3, r3, #8
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	7b9a      	ldrb	r2, [r3, #14]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	7bda      	ldrb	r2, [r3, #15]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	7c1a      	ldrb	r2, [r3, #16]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	7c5a      	ldrb	r2, [r3, #17]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	745a      	strb	r2, [r3, #17]
  }
}
 800a2ea:	bf00      	nop
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b08a      	sub	sp, #40	; 0x28
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	60f8      	str	r0, [r7, #12]
 800a2fe:	60b9      	str	r1, [r7, #8]
 800a300:	4613      	mov	r3, r2
 800a302:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a308:	2300      	movs	r3, #0
 800a30a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a30e:	2300      	movs	r3, #0
 800a310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	781a      	ldrb	r2, [r3, #0]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	785a      	ldrb	r2, [r3, #1]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	3302      	adds	r3, #2
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	b29a      	uxth	r2, r3
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	3303      	adds	r3, #3
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	b29b      	uxth	r3, r3
 800a338:	021b      	lsls	r3, r3, #8
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	4313      	orrs	r3, r2
 800a33e:	b29a      	uxth	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	791a      	ldrb	r2, [r3, #4]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	795a      	ldrb	r2, [r3, #5]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	799a      	ldrb	r2, [r3, #6]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	79da      	ldrb	r2, [r3, #7]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	7a1a      	ldrb	r2, [r3, #8]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a36c:	88fb      	ldrh	r3, [r7, #6]
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d95f      	bls.n	800a432 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a372:	2309      	movs	r3, #9
 800a374:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a376:	2300      	movs	r3, #0
 800a378:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a37a:	e051      	b.n	800a420 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a37c:	f107 0316 	add.w	r3, r7, #22
 800a380:	4619      	mov	r1, r3
 800a382:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a384:	f000 f8e8 	bl	800a558 <USBH_GetNextDesc>
 800a388:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	785b      	ldrb	r3, [r3, #1]
 800a38e:	2b04      	cmp	r3, #4
 800a390:	d146      	bne.n	800a420 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a396:	221a      	movs	r2, #26
 800a398:	fb02 f303 	mul.w	r3, r2, r3
 800a39c:	3308      	adds	r3, #8
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	3302      	adds	r3, #2
 800a3a4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a3a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3a8:	69f8      	ldr	r0, [r7, #28]
 800a3aa:	f000 f846 	bl	800a43a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a3b8:	e022      	b.n	800a400 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a3ba:	f107 0316 	add.w	r3, r7, #22
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3c2:	f000 f8c9 	bl	800a558 <USBH_GetNextDesc>
 800a3c6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	785b      	ldrb	r3, [r3, #1]
 800a3cc:	2b05      	cmp	r3, #5
 800a3ce:	d117      	bne.n	800a400 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a3d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3d4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a3d8:	3201      	adds	r2, #1
 800a3da:	00d2      	lsls	r2, r2, #3
 800a3dc:	211a      	movs	r1, #26
 800a3de:	fb01 f303 	mul.w	r3, r1, r3
 800a3e2:	4413      	add	r3, r2
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a3ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3f0:	69b8      	ldr	r0, [r7, #24]
 800a3f2:	f000 f851 	bl	800a498 <USBH_ParseEPDesc>
            ep_ix++;
 800a3f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	791b      	ldrb	r3, [r3, #4]
 800a404:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a408:	429a      	cmp	r2, r3
 800a40a:	d204      	bcs.n	800a416 <USBH_ParseCfgDesc+0x120>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	885a      	ldrh	r2, [r3, #2]
 800a410:	8afb      	ldrh	r3, [r7, #22]
 800a412:	429a      	cmp	r2, r3
 800a414:	d8d1      	bhi.n	800a3ba <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a416:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a41a:	3301      	adds	r3, #1
 800a41c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a424:	2b01      	cmp	r3, #1
 800a426:	d804      	bhi.n	800a432 <USBH_ParseCfgDesc+0x13c>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	885a      	ldrh	r2, [r3, #2]
 800a42c:	8afb      	ldrh	r3, [r7, #22]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d8a4      	bhi.n	800a37c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a432:	bf00      	nop
 800a434:	3728      	adds	r7, #40	; 0x28
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	781a      	ldrb	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	785a      	ldrb	r2, [r3, #1]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	789a      	ldrb	r2, [r3, #2]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	78da      	ldrb	r2, [r3, #3]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	791a      	ldrb	r2, [r3, #4]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	795a      	ldrb	r2, [r3, #5]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	799a      	ldrb	r2, [r3, #6]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	79da      	ldrb	r2, [r3, #7]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	7a1a      	ldrb	r2, [r3, #8]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	721a      	strb	r2, [r3, #8]
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781a      	ldrb	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	785a      	ldrb	r2, [r3, #1]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	789a      	ldrb	r2, [r3, #2]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	78da      	ldrb	r2, [r3, #3]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	3305      	adds	r3, #5
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	021b      	lsls	r3, r3, #8
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	799a      	ldrb	r2, [r3, #6]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	719a      	strb	r2, [r3, #6]
}
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b087      	sub	sp, #28
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	3301      	adds	r3, #1
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b03      	cmp	r3, #3
 800a508:	d120      	bne.n	800a54c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	1e9a      	subs	r2, r3, #2
 800a510:	88fb      	ldrh	r3, [r7, #6]
 800a512:	4293      	cmp	r3, r2
 800a514:	bf28      	it	cs
 800a516:	4613      	movcs	r3, r2
 800a518:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3302      	adds	r3, #2
 800a51e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a520:	2300      	movs	r3, #0
 800a522:	82fb      	strh	r3, [r7, #22]
 800a524:	e00b      	b.n	800a53e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a526:	8afb      	ldrh	r3, [r7, #22]
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	4413      	add	r3, r2
 800a52c:	781a      	ldrb	r2, [r3, #0]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	3301      	adds	r3, #1
 800a536:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a538:	8afb      	ldrh	r3, [r7, #22]
 800a53a:	3302      	adds	r3, #2
 800a53c:	82fb      	strh	r3, [r7, #22]
 800a53e:	8afa      	ldrh	r2, [r7, #22]
 800a540:	8abb      	ldrh	r3, [r7, #20]
 800a542:	429a      	cmp	r2, r3
 800a544:	d3ef      	bcc.n	800a526 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	2200      	movs	r2, #0
 800a54a:	701a      	strb	r2, [r3, #0]
  }
}
 800a54c:	bf00      	nop
 800a54e:	371c      	adds	r7, #28
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	881a      	ldrh	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	4413      	add	r3, r2
 800a56e:	b29a      	uxth	r2, r3
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4413      	add	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a580:	68fb      	ldr	r3, [r7, #12]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b086      	sub	sp, #24
 800a592:	af00      	add	r7, sp, #0
 800a594:	60f8      	str	r0, [r7, #12]
 800a596:	60b9      	str	r1, [r7, #8]
 800a598:	4613      	mov	r3, r2
 800a59a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a59c:	2301      	movs	r3, #1
 800a59e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	789b      	ldrb	r3, [r3, #2]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d002      	beq.n	800a5ae <USBH_CtlReq+0x20>
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d00f      	beq.n	800a5cc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a5ac:	e027      	b.n	800a5fe <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	88fa      	ldrh	r2, [r7, #6]
 800a5b8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a5ca:	e018      	b.n	800a5fe <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 f81b 	bl	800a608 <USBH_HandleControl>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <USBH_CtlReq+0x54>
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d106      	bne.n	800a5f0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	761a      	strb	r2, [r3, #24]
      break;
 800a5ee:	e005      	b.n	800a5fc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d102      	bne.n	800a5fc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	709a      	strb	r2, [r3, #2]
      break;
 800a5fc:	bf00      	nop
  }
  return status;
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3718      	adds	r7, #24
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af02      	add	r7, sp, #8
 800a60e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a610:	2301      	movs	r3, #1
 800a612:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a614:	2300      	movs	r3, #0
 800a616:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	7e1b      	ldrb	r3, [r3, #24]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	2b0a      	cmp	r3, #10
 800a620:	f200 8158 	bhi.w	800a8d4 <USBH_HandleControl+0x2cc>
 800a624:	a201      	add	r2, pc, #4	; (adr r2, 800a62c <USBH_HandleControl+0x24>)
 800a626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62a:	bf00      	nop
 800a62c:	0800a659 	.word	0x0800a659
 800a630:	0800a673 	.word	0x0800a673
 800a634:	0800a6dd 	.word	0x0800a6dd
 800a638:	0800a703 	.word	0x0800a703
 800a63c:	0800a73b 	.word	0x0800a73b
 800a640:	0800a767 	.word	0x0800a767
 800a644:	0800a7b9 	.word	0x0800a7b9
 800a648:	0800a7db 	.word	0x0800a7db
 800a64c:	0800a817 	.word	0x0800a817
 800a650:	0800a83f 	.word	0x0800a83f
 800a654:	0800a87d 	.word	0x0800a87d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f103 0110 	add.w	r1, r3, #16
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	795b      	ldrb	r3, [r3, #5]
 800a662:	461a      	mov	r2, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f945 	bl	800a8f4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2202      	movs	r2, #2
 800a66e:	761a      	strb	r2, [r3, #24]
      break;
 800a670:	e13b      	b.n	800a8ea <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	795b      	ldrb	r3, [r3, #5]
 800a676:	4619      	mov	r1, r3
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f003 f84b 	bl	800d714 <USBH_LL_GetURBState>
 800a67e:	4603      	mov	r3, r0
 800a680:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d11e      	bne.n	800a6c6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	7c1b      	ldrb	r3, [r3, #16]
 800a68c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a690:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	8adb      	ldrh	r3, [r3, #22]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a69a:	7b7b      	ldrb	r3, [r7, #13]
 800a69c:	2b80      	cmp	r3, #128	; 0x80
 800a69e:	d103      	bne.n	800a6a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2203      	movs	r2, #3
 800a6a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a6a6:	e117      	b.n	800a8d8 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2205      	movs	r2, #5
 800a6ac:	761a      	strb	r2, [r3, #24]
      break;
 800a6ae:	e113      	b.n	800a8d8 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800a6b0:	7b7b      	ldrb	r3, [r7, #13]
 800a6b2:	2b80      	cmp	r3, #128	; 0x80
 800a6b4:	d103      	bne.n	800a6be <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2209      	movs	r2, #9
 800a6ba:	761a      	strb	r2, [r3, #24]
      break;
 800a6bc:	e10c      	b.n	800a8d8 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2207      	movs	r2, #7
 800a6c2:	761a      	strb	r2, [r3, #24]
      break;
 800a6c4:	e108      	b.n	800a8d8 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a6c6:	7bbb      	ldrb	r3, [r7, #14]
 800a6c8:	2b04      	cmp	r3, #4
 800a6ca:	d003      	beq.n	800a6d4 <USBH_HandleControl+0xcc>
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	f040 8102 	bne.w	800a8d8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	220b      	movs	r2, #11
 800a6d8:	761a      	strb	r2, [r3, #24]
      break;
 800a6da:	e0fd      	b.n	800a8d8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6899      	ldr	r1, [r3, #8]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	899a      	ldrh	r2, [r3, #12]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	791b      	ldrb	r3, [r3, #4]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f93c 	bl	800a972 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2204      	movs	r2, #4
 800a6fe:	761a      	strb	r2, [r3, #24]
      break;
 800a700:	e0f3      	b.n	800a8ea <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	791b      	ldrb	r3, [r3, #4]
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f003 f803 	bl	800d714 <USBH_LL_GetURBState>
 800a70e:	4603      	mov	r3, r0
 800a710:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d102      	bne.n	800a71e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2209      	movs	r2, #9
 800a71c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a71e:	7bbb      	ldrb	r3, [r7, #14]
 800a720:	2b05      	cmp	r3, #5
 800a722:	d102      	bne.n	800a72a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a724:	2303      	movs	r3, #3
 800a726:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a728:	e0d8      	b.n	800a8dc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a72a:	7bbb      	ldrb	r3, [r7, #14]
 800a72c:	2b04      	cmp	r3, #4
 800a72e:	f040 80d5 	bne.w	800a8dc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	220b      	movs	r2, #11
 800a736:	761a      	strb	r2, [r3, #24]
      break;
 800a738:	e0d0      	b.n	800a8dc <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6899      	ldr	r1, [r3, #8]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	899a      	ldrh	r2, [r3, #12]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	7958      	ldrb	r0, [r3, #5]
 800a746:	2301      	movs	r3, #1
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	4603      	mov	r3, r0
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f8eb 	bl	800a928 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a758:	b29a      	uxth	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2206      	movs	r2, #6
 800a762:	761a      	strb	r2, [r3, #24]
      break;
 800a764:	e0c1      	b.n	800a8ea <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	795b      	ldrb	r3, [r3, #5]
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f002 ffd1 	bl	800d714 <USBH_LL_GetURBState>
 800a772:	4603      	mov	r3, r0
 800a774:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d103      	bne.n	800a784 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2207      	movs	r2, #7
 800a780:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a782:	e0ad      	b.n	800a8e0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	2b05      	cmp	r3, #5
 800a788:	d105      	bne.n	800a796 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	220c      	movs	r2, #12
 800a78e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a790:	2303      	movs	r3, #3
 800a792:	73fb      	strb	r3, [r7, #15]
      break;
 800a794:	e0a4      	b.n	800a8e0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d103      	bne.n	800a7a4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2205      	movs	r2, #5
 800a7a0:	761a      	strb	r2, [r3, #24]
      break;
 800a7a2:	e09d      	b.n	800a8e0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	f040 809a 	bne.w	800a8e0 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	220b      	movs	r2, #11
 800a7b0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b6:	e093      	b.n	800a8e0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	791b      	ldrb	r3, [r3, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2100      	movs	r1, #0
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f8d6 	bl	800a972 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2208      	movs	r2, #8
 800a7d6:	761a      	strb	r2, [r3, #24]

      break;
 800a7d8:	e087      	b.n	800a8ea <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	791b      	ldrb	r3, [r3, #4]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f002 ff97 	bl	800d714 <USBH_LL_GetURBState>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7ea:	7bbb      	ldrb	r3, [r7, #14]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d105      	bne.n	800a7fc <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	220d      	movs	r2, #13
 800a7f4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a7fa:	e073      	b.n	800a8e4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d103      	bne.n	800a80a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	220b      	movs	r2, #11
 800a806:	761a      	strb	r2, [r3, #24]
      break;
 800a808:	e06c      	b.n	800a8e4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	2b05      	cmp	r3, #5
 800a80e:	d169      	bne.n	800a8e4 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800a810:	2303      	movs	r3, #3
 800a812:	73fb      	strb	r3, [r7, #15]
      break;
 800a814:	e066      	b.n	800a8e4 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	795a      	ldrb	r2, [r3, #5]
 800a81a:	2301      	movs	r3, #1
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	4613      	mov	r3, r2
 800a820:	2200      	movs	r2, #0
 800a822:	2100      	movs	r1, #0
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f87f 	bl	800a928 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a830:	b29a      	uxth	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	220a      	movs	r2, #10
 800a83a:	761a      	strb	r2, [r3, #24]
      break;
 800a83c:	e055      	b.n	800a8ea <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	795b      	ldrb	r3, [r3, #5]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f002 ff65 	bl	800d714 <USBH_LL_GetURBState>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d105      	bne.n	800a860 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	220d      	movs	r2, #13
 800a85c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a85e:	e043      	b.n	800a8e8 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a860:	7bbb      	ldrb	r3, [r7, #14]
 800a862:	2b02      	cmp	r3, #2
 800a864:	d103      	bne.n	800a86e <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2209      	movs	r2, #9
 800a86a:	761a      	strb	r2, [r3, #24]
      break;
 800a86c:	e03c      	b.n	800a8e8 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
 800a870:	2b04      	cmp	r3, #4
 800a872:	d139      	bne.n	800a8e8 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	220b      	movs	r2, #11
 800a878:	761a      	strb	r2, [r3, #24]
      break;
 800a87a:	e035      	b.n	800a8e8 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7e5b      	ldrb	r3, [r3, #25]
 800a880:	3301      	adds	r3, #1
 800a882:	b2da      	uxtb	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	765a      	strb	r2, [r3, #25]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	7e5b      	ldrb	r3, [r3, #25]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d806      	bhi.n	800a89e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a89c:	e025      	b.n	800a8ea <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8a4:	2106      	movs	r1, #6
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	795b      	ldrb	r3, [r3, #5]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f90c 	bl	800aad4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	791b      	ldrb	r3, [r3, #4]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f906 	bl	800aad4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d2:	e00a      	b.n	800a8ea <USBH_HandleControl+0x2e2>

    default:
      break;
 800a8d4:	bf00      	nop
 800a8d6:	e008      	b.n	800a8ea <USBH_HandleControl+0x2e2>
      break;
 800a8d8:	bf00      	nop
 800a8da:	e006      	b.n	800a8ea <USBH_HandleControl+0x2e2>
      break;
 800a8dc:	bf00      	nop
 800a8de:	e004      	b.n	800a8ea <USBH_HandleControl+0x2e2>
      break;
 800a8e0:	bf00      	nop
 800a8e2:	e002      	b.n	800a8ea <USBH_HandleControl+0x2e2>
      break;
 800a8e4:	bf00      	nop
 800a8e6:	e000      	b.n	800a8ea <USBH_HandleControl+0x2e2>
      break;
 800a8e8:	bf00      	nop
  }

  return status;
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af04      	add	r7, sp, #16
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	4613      	mov	r3, r2
 800a900:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a902:	79f9      	ldrb	r1, [r7, #7]
 800a904:	2300      	movs	r3, #0
 800a906:	9303      	str	r3, [sp, #12]
 800a908:	2308      	movs	r3, #8
 800a90a:	9302      	str	r3, [sp, #8]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	2300      	movs	r3, #0
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	2300      	movs	r3, #0
 800a916:	2200      	movs	r2, #0
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f002 feca 	bl	800d6b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af04      	add	r7, sp, #16
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	4611      	mov	r1, r2
 800a934:	461a      	mov	r2, r3
 800a936:	460b      	mov	r3, r1
 800a938:	80fb      	strh	r3, [r7, #6]
 800a93a:	4613      	mov	r3, r2
 800a93c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a94c:	7979      	ldrb	r1, [r7, #5]
 800a94e:	7e3b      	ldrb	r3, [r7, #24]
 800a950:	9303      	str	r3, [sp, #12]
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	9302      	str	r3, [sp, #8]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	9301      	str	r3, [sp, #4]
 800a95a:	2301      	movs	r3, #1
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	2300      	movs	r3, #0
 800a960:	2200      	movs	r2, #0
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f002 fea5 	bl	800d6b2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b088      	sub	sp, #32
 800a976:	af04      	add	r7, sp, #16
 800a978:	60f8      	str	r0, [r7, #12]
 800a97a:	60b9      	str	r1, [r7, #8]
 800a97c:	4611      	mov	r1, r2
 800a97e:	461a      	mov	r2, r3
 800a980:	460b      	mov	r3, r1
 800a982:	80fb      	strh	r3, [r7, #6]
 800a984:	4613      	mov	r3, r2
 800a986:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a988:	7979      	ldrb	r1, [r7, #5]
 800a98a:	2300      	movs	r3, #0
 800a98c:	9303      	str	r3, [sp, #12]
 800a98e:	88fb      	ldrh	r3, [r7, #6]
 800a990:	9302      	str	r3, [sp, #8]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	2301      	movs	r3, #1
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	2300      	movs	r3, #0
 800a99c:	2201      	movs	r2, #1
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f002 fe87 	bl	800d6b2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a9a4:	2300      	movs	r3, #0

}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b088      	sub	sp, #32
 800a9b2:	af04      	add	r7, sp, #16
 800a9b4:	60f8      	str	r0, [r7, #12]
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	460b      	mov	r3, r1
 800a9be:	80fb      	strh	r3, [r7, #6]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a9d2:	7979      	ldrb	r1, [r7, #5]
 800a9d4:	7e3b      	ldrb	r3, [r7, #24]
 800a9d6:	9303      	str	r3, [sp, #12]
 800a9d8:	88fb      	ldrh	r3, [r7, #6]
 800a9da:	9302      	str	r3, [sp, #8]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f002 fe62 	bl	800d6b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af04      	add	r7, sp, #16
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	4611      	mov	r1, r2
 800aa04:	461a      	mov	r2, r3
 800aa06:	460b      	mov	r3, r1
 800aa08:	80fb      	strh	r3, [r7, #6]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800aa0e:	7979      	ldrb	r1, [r7, #5]
 800aa10:	2300      	movs	r3, #0
 800aa12:	9303      	str	r3, [sp, #12]
 800aa14:	88fb      	ldrh	r3, [r7, #6]
 800aa16:	9302      	str	r3, [sp, #8]
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	2302      	movs	r3, #2
 800aa22:	2201      	movs	r2, #1
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f002 fe44 	bl	800d6b2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af04      	add	r7, sp, #16
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	4608      	mov	r0, r1
 800aa3e:	4611      	mov	r1, r2
 800aa40:	461a      	mov	r2, r3
 800aa42:	4603      	mov	r3, r0
 800aa44:	70fb      	strb	r3, [r7, #3]
 800aa46:	460b      	mov	r3, r1
 800aa48:	70bb      	strb	r3, [r7, #2]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aa4e:	7878      	ldrb	r0, [r7, #1]
 800aa50:	78ba      	ldrb	r2, [r7, #2]
 800aa52:	78f9      	ldrb	r1, [r7, #3]
 800aa54:	8b3b      	ldrh	r3, [r7, #24]
 800aa56:	9302      	str	r3, [sp, #8]
 800aa58:	7d3b      	ldrb	r3, [r7, #20]
 800aa5a:	9301      	str	r3, [sp, #4]
 800aa5c:	7c3b      	ldrb	r3, [r7, #16]
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	4603      	mov	r3, r0
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f002 fdd7 	bl	800d616 <USBH_LL_OpenPipe>

  return USBH_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b082      	sub	sp, #8
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800aa7e:	78fb      	ldrb	r3, [r7, #3]
 800aa80:	4619      	mov	r1, r3
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f002 fdf6 	bl	800d674 <USBH_LL_ClosePipe>

  return USBH_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f836 	bl	800ab10 <USBH_GetFreePipe>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aaa8:	89fb      	ldrh	r3, [r7, #14]
 800aaaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d00a      	beq.n	800aac8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800aab2:	78fa      	ldrb	r2, [r7, #3]
 800aab4:	89fb      	ldrh	r3, [r7, #14]
 800aab6:	f003 030f 	and.w	r3, r3, #15
 800aaba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	33e0      	adds	r3, #224	; 0xe0
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	440b      	add	r3, r1
 800aac6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aac8:	89fb      	ldrh	r3, [r7, #14]
 800aaca:	b2db      	uxtb	r3, r3
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	2b0a      	cmp	r3, #10
 800aae4:	d80d      	bhi.n	800ab02 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	33e0      	adds	r3, #224	; 0xe0
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	33e0      	adds	r3, #224	; 0xe0
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	440b      	add	r3, r1
 800ab00:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]
 800ab20:	e00f      	b.n	800ab42 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	33e0      	adds	r3, #224	; 0xe0
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d102      	bne.n	800ab3c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	e007      	b.n	800ab4c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	73fb      	strb	r3, [r7, #15]
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	2b0a      	cmp	r3, #10
 800ab46:	d9ec      	bls.n	800ab22 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ab48:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	4a08      	ldr	r2, [pc, #32]	; (800ab88 <disk_status+0x30>)
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	79fa      	ldrb	r2, [r7, #7]
 800ab70:	4905      	ldr	r1, [pc, #20]	; (800ab88 <disk_status+0x30>)
 800ab72:	440a      	add	r2, r1
 800ab74:	7a12      	ldrb	r2, [r2, #8]
 800ab76:	4610      	mov	r0, r2
 800ab78:	4798      	blx	r3
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	20009508 	.word	0x20009508

0800ab8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	4a0d      	ldr	r2, [pc, #52]	; (800abd4 <disk_initialize+0x48>)
 800ab9e:	5cd3      	ldrb	r3, [r2, r3]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d111      	bne.n	800abc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	4a0b      	ldr	r2, [pc, #44]	; (800abd4 <disk_initialize+0x48>)
 800aba8:	2101      	movs	r1, #1
 800abaa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800abac:	79fb      	ldrb	r3, [r7, #7]
 800abae:	4a09      	ldr	r2, [pc, #36]	; (800abd4 <disk_initialize+0x48>)
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	79fa      	ldrb	r2, [r7, #7]
 800abba:	4906      	ldr	r1, [pc, #24]	; (800abd4 <disk_initialize+0x48>)
 800abbc:	440a      	add	r2, r1
 800abbe:	7a12      	ldrb	r2, [r2, #8]
 800abc0:	4610      	mov	r0, r2
 800abc2:	4798      	blx	r3
 800abc4:	4603      	mov	r3, r0
 800abc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	20009508 	.word	0x20009508

0800abd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800abd8:	b590      	push	{r4, r7, lr}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	607a      	str	r2, [r7, #4]
 800abe2:	603b      	str	r3, [r7, #0]
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
 800abea:	4a0a      	ldr	r2, [pc, #40]	; (800ac14 <disk_read+0x3c>)
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	689c      	ldr	r4, [r3, #8]
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	4a07      	ldr	r2, [pc, #28]	; (800ac14 <disk_read+0x3c>)
 800abf8:	4413      	add	r3, r2
 800abfa:	7a18      	ldrb	r0, [r3, #8]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	47a0      	blx	r4
 800ac04:	4603      	mov	r3, r0
 800ac06:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	371c      	adds	r7, #28
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd90      	pop	{r4, r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20009508 	.word	0x20009508

0800ac18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ac18:	b590      	push	{r4, r7, lr}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	607a      	str	r2, [r7, #4]
 800ac22:	603b      	str	r3, [r7, #0]
 800ac24:	4603      	mov	r3, r0
 800ac26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	4a0a      	ldr	r2, [pc, #40]	; (800ac54 <disk_write+0x3c>)
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4413      	add	r3, r2
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	68dc      	ldr	r4, [r3, #12]
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	4a07      	ldr	r2, [pc, #28]	; (800ac54 <disk_write+0x3c>)
 800ac38:	4413      	add	r3, r2
 800ac3a:	7a18      	ldrb	r0, [r3, #8]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	47a0      	blx	r4
 800ac44:	4603      	mov	r3, r0
 800ac46:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	371c      	adds	r7, #28
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd90      	pop	{r4, r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20009508 	.word	0x20009508

0800ac58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	603a      	str	r2, [r7, #0]
 800ac62:	71fb      	strb	r3, [r7, #7]
 800ac64:	460b      	mov	r3, r1
 800ac66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac68:	79fb      	ldrb	r3, [r7, #7]
 800ac6a:	4a09      	ldr	r2, [pc, #36]	; (800ac90 <disk_ioctl+0x38>)
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	79fa      	ldrb	r2, [r7, #7]
 800ac76:	4906      	ldr	r1, [pc, #24]	; (800ac90 <disk_ioctl+0x38>)
 800ac78:	440a      	add	r2, r1
 800ac7a:	7a10      	ldrb	r0, [r2, #8]
 800ac7c:	79b9      	ldrb	r1, [r7, #6]
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	4798      	blx	r3
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20009508 	.word	0x20009508

0800ac94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aca4:	89fb      	ldrh	r3, [r7, #14]
 800aca6:	021b      	lsls	r3, r3, #8
 800aca8:	b21a      	sxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	b21b      	sxth	r3, r3
 800acb0:	4313      	orrs	r3, r2
 800acb2:	b21b      	sxth	r3, r3
 800acb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800acb6:	89fb      	ldrh	r3, [r7, #14]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3303      	adds	r3, #3
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	021b      	lsls	r3, r3, #8
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	3202      	adds	r2, #2
 800acdc:	7812      	ldrb	r2, [r2, #0]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	021b      	lsls	r3, r3, #8
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	3201      	adds	r2, #1
 800acea:	7812      	ldrb	r2, [r2, #0]
 800acec:	4313      	orrs	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	021b      	lsls	r3, r3, #8
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	7812      	ldrb	r2, [r2, #0]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
	return rv;
 800acfc:	68fb      	ldr	r3, [r7, #12]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	460b      	mov	r3, r1
 800ad14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	1c5a      	adds	r2, r3, #1
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	887a      	ldrh	r2, [r7, #2]
 800ad1e:	b2d2      	uxtb	r2, r2
 800ad20:	701a      	strb	r2, [r3, #0]
 800ad22:	887b      	ldrh	r3, [r7, #2]
 800ad24:	0a1b      	lsrs	r3, r3, #8
 800ad26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	1c5a      	adds	r2, r3, #1
 800ad2c:	607a      	str	r2, [r7, #4]
 800ad2e:	887a      	ldrh	r2, [r7, #2]
 800ad30:	b2d2      	uxtb	r2, r2
 800ad32:	701a      	strb	r2, [r3, #0]
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	1c5a      	adds	r2, r3, #1
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	b2d2      	uxtb	r2, r2
 800ad54:	701a      	strb	r2, [r3, #0]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	0a1b      	lsrs	r3, r3, #8
 800ad5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	1c5a      	adds	r2, r3, #1
 800ad60:	607a      	str	r2, [r7, #4]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	b2d2      	uxtb	r2, r2
 800ad66:	701a      	strb	r2, [r3, #0]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	0a1b      	lsrs	r3, r3, #8
 800ad6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	1c5a      	adds	r2, r3, #1
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	683a      	ldr	r2, [r7, #0]
 800ad76:	b2d2      	uxtb	r2, r2
 800ad78:	701a      	strb	r2, [r3, #0]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	0a1b      	lsrs	r3, r3, #8
 800ad7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	1c5a      	adds	r2, r3, #1
 800ad84:	607a      	str	r2, [r7, #4]
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	b2d2      	uxtb	r2, r2
 800ad8a:	701a      	strb	r2, [r3, #0]
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad98:	b480      	push	{r7}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00d      	beq.n	800adce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	1c53      	adds	r3, r2, #1
 800adb6:	613b      	str	r3, [r7, #16]
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	1c59      	adds	r1, r3, #1
 800adbc:	6179      	str	r1, [r7, #20]
 800adbe:	7812      	ldrb	r2, [r2, #0]
 800adc0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	607b      	str	r3, [r7, #4]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1f1      	bne.n	800adb2 <mem_cpy+0x1a>
	}
}
 800adce:	bf00      	nop
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800adda:	b480      	push	{r7}
 800addc:	b087      	sub	sp, #28
 800adde:	af00      	add	r7, sp, #0
 800ade0:	60f8      	str	r0, [r7, #12]
 800ade2:	60b9      	str	r1, [r7, #8]
 800ade4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	1c5a      	adds	r2, r3, #1
 800adee:	617a      	str	r2, [r7, #20]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	b2d2      	uxtb	r2, r2
 800adf4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	607b      	str	r3, [r7, #4]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1f3      	bne.n	800adea <mem_set+0x10>
}
 800ae02:	bf00      	nop
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ae0e:	b480      	push	{r7}
 800ae10:	b089      	sub	sp, #36	; 0x24
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	61fb      	str	r3, [r7, #28]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	61fa      	str	r2, [r7, #28]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	61ba      	str	r2, [r7, #24]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	1acb      	subs	r3, r1, r3
 800ae3a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	607b      	str	r3, [r7, #4]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <mem_cmp+0x40>
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0eb      	beq.n	800ae26 <mem_cmp+0x18>

	return r;
 800ae4e:	697b      	ldr	r3, [r7, #20]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3724      	adds	r7, #36	; 0x24
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae66:	e002      	b.n	800ae6e <chk_chr+0x12>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	607b      	str	r3, [r7, #4]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d005      	beq.n	800ae82 <chk_chr+0x26>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d1f2      	bne.n	800ae68 <chk_chr+0xc>
	return *str;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	781b      	ldrb	r3, [r3, #0]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
	...

0800ae94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60bb      	str	r3, [r7, #8]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	60fb      	str	r3, [r7, #12]
 800aea6:	e029      	b.n	800aefc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aea8:	4a27      	ldr	r2, [pc, #156]	; (800af48 <chk_lock+0xb4>)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	011b      	lsls	r3, r3, #4
 800aeae:	4413      	add	r3, r2
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d01d      	beq.n	800aef2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aeb6:	4a24      	ldr	r2, [pc, #144]	; (800af48 <chk_lock+0xb4>)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	011b      	lsls	r3, r3, #4
 800aebc:	4413      	add	r3, r2
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d116      	bne.n	800aef6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aec8:	4a1f      	ldr	r2, [pc, #124]	; (800af48 <chk_lock+0xb4>)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	011b      	lsls	r3, r3, #4
 800aece:	4413      	add	r3, r2
 800aed0:	3304      	adds	r3, #4
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d10c      	bne.n	800aef6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aedc:	4a1a      	ldr	r2, [pc, #104]	; (800af48 <chk_lock+0xb4>)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	4413      	add	r3, r2
 800aee4:	3308      	adds	r3, #8
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d102      	bne.n	800aef6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aef0:	e007      	b.n	800af02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aef2:	2301      	movs	r3, #1
 800aef4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	3301      	adds	r3, #1
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d9d2      	bls.n	800aea8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2b02      	cmp	r3, #2
 800af06:	d109      	bne.n	800af1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d102      	bne.n	800af14 <chk_lock+0x80>
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2b02      	cmp	r3, #2
 800af12:	d101      	bne.n	800af18 <chk_lock+0x84>
 800af14:	2300      	movs	r3, #0
 800af16:	e010      	b.n	800af3a <chk_lock+0xa6>
 800af18:	2312      	movs	r3, #18
 800af1a:	e00e      	b.n	800af3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d108      	bne.n	800af34 <chk_lock+0xa0>
 800af22:	4a09      	ldr	r2, [pc, #36]	; (800af48 <chk_lock+0xb4>)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	011b      	lsls	r3, r3, #4
 800af28:	4413      	add	r3, r2
 800af2a:	330c      	adds	r3, #12
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af32:	d101      	bne.n	800af38 <chk_lock+0xa4>
 800af34:	2310      	movs	r3, #16
 800af36:	e000      	b.n	800af3a <chk_lock+0xa6>
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	200094e8 	.word	0x200094e8

0800af4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af52:	2300      	movs	r3, #0
 800af54:	607b      	str	r3, [r7, #4]
 800af56:	e002      	b.n	800af5e <enq_lock+0x12>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	3301      	adds	r3, #1
 800af5c:	607b      	str	r3, [r7, #4]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d806      	bhi.n	800af72 <enq_lock+0x26>
 800af64:	4a09      	ldr	r2, [pc, #36]	; (800af8c <enq_lock+0x40>)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	011b      	lsls	r3, r3, #4
 800af6a:	4413      	add	r3, r2
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1f2      	bne.n	800af58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b02      	cmp	r3, #2
 800af76:	bf14      	ite	ne
 800af78:	2301      	movne	r3, #1
 800af7a:	2300      	moveq	r3, #0
 800af7c:	b2db      	uxtb	r3, r3
}
 800af7e:	4618      	mov	r0, r3
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	200094e8 	.word	0x200094e8

0800af90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	e01f      	b.n	800afe0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800afa0:	4a41      	ldr	r2, [pc, #260]	; (800b0a8 <inc_lock+0x118>)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	011b      	lsls	r3, r3, #4
 800afa6:	4413      	add	r3, r2
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d113      	bne.n	800afda <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800afb2:	4a3d      	ldr	r2, [pc, #244]	; (800b0a8 <inc_lock+0x118>)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	011b      	lsls	r3, r3, #4
 800afb8:	4413      	add	r3, r2
 800afba:	3304      	adds	r3, #4
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d109      	bne.n	800afda <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800afc6:	4a38      	ldr	r2, [pc, #224]	; (800b0a8 <inc_lock+0x118>)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	011b      	lsls	r3, r3, #4
 800afcc:	4413      	add	r3, r2
 800afce:	3308      	adds	r3, #8
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d006      	beq.n	800afe8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3301      	adds	r3, #1
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d9dc      	bls.n	800afa0 <inc_lock+0x10>
 800afe6:	e000      	b.n	800afea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800afe8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2b02      	cmp	r3, #2
 800afee:	d132      	bne.n	800b056 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aff0:	2300      	movs	r3, #0
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	e002      	b.n	800affc <inc_lock+0x6c>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	3301      	adds	r3, #1
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d806      	bhi.n	800b010 <inc_lock+0x80>
 800b002:	4a29      	ldr	r2, [pc, #164]	; (800b0a8 <inc_lock+0x118>)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	011b      	lsls	r3, r3, #4
 800b008:	4413      	add	r3, r2
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1f2      	bne.n	800aff6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d101      	bne.n	800b01a <inc_lock+0x8a>
 800b016:	2300      	movs	r3, #0
 800b018:	e040      	b.n	800b09c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	4922      	ldr	r1, [pc, #136]	; (800b0a8 <inc_lock+0x118>)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	011b      	lsls	r3, r3, #4
 800b024:	440b      	add	r3, r1
 800b026:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	491e      	ldr	r1, [pc, #120]	; (800b0a8 <inc_lock+0x118>)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	011b      	lsls	r3, r3, #4
 800b032:	440b      	add	r3, r1
 800b034:	3304      	adds	r3, #4
 800b036:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	695a      	ldr	r2, [r3, #20]
 800b03c:	491a      	ldr	r1, [pc, #104]	; (800b0a8 <inc_lock+0x118>)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	011b      	lsls	r3, r3, #4
 800b042:	440b      	add	r3, r1
 800b044:	3308      	adds	r3, #8
 800b046:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b048:	4a17      	ldr	r2, [pc, #92]	; (800b0a8 <inc_lock+0x118>)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	011b      	lsls	r3, r3, #4
 800b04e:	4413      	add	r3, r2
 800b050:	330c      	adds	r3, #12
 800b052:	2200      	movs	r2, #0
 800b054:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d009      	beq.n	800b070 <inc_lock+0xe0>
 800b05c:	4a12      	ldr	r2, [pc, #72]	; (800b0a8 <inc_lock+0x118>)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	011b      	lsls	r3, r3, #4
 800b062:	4413      	add	r3, r2
 800b064:	330c      	adds	r3, #12
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <inc_lock+0xe0>
 800b06c:	2300      	movs	r3, #0
 800b06e:	e015      	b.n	800b09c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d108      	bne.n	800b088 <inc_lock+0xf8>
 800b076:	4a0c      	ldr	r2, [pc, #48]	; (800b0a8 <inc_lock+0x118>)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	4413      	add	r3, r2
 800b07e:	330c      	adds	r3, #12
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	3301      	adds	r3, #1
 800b084:	b29a      	uxth	r2, r3
 800b086:	e001      	b.n	800b08c <inc_lock+0xfc>
 800b088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b08c:	4906      	ldr	r1, [pc, #24]	; (800b0a8 <inc_lock+0x118>)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	440b      	add	r3, r1
 800b094:	330c      	adds	r3, #12
 800b096:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3714      	adds	r7, #20
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	200094e8 	.word	0x200094e8

0800b0ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	607b      	str	r3, [r7, #4]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d825      	bhi.n	800b10c <dec_lock+0x60>
		n = Files[i].ctr;
 800b0c0:	4a17      	ldr	r2, [pc, #92]	; (800b120 <dec_lock+0x74>)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	011b      	lsls	r3, r3, #4
 800b0c6:	4413      	add	r3, r2
 800b0c8:	330c      	adds	r3, #12
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b0ce:	89fb      	ldrh	r3, [r7, #14]
 800b0d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d4:	d101      	bne.n	800b0da <dec_lock+0x2e>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0da:	89fb      	ldrh	r3, [r7, #14]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <dec_lock+0x3a>
 800b0e0:	89fb      	ldrh	r3, [r7, #14]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0e6:	4a0e      	ldr	r2, [pc, #56]	; (800b120 <dec_lock+0x74>)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	011b      	lsls	r3, r3, #4
 800b0ec:	4413      	add	r3, r2
 800b0ee:	330c      	adds	r3, #12
 800b0f0:	89fa      	ldrh	r2, [r7, #14]
 800b0f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0f4:	89fb      	ldrh	r3, [r7, #14]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d105      	bne.n	800b106 <dec_lock+0x5a>
 800b0fa:	4a09      	ldr	r2, [pc, #36]	; (800b120 <dec_lock+0x74>)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	4413      	add	r3, r2
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b106:	2300      	movs	r3, #0
 800b108:	737b      	strb	r3, [r7, #13]
 800b10a:	e001      	b.n	800b110 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b10c:	2302      	movs	r3, #2
 800b10e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b110:	7b7b      	ldrb	r3, [r7, #13]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	200094e8 	.word	0x200094e8

0800b124 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b12c:	2300      	movs	r3, #0
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	e010      	b.n	800b154 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b132:	4a0d      	ldr	r2, [pc, #52]	; (800b168 <clear_lock+0x44>)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	011b      	lsls	r3, r3, #4
 800b138:	4413      	add	r3, r2
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d105      	bne.n	800b14e <clear_lock+0x2a>
 800b142:	4a09      	ldr	r2, [pc, #36]	; (800b168 <clear_lock+0x44>)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	011b      	lsls	r3, r3, #4
 800b148:	4413      	add	r3, r2
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	3301      	adds	r3, #1
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b01      	cmp	r3, #1
 800b158:	d9eb      	bls.n	800b132 <clear_lock+0xe>
	}
}
 800b15a:	bf00      	nop
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	200094e8 	.word	0x200094e8

0800b16c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	78db      	ldrb	r3, [r3, #3]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d034      	beq.n	800b1ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7858      	ldrb	r0, [r3, #1]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b190:	2301      	movs	r3, #1
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	f7ff fd40 	bl	800ac18 <disk_write>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	73fb      	strb	r3, [r7, #15]
 800b1a2:	e022      	b.n	800b1ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	1ad2      	subs	r2, r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d217      	bcs.n	800b1ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	789b      	ldrb	r3, [r3, #2]
 800b1be:	613b      	str	r3, [r7, #16]
 800b1c0:	e010      	b.n	800b1e4 <sync_window+0x78>
					wsect += fs->fsize;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	699b      	ldr	r3, [r3, #24]
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	7858      	ldrb	r0, [r3, #1]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	f7ff fd1d 	bl	800ac18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	613b      	str	r3, [r7, #16]
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d8eb      	bhi.n	800b1c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3718      	adds	r7, #24
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d01b      	beq.n	800b244 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7ff ffad 	bl	800b16c <sync_window>
 800b212:	4603      	mov	r3, r0
 800b214:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b216:	7bfb      	ldrb	r3, [r7, #15]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d113      	bne.n	800b244 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	7858      	ldrb	r0, [r3, #1]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b226:	2301      	movs	r3, #1
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	f7ff fcd5 	bl	800abd8 <disk_read>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d004      	beq.n	800b23e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b234:	f04f 33ff 	mov.w	r3, #4294967295
 800b238:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b244:	7bfb      	ldrb	r3, [r7, #15]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff ff87 	bl	800b16c <sync_window>
 800b25e:	4603      	mov	r3, r0
 800b260:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b262:	7bfb      	ldrb	r3, [r7, #15]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d158      	bne.n	800b31a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d148      	bne.n	800b302 <sync_fs+0xb2>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	791b      	ldrb	r3, [r3, #4]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d144      	bne.n	800b302 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3330      	adds	r3, #48	; 0x30
 800b27c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b280:	2100      	movs	r1, #0
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff fda9 	bl	800adda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	3330      	adds	r3, #48	; 0x30
 800b28c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b290:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff fd38 	bl	800ad0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	3330      	adds	r3, #48	; 0x30
 800b29e:	4921      	ldr	r1, [pc, #132]	; (800b324 <sync_fs+0xd4>)
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7ff fd4d 	bl	800ad40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3330      	adds	r3, #48	; 0x30
 800b2aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b2ae:	491e      	ldr	r1, [pc, #120]	; (800b328 <sync_fs+0xd8>)
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff fd45 	bl	800ad40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3330      	adds	r3, #48	; 0x30
 800b2ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	f7ff fd3b 	bl	800ad40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3330      	adds	r3, #48	; 0x30
 800b2ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4610      	mov	r0, r2
 800b2da:	f7ff fd31 	bl	800ad40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	69db      	ldr	r3, [r3, #28]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	7858      	ldrb	r0, [r3, #1]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	f7ff fc8e 	bl	800ac18 <disk_write>
			fs->fsi_flag = 0;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	785b      	ldrb	r3, [r3, #1]
 800b306:	2200      	movs	r2, #0
 800b308:	2100      	movs	r1, #0
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff fca4 	bl	800ac58 <disk_ioctl>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <sync_fs+0xca>
 800b316:	2301      	movs	r3, #1
 800b318:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	41615252 	.word	0x41615252
 800b328:	61417272 	.word	0x61417272

0800b32c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	3b02      	subs	r3, #2
 800b33a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	3b02      	subs	r3, #2
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	429a      	cmp	r2, r3
 800b346:	d301      	bcc.n	800b34c <clust2sect+0x20>
 800b348:	2300      	movs	r3, #0
 800b34a:	e008      	b.n	800b35e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	895b      	ldrh	r3, [r3, #10]
 800b350:	461a      	mov	r2, r3
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	fb03 f202 	mul.w	r2, r3, r2
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b35c:	4413      	add	r3, r2
}
 800b35e:	4618      	mov	r0, r3
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b086      	sub	sp, #24
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d904      	bls.n	800b38a <get_fat+0x20>
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	683a      	ldr	r2, [r7, #0]
 800b386:	429a      	cmp	r2, r3
 800b388:	d302      	bcc.n	800b390 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b38a:	2301      	movs	r3, #1
 800b38c:	617b      	str	r3, [r7, #20]
 800b38e:	e08c      	b.n	800b4aa <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b390:	f04f 33ff 	mov.w	r3, #4294967295
 800b394:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d045      	beq.n	800b42a <get_fat+0xc0>
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d05d      	beq.n	800b45e <get_fat+0xf4>
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d177      	bne.n	800b496 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	60fb      	str	r3, [r7, #12]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	085b      	lsrs	r3, r3, #1
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	6a1a      	ldr	r2, [r3, #32]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	0a5b      	lsrs	r3, r3, #9
 800b3bc:	4413      	add	r3, r2
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6938      	ldr	r0, [r7, #16]
 800b3c2:	f7ff ff17 	bl	800b1f4 <move_window>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d167      	bne.n	800b49c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	60fa      	str	r2, [r7, #12]
 800b3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	4413      	add	r3, r2
 800b3da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3de:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	6a1a      	ldr	r2, [r3, #32]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	0a5b      	lsrs	r3, r3, #9
 800b3e8:	4413      	add	r3, r2
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6938      	ldr	r0, [r7, #16]
 800b3ee:	f7ff ff01 	bl	800b1f4 <move_window>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d153      	bne.n	800b4a0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	4413      	add	r3, r2
 800b402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b406:	021b      	lsls	r3, r3, #8
 800b408:	461a      	mov	r2, r3
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	d002      	beq.n	800b420 <get_fat+0xb6>
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	091b      	lsrs	r3, r3, #4
 800b41e:	e002      	b.n	800b426 <get_fat+0xbc>
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b426:	617b      	str	r3, [r7, #20]
			break;
 800b428:	e03f      	b.n	800b4aa <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	6a1a      	ldr	r2, [r3, #32]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	0a1b      	lsrs	r3, r3, #8
 800b432:	4413      	add	r3, r2
 800b434:	4619      	mov	r1, r3
 800b436:	6938      	ldr	r0, [r7, #16]
 800b438:	f7ff fedc 	bl	800b1f4 <move_window>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d130      	bne.n	800b4a4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b450:	4413      	add	r3, r2
 800b452:	4618      	mov	r0, r3
 800b454:	f7ff fc1e 	bl	800ac94 <ld_word>
 800b458:	4603      	mov	r3, r0
 800b45a:	617b      	str	r3, [r7, #20]
			break;
 800b45c:	e025      	b.n	800b4aa <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	6a1a      	ldr	r2, [r3, #32]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	09db      	lsrs	r3, r3, #7
 800b466:	4413      	add	r3, r2
 800b468:	4619      	mov	r1, r3
 800b46a:	6938      	ldr	r0, [r7, #16]
 800b46c:	f7ff fec2 	bl	800b1f4 <move_window>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d118      	bne.n	800b4a8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b484:	4413      	add	r3, r2
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff fc1c 	bl	800acc4 <ld_dword>
 800b48c:	4603      	mov	r3, r0
 800b48e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b492:	617b      	str	r3, [r7, #20]
			break;
 800b494:	e009      	b.n	800b4aa <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b496:	2301      	movs	r3, #1
 800b498:	617b      	str	r3, [r7, #20]
 800b49a:	e006      	b.n	800b4aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b49c:	bf00      	nop
 800b49e:	e004      	b.n	800b4aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4a0:	bf00      	nop
 800b4a2:	e002      	b.n	800b4aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4a4:	bf00      	nop
 800b4a6:	e000      	b.n	800b4aa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4a8:	bf00      	nop
		}
	}

	return val;
 800b4aa:	697b      	ldr	r3, [r7, #20]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3718      	adds	r7, #24
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b4b4:	b590      	push	{r4, r7, lr}
 800b4b6:	b089      	sub	sp, #36	; 0x24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	f240 80d6 	bls.w	800b678 <put_fat+0x1c4>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	f080 80d0 	bcs.w	800b678 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d073      	beq.n	800b5c8 <put_fat+0x114>
 800b4e0:	2b03      	cmp	r3, #3
 800b4e2:	f000 8091 	beq.w	800b608 <put_fat+0x154>
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	f040 80c6 	bne.w	800b678 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	61bb      	str	r3, [r7, #24]
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	085b      	lsrs	r3, r3, #1
 800b4f4:	69ba      	ldr	r2, [r7, #24]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6a1a      	ldr	r2, [r3, #32]
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	0a5b      	lsrs	r3, r3, #9
 800b502:	4413      	add	r3, r2
 800b504:	4619      	mov	r1, r3
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f7ff fe74 	bl	800b1f4 <move_window>
 800b50c:	4603      	mov	r3, r0
 800b50e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b510:	7ffb      	ldrb	r3, [r7, #31]
 800b512:	2b00      	cmp	r3, #0
 800b514:	f040 80a9 	bne.w	800b66a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	1c59      	adds	r1, r3, #1
 800b522:	61b9      	str	r1, [r7, #24]
 800b524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b528:	4413      	add	r3, r2
 800b52a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00d      	beq.n	800b552 <put_fat+0x9e>
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	b25b      	sxtb	r3, r3
 800b53c:	f003 030f 	and.w	r3, r3, #15
 800b540:	b25a      	sxtb	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	b2db      	uxtb	r3, r3
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	b25b      	sxtb	r3, r3
 800b54a:	4313      	orrs	r3, r2
 800b54c:	b25b      	sxtb	r3, r3
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	e001      	b.n	800b556 <put_fat+0xa2>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	b2db      	uxtb	r3, r3
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2201      	movs	r2, #1
 800b55e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6a1a      	ldr	r2, [r3, #32]
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	0a5b      	lsrs	r3, r3, #9
 800b568:	4413      	add	r3, r2
 800b56a:	4619      	mov	r1, r3
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f7ff fe41 	bl	800b1f4 <move_window>
 800b572:	4603      	mov	r3, r0
 800b574:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b576:	7ffb      	ldrb	r3, [r7, #31]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d178      	bne.n	800b66e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b588:	4413      	add	r3, r2
 800b58a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <put_fat+0xea>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	091b      	lsrs	r3, r3, #4
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	e00e      	b.n	800b5bc <put_fat+0x108>
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	b25b      	sxtb	r3, r3
 800b5a4:	f023 030f 	bic.w	r3, r3, #15
 800b5a8:	b25a      	sxtb	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	0a1b      	lsrs	r3, r3, #8
 800b5ae:	b25b      	sxtb	r3, r3
 800b5b0:	f003 030f 	and.w	r3, r3, #15
 800b5b4:	b25b      	sxtb	r3, r3
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	b25b      	sxtb	r3, r3
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	697a      	ldr	r2, [r7, #20]
 800b5be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	70da      	strb	r2, [r3, #3]
			break;
 800b5c6:	e057      	b.n	800b678 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6a1a      	ldr	r2, [r3, #32]
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	0a1b      	lsrs	r3, r3, #8
 800b5d0:	4413      	add	r3, r2
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff fe0d 	bl	800b1f4 <move_window>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5de:	7ffb      	ldrb	r3, [r7, #31]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d146      	bne.n	800b672 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	005b      	lsls	r3, r3, #1
 800b5ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b5f2:	4413      	add	r3, r2
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	b292      	uxth	r2, r2
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff fb85 	bl	800ad0a <st_word>
			fs->wflag = 1;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2201      	movs	r2, #1
 800b604:	70da      	strb	r2, [r3, #3]
			break;
 800b606:	e037      	b.n	800b678 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6a1a      	ldr	r2, [r3, #32]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	09db      	lsrs	r3, r3, #7
 800b610:	4413      	add	r3, r2
 800b612:	4619      	mov	r1, r3
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f7ff fded 	bl	800b1f4 <move_window>
 800b61a:	4603      	mov	r3, r0
 800b61c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b61e:	7ffb      	ldrb	r3, [r7, #31]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d128      	bne.n	800b676 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b638:	4413      	add	r3, r2
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff fb42 	bl	800acc4 <ld_dword>
 800b640:	4603      	mov	r3, r0
 800b642:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b646:	4323      	orrs	r3, r4
 800b648:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b658:	4413      	add	r3, r2
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7ff fb6f 	bl	800ad40 <st_dword>
			fs->wflag = 1;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2201      	movs	r2, #1
 800b666:	70da      	strb	r2, [r3, #3]
			break;
 800b668:	e006      	b.n	800b678 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b66a:	bf00      	nop
 800b66c:	e004      	b.n	800b678 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b66e:	bf00      	nop
 800b670:	e002      	b.n	800b678 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b672:	bf00      	nop
 800b674:	e000      	b.n	800b678 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800b676:	bf00      	nop
		}
	}
	return res;
 800b678:	7ffb      	ldrb	r3, [r7, #31]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3724      	adds	r7, #36	; 0x24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd90      	pop	{r4, r7, pc}

0800b682 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b088      	sub	sp, #32
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b68e:	2300      	movs	r3, #0
 800b690:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d904      	bls.n	800b6a8 <remove_chain+0x26>
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d301      	bcc.n	800b6ac <remove_chain+0x2a>
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	e04b      	b.n	800b744 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00c      	beq.n	800b6cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b6:	6879      	ldr	r1, [r7, #4]
 800b6b8:	69b8      	ldr	r0, [r7, #24]
 800b6ba:	f7ff fefb 	bl	800b4b4 <put_fat>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b6c2:	7ffb      	ldrb	r3, [r7, #31]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <remove_chain+0x4a>
 800b6c8:	7ffb      	ldrb	r3, [r7, #31]
 800b6ca:	e03b      	b.n	800b744 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b6cc:	68b9      	ldr	r1, [r7, #8]
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f7ff fe4b 	bl	800b36a <get_fat>
 800b6d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d031      	beq.n	800b740 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d101      	bne.n	800b6e6 <remove_chain+0x64>
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	e02e      	b.n	800b744 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ec:	d101      	bne.n	800b6f2 <remove_chain+0x70>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e028      	b.n	800b744 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	68b9      	ldr	r1, [r7, #8]
 800b6f6:	69b8      	ldr	r0, [r7, #24]
 800b6f8:	f7ff fedc 	bl	800b4b4 <put_fat>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b700:	7ffb      	ldrb	r3, [r7, #31]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d001      	beq.n	800b70a <remove_chain+0x88>
 800b706:	7ffb      	ldrb	r3, [r7, #31]
 800b708:	e01c      	b.n	800b744 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	691a      	ldr	r2, [r3, #16]
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	3b02      	subs	r3, #2
 800b714:	429a      	cmp	r2, r3
 800b716:	d20b      	bcs.n	800b730 <remove_chain+0xae>
			fs->free_clst++;
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	1c5a      	adds	r2, r3, #1
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	791b      	ldrb	r3, [r3, #4]
 800b726:	f043 0301 	orr.w	r3, r3, #1
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	695b      	ldr	r3, [r3, #20]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d3c6      	bcc.n	800b6cc <remove_chain+0x4a>
 800b73e:	e000      	b.n	800b742 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b740:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3720      	adds	r7, #32
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10d      	bne.n	800b77e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d004      	beq.n	800b778 <create_chain+0x2c>
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	695b      	ldr	r3, [r3, #20]
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	429a      	cmp	r2, r3
 800b776:	d31b      	bcc.n	800b7b0 <create_chain+0x64>
 800b778:	2301      	movs	r3, #1
 800b77a:	61bb      	str	r3, [r7, #24]
 800b77c:	e018      	b.n	800b7b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff fdf2 	bl	800b36a <get_fat>
 800b786:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d801      	bhi.n	800b792 <create_chain+0x46>
 800b78e:	2301      	movs	r3, #1
 800b790:	e070      	b.n	800b874 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b798:	d101      	bne.n	800b79e <create_chain+0x52>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	e06a      	b.n	800b874 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d201      	bcs.n	800b7ac <create_chain+0x60>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	e063      	b.n	800b874 <create_chain+0x128>
		scl = clst;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	69fa      	ldr	r2, [r7, #28]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d307      	bcc.n	800b7d4 <create_chain+0x88>
				ncl = 2;
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b7c8:	69fa      	ldr	r2, [r7, #28]
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d901      	bls.n	800b7d4 <create_chain+0x88>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	e04f      	b.n	800b874 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b7d4:	69f9      	ldr	r1, [r7, #28]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7ff fdc7 	bl	800b36a <get_fat>
 800b7dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00e      	beq.n	800b802 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d003      	beq.n	800b7f2 <create_chain+0xa6>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f0:	d101      	bne.n	800b7f6 <create_chain+0xaa>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	e03e      	b.n	800b874 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b7f6:	69fa      	ldr	r2, [r7, #28]
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d1da      	bne.n	800b7b4 <create_chain+0x68>
 800b7fe:	2300      	movs	r3, #0
 800b800:	e038      	b.n	800b874 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b802:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b804:	f04f 32ff 	mov.w	r2, #4294967295
 800b808:	69f9      	ldr	r1, [r7, #28]
 800b80a:	6938      	ldr	r0, [r7, #16]
 800b80c:	f7ff fe52 	bl	800b4b4 <put_fat>
 800b810:	4603      	mov	r3, r0
 800b812:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d109      	bne.n	800b82e <create_chain+0xe2>
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d006      	beq.n	800b82e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b820:	69fa      	ldr	r2, [r7, #28]
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6938      	ldr	r0, [r7, #16]
 800b826:	f7ff fe45 	bl	800b4b4 <put_fat>
 800b82a:	4603      	mov	r3, r0
 800b82c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b82e:	7dfb      	ldrb	r3, [r7, #23]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d116      	bne.n	800b862 <create_chain+0x116>
		fs->last_clst = ncl;
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	69fa      	ldr	r2, [r7, #28]
 800b838:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	691a      	ldr	r2, [r3, #16]
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	3b02      	subs	r3, #2
 800b844:	429a      	cmp	r2, r3
 800b846:	d804      	bhi.n	800b852 <create_chain+0x106>
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	1e5a      	subs	r2, r3, #1
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	791b      	ldrb	r3, [r3, #4]
 800b856:	f043 0301 	orr.w	r3, r3, #1
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	711a      	strb	r2, [r3, #4]
 800b860:	e007      	b.n	800b872 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b862:	7dfb      	ldrb	r3, [r7, #23]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d102      	bne.n	800b86e <create_chain+0x122>
 800b868:	f04f 33ff 	mov.w	r3, #4294967295
 800b86c:	e000      	b.n	800b870 <create_chain+0x124>
 800b86e:	2301      	movs	r3, #1
 800b870:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b872:	69fb      	ldr	r3, [r7, #28]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3720      	adds	r7, #32
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b087      	sub	sp, #28
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	3304      	adds	r3, #4
 800b892:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	0a5b      	lsrs	r3, r3, #9
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	8952      	ldrh	r2, [r2, #10]
 800b89c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	1d1a      	adds	r2, r3, #4
 800b8a6:	613a      	str	r2, [r7, #16]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <clmt_clust+0x3a>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e010      	b.n	800b8d8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d307      	bcc.n	800b8ce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	617b      	str	r3, [r7, #20]
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8cc:	e7e9      	b.n	800b8a2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b8ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	4413      	add	r3, r2
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	371c      	adds	r7, #28
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8fa:	d204      	bcs.n	800b906 <dir_sdi+0x22>
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	f003 031f 	and.w	r3, r3, #31
 800b902:	2b00      	cmp	r3, #0
 800b904:	d001      	beq.n	800b90a <dir_sdi+0x26>
		return FR_INT_ERR;
 800b906:	2302      	movs	r3, #2
 800b908:	e063      	b.n	800b9d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d106      	bne.n	800b92a <dir_sdi+0x46>
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	2b02      	cmp	r3, #2
 800b922:	d902      	bls.n	800b92a <dir_sdi+0x46>
		clst = fs->dirbase;
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b928:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10c      	bne.n	800b94a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	095b      	lsrs	r3, r3, #5
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	8912      	ldrh	r2, [r2, #8]
 800b938:	4293      	cmp	r3, r2
 800b93a:	d301      	bcc.n	800b940 <dir_sdi+0x5c>
 800b93c:	2302      	movs	r3, #2
 800b93e:	e048      	b.n	800b9d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	61da      	str	r2, [r3, #28]
 800b948:	e029      	b.n	800b99e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	895b      	ldrh	r3, [r3, #10]
 800b94e:	025b      	lsls	r3, r3, #9
 800b950:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b952:	e019      	b.n	800b988 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6979      	ldr	r1, [r7, #20]
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff fd06 	bl	800b36a <get_fat>
 800b95e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b966:	d101      	bne.n	800b96c <dir_sdi+0x88>
 800b968:	2301      	movs	r3, #1
 800b96a:	e032      	b.n	800b9d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d904      	bls.n	800b97c <dir_sdi+0x98>
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d301      	bcc.n	800b980 <dir_sdi+0x9c>
 800b97c:	2302      	movs	r3, #2
 800b97e:	e028      	b.n	800b9d2 <dir_sdi+0xee>
			ofs -= csz;
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d2e1      	bcs.n	800b954 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b990:	6979      	ldr	r1, [r7, #20]
 800b992:	6938      	ldr	r0, [r7, #16]
 800b994:	f7ff fcca 	bl	800b32c <clust2sect>
 800b998:	4602      	mov	r2, r0
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	697a      	ldr	r2, [r7, #20]
 800b9a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	69db      	ldr	r3, [r3, #28]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d101      	bne.n	800b9b0 <dir_sdi+0xcc>
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	e010      	b.n	800b9d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	69da      	ldr	r2, [r3, #28]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	0a5b      	lsrs	r3, r3, #9
 800b9b8:	441a      	add	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ca:	441a      	add	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b086      	sub	sp, #24
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	3320      	adds	r3, #32
 800b9f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <dir_next+0x28>
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba00:	d301      	bcc.n	800ba06 <dir_next+0x2c>
 800ba02:	2304      	movs	r3, #4
 800ba04:	e0aa      	b.n	800bb5c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f040 8098 	bne.w	800bb42 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	1c5a      	adds	r2, r3, #1
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10b      	bne.n	800ba3c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	095b      	lsrs	r3, r3, #5
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	8912      	ldrh	r2, [r2, #8]
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	f0c0 8088 	bcc.w	800bb42 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	61da      	str	r2, [r3, #28]
 800ba38:	2304      	movs	r3, #4
 800ba3a:	e08f      	b.n	800bb5c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	0a5b      	lsrs	r3, r3, #9
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	8952      	ldrh	r2, [r2, #10]
 800ba44:	3a01      	subs	r2, #1
 800ba46:	4013      	ands	r3, r2
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d17a      	bne.n	800bb42 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	4619      	mov	r1, r3
 800ba54:	4610      	mov	r0, r2
 800ba56:	f7ff fc88 	bl	800b36a <get_fat>
 800ba5a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d801      	bhi.n	800ba66 <dir_next+0x8c>
 800ba62:	2302      	movs	r3, #2
 800ba64:	e07a      	b.n	800bb5c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6c:	d101      	bne.n	800ba72 <dir_next+0x98>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e074      	b.n	800bb5c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d358      	bcc.n	800bb2e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d104      	bne.n	800ba8c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	61da      	str	r2, [r3, #28]
 800ba88:	2304      	movs	r3, #4
 800ba8a:	e067      	b.n	800bb5c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	4619      	mov	r1, r3
 800ba94:	4610      	mov	r0, r2
 800ba96:	f7ff fe59 	bl	800b74c <create_chain>
 800ba9a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <dir_next+0xcc>
 800baa2:	2307      	movs	r3, #7
 800baa4:	e05a      	b.n	800bb5c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d101      	bne.n	800bab0 <dir_next+0xd6>
 800baac:	2302      	movs	r3, #2
 800baae:	e055      	b.n	800bb5c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab6:	d101      	bne.n	800babc <dir_next+0xe2>
 800bab8:	2301      	movs	r3, #1
 800baba:	e04f      	b.n	800bb5c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f7ff fb55 	bl	800b16c <sync_window>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <dir_next+0xf2>
 800bac8:	2301      	movs	r3, #1
 800baca:	e047      	b.n	800bb5c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	3330      	adds	r3, #48	; 0x30
 800bad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bad4:	2100      	movs	r1, #0
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7ff f97f 	bl	800adda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800badc:	2300      	movs	r3, #0
 800bade:	613b      	str	r3, [r7, #16]
 800bae0:	6979      	ldr	r1, [r7, #20]
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff fc22 	bl	800b32c <clust2sect>
 800bae8:	4602      	mov	r2, r0
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	62da      	str	r2, [r3, #44]	; 0x2c
 800baee:	e012      	b.n	800bb16 <dir_next+0x13c>
						fs->wflag = 1;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2201      	movs	r2, #1
 800baf4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f7ff fb38 	bl	800b16c <sync_window>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <dir_next+0x12c>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e02a      	b.n	800bb5c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	613b      	str	r3, [r7, #16]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	62da      	str	r2, [r3, #44]	; 0x2c
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	895b      	ldrh	r3, [r3, #10]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d3e6      	bcc.n	800baf0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	1ad2      	subs	r2, r2, r3
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bb34:	6979      	ldr	r1, [r7, #20]
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f7ff fbf8 	bl	800b32c <clust2sect>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb54:	441a      	add	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bb74:	2100      	movs	r1, #0
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7ff feb4 	bl	800b8e4 <dir_sdi>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d12b      	bne.n	800bbde <dir_alloc+0x7a>
		n = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f7ff fb2f 	bl	800b1f4 <move_window>
 800bb96:	4603      	mov	r3, r0
 800bb98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb9a:	7dfb      	ldrb	r3, [r7, #23]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d11d      	bne.n	800bbdc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a1b      	ldr	r3, [r3, #32]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	2be5      	cmp	r3, #229	; 0xe5
 800bba8:	d004      	beq.n	800bbb4 <dir_alloc+0x50>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d107      	bne.n	800bbc4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	613b      	str	r3, [r7, #16]
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d102      	bne.n	800bbc8 <dir_alloc+0x64>
 800bbc2:	e00c      	b.n	800bbde <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bbc8:	2101      	movs	r1, #1
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7ff ff05 	bl	800b9da <dir_next>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d0d7      	beq.n	800bb8a <dir_alloc+0x26>
 800bbda:	e000      	b.n	800bbde <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bbdc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	2b04      	cmp	r3, #4
 800bbe2:	d101      	bne.n	800bbe8 <dir_alloc+0x84>
 800bbe4:	2307      	movs	r3, #7
 800bbe6:	75fb      	strb	r3, [r7, #23]
	return res;
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b084      	sub	sp, #16
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	331a      	adds	r3, #26
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7ff f847 	bl	800ac94 <ld_word>
 800bc06:	4603      	mov	r3, r0
 800bc08:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b03      	cmp	r3, #3
 800bc10:	d109      	bne.n	800bc26 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	3314      	adds	r3, #20
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff f83c 	bl	800ac94 <ld_word>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	041b      	lsls	r3, r3, #16
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bc26:	68fb      	ldr	r3, [r7, #12]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	331a      	adds	r3, #26
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	b292      	uxth	r2, r2
 800bc44:	4611      	mov	r1, r2
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7ff f85f 	bl	800ad0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	2b03      	cmp	r3, #3
 800bc52:	d109      	bne.n	800bc68 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	f103 0214 	add.w	r2, r3, #20
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	0c1b      	lsrs	r3, r3, #16
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	4619      	mov	r1, r3
 800bc62:	4610      	mov	r0, r2
 800bc64:	f7ff f851 	bl	800ad0a <st_word>
	}
}
 800bc68:	bf00      	nop
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc7e:	2100      	movs	r1, #0
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff fe2f 	bl	800b8e4 <dir_sdi>
 800bc86:	4603      	mov	r3, r0
 800bc88:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <dir_find+0x24>
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	e03e      	b.n	800bd12 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	69db      	ldr	r3, [r3, #28]
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6938      	ldr	r0, [r7, #16]
 800bc9c:	f7ff faaa 	bl	800b1f4 <move_window>
 800bca0:	4603      	mov	r3, r0
 800bca2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d12f      	bne.n	800bd0a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d102      	bne.n	800bcbe <dir_find+0x4e>
 800bcb8:	2304      	movs	r3, #4
 800bcba:	75fb      	strb	r3, [r7, #23]
 800bcbc:	e028      	b.n	800bd10 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	330b      	adds	r3, #11
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	330b      	adds	r3, #11
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f003 0308 	and.w	r3, r3, #8
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10a      	bne.n	800bcf6 <dir_find+0x86>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a18      	ldr	r0, [r3, #32]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	3324      	adds	r3, #36	; 0x24
 800bce8:	220b      	movs	r2, #11
 800bcea:	4619      	mov	r1, r3
 800bcec:	f7ff f88f 	bl	800ae0e <mem_cmp>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00b      	beq.n	800bd0e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f7ff fe6e 	bl	800b9da <dir_next>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d0c5      	beq.n	800bc94 <dir_find+0x24>
 800bd08:	e002      	b.n	800bd10 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bd0a:	bf00      	nop
 800bd0c:	e000      	b.n	800bd10 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bd0e:	bf00      	nop

	return res;
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bd28:	2101      	movs	r1, #1
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7ff ff1a 	bl	800bb64 <dir_alloc>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d11c      	bne.n	800bd74 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	69db      	ldr	r3, [r3, #28]
 800bd3e:	4619      	mov	r1, r3
 800bd40:	68b8      	ldr	r0, [r7, #8]
 800bd42:	f7ff fa57 	bl	800b1f4 <move_window>
 800bd46:	4603      	mov	r3, r0
 800bd48:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d111      	bne.n	800bd74 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a1b      	ldr	r3, [r3, #32]
 800bd54:	2220      	movs	r2, #32
 800bd56:	2100      	movs	r1, #0
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff f83e 	bl	800adda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a18      	ldr	r0, [r3, #32]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	3324      	adds	r3, #36	; 0x24
 800bd66:	220b      	movs	r2, #11
 800bd68:	4619      	mov	r1, r3
 800bd6a:	f7ff f815 	bl	800ad98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2201      	movs	r2, #1
 800bd72:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	60fb      	str	r3, [r7, #12]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	3324      	adds	r3, #36	; 0x24
 800bd94:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bd96:	220b      	movs	r2, #11
 800bd98:	2120      	movs	r1, #32
 800bd9a:	68b8      	ldr	r0, [r7, #8]
 800bd9c:	f7ff f81d 	bl	800adda <mem_set>
	si = i = 0; ni = 8;
 800bda0:	2300      	movs	r3, #0
 800bda2:	613b      	str	r3, [r7, #16]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	617b      	str	r3, [r7, #20]
 800bda8:	2308      	movs	r3, #8
 800bdaa:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	617a      	str	r2, [r7, #20]
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bdba:	7ffb      	ldrb	r3, [r7, #31]
 800bdbc:	2b20      	cmp	r3, #32
 800bdbe:	d94e      	bls.n	800be5e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bdc0:	7ffb      	ldrb	r3, [r7, #31]
 800bdc2:	2b2f      	cmp	r3, #47	; 0x2f
 800bdc4:	d006      	beq.n	800bdd4 <create_name+0x54>
 800bdc6:	7ffb      	ldrb	r3, [r7, #31]
 800bdc8:	2b5c      	cmp	r3, #92	; 0x5c
 800bdca:	d110      	bne.n	800bdee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bdcc:	e002      	b.n	800bdd4 <create_name+0x54>
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	617b      	str	r3, [r7, #20]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	4413      	add	r3, r2
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	2b2f      	cmp	r3, #47	; 0x2f
 800bdde:	d0f6      	beq.n	800bdce <create_name+0x4e>
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	4413      	add	r3, r2
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b5c      	cmp	r3, #92	; 0x5c
 800bdea:	d0f0      	beq.n	800bdce <create_name+0x4e>
			break;
 800bdec:	e038      	b.n	800be60 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bdee:	7ffb      	ldrb	r3, [r7, #31]
 800bdf0:	2b2e      	cmp	r3, #46	; 0x2e
 800bdf2:	d003      	beq.n	800bdfc <create_name+0x7c>
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d30c      	bcc.n	800be16 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	2b0b      	cmp	r3, #11
 800be00:	d002      	beq.n	800be08 <create_name+0x88>
 800be02:	7ffb      	ldrb	r3, [r7, #31]
 800be04:	2b2e      	cmp	r3, #46	; 0x2e
 800be06:	d001      	beq.n	800be0c <create_name+0x8c>
 800be08:	2306      	movs	r3, #6
 800be0a:	e044      	b.n	800be96 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800be0c:	2308      	movs	r3, #8
 800be0e:	613b      	str	r3, [r7, #16]
 800be10:	230b      	movs	r3, #11
 800be12:	61bb      	str	r3, [r7, #24]
			continue;
 800be14:	e022      	b.n	800be5c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800be16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	da04      	bge.n	800be28 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800be1e:	7ffb      	ldrb	r3, [r7, #31]
 800be20:	3b80      	subs	r3, #128	; 0x80
 800be22:	4a1f      	ldr	r2, [pc, #124]	; (800bea0 <create_name+0x120>)
 800be24:	5cd3      	ldrb	r3, [r2, r3]
 800be26:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800be28:	7ffb      	ldrb	r3, [r7, #31]
 800be2a:	4619      	mov	r1, r3
 800be2c:	481d      	ldr	r0, [pc, #116]	; (800bea4 <create_name+0x124>)
 800be2e:	f7ff f815 	bl	800ae5c <chk_chr>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <create_name+0xbc>
 800be38:	2306      	movs	r3, #6
 800be3a:	e02c      	b.n	800be96 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800be3c:	7ffb      	ldrb	r3, [r7, #31]
 800be3e:	2b60      	cmp	r3, #96	; 0x60
 800be40:	d905      	bls.n	800be4e <create_name+0xce>
 800be42:	7ffb      	ldrb	r3, [r7, #31]
 800be44:	2b7a      	cmp	r3, #122	; 0x7a
 800be46:	d802      	bhi.n	800be4e <create_name+0xce>
 800be48:	7ffb      	ldrb	r3, [r7, #31]
 800be4a:	3b20      	subs	r3, #32
 800be4c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	1c5a      	adds	r2, r3, #1
 800be52:	613a      	str	r2, [r7, #16]
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	4413      	add	r3, r2
 800be58:	7ffa      	ldrb	r2, [r7, #31]
 800be5a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800be5c:	e7a6      	b.n	800bdac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be5e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	441a      	add	r2, r3
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <create_name+0xf4>
 800be70:	2306      	movs	r3, #6
 800be72:	e010      	b.n	800be96 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	2be5      	cmp	r3, #229	; 0xe5
 800be7a:	d102      	bne.n	800be82 <create_name+0x102>
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2205      	movs	r2, #5
 800be80:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be82:	7ffb      	ldrb	r3, [r7, #31]
 800be84:	2b20      	cmp	r3, #32
 800be86:	d801      	bhi.n	800be8c <create_name+0x10c>
 800be88:	2204      	movs	r2, #4
 800be8a:	e000      	b.n	800be8e <create_name+0x10e>
 800be8c:	2200      	movs	r2, #0
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	330b      	adds	r3, #11
 800be92:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800be94:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800be96:	4618      	mov	r0, r3
 800be98:	3720      	adds	r7, #32
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	0800dd3c 	.word	0x0800dd3c
 800bea4:	0800dacc 	.word	0x0800dacc

0800bea8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bebc:	e002      	b.n	800bec4 <follow_path+0x1c>
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	3301      	adds	r3, #1
 800bec2:	603b      	str	r3, [r7, #0]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b2f      	cmp	r3, #47	; 0x2f
 800beca:	d0f8      	beq.n	800bebe <follow_path+0x16>
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	2b5c      	cmp	r3, #92	; 0x5c
 800bed2:	d0f4      	beq.n	800bebe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	2200      	movs	r2, #0
 800bed8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b1f      	cmp	r3, #31
 800bee0:	d80a      	bhi.n	800bef8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2280      	movs	r2, #128	; 0x80
 800bee6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800beea:	2100      	movs	r1, #0
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff fcf9 	bl	800b8e4 <dir_sdi>
 800bef2:	4603      	mov	r3, r0
 800bef4:	75fb      	strb	r3, [r7, #23]
 800bef6:	e043      	b.n	800bf80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bef8:	463b      	mov	r3, r7
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f7ff ff3f 	bl	800bd80 <create_name>
 800bf02:	4603      	mov	r3, r0
 800bf04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d134      	bne.n	800bf76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7ff feaf 	bl	800bc70 <dir_find>
 800bf12:	4603      	mov	r3, r0
 800bf14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00a      	beq.n	800bf3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
 800bf26:	2b04      	cmp	r3, #4
 800bf28:	d127      	bne.n	800bf7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bf2a:	7afb      	ldrb	r3, [r7, #11]
 800bf2c:	f003 0304 	and.w	r3, r3, #4
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d122      	bne.n	800bf7a <follow_path+0xd2>
 800bf34:	2305      	movs	r3, #5
 800bf36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bf38:	e01f      	b.n	800bf7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf3a:	7afb      	ldrb	r3, [r7, #11]
 800bf3c:	f003 0304 	and.w	r3, r3, #4
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d11c      	bne.n	800bf7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	799b      	ldrb	r3, [r3, #6]
 800bf48:	f003 0310 	and.w	r3, r3, #16
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d102      	bne.n	800bf56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bf50:	2305      	movs	r3, #5
 800bf52:	75fb      	strb	r3, [r7, #23]
 800bf54:	e014      	b.n	800bf80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf64:	4413      	add	r3, r2
 800bf66:	4619      	mov	r1, r3
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f7ff fe42 	bl	800bbf2 <ld_clust>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf74:	e7c0      	b.n	800bef8 <follow_path+0x50>
			if (res != FR_OK) break;
 800bf76:	bf00      	nop
 800bf78:	e002      	b.n	800bf80 <follow_path+0xd8>
				break;
 800bf7a:	bf00      	nop
 800bf7c:	e000      	b.n	800bf80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf7e:	bf00      	nop
			}
		}
	}

	return res;
 800bf80:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b087      	sub	sp, #28
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bf92:	f04f 33ff 	mov.w	r3, #4294967295
 800bf96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d031      	beq.n	800c004 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	617b      	str	r3, [r7, #20]
 800bfa6:	e002      	b.n	800bfae <get_ldnumber+0x24>
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	617b      	str	r3, [r7, #20]
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	2b20      	cmp	r3, #32
 800bfb4:	d903      	bls.n	800bfbe <get_ldnumber+0x34>
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b3a      	cmp	r3, #58	; 0x3a
 800bfbc:	d1f4      	bne.n	800bfa8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	2b3a      	cmp	r3, #58	; 0x3a
 800bfc4:	d11c      	bne.n	800c000 <get_ldnumber+0x76>
			tp = *path;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	1c5a      	adds	r2, r3, #1
 800bfd0:	60fa      	str	r2, [r7, #12]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	3b30      	subs	r3, #48	; 0x30
 800bfd6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	2b09      	cmp	r3, #9
 800bfdc:	d80e      	bhi.n	800bffc <get_ldnumber+0x72>
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d10a      	bne.n	800bffc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d107      	bne.n	800bffc <get_ldnumber+0x72>
					vol = (int)i;
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	3301      	adds	r3, #1
 800bff4:	617b      	str	r3, [r7, #20]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	e002      	b.n	800c006 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c000:	2300      	movs	r3, #0
 800c002:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c004:	693b      	ldr	r3, [r7, #16]
}
 800c006:	4618      	mov	r0, r3
 800c008:	371c      	adds	r7, #28
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
	...

0800c014 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	70da      	strb	r2, [r3, #3]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f04f 32ff 	mov.w	r2, #4294967295
 800c02a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff f8e0 	bl	800b1f4 <move_window>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <check_fs+0x2a>
 800c03a:	2304      	movs	r3, #4
 800c03c:	e038      	b.n	800c0b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3330      	adds	r3, #48	; 0x30
 800c042:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe fe24 	bl	800ac94 <ld_word>
 800c04c:	4603      	mov	r3, r0
 800c04e:	461a      	mov	r2, r3
 800c050:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c054:	429a      	cmp	r2, r3
 800c056:	d001      	beq.n	800c05c <check_fs+0x48>
 800c058:	2303      	movs	r3, #3
 800c05a:	e029      	b.n	800c0b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c062:	2be9      	cmp	r3, #233	; 0xe9
 800c064:	d009      	beq.n	800c07a <check_fs+0x66>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c06c:	2beb      	cmp	r3, #235	; 0xeb
 800c06e:	d11e      	bne.n	800c0ae <check_fs+0x9a>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c076:	2b90      	cmp	r3, #144	; 0x90
 800c078:	d119      	bne.n	800c0ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	3330      	adds	r3, #48	; 0x30
 800c07e:	3336      	adds	r3, #54	; 0x36
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe fe1f 	bl	800acc4 <ld_dword>
 800c086:	4603      	mov	r3, r0
 800c088:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c08c:	4a0a      	ldr	r2, [pc, #40]	; (800c0b8 <check_fs+0xa4>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d101      	bne.n	800c096 <check_fs+0x82>
 800c092:	2300      	movs	r3, #0
 800c094:	e00c      	b.n	800c0b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	3330      	adds	r3, #48	; 0x30
 800c09a:	3352      	adds	r3, #82	; 0x52
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fe fe11 	bl	800acc4 <ld_dword>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	4b05      	ldr	r3, [pc, #20]	; (800c0bc <check_fs+0xa8>)
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d101      	bne.n	800c0ae <check_fs+0x9a>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	e000      	b.n	800c0b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c0ae:	2302      	movs	r3, #2
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	00544146 	.word	0x00544146
 800c0bc:	33544146 	.word	0x33544146

0800c0c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b096      	sub	sp, #88	; 0x58
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f7ff ff58 	bl	800bf8a <get_ldnumber>
 800c0da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	da01      	bge.n	800c0e6 <find_volume+0x26>
 800c0e2:	230b      	movs	r3, #11
 800c0e4:	e22e      	b.n	800c544 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c0e6:	4aa8      	ldr	r2, [pc, #672]	; (800c388 <find_volume+0x2c8>)
 800c0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <find_volume+0x3a>
 800c0f6:	230c      	movs	r3, #12
 800c0f8:	e224      	b.n	800c544 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	f023 0301 	bic.w	r3, r3, #1
 800c106:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d01a      	beq.n	800c146 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c112:	785b      	ldrb	r3, [r3, #1]
 800c114:	4618      	mov	r0, r3
 800c116:	f7fe fd1f 	bl	800ab58 <disk_status>
 800c11a:	4603      	mov	r3, r0
 800c11c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10c      	bne.n	800c146 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c12c:	79fb      	ldrb	r3, [r7, #7]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d007      	beq.n	800c142 <find_volume+0x82>
 800c132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c136:	f003 0304 	and.w	r3, r3, #4
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c13e:	230a      	movs	r3, #10
 800c140:	e200      	b.n	800c544 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800c142:	2300      	movs	r3, #0
 800c144:	e1fe      	b.n	800c544 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	2200      	movs	r2, #0
 800c14a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c152:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	785b      	ldrb	r3, [r3, #1]
 800c158:	4618      	mov	r0, r3
 800c15a:	f7fe fd17 	bl	800ab8c <disk_initialize>
 800c15e:	4603      	mov	r3, r0
 800c160:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c164:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c168:	f003 0301 	and.w	r3, r3, #1
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d001      	beq.n	800c174 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c170:	2303      	movs	r3, #3
 800c172:	e1e7      	b.n	800c544 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c174:	79fb      	ldrb	r3, [r7, #7]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <find_volume+0xca>
 800c17a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c17e:	f003 0304 	and.w	r3, r3, #4
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c186:	230a      	movs	r3, #10
 800c188:	e1dc      	b.n	800c544 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c18e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c192:	f7ff ff3f 	bl	800c014 <check_fs>
 800c196:	4603      	mov	r3, r0
 800c198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c19c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d14b      	bne.n	800c23c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	643b      	str	r3, [r7, #64]	; 0x40
 800c1a8:	e01f      	b.n	800c1ea <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c1b8:	4413      	add	r3, r2
 800c1ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	3304      	adds	r3, #4
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d006      	beq.n	800c1d4 <find_volume+0x114>
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe fd7a 	bl	800acc4 <ld_dword>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	e000      	b.n	800c1d6 <find_volume+0x116>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c1de:	440b      	add	r3, r1
 800c1e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	643b      	str	r3, [r7, #64]	; 0x40
 800c1ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ec:	2b03      	cmp	r3, #3
 800c1ee:	d9dc      	bls.n	800c1aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <find_volume+0x140>
 800c1fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c208:	4413      	add	r3, r2
 800c20a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c20e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c212:	2b00      	cmp	r3, #0
 800c214:	d005      	beq.n	800c222 <find_volume+0x162>
 800c216:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c218:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c21a:	f7ff fefb 	bl	800c014 <check_fs>
 800c21e:	4603      	mov	r3, r0
 800c220:	e000      	b.n	800c224 <find_volume+0x164>
 800c222:	2303      	movs	r3, #3
 800c224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d905      	bls.n	800c23c <find_volume+0x17c>
 800c230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c232:	3301      	adds	r3, #1
 800c234:	643b      	str	r3, [r7, #64]	; 0x40
 800c236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c238:	2b03      	cmp	r3, #3
 800c23a:	d9e1      	bls.n	800c200 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c23c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c240:	2b04      	cmp	r3, #4
 800c242:	d101      	bne.n	800c248 <find_volume+0x188>
 800c244:	2301      	movs	r3, #1
 800c246:	e17d      	b.n	800c544 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d901      	bls.n	800c254 <find_volume+0x194>
 800c250:	230d      	movs	r3, #13
 800c252:	e177      	b.n	800c544 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c256:	3330      	adds	r3, #48	; 0x30
 800c258:	330b      	adds	r3, #11
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fe fd1a 	bl	800ac94 <ld_word>
 800c260:	4603      	mov	r3, r0
 800c262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c266:	d001      	beq.n	800c26c <find_volume+0x1ac>
 800c268:	230d      	movs	r3, #13
 800c26a:	e16b      	b.n	800c544 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26e:	3330      	adds	r3, #48	; 0x30
 800c270:	3316      	adds	r3, #22
 800c272:	4618      	mov	r0, r3
 800c274:	f7fe fd0e 	bl	800ac94 <ld_word>
 800c278:	4603      	mov	r3, r0
 800c27a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d106      	bne.n	800c290 <find_volume+0x1d0>
 800c282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c284:	3330      	adds	r3, #48	; 0x30
 800c286:	3324      	adds	r3, #36	; 0x24
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fe fd1b 	bl	800acc4 <ld_dword>
 800c28e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c294:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c298:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a2:	789b      	ldrb	r3, [r3, #2]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d005      	beq.n	800c2b4 <find_volume+0x1f4>
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	789b      	ldrb	r3, [r3, #2]
 800c2ac:	2b02      	cmp	r3, #2
 800c2ae:	d001      	beq.n	800c2b4 <find_volume+0x1f4>
 800c2b0:	230d      	movs	r3, #13
 800c2b2:	e147      	b.n	800c544 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b6:	789b      	ldrb	r3, [r3, #2]
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2bc:	fb02 f303 	mul.w	r3, r2, r3
 800c2c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	895b      	ldrh	r3, [r3, #10]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d008      	beq.n	800c2e8 <find_volume+0x228>
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d8:	895b      	ldrh	r3, [r3, #10]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2de:	895b      	ldrh	r3, [r3, #10]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	4013      	ands	r3, r2
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <find_volume+0x22c>
 800c2e8:	230d      	movs	r3, #13
 800c2ea:	e12b      	b.n	800c544 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ee:	3330      	adds	r3, #48	; 0x30
 800c2f0:	3311      	adds	r3, #17
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fe fcce 	bl	800ac94 <ld_word>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	891b      	ldrh	r3, [r3, #8]
 800c304:	f003 030f 	and.w	r3, r3, #15
 800c308:	b29b      	uxth	r3, r3
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d001      	beq.n	800c312 <find_volume+0x252>
 800c30e:	230d      	movs	r3, #13
 800c310:	e118      	b.n	800c544 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c314:	3330      	adds	r3, #48	; 0x30
 800c316:	3313      	adds	r3, #19
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe fcbb 	bl	800ac94 <ld_word>
 800c31e:	4603      	mov	r3, r0
 800c320:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c324:	2b00      	cmp	r3, #0
 800c326:	d106      	bne.n	800c336 <find_volume+0x276>
 800c328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32a:	3330      	adds	r3, #48	; 0x30
 800c32c:	3320      	adds	r3, #32
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fe fcc8 	bl	800acc4 <ld_dword>
 800c334:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c338:	3330      	adds	r3, #48	; 0x30
 800c33a:	330e      	adds	r3, #14
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fe fca9 	bl	800ac94 <ld_word>
 800c342:	4603      	mov	r3, r0
 800c344:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c346:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <find_volume+0x290>
 800c34c:	230d      	movs	r3, #13
 800c34e:	e0f9      	b.n	800c544 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c350:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c354:	4413      	add	r3, r2
 800c356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c358:	8912      	ldrh	r2, [r2, #8]
 800c35a:	0912      	lsrs	r2, r2, #4
 800c35c:	b292      	uxth	r2, r2
 800c35e:	4413      	add	r3, r2
 800c360:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	429a      	cmp	r2, r3
 800c368:	d201      	bcs.n	800c36e <find_volume+0x2ae>
 800c36a:	230d      	movs	r3, #13
 800c36c:	e0ea      	b.n	800c544 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c36e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c376:	8952      	ldrh	r2, [r2, #10]
 800c378:	fbb3 f3f2 	udiv	r3, r3, r2
 800c37c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c380:	2b00      	cmp	r3, #0
 800c382:	d103      	bne.n	800c38c <find_volume+0x2cc>
 800c384:	230d      	movs	r3, #13
 800c386:	e0dd      	b.n	800c544 <find_volume+0x484>
 800c388:	200094e0 	.word	0x200094e0
		fmt = FS_FAT32;
 800c38c:	2303      	movs	r3, #3
 800c38e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c394:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c398:	4293      	cmp	r3, r2
 800c39a:	d802      	bhi.n	800c3a2 <find_volume+0x2e2>
 800c39c:	2302      	movs	r3, #2
 800c39e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d802      	bhi.n	800c3b2 <find_volume+0x2f2>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b4:	1c9a      	adds	r2, r3, #2
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3be:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c3c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3c4:	441a      	add	r2, r3
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c3ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ce:	441a      	add	r2, r3
 800c3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d11e      	bne.n	800c41a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3de:	3330      	adds	r3, #48	; 0x30
 800c3e0:	332a      	adds	r3, #42	; 0x2a
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe fc56 	bl	800ac94 <ld_word>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d001      	beq.n	800c3f2 <find_volume+0x332>
 800c3ee:	230d      	movs	r3, #13
 800c3f0:	e0a8      	b.n	800c544 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	891b      	ldrh	r3, [r3, #8]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d001      	beq.n	800c3fe <find_volume+0x33e>
 800c3fa:	230d      	movs	r3, #13
 800c3fc:	e0a2      	b.n	800c544 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c400:	3330      	adds	r3, #48	; 0x30
 800c402:	332c      	adds	r3, #44	; 0x2c
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe fc5d 	bl	800acc4 <ld_dword>
 800c40a:	4602      	mov	r2, r0
 800c40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	695b      	ldr	r3, [r3, #20]
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	647b      	str	r3, [r7, #68]	; 0x44
 800c418:	e01f      	b.n	800c45a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41c:	891b      	ldrh	r3, [r3, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <find_volume+0x366>
 800c422:	230d      	movs	r3, #13
 800c424:	e08e      	b.n	800c544 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	6a1a      	ldr	r2, [r3, #32]
 800c42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c42c:	441a      	add	r2, r3
 800c42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c430:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c432:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c436:	2b02      	cmp	r3, #2
 800c438:	d103      	bne.n	800c442 <find_volume+0x382>
 800c43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	e00a      	b.n	800c458 <find_volume+0x398>
 800c442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c444:	695a      	ldr	r2, [r3, #20]
 800c446:	4613      	mov	r3, r2
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	4413      	add	r3, r2
 800c44c:	085a      	lsrs	r2, r3, #1
 800c44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c458:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45c:	699a      	ldr	r2, [r3, #24]
 800c45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c460:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c464:	0a5b      	lsrs	r3, r3, #9
 800c466:	429a      	cmp	r2, r3
 800c468:	d201      	bcs.n	800c46e <find_volume+0x3ae>
 800c46a:	230d      	movs	r3, #13
 800c46c:	e06a      	b.n	800c544 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c470:	f04f 32ff 	mov.w	r2, #4294967295
 800c474:	611a      	str	r2, [r3, #16]
 800c476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c478:	691a      	ldr	r2, [r3, #16]
 800c47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c480:	2280      	movs	r2, #128	; 0x80
 800c482:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d149      	bne.n	800c520 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48e:	3330      	adds	r3, #48	; 0x30
 800c490:	3330      	adds	r3, #48	; 0x30
 800c492:	4618      	mov	r0, r3
 800c494:	f7fe fbfe 	bl	800ac94 <ld_word>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d140      	bne.n	800c520 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4a6:	f7fe fea5 	bl	800b1f4 <move_window>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d137      	bne.n	800c520 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800c4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b8:	3330      	adds	r3, #48	; 0x30
 800c4ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe fbe8 	bl	800ac94 <ld_word>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d127      	bne.n	800c520 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d2:	3330      	adds	r3, #48	; 0x30
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fe fbf5 	bl	800acc4 <ld_dword>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	4b1b      	ldr	r3, [pc, #108]	; (800c54c <find_volume+0x48c>)
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d11e      	bne.n	800c520 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e4:	3330      	adds	r3, #48	; 0x30
 800c4e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fbea 	bl	800acc4 <ld_dword>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	4b17      	ldr	r3, [pc, #92]	; (800c550 <find_volume+0x490>)
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d113      	bne.n	800c520 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fa:	3330      	adds	r3, #48	; 0x30
 800c4fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c500:	4618      	mov	r0, r3
 800c502:	f7fe fbdf 	bl	800acc4 <ld_dword>
 800c506:	4602      	mov	r2, r0
 800c508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	3330      	adds	r3, #48	; 0x30
 800c510:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c514:	4618      	mov	r0, r3
 800c516:	f7fe fbd5 	bl	800acc4 <ld_dword>
 800c51a:	4602      	mov	r2, r0
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c526:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c528:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <find_volume+0x494>)
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	3301      	adds	r3, #1
 800c52e:	b29a      	uxth	r2, r3
 800c530:	4b08      	ldr	r3, [pc, #32]	; (800c554 <find_volume+0x494>)
 800c532:	801a      	strh	r2, [r3, #0]
 800c534:	4b07      	ldr	r3, [pc, #28]	; (800c554 <find_volume+0x494>)
 800c536:	881a      	ldrh	r2, [r3, #0]
 800c538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c53c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c53e:	f7fe fdf1 	bl	800b124 <clear_lock>
#endif
	return FR_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3758      	adds	r7, #88	; 0x58
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	41615252 	.word	0x41615252
 800c550:	61417272 	.word	0x61417272
 800c554:	200094e4 	.word	0x200094e4

0800c558 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c562:	2309      	movs	r3, #9
 800c564:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d01c      	beq.n	800c5a6 <validate+0x4e>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d018      	beq.n	800c5a6 <validate+0x4e>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d013      	beq.n	800c5a6 <validate+0x4e>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	889a      	ldrh	r2, [r3, #4]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	88db      	ldrh	r3, [r3, #6]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d10c      	bne.n	800c5a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	785b      	ldrb	r3, [r3, #1]
 800c592:	4618      	mov	r0, r3
 800c594:	f7fe fae0 	bl	800ab58 <disk_status>
 800c598:	4603      	mov	r3, r0
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <validate+0x4e>
			res = FR_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d102      	bne.n	800c5b2 <validate+0x5a>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	e000      	b.n	800c5b4 <validate+0x5c>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	6013      	str	r3, [r2, #0]
	return res;
 800c5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
	...

0800c5c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b088      	sub	sp, #32
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c5d6:	f107 0310 	add.w	r3, r7, #16
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff fcd5 	bl	800bf8a <get_ldnumber>
 800c5e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	da01      	bge.n	800c5ec <f_mount+0x28>
 800c5e8:	230b      	movs	r3, #11
 800c5ea:	e02b      	b.n	800c644 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c5ec:	4a17      	ldr	r2, [pc, #92]	; (800c64c <f_mount+0x88>)
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d005      	beq.n	800c608 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c5fc:	69b8      	ldr	r0, [r7, #24]
 800c5fe:	f7fe fd91 	bl	800b124 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	2200      	movs	r2, #0
 800c606:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	490d      	ldr	r1, [pc, #52]	; (800c64c <f_mount+0x88>)
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <f_mount+0x66>
 800c624:	79fb      	ldrb	r3, [r7, #7]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d001      	beq.n	800c62e <f_mount+0x6a>
 800c62a:	2300      	movs	r3, #0
 800c62c:	e00a      	b.n	800c644 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c62e:	f107 010c 	add.w	r1, r7, #12
 800c632:	f107 0308 	add.w	r3, r7, #8
 800c636:	2200      	movs	r2, #0
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff fd41 	bl	800c0c0 <find_volume>
 800c63e:	4603      	mov	r3, r0
 800c640:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c642:	7dfb      	ldrb	r3, [r7, #23]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3720      	adds	r7, #32
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	200094e0 	.word	0x200094e0

0800c650 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b098      	sub	sp, #96	; 0x60
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	4613      	mov	r3, r2
 800c65c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <f_open+0x18>
 800c664:	2309      	movs	r3, #9
 800c666:	e1ad      	b.n	800c9c4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c668:	79fb      	ldrb	r3, [r7, #7]
 800c66a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c66e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c670:	79fa      	ldrb	r2, [r7, #7]
 800c672:	f107 0110 	add.w	r1, r7, #16
 800c676:	f107 0308 	add.w	r3, r7, #8
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7ff fd20 	bl	800c0c0 <find_volume>
 800c680:	4603      	mov	r3, r0
 800c682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f040 8191 	bne.w	800c9b2 <f_open+0x362>
		dj.obj.fs = fs;
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	f107 0314 	add.w	r3, r7, #20
 800c69a:	4611      	mov	r1, r2
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7ff fc03 	bl	800bea8 <follow_path>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c6a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d11a      	bne.n	800c6e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c6b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c6b4:	b25b      	sxtb	r3, r3
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	da03      	bge.n	800c6c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c6ba:	2306      	movs	r3, #6
 800c6bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c6c0:	e011      	b.n	800c6e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c6c2:	79fb      	ldrb	r3, [r7, #7]
 800c6c4:	f023 0301 	bic.w	r3, r3, #1
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	bf14      	ite	ne
 800c6cc:	2301      	movne	r3, #1
 800c6ce:	2300      	moveq	r3, #0
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	f107 0314 	add.w	r3, r7, #20
 800c6d8:	4611      	mov	r1, r2
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe fbda 	bl	800ae94 <chk_lock>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c6e6:	79fb      	ldrb	r3, [r7, #7]
 800c6e8:	f003 031c 	and.w	r3, r3, #28
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d07f      	beq.n	800c7f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d017      	beq.n	800c728 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c6f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6fc:	2b04      	cmp	r3, #4
 800c6fe:	d10e      	bne.n	800c71e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c700:	f7fe fc24 	bl	800af4c <enq_lock>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d006      	beq.n	800c718 <f_open+0xc8>
 800c70a:	f107 0314 	add.w	r3, r7, #20
 800c70e:	4618      	mov	r0, r3
 800c710:	f7ff fb03 	bl	800bd1a <dir_register>
 800c714:	4603      	mov	r3, r0
 800c716:	e000      	b.n	800c71a <f_open+0xca>
 800c718:	2312      	movs	r3, #18
 800c71a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c71e:	79fb      	ldrb	r3, [r7, #7]
 800c720:	f043 0308 	orr.w	r3, r3, #8
 800c724:	71fb      	strb	r3, [r7, #7]
 800c726:	e010      	b.n	800c74a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c728:	7ebb      	ldrb	r3, [r7, #26]
 800c72a:	f003 0311 	and.w	r3, r3, #17
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <f_open+0xea>
					res = FR_DENIED;
 800c732:	2307      	movs	r3, #7
 800c734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c738:	e007      	b.n	800c74a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c73a:	79fb      	ldrb	r3, [r7, #7]
 800c73c:	f003 0304 	and.w	r3, r3, #4
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <f_open+0xfa>
 800c744:	2308      	movs	r3, #8
 800c746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c74a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d168      	bne.n	800c824 <f_open+0x1d4>
 800c752:	79fb      	ldrb	r3, [r7, #7]
 800c754:	f003 0308 	and.w	r3, r3, #8
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d063      	beq.n	800c824 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c75c:	f7fb f960 	bl	8007a20 <get_fattime>
 800c760:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c764:	330e      	adds	r3, #14
 800c766:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe fae9 	bl	800ad40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c770:	3316      	adds	r3, #22
 800c772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c774:	4618      	mov	r0, r3
 800c776:	f7fe fae3 	bl	800ad40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c77c:	330b      	adds	r3, #11
 800c77e:	2220      	movs	r2, #32
 800c780:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c786:	4611      	mov	r1, r2
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff fa32 	bl	800bbf2 <ld_clust>
 800c78e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c794:	2200      	movs	r2, #0
 800c796:	4618      	mov	r0, r3
 800c798:	f7ff fa4a 	bl	800bc30 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79e:	331c      	adds	r3, #28
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fe facc 	bl	800ad40 <st_dword>
					fs->wflag = 1;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d037      	beq.n	800c824 <f_open+0x1d4>
						dw = fs->winsect;
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c7ba:	f107 0314 	add.w	r3, r7, #20
 800c7be:	2200      	movs	r2, #0
 800c7c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe ff5d 	bl	800b682 <remove_chain>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c7ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d126      	bne.n	800c824 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fe fd0a 	bl	800b1f4 <move_window>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7ea:	3a01      	subs	r2, #1
 800c7ec:	60da      	str	r2, [r3, #12]
 800c7ee:	e019      	b.n	800c824 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c7f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d115      	bne.n	800c824 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c7f8:	7ebb      	ldrb	r3, [r7, #26]
 800c7fa:	f003 0310 	and.w	r3, r3, #16
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d003      	beq.n	800c80a <f_open+0x1ba>
					res = FR_NO_FILE;
 800c802:	2304      	movs	r3, #4
 800c804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c808:	e00c      	b.n	800c824 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	f003 0302 	and.w	r3, r3, #2
 800c810:	2b00      	cmp	r3, #0
 800c812:	d007      	beq.n	800c824 <f_open+0x1d4>
 800c814:	7ebb      	ldrb	r3, [r7, #26]
 800c816:	f003 0301 	and.w	r3, r3, #1
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <f_open+0x1d4>
						res = FR_DENIED;
 800c81e:	2307      	movs	r3, #7
 800c820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d128      	bne.n	800c87e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c82c:	79fb      	ldrb	r3, [r7, #7]
 800c82e:	f003 0308 	and.w	r3, r3, #8
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c836:	79fb      	ldrb	r3, [r7, #7]
 800c838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c83c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c84c:	79fb      	ldrb	r3, [r7, #7]
 800c84e:	f023 0301 	bic.w	r3, r3, #1
 800c852:	2b00      	cmp	r3, #0
 800c854:	bf14      	ite	ne
 800c856:	2301      	movne	r3, #1
 800c858:	2300      	moveq	r3, #0
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	461a      	mov	r2, r3
 800c85e:	f107 0314 	add.w	r3, r7, #20
 800c862:	4611      	mov	r1, r2
 800c864:	4618      	mov	r0, r3
 800c866:	f7fe fb93 	bl	800af90 <inc_lock>
 800c86a:	4602      	mov	r2, r0
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d102      	bne.n	800c87e <f_open+0x22e>
 800c878:	2302      	movs	r3, #2
 800c87a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c87e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c882:	2b00      	cmp	r3, #0
 800c884:	f040 8095 	bne.w	800c9b2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c88c:	4611      	mov	r1, r2
 800c88e:	4618      	mov	r0, r3
 800c890:	f7ff f9af 	bl	800bbf2 <ld_clust>
 800c894:	4602      	mov	r2, r0
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89c:	331c      	adds	r3, #28
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fe fa10 	bl	800acc4 <ld_dword>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	88da      	ldrh	r2, [r3, #6]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	79fa      	ldrb	r2, [r7, #7]
 800c8c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	3330      	adds	r3, #48	; 0x30
 800c8da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8de:	2100      	movs	r1, #0
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7fe fa7a 	bl	800adda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c8e6:	79fb      	ldrb	r3, [r7, #7]
 800c8e8:	f003 0320 	and.w	r3, r3, #32
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d060      	beq.n	800c9b2 <f_open+0x362>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d05c      	beq.n	800c9b2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	68da      	ldr	r2, [r3, #12]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	895b      	ldrh	r3, [r3, #10]
 800c904:	025b      	lsls	r3, r3, #9
 800c906:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	657b      	str	r3, [r7, #84]	; 0x54
 800c914:	e016      	b.n	800c944 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe fd25 	bl	800b36a <get_fat>
 800c920:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c924:	2b01      	cmp	r3, #1
 800c926:	d802      	bhi.n	800c92e <f_open+0x2de>
 800c928:	2302      	movs	r3, #2
 800c92a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c92e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c934:	d102      	bne.n	800c93c <f_open+0x2ec>
 800c936:	2301      	movs	r3, #1
 800c938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c93c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c93e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	657b      	str	r3, [r7, #84]	; 0x54
 800c944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d103      	bne.n	800c954 <f_open+0x304>
 800c94c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c94e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c950:	429a      	cmp	r2, r3
 800c952:	d8e0      	bhi.n	800c916 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c958:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c95a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d127      	bne.n	800c9b2 <f_open+0x362>
 800c962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d022      	beq.n	800c9b2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c970:	4618      	mov	r0, r3
 800c972:	f7fe fcdb 	bl	800b32c <clust2sect>
 800c976:	6478      	str	r0, [r7, #68]	; 0x44
 800c978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d103      	bne.n	800c986 <f_open+0x336>
						res = FR_INT_ERR;
 800c97e:	2302      	movs	r3, #2
 800c980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c984:	e015      	b.n	800c9b2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c988:	0a5a      	lsrs	r2, r3, #9
 800c98a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c98c:	441a      	add	r2, r3
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	7858      	ldrb	r0, [r3, #1]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6a1a      	ldr	r2, [r3, #32]
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	f7fe f919 	bl	800abd8 <disk_read>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <f_open+0x362>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c9b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d002      	beq.n	800c9c0 <f_open+0x370>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c9c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3760      	adds	r7, #96	; 0x60
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b08e      	sub	sp, #56	; 0x38
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
 800c9d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f107 0214 	add.w	r2, r7, #20
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff fdb3 	bl	800c558 <validate>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c9f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d107      	bne.n	800ca10 <f_read+0x44>
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	7d5b      	ldrb	r3, [r3, #21]
 800ca04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ca08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <f_read+0x4a>
 800ca10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca14:	e115      	b.n	800cc42 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	7d1b      	ldrb	r3, [r3, #20]
 800ca1a:	f003 0301 	and.w	r3, r3, #1
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d101      	bne.n	800ca26 <f_read+0x5a>
 800ca22:	2307      	movs	r3, #7
 800ca24:	e10d      	b.n	800cc42 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	68da      	ldr	r2, [r3, #12]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	f240 80fe 	bls.w	800cc38 <f_read+0x26c>
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ca40:	e0fa      	b.n	800cc38 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	699b      	ldr	r3, [r3, #24]
 800ca46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f040 80c6 	bne.w	800cbdc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	0a5b      	lsrs	r3, r3, #9
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	8952      	ldrh	r2, [r2, #10]
 800ca5a:	3a01      	subs	r2, #1
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d12f      	bne.n	800cac6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d103      	bne.n	800ca76 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	633b      	str	r3, [r7, #48]	; 0x30
 800ca74:	e013      	b.n	800ca9e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d007      	beq.n	800ca8e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	4619      	mov	r1, r3
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f7fe fef9 	bl	800b87c <clmt_clust>
 800ca8a:	6338      	str	r0, [r7, #48]	; 0x30
 800ca8c:	e007      	b.n	800ca9e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	69db      	ldr	r3, [r3, #28]
 800ca94:	4619      	mov	r1, r3
 800ca96:	4610      	mov	r0, r2
 800ca98:	f7fe fc67 	bl	800b36a <get_fat>
 800ca9c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d804      	bhi.n	800caae <f_read+0xe2>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2202      	movs	r2, #2
 800caa8:	755a      	strb	r2, [r3, #21]
 800caaa:	2302      	movs	r3, #2
 800caac:	e0c9      	b.n	800cc42 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab4:	d104      	bne.n	800cac0 <f_read+0xf4>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2201      	movs	r2, #1
 800caba:	755a      	strb	r2, [r3, #21]
 800cabc:	2301      	movs	r3, #1
 800cabe:	e0c0      	b.n	800cc42 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cac4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	69db      	ldr	r3, [r3, #28]
 800cacc:	4619      	mov	r1, r3
 800cace:	4610      	mov	r0, r2
 800cad0:	f7fe fc2c 	bl	800b32c <clust2sect>
 800cad4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d104      	bne.n	800cae6 <f_read+0x11a>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2202      	movs	r2, #2
 800cae0:	755a      	strb	r2, [r3, #21]
 800cae2:	2302      	movs	r3, #2
 800cae4:	e0ad      	b.n	800cc42 <f_read+0x276>
			sect += csect;
 800cae6:	69ba      	ldr	r2, [r7, #24]
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	4413      	add	r3, r2
 800caec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	0a5b      	lsrs	r3, r3, #9
 800caf2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800caf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d039      	beq.n	800cb6e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cafa:	69fa      	ldr	r2, [r7, #28]
 800cafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafe:	4413      	add	r3, r2
 800cb00:	697a      	ldr	r2, [r7, #20]
 800cb02:	8952      	ldrh	r2, [r2, #10]
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d905      	bls.n	800cb14 <f_read+0x148>
					cc = fs->csize - csect;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	895b      	ldrh	r3, [r3, #10]
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	7858      	ldrb	r0, [r3, #1]
 800cb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1a:	69ba      	ldr	r2, [r7, #24]
 800cb1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb1e:	f7fe f85b 	bl	800abd8 <disk_read>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d004      	beq.n	800cb32 <f_read+0x166>
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	755a      	strb	r2, [r3, #21]
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e087      	b.n	800cc42 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	7d1b      	ldrb	r3, [r3, #20]
 800cb36:	b25b      	sxtb	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	da14      	bge.n	800cb66 <f_read+0x19a>
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6a1a      	ldr	r2, [r3, #32]
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d90d      	bls.n	800cb66 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6a1a      	ldr	r2, [r3, #32]
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	025b      	lsls	r3, r3, #9
 800cb54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb56:	18d0      	adds	r0, r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	3330      	adds	r3, #48	; 0x30
 800cb5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb60:	4619      	mov	r1, r3
 800cb62:	f7fe f919 	bl	800ad98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb68:	025b      	lsls	r3, r3, #9
 800cb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800cb6c:	e050      	b.n	800cc10 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6a1b      	ldr	r3, [r3, #32]
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d02e      	beq.n	800cbd6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	7d1b      	ldrb	r3, [r3, #20]
 800cb7c:	b25b      	sxtb	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	da18      	bge.n	800cbb4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	7858      	ldrb	r0, [r3, #1]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6a1a      	ldr	r2, [r3, #32]
 800cb90:	2301      	movs	r3, #1
 800cb92:	f7fe f841 	bl	800ac18 <disk_write>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d004      	beq.n	800cba6 <f_read+0x1da>
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	755a      	strb	r2, [r3, #21]
 800cba2:	2301      	movs	r3, #1
 800cba4:	e04d      	b.n	800cc42 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	7d1b      	ldrb	r3, [r3, #20]
 800cbaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	7858      	ldrb	r0, [r3, #1]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	f7fe f809 	bl	800abd8 <disk_read>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d004      	beq.n	800cbd6 <f_read+0x20a>
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	755a      	strb	r2, [r3, #21]
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e035      	b.n	800cc42 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	69ba      	ldr	r2, [r7, #24]
 800cbda:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	699b      	ldr	r3, [r3, #24]
 800cbe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cbe8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cbea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d901      	bls.n	800cbf6 <f_read+0x22a>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	699b      	ldr	r3, [r3, #24]
 800cc00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc04:	4413      	add	r3, r2
 800cc06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc0c:	f7fe f8c4 	bl	800ad98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cc10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc14:	4413      	add	r3, r2
 800cc16:	627b      	str	r3, [r7, #36]	; 0x24
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	699a      	ldr	r2, [r3, #24]
 800cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1e:	441a      	add	r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	619a      	str	r2, [r3, #24]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2a:	441a      	add	r2, r3
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	601a      	str	r2, [r3, #0]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	1ad3      	subs	r3, r2, r3
 800cc36:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f47f af01 	bne.w	800ca42 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3738      	adds	r7, #56	; 0x38
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b086      	sub	sp, #24
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f107 0208 	add.w	r2, r7, #8
 800cc58:	4611      	mov	r1, r2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7ff fc7c 	bl	800c558 <validate>
 800cc60:	4603      	mov	r3, r0
 800cc62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d168      	bne.n	800cd3c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	7d1b      	ldrb	r3, [r3, #20]
 800cc6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d062      	beq.n	800cd3c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	7d1b      	ldrb	r3, [r3, #20]
 800cc7a:	b25b      	sxtb	r3, r3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	da15      	bge.n	800ccac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	7858      	ldrb	r0, [r3, #1]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a1a      	ldr	r2, [r3, #32]
 800cc8e:	2301      	movs	r3, #1
 800cc90:	f7fd ffc2 	bl	800ac18 <disk_write>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <f_sync+0x54>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e04f      	b.n	800cd3e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	7d1b      	ldrb	r3, [r3, #20]
 800cca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cca6:	b2da      	uxtb	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ccac:	f7fa feb8 	bl	8007a20 <get_fattime>
 800ccb0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb8:	4619      	mov	r1, r3
 800ccba:	4610      	mov	r0, r2
 800ccbc:	f7fe fa9a 	bl	800b1f4 <move_window>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ccc4:	7dfb      	ldrb	r3, [r7, #23]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d138      	bne.n	800cd3c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	330b      	adds	r3, #11
 800ccd4:	781a      	ldrb	r2, [r3, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	330b      	adds	r3, #11
 800ccda:	f042 0220 	orr.w	r2, r2, #32
 800ccde:	b2d2      	uxtb	r2, r2
 800cce0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6818      	ldr	r0, [r3, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	461a      	mov	r2, r3
 800ccec:	68f9      	ldr	r1, [r7, #12]
 800ccee:	f7fe ff9f 	bl	800bc30 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f103 021c 	add.w	r2, r3, #28
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	4610      	mov	r0, r2
 800cd00:	f7fe f81e 	bl	800ad40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	3316      	adds	r3, #22
 800cd08:	6939      	ldr	r1, [r7, #16]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fe f818 	bl	800ad40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	3312      	adds	r3, #18
 800cd14:	2100      	movs	r1, #0
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fd fff7 	bl	800ad0a <st_word>
					fs->wflag = 1;
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fe fa93 	bl	800b250 <sync_fs>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	7d1b      	ldrb	r3, [r3, #20]
 800cd32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cd3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b084      	sub	sp, #16
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f7ff ff7b 	bl	800cc4a <f_sync>
 800cd54:	4603      	mov	r3, r0
 800cd56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d118      	bne.n	800cd90 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f107 0208 	add.w	r2, r7, #8
 800cd64:	4611      	mov	r1, r2
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7ff fbf6 	bl	800c558 <validate>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cd70:	7bfb      	ldrb	r3, [r7, #15]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10c      	bne.n	800cd90 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fe f996 	bl	800b0ac <dec_lock>
 800cd80:	4603      	mov	r3, r0
 800cd82:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d102      	bne.n	800cd90 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b090      	sub	sp, #64	; 0x40
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f107 0208 	add.w	r2, r7, #8
 800cdaa:	4611      	mov	r1, r2
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7ff fbd3 	bl	800c558 <validate>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cdb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d103      	bne.n	800cdc8 <f_lseek+0x2e>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	7d5b      	ldrb	r3, [r3, #21]
 800cdc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cdc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <f_lseek+0x3c>
 800cdd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdd4:	e1e6      	b.n	800d1a4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 80d1 	beq.w	800cf82 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde6:	d15a      	bne.n	800ce9e <f_lseek+0x104>
			tbl = fp->cltbl;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdec:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf0:	1d1a      	adds	r2, r3, #4
 800cdf2:	627a      	str	r2, [r7, #36]	; 0x24
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	617b      	str	r3, [r7, #20]
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ce02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d03a      	beq.n	800ce7e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ce08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0a:	613b      	str	r3, [r7, #16]
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce12:	3302      	adds	r3, #2
 800ce14:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ce16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe faa0 	bl	800b36a <get_fat>
 800ce2a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d804      	bhi.n	800ce3c <f_lseek+0xa2>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2202      	movs	r2, #2
 800ce36:	755a      	strb	r2, [r3, #21]
 800ce38:	2302      	movs	r3, #2
 800ce3a:	e1b3      	b.n	800d1a4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce42:	d104      	bne.n	800ce4e <f_lseek+0xb4>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	755a      	strb	r2, [r3, #21]
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e1aa      	b.n	800d1a4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3301      	adds	r3, #1
 800ce52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d0de      	beq.n	800ce16 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ce58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d809      	bhi.n	800ce74 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce62:	1d1a      	adds	r2, r3, #4
 800ce64:	627a      	str	r2, [r7, #36]	; 0x24
 800ce66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	1d1a      	adds	r2, r3, #4
 800ce6e:	627a      	str	r2, [r7, #36]	; 0x24
 800ce70:	693a      	ldr	r2, [r7, #16]
 800ce72:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d3c4      	bcc.n	800ce08 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce84:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ce86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d803      	bhi.n	800ce96 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce90:	2200      	movs	r2, #0
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	e184      	b.n	800d1a0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ce96:	2311      	movs	r3, #17
 800ce98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ce9c:	e180      	b.n	800d1a0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	683a      	ldr	r2, [r7, #0]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d902      	bls.n	800ceae <f_lseek+0x114>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	683a      	ldr	r2, [r7, #0]
 800ceb2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f000 8172 	beq.w	800d1a0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	3b01      	subs	r3, #1
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f7fe fcda 	bl	800b87c <clmt_clust>
 800cec8:	4602      	mov	r2, r0
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cece:	68ba      	ldr	r2, [r7, #8]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	69db      	ldr	r3, [r3, #28]
 800ced4:	4619      	mov	r1, r3
 800ced6:	4610      	mov	r0, r2
 800ced8:	f7fe fa28 	bl	800b32c <clust2sect>
 800cedc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d104      	bne.n	800ceee <f_lseek+0x154>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2202      	movs	r2, #2
 800cee8:	755a      	strb	r2, [r3, #21]
 800ceea:	2302      	movs	r3, #2
 800ceec:	e15a      	b.n	800d1a4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	3b01      	subs	r3, #1
 800cef2:	0a5b      	lsrs	r3, r3, #9
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	8952      	ldrh	r2, [r2, #10]
 800cef8:	3a01      	subs	r2, #1
 800cefa:	4013      	ands	r3, r2
 800cefc:	69ba      	ldr	r2, [r7, #24]
 800cefe:	4413      	add	r3, r2
 800cf00:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	699b      	ldr	r3, [r3, #24]
 800cf06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f000 8148 	beq.w	800d1a0 <f_lseek+0x406>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a1b      	ldr	r3, [r3, #32]
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	f000 8142 	beq.w	800d1a0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	7d1b      	ldrb	r3, [r3, #20]
 800cf20:	b25b      	sxtb	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	da18      	bge.n	800cf58 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	7858      	ldrb	r0, [r3, #1]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a1a      	ldr	r2, [r3, #32]
 800cf34:	2301      	movs	r3, #1
 800cf36:	f7fd fe6f 	bl	800ac18 <disk_write>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d004      	beq.n	800cf4a <f_lseek+0x1b0>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	755a      	strb	r2, [r3, #21]
 800cf46:	2301      	movs	r3, #1
 800cf48:	e12c      	b.n	800d1a4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7d1b      	ldrb	r3, [r3, #20]
 800cf4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	7858      	ldrb	r0, [r3, #1]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf62:	2301      	movs	r3, #1
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	f7fd fe37 	bl	800abd8 <disk_read>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d004      	beq.n	800cf7a <f_lseek+0x1e0>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	755a      	strb	r2, [r3, #21]
 800cf76:	2301      	movs	r3, #1
 800cf78:	e114      	b.n	800d1a4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	69ba      	ldr	r2, [r7, #24]
 800cf7e:	621a      	str	r2, [r3, #32]
 800cf80:	e10e      	b.n	800d1a0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	683a      	ldr	r2, [r7, #0]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d908      	bls.n	800cf9e <f_lseek+0x204>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	7d1b      	ldrb	r3, [r3, #20]
 800cf90:	f003 0302 	and.w	r3, r3, #2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d102      	bne.n	800cf9e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	699b      	ldr	r3, [r3, #24]
 800cfa2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	637b      	str	r3, [r7, #52]	; 0x34
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfac:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f000 80a7 	beq.w	800d104 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	895b      	ldrh	r3, [r3, #10]
 800cfba:	025b      	lsls	r3, r3, #9
 800cfbc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cfbe:	6a3b      	ldr	r3, [r7, #32]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d01b      	beq.n	800cffc <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	1e5a      	subs	r2, r3, #1
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfce:	6a3b      	ldr	r3, [r7, #32]
 800cfd0:	1e59      	subs	r1, r3, #1
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d30f      	bcc.n	800cffc <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	1e5a      	subs	r2, r3, #1
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	425b      	negs	r3, r3
 800cfe4:	401a      	ands	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	699b      	ldr	r3, [r3, #24]
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cffa:	e022      	b.n	800d042 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d004:	2b00      	cmp	r3, #0
 800d006:	d119      	bne.n	800d03c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2100      	movs	r1, #0
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7fe fb9d 	bl	800b74c <create_chain>
 800d012:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	2b01      	cmp	r3, #1
 800d018:	d104      	bne.n	800d024 <f_lseek+0x28a>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2202      	movs	r2, #2
 800d01e:	755a      	strb	r2, [r3, #21]
 800d020:	2302      	movs	r3, #2
 800d022:	e0bf      	b.n	800d1a4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02a:	d104      	bne.n	800d036 <f_lseek+0x29c>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	755a      	strb	r2, [r3, #21]
 800d032:	2301      	movs	r3, #1
 800d034:	e0b6      	b.n	800d1a4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d03a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d040:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d044:	2b00      	cmp	r3, #0
 800d046:	d05d      	beq.n	800d104 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d048:	e03a      	b.n	800d0c0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d04a:	683a      	ldr	r2, [r7, #0]
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	1ad3      	subs	r3, r2, r3
 800d050:	603b      	str	r3, [r7, #0]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	699a      	ldr	r2, [r3, #24]
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	441a      	add	r2, r3
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7d1b      	ldrb	r3, [r3, #20]
 800d062:	f003 0302 	and.w	r3, r3, #2
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00b      	beq.n	800d082 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fe fb6c 	bl	800b74c <create_chain>
 800d074:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d108      	bne.n	800d08e <f_lseek+0x2f4>
							ofs = 0; break;
 800d07c:	2300      	movs	r3, #0
 800d07e:	603b      	str	r3, [r7, #0]
 800d080:	e022      	b.n	800d0c8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d086:	4618      	mov	r0, r3
 800d088:	f7fe f96f 	bl	800b36a <get_fat>
 800d08c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d094:	d104      	bne.n	800d0a0 <f_lseek+0x306>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2201      	movs	r2, #1
 800d09a:	755a      	strb	r2, [r3, #21]
 800d09c:	2301      	movs	r3, #1
 800d09e:	e081      	b.n	800d1a4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d904      	bls.n	800d0b0 <f_lseek+0x316>
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	695b      	ldr	r3, [r3, #20]
 800d0aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d304      	bcc.n	800d0ba <f_lseek+0x320>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	755a      	strb	r2, [r3, #21]
 800d0b6:	2302      	movs	r3, #2
 800d0b8:	e074      	b.n	800d1a4 <f_lseek+0x40a>
					fp->clust = clst;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0be:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d0c0:	683a      	ldr	r2, [r7, #0]
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d8c0      	bhi.n	800d04a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	699a      	ldr	r2, [r3, #24]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	441a      	add	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d012      	beq.n	800d104 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe f922 	bl	800b32c <clust2sect>
 800d0e8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d104      	bne.n	800d0fa <f_lseek+0x360>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	755a      	strb	r2, [r3, #21]
 800d0f6:	2302      	movs	r3, #2
 800d0f8:	e054      	b.n	800d1a4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	0a5b      	lsrs	r3, r3, #9
 800d0fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d100:	4413      	add	r3, r2
 800d102:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	699a      	ldr	r2, [r3, #24]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d90a      	bls.n	800d126 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	699a      	ldr	r2, [r3, #24]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	7d1b      	ldrb	r3, [r3, #20]
 800d11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d120:	b2da      	uxtb	r2, r3
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	699b      	ldr	r3, [r3, #24]
 800d12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d036      	beq.n	800d1a0 <f_lseek+0x406>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d138:	429a      	cmp	r2, r3
 800d13a:	d031      	beq.n	800d1a0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	7d1b      	ldrb	r3, [r3, #20]
 800d140:	b25b      	sxtb	r3, r3
 800d142:	2b00      	cmp	r3, #0
 800d144:	da18      	bge.n	800d178 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	7858      	ldrb	r0, [r3, #1]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6a1a      	ldr	r2, [r3, #32]
 800d154:	2301      	movs	r3, #1
 800d156:	f7fd fd5f 	bl	800ac18 <disk_write>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d004      	beq.n	800d16a <f_lseek+0x3d0>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	755a      	strb	r2, [r3, #21]
 800d166:	2301      	movs	r3, #1
 800d168:	e01c      	b.n	800d1a4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	7d1b      	ldrb	r3, [r3, #20]
 800d16e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d172:	b2da      	uxtb	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	7858      	ldrb	r0, [r3, #1]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d182:	2301      	movs	r3, #1
 800d184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d186:	f7fd fd27 	bl	800abd8 <disk_read>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d004      	beq.n	800d19a <f_lseek+0x400>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	755a      	strb	r2, [r3, #21]
 800d196:	2301      	movs	r3, #1
 800d198:	e004      	b.n	800d1a4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d19e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d1a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3740      	adds	r7, #64	; 0x40
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b087      	sub	sp, #28
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d1c2:	4b1f      	ldr	r3, [pc, #124]	; (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1c4:	7a5b      	ldrb	r3, [r3, #9]
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d131      	bne.n	800d230 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d1cc:	4b1c      	ldr	r3, [pc, #112]	; (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1ce:	7a5b      	ldrb	r3, [r3, #9]
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	4b1a      	ldr	r3, [pc, #104]	; (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d1da:	4b19      	ldr	r3, [pc, #100]	; (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1dc:	7a5b      	ldrb	r3, [r3, #9]
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	4a17      	ldr	r2, [pc, #92]	; (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	4413      	add	r3, r2
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d1ea:	4b15      	ldr	r3, [pc, #84]	; (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1ec:	7a5b      	ldrb	r3, [r3, #9]
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	4b13      	ldr	r3, [pc, #76]	; (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1f4:	4413      	add	r3, r2
 800d1f6:	79fa      	ldrb	r2, [r7, #7]
 800d1f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d1fa:	4b11      	ldr	r3, [pc, #68]	; (800d240 <FATFS_LinkDriverEx+0x94>)
 800d1fc:	7a5b      	ldrb	r3, [r3, #9]
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	b2d1      	uxtb	r1, r2
 800d204:	4a0e      	ldr	r2, [pc, #56]	; (800d240 <FATFS_LinkDriverEx+0x94>)
 800d206:	7251      	strb	r1, [r2, #9]
 800d208:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d20a:	7dbb      	ldrb	r3, [r7, #22]
 800d20c:	3330      	adds	r3, #48	; 0x30
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	3301      	adds	r3, #1
 800d218:	223a      	movs	r2, #58	; 0x3a
 800d21a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	3302      	adds	r3, #2
 800d220:	222f      	movs	r2, #47	; 0x2f
 800d222:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	3303      	adds	r3, #3
 800d228:	2200      	movs	r2, #0
 800d22a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d230:	7dfb      	ldrb	r3, [r7, #23]
}
 800d232:	4618      	mov	r0, r3
 800d234:	371c      	adds	r7, #28
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	20009508 	.word	0x20009508

0800d244 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d24e:	2200      	movs	r2, #0
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff ffaa 	bl	800d1ac <FATFS_LinkDriverEx>
 800d258:	4603      	mov	r3, r0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d268:	2201      	movs	r2, #1
 800d26a:	490e      	ldr	r1, [pc, #56]	; (800d2a4 <MX_USB_HOST_Init+0x40>)
 800d26c:	480e      	ldr	r0, [pc, #56]	; (800d2a8 <MX_USB_HOST_Init+0x44>)
 800d26e:	f7fc f919 	bl	80094a4 <USBH_Init>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d001      	beq.n	800d27c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d278:	f7f4 f87e 	bl	8001378 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d27c:	490b      	ldr	r1, [pc, #44]	; (800d2ac <MX_USB_HOST_Init+0x48>)
 800d27e:	480a      	ldr	r0, [pc, #40]	; (800d2a8 <MX_USB_HOST_Init+0x44>)
 800d280:	f7fc f99e 	bl	80095c0 <USBH_RegisterClass>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d001      	beq.n	800d28e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d28a:	f7f4 f875 	bl	8001378 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d28e:	4806      	ldr	r0, [pc, #24]	; (800d2a8 <MX_USB_HOST_Init+0x44>)
 800d290:	f7fc fa22 	bl	80096d8 <USBH_Start>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d001      	beq.n	800d29e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d29a:	f7f4 f86d 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d29e:	bf00      	nop
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	0800d2c5 	.word	0x0800d2c5
 800d2a8:	20009a88 	.word	0x20009a88
 800d2ac:	2000000c 	.word	0x2000000c

0800d2b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d2b4:	4802      	ldr	r0, [pc, #8]	; (800d2c0 <MX_USB_HOST_Process+0x10>)
 800d2b6:	f7fc fa1f 	bl	80096f8 <USBH_Process>
}
 800d2ba:	bf00      	nop
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	20009a88 	.word	0x20009a88

0800d2c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d2d0:	78fb      	ldrb	r3, [r7, #3]
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	2b04      	cmp	r3, #4
 800d2d6:	d819      	bhi.n	800d30c <USBH_UserProcess+0x48>
 800d2d8:	a201      	add	r2, pc, #4	; (adr r2, 800d2e0 <USBH_UserProcess+0x1c>)
 800d2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2de:	bf00      	nop
 800d2e0:	0800d30d 	.word	0x0800d30d
 800d2e4:	0800d2fd 	.word	0x0800d2fd
 800d2e8:	0800d30d 	.word	0x0800d30d
 800d2ec:	0800d305 	.word	0x0800d305
 800d2f0:	0800d2f5 	.word	0x0800d2f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d2f4:	4b09      	ldr	r3, [pc, #36]	; (800d31c <USBH_UserProcess+0x58>)
 800d2f6:	2203      	movs	r2, #3
 800d2f8:	701a      	strb	r2, [r3, #0]
  break;
 800d2fa:	e008      	b.n	800d30e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d2fc:	4b07      	ldr	r3, [pc, #28]	; (800d31c <USBH_UserProcess+0x58>)
 800d2fe:	2202      	movs	r2, #2
 800d300:	701a      	strb	r2, [r3, #0]
  break;
 800d302:	e004      	b.n	800d30e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d304:	4b05      	ldr	r3, [pc, #20]	; (800d31c <USBH_UserProcess+0x58>)
 800d306:	2201      	movs	r2, #1
 800d308:	701a      	strb	r2, [r3, #0]
  break;
 800d30a:	e000      	b.n	800d30e <USBH_UserProcess+0x4a>

  default:
  break;
 800d30c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d30e:	bf00      	nop
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	20009514 	.word	0x20009514

0800d320 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b08a      	sub	sp, #40	; 0x28
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d328:	f107 0314 	add.w	r3, r7, #20
 800d32c:	2200      	movs	r2, #0
 800d32e:	601a      	str	r2, [r3, #0]
 800d330:	605a      	str	r2, [r3, #4]
 800d332:	609a      	str	r2, [r3, #8]
 800d334:	60da      	str	r2, [r3, #12]
 800d336:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d340:	d147      	bne.n	800d3d2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d342:	2300      	movs	r3, #0
 800d344:	613b      	str	r3, [r7, #16]
 800d346:	4b25      	ldr	r3, [pc, #148]	; (800d3dc <HAL_HCD_MspInit+0xbc>)
 800d348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d34a:	4a24      	ldr	r2, [pc, #144]	; (800d3dc <HAL_HCD_MspInit+0xbc>)
 800d34c:	f043 0301 	orr.w	r3, r3, #1
 800d350:	6313      	str	r3, [r2, #48]	; 0x30
 800d352:	4b22      	ldr	r3, [pc, #136]	; (800d3dc <HAL_HCD_MspInit+0xbc>)
 800d354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d356:	f003 0301 	and.w	r3, r3, #1
 800d35a:	613b      	str	r3, [r7, #16]
 800d35c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d35e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d364:	2300      	movs	r3, #0
 800d366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d368:	2300      	movs	r3, #0
 800d36a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d36c:	f107 0314 	add.w	r3, r7, #20
 800d370:	4619      	mov	r1, r3
 800d372:	481b      	ldr	r0, [pc, #108]	; (800d3e0 <HAL_HCD_MspInit+0xc0>)
 800d374:	f7f4 ff5a 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d378:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d37c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d37e:	2302      	movs	r3, #2
 800d380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d382:	2300      	movs	r3, #0
 800d384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d386:	2303      	movs	r3, #3
 800d388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d38a:	230a      	movs	r3, #10
 800d38c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d38e:	f107 0314 	add.w	r3, r7, #20
 800d392:	4619      	mov	r1, r3
 800d394:	4812      	ldr	r0, [pc, #72]	; (800d3e0 <HAL_HCD_MspInit+0xc0>)
 800d396:	f7f4 ff49 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d39a:	4b10      	ldr	r3, [pc, #64]	; (800d3dc <HAL_HCD_MspInit+0xbc>)
 800d39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39e:	4a0f      	ldr	r2, [pc, #60]	; (800d3dc <HAL_HCD_MspInit+0xbc>)
 800d3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3a4:	6353      	str	r3, [r2, #52]	; 0x34
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	60fb      	str	r3, [r7, #12]
 800d3aa:	4b0c      	ldr	r3, [pc, #48]	; (800d3dc <HAL_HCD_MspInit+0xbc>)
 800d3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ae:	4a0b      	ldr	r2, [pc, #44]	; (800d3dc <HAL_HCD_MspInit+0xbc>)
 800d3b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d3b4:	6453      	str	r3, [r2, #68]	; 0x44
 800d3b6:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <HAL_HCD_MspInit+0xbc>)
 800d3b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3be:	60fb      	str	r3, [r7, #12]
 800d3c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	2043      	movs	r0, #67	; 0x43
 800d3c8:	f7f4 fb1b 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d3cc:	2043      	movs	r0, #67	; 0x43
 800d3ce:	f7f4 fb34 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d3d2:	bf00      	nop
 800d3d4:	3728      	adds	r7, #40	; 0x28
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	40023800 	.word	0x40023800
 800d3e0:	40020000 	.word	0x40020000

0800d3e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fc fd53 	bl	8009e9e <USBH_LL_IncTimer>
}
 800d3f8:	bf00      	nop
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fc fd8b 	bl	8009f2a <USBH_LL_Connect>
}
 800d414:	bf00      	nop
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fc fd94 	bl	8009f58 <USBH_LL_Disconnect>
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	460b      	mov	r3, r1
 800d442:	70fb      	strb	r3, [r7, #3]
 800d444:	4613      	mov	r3, r2
 800d446:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d462:	4618      	mov	r0, r3
 800d464:	f7fc fd45 	bl	8009ef2 <USBH_LL_PortEnabled>
}
 800d468:	bf00      	nop
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fc fd45 	bl	8009f0e <USBH_LL_PortDisabled>
}
 800d484:	bf00      	nop
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d12a      	bne.n	800d4f4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d49e:	4a18      	ldr	r2, [pc, #96]	; (800d500 <USBH_LL_Init+0x74>)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4a15      	ldr	r2, [pc, #84]	; (800d500 <USBH_LL_Init+0x74>)
 800d4aa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d4ae:	4b14      	ldr	r3, [pc, #80]	; (800d500 <USBH_LL_Init+0x74>)
 800d4b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d4b4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d4b6:	4b12      	ldr	r3, [pc, #72]	; (800d500 <USBH_LL_Init+0x74>)
 800d4b8:	2208      	movs	r2, #8
 800d4ba:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d4bc:	4b10      	ldr	r3, [pc, #64]	; (800d500 <USBH_LL_Init+0x74>)
 800d4be:	2201      	movs	r2, #1
 800d4c0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d4c2:	4b0f      	ldr	r3, [pc, #60]	; (800d500 <USBH_LL_Init+0x74>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d4c8:	4b0d      	ldr	r3, [pc, #52]	; (800d500 <USBH_LL_Init+0x74>)
 800d4ca:	2202      	movs	r2, #2
 800d4cc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d4ce:	4b0c      	ldr	r3, [pc, #48]	; (800d500 <USBH_LL_Init+0x74>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d4d4:	480a      	ldr	r0, [pc, #40]	; (800d500 <USBH_LL_Init+0x74>)
 800d4d6:	f7f5 f874 	bl	80025c2 <HAL_HCD_Init>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d4e0:	f7f3 ff4a 	bl	8001378 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d4e4:	4806      	ldr	r0, [pc, #24]	; (800d500 <USBH_LL_Init+0x74>)
 800d4e6:	f7f5 fc77 	bl	8002dd8 <HAL_HCD_GetCurrentFrame>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7fc fcc6 	bl	8009e80 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3708      	adds	r7, #8
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	20009e60 	.word	0x20009e60

0800d504 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d50c:	2300      	movs	r3, #0
 800d50e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d510:	2300      	movs	r3, #0
 800d512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7f5 fbe4 	bl	8002ce8 <HAL_HCD_Start>
 800d520:	4603      	mov	r3, r0
 800d522:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d524:	7bfb      	ldrb	r3, [r7, #15]
 800d526:	4618      	mov	r0, r3
 800d528:	f000 f986 	bl	800d838 <USBH_Get_USB_Status>
 800d52c:	4603      	mov	r3, r0
 800d52e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d530:	7bbb      	ldrb	r3, [r7, #14]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b084      	sub	sp, #16
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d546:	2300      	movs	r3, #0
 800d548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d550:	4618      	mov	r0, r3
 800d552:	f7f5 fbec 	bl	8002d2e <HAL_HCD_Stop>
 800d556:	4603      	mov	r3, r0
 800d558:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d55a:	7bfb      	ldrb	r3, [r7, #15]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 f96b 	bl	800d838 <USBH_Get_USB_Status>
 800d562:	4603      	mov	r3, r0
 800d564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d566:	7bbb      	ldrb	r3, [r7, #14]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d578:	2301      	movs	r3, #1
 800d57a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d582:	4618      	mov	r0, r3
 800d584:	f7f5 fc36 	bl	8002df4 <HAL_HCD_GetCurrentSpeed>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d007      	beq.n	800d59e <USBH_LL_GetSpeed+0x2e>
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d302      	bcc.n	800d598 <USBH_LL_GetSpeed+0x28>
 800d592:	2b02      	cmp	r3, #2
 800d594:	d006      	beq.n	800d5a4 <USBH_LL_GetSpeed+0x34>
 800d596:	e008      	b.n	800d5aa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d598:	2300      	movs	r3, #0
 800d59a:	73fb      	strb	r3, [r7, #15]
    break;
 800d59c:	e008      	b.n	800d5b0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d5a2:	e005      	b.n	800d5b0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d5a4:	2302      	movs	r3, #2
 800d5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5a8:	e002      	b.n	800d5b0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ae:	bf00      	nop
  }
  return  speed;
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7f5 fbc9 	bl	8002d68 <HAL_HCD_ResetPort>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f000 f92b 	bl	800d838 <USBH_Get_USB_Status>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d602:	78fa      	ldrb	r2, [r7, #3]
 800d604:	4611      	mov	r1, r2
 800d606:	4618      	mov	r0, r3
 800d608:	f7f5 fbd1 	bl	8002dae <HAL_HCD_HC_GetXferCount>
 800d60c:	4603      	mov	r3, r0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d616:	b590      	push	{r4, r7, lr}
 800d618:	b089      	sub	sp, #36	; 0x24
 800d61a:	af04      	add	r7, sp, #16
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	4608      	mov	r0, r1
 800d620:	4611      	mov	r1, r2
 800d622:	461a      	mov	r2, r3
 800d624:	4603      	mov	r3, r0
 800d626:	70fb      	strb	r3, [r7, #3]
 800d628:	460b      	mov	r3, r1
 800d62a:	70bb      	strb	r3, [r7, #2]
 800d62c:	4613      	mov	r3, r2
 800d62e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d634:	2300      	movs	r3, #0
 800d636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d63e:	787c      	ldrb	r4, [r7, #1]
 800d640:	78ba      	ldrb	r2, [r7, #2]
 800d642:	78f9      	ldrb	r1, [r7, #3]
 800d644:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d646:	9302      	str	r3, [sp, #8]
 800d648:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d64c:	9301      	str	r3, [sp, #4]
 800d64e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	4623      	mov	r3, r4
 800d656:	f7f5 f816 	bl	8002686 <HAL_HCD_HC_Init>
 800d65a:	4603      	mov	r3, r0
 800d65c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d65e:	7bfb      	ldrb	r3, [r7, #15]
 800d660:	4618      	mov	r0, r3
 800d662:	f000 f8e9 	bl	800d838 <USBH_Get_USB_Status>
 800d666:	4603      	mov	r3, r0
 800d668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d66a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	bd90      	pop	{r4, r7, pc}

0800d674 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	460b      	mov	r3, r1
 800d67e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d684:	2300      	movs	r3, #0
 800d686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d68e:	78fa      	ldrb	r2, [r7, #3]
 800d690:	4611      	mov	r1, r2
 800d692:	4618      	mov	r0, r3
 800d694:	f7f5 f88f 	bl	80027b6 <HAL_HCD_HC_Halt>
 800d698:	4603      	mov	r3, r0
 800d69a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 f8ca 	bl	800d838 <USBH_Get_USB_Status>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d6b2:	b590      	push	{r4, r7, lr}
 800d6b4:	b089      	sub	sp, #36	; 0x24
 800d6b6:	af04      	add	r7, sp, #16
 800d6b8:	6078      	str	r0, [r7, #4]
 800d6ba:	4608      	mov	r0, r1
 800d6bc:	4611      	mov	r1, r2
 800d6be:	461a      	mov	r2, r3
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	70fb      	strb	r3, [r7, #3]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	70bb      	strb	r3, [r7, #2]
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d6da:	787c      	ldrb	r4, [r7, #1]
 800d6dc:	78ba      	ldrb	r2, [r7, #2]
 800d6de:	78f9      	ldrb	r1, [r7, #3]
 800d6e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d6e4:	9303      	str	r3, [sp, #12]
 800d6e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d6e8:	9302      	str	r3, [sp, #8]
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ec:	9301      	str	r3, [sp, #4]
 800d6ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	4623      	mov	r3, r4
 800d6f6:	f7f5 f881 	bl	80027fc <HAL_HCD_HC_SubmitRequest>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
 800d700:	4618      	mov	r0, r3
 800d702:	f000 f899 	bl	800d838 <USBH_Get_USB_Status>
 800d706:	4603      	mov	r3, r0
 800d708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d70a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3714      	adds	r7, #20
 800d710:	46bd      	mov	sp, r7
 800d712:	bd90      	pop	{r4, r7, pc}

0800d714 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	460b      	mov	r3, r1
 800d71e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d726:	78fa      	ldrb	r2, [r7, #3]
 800d728:	4611      	mov	r1, r2
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7f5 fb2a 	bl	8002d84 <HAL_HCD_HC_GetURBState>
 800d730:	4603      	mov	r3, r0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b082      	sub	sp, #8
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	460b      	mov	r3, r1
 800d744:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800d746:	20c8      	movs	r0, #200	; 0xc8
 800d748:	f7f4 f85e 	bl	8001808 <HAL_Delay>
  return USBH_OK;
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d756:	b480      	push	{r7}
 800d758:	b085      	sub	sp, #20
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	460b      	mov	r3, r1
 800d760:	70fb      	strb	r3, [r7, #3]
 800d762:	4613      	mov	r3, r2
 800d764:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d76c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d76e:	78fa      	ldrb	r2, [r7, #3]
 800d770:	68f9      	ldr	r1, [r7, #12]
 800d772:	4613      	mov	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	4413      	add	r3, r2
 800d778:	00db      	lsls	r3, r3, #3
 800d77a:	440b      	add	r3, r1
 800d77c:	333b      	adds	r3, #59	; 0x3b
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00a      	beq.n	800d79a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d784:	78fa      	ldrb	r2, [r7, #3]
 800d786:	68f9      	ldr	r1, [r7, #12]
 800d788:	4613      	mov	r3, r2
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	4413      	add	r3, r2
 800d78e:	00db      	lsls	r3, r3, #3
 800d790:	440b      	add	r3, r1
 800d792:	3350      	adds	r3, #80	; 0x50
 800d794:	78ba      	ldrb	r2, [r7, #2]
 800d796:	701a      	strb	r2, [r3, #0]
 800d798:	e009      	b.n	800d7ae <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d79a:	78fa      	ldrb	r2, [r7, #3]
 800d79c:	68f9      	ldr	r1, [r7, #12]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	00db      	lsls	r3, r3, #3
 800d7a6:	440b      	add	r3, r1
 800d7a8:	3351      	adds	r3, #81	; 0x51
 800d7aa:	78ba      	ldrb	r2, [r7, #2]
 800d7ac:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3714      	adds	r7, #20
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr

0800d7bc <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7d2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d7d4:	78fa      	ldrb	r2, [r7, #3]
 800d7d6:	68b9      	ldr	r1, [r7, #8]
 800d7d8:	4613      	mov	r3, r2
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	4413      	add	r3, r2
 800d7de:	00db      	lsls	r3, r3, #3
 800d7e0:	440b      	add	r3, r1
 800d7e2:	333b      	adds	r3, #59	; 0x3b
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d7ea:	78fa      	ldrb	r2, [r7, #3]
 800d7ec:	68b9      	ldr	r1, [r7, #8]
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	00db      	lsls	r3, r3, #3
 800d7f6:	440b      	add	r3, r1
 800d7f8:	3350      	adds	r3, #80	; 0x50
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	73fb      	strb	r3, [r7, #15]
 800d7fe:	e009      	b.n	800d814 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d800:	78fa      	ldrb	r2, [r7, #3]
 800d802:	68b9      	ldr	r1, [r7, #8]
 800d804:	4613      	mov	r3, r2
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	4413      	add	r3, r2
 800d80a:	00db      	lsls	r3, r3, #3
 800d80c:	440b      	add	r3, r1
 800d80e:	3351      	adds	r3, #81	; 0x51
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d814:	7bfb      	ldrb	r3, [r7, #15]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b082      	sub	sp, #8
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7f3 ffec 	bl	8001808 <HAL_Delay>
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	4603      	mov	r3, r0
 800d840:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d842:	2300      	movs	r3, #0
 800d844:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d846:	79fb      	ldrb	r3, [r7, #7]
 800d848:	2b03      	cmp	r3, #3
 800d84a:	d817      	bhi.n	800d87c <USBH_Get_USB_Status+0x44>
 800d84c:	a201      	add	r2, pc, #4	; (adr r2, 800d854 <USBH_Get_USB_Status+0x1c>)
 800d84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d852:	bf00      	nop
 800d854:	0800d865 	.word	0x0800d865
 800d858:	0800d86b 	.word	0x0800d86b
 800d85c:	0800d871 	.word	0x0800d871
 800d860:	0800d877 	.word	0x0800d877
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	73fb      	strb	r3, [r7, #15]
    break;
 800d868:	e00b      	b.n	800d882 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d86a:	2302      	movs	r3, #2
 800d86c:	73fb      	strb	r3, [r7, #15]
    break;
 800d86e:	e008      	b.n	800d882 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d870:	2301      	movs	r3, #1
 800d872:	73fb      	strb	r3, [r7, #15]
    break;
 800d874:	e005      	b.n	800d882 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d876:	2302      	movs	r3, #2
 800d878:	73fb      	strb	r3, [r7, #15]
    break;
 800d87a:	e002      	b.n	800d882 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d87c:	2302      	movs	r3, #2
 800d87e:	73fb      	strb	r3, [r7, #15]
    break;
 800d880:	bf00      	nop
  }
  return usb_status;
 800d882:	7bfb      	ldrb	r3, [r7, #15]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <__errno>:
 800d890:	4b01      	ldr	r3, [pc, #4]	; (800d898 <__errno+0x8>)
 800d892:	6818      	ldr	r0, [r3, #0]
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	2000002c 	.word	0x2000002c

0800d89c <__libc_init_array>:
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	4e0d      	ldr	r6, [pc, #52]	; (800d8d4 <__libc_init_array+0x38>)
 800d8a0:	4c0d      	ldr	r4, [pc, #52]	; (800d8d8 <__libc_init_array+0x3c>)
 800d8a2:	1ba4      	subs	r4, r4, r6
 800d8a4:	10a4      	asrs	r4, r4, #2
 800d8a6:	2500      	movs	r5, #0
 800d8a8:	42a5      	cmp	r5, r4
 800d8aa:	d109      	bne.n	800d8c0 <__libc_init_array+0x24>
 800d8ac:	4e0b      	ldr	r6, [pc, #44]	; (800d8dc <__libc_init_array+0x40>)
 800d8ae:	4c0c      	ldr	r4, [pc, #48]	; (800d8e0 <__libc_init_array+0x44>)
 800d8b0:	f000 f8f6 	bl	800daa0 <_init>
 800d8b4:	1ba4      	subs	r4, r4, r6
 800d8b6:	10a4      	asrs	r4, r4, #2
 800d8b8:	2500      	movs	r5, #0
 800d8ba:	42a5      	cmp	r5, r4
 800d8bc:	d105      	bne.n	800d8ca <__libc_init_array+0x2e>
 800d8be:	bd70      	pop	{r4, r5, r6, pc}
 800d8c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8c4:	4798      	blx	r3
 800d8c6:	3501      	adds	r5, #1
 800d8c8:	e7ee      	b.n	800d8a8 <__libc_init_array+0xc>
 800d8ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8ce:	4798      	blx	r3
 800d8d0:	3501      	adds	r5, #1
 800d8d2:	e7f2      	b.n	800d8ba <__libc_init_array+0x1e>
 800d8d4:	0800ddc4 	.word	0x0800ddc4
 800d8d8:	0800ddc4 	.word	0x0800ddc4
 800d8dc:	0800ddc4 	.word	0x0800ddc4
 800d8e0:	0800ddc8 	.word	0x0800ddc8

0800d8e4 <malloc>:
 800d8e4:	4b02      	ldr	r3, [pc, #8]	; (800d8f0 <malloc+0xc>)
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	6818      	ldr	r0, [r3, #0]
 800d8ea:	f000 b86d 	b.w	800d9c8 <_malloc_r>
 800d8ee:	bf00      	nop
 800d8f0:	2000002c 	.word	0x2000002c

0800d8f4 <free>:
 800d8f4:	4b02      	ldr	r3, [pc, #8]	; (800d900 <free+0xc>)
 800d8f6:	4601      	mov	r1, r0
 800d8f8:	6818      	ldr	r0, [r3, #0]
 800d8fa:	f000 b817 	b.w	800d92c <_free_r>
 800d8fe:	bf00      	nop
 800d900:	2000002c 	.word	0x2000002c

0800d904 <memcpy>:
 800d904:	b510      	push	{r4, lr}
 800d906:	1e43      	subs	r3, r0, #1
 800d908:	440a      	add	r2, r1
 800d90a:	4291      	cmp	r1, r2
 800d90c:	d100      	bne.n	800d910 <memcpy+0xc>
 800d90e:	bd10      	pop	{r4, pc}
 800d910:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d914:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d918:	e7f7      	b.n	800d90a <memcpy+0x6>

0800d91a <memset>:
 800d91a:	4402      	add	r2, r0
 800d91c:	4603      	mov	r3, r0
 800d91e:	4293      	cmp	r3, r2
 800d920:	d100      	bne.n	800d924 <memset+0xa>
 800d922:	4770      	bx	lr
 800d924:	f803 1b01 	strb.w	r1, [r3], #1
 800d928:	e7f9      	b.n	800d91e <memset+0x4>
	...

0800d92c <_free_r>:
 800d92c:	b538      	push	{r3, r4, r5, lr}
 800d92e:	4605      	mov	r5, r0
 800d930:	2900      	cmp	r1, #0
 800d932:	d045      	beq.n	800d9c0 <_free_r+0x94>
 800d934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d938:	1f0c      	subs	r4, r1, #4
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	bfb8      	it	lt
 800d93e:	18e4      	addlt	r4, r4, r3
 800d940:	f000 f8ac 	bl	800da9c <__malloc_lock>
 800d944:	4a1f      	ldr	r2, [pc, #124]	; (800d9c4 <_free_r+0x98>)
 800d946:	6813      	ldr	r3, [r2, #0]
 800d948:	4610      	mov	r0, r2
 800d94a:	b933      	cbnz	r3, 800d95a <_free_r+0x2e>
 800d94c:	6063      	str	r3, [r4, #4]
 800d94e:	6014      	str	r4, [r2, #0]
 800d950:	4628      	mov	r0, r5
 800d952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d956:	f000 b8a2 	b.w	800da9e <__malloc_unlock>
 800d95a:	42a3      	cmp	r3, r4
 800d95c:	d90c      	bls.n	800d978 <_free_r+0x4c>
 800d95e:	6821      	ldr	r1, [r4, #0]
 800d960:	1862      	adds	r2, r4, r1
 800d962:	4293      	cmp	r3, r2
 800d964:	bf04      	itt	eq
 800d966:	681a      	ldreq	r2, [r3, #0]
 800d968:	685b      	ldreq	r3, [r3, #4]
 800d96a:	6063      	str	r3, [r4, #4]
 800d96c:	bf04      	itt	eq
 800d96e:	1852      	addeq	r2, r2, r1
 800d970:	6022      	streq	r2, [r4, #0]
 800d972:	6004      	str	r4, [r0, #0]
 800d974:	e7ec      	b.n	800d950 <_free_r+0x24>
 800d976:	4613      	mov	r3, r2
 800d978:	685a      	ldr	r2, [r3, #4]
 800d97a:	b10a      	cbz	r2, 800d980 <_free_r+0x54>
 800d97c:	42a2      	cmp	r2, r4
 800d97e:	d9fa      	bls.n	800d976 <_free_r+0x4a>
 800d980:	6819      	ldr	r1, [r3, #0]
 800d982:	1858      	adds	r0, r3, r1
 800d984:	42a0      	cmp	r0, r4
 800d986:	d10b      	bne.n	800d9a0 <_free_r+0x74>
 800d988:	6820      	ldr	r0, [r4, #0]
 800d98a:	4401      	add	r1, r0
 800d98c:	1858      	adds	r0, r3, r1
 800d98e:	4282      	cmp	r2, r0
 800d990:	6019      	str	r1, [r3, #0]
 800d992:	d1dd      	bne.n	800d950 <_free_r+0x24>
 800d994:	6810      	ldr	r0, [r2, #0]
 800d996:	6852      	ldr	r2, [r2, #4]
 800d998:	605a      	str	r2, [r3, #4]
 800d99a:	4401      	add	r1, r0
 800d99c:	6019      	str	r1, [r3, #0]
 800d99e:	e7d7      	b.n	800d950 <_free_r+0x24>
 800d9a0:	d902      	bls.n	800d9a8 <_free_r+0x7c>
 800d9a2:	230c      	movs	r3, #12
 800d9a4:	602b      	str	r3, [r5, #0]
 800d9a6:	e7d3      	b.n	800d950 <_free_r+0x24>
 800d9a8:	6820      	ldr	r0, [r4, #0]
 800d9aa:	1821      	adds	r1, r4, r0
 800d9ac:	428a      	cmp	r2, r1
 800d9ae:	bf04      	itt	eq
 800d9b0:	6811      	ldreq	r1, [r2, #0]
 800d9b2:	6852      	ldreq	r2, [r2, #4]
 800d9b4:	6062      	str	r2, [r4, #4]
 800d9b6:	bf04      	itt	eq
 800d9b8:	1809      	addeq	r1, r1, r0
 800d9ba:	6021      	streq	r1, [r4, #0]
 800d9bc:	605c      	str	r4, [r3, #4]
 800d9be:	e7c7      	b.n	800d950 <_free_r+0x24>
 800d9c0:	bd38      	pop	{r3, r4, r5, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20009518 	.word	0x20009518

0800d9c8 <_malloc_r>:
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	1ccd      	adds	r5, r1, #3
 800d9cc:	f025 0503 	bic.w	r5, r5, #3
 800d9d0:	3508      	adds	r5, #8
 800d9d2:	2d0c      	cmp	r5, #12
 800d9d4:	bf38      	it	cc
 800d9d6:	250c      	movcc	r5, #12
 800d9d8:	2d00      	cmp	r5, #0
 800d9da:	4606      	mov	r6, r0
 800d9dc:	db01      	blt.n	800d9e2 <_malloc_r+0x1a>
 800d9de:	42a9      	cmp	r1, r5
 800d9e0:	d903      	bls.n	800d9ea <_malloc_r+0x22>
 800d9e2:	230c      	movs	r3, #12
 800d9e4:	6033      	str	r3, [r6, #0]
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ea:	f000 f857 	bl	800da9c <__malloc_lock>
 800d9ee:	4a21      	ldr	r2, [pc, #132]	; (800da74 <_malloc_r+0xac>)
 800d9f0:	6814      	ldr	r4, [r2, #0]
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	b991      	cbnz	r1, 800da1c <_malloc_r+0x54>
 800d9f6:	4c20      	ldr	r4, [pc, #128]	; (800da78 <_malloc_r+0xb0>)
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	b91b      	cbnz	r3, 800da04 <_malloc_r+0x3c>
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f000 f83d 	bl	800da7c <_sbrk_r>
 800da02:	6020      	str	r0, [r4, #0]
 800da04:	4629      	mov	r1, r5
 800da06:	4630      	mov	r0, r6
 800da08:	f000 f838 	bl	800da7c <_sbrk_r>
 800da0c:	1c43      	adds	r3, r0, #1
 800da0e:	d124      	bne.n	800da5a <_malloc_r+0x92>
 800da10:	230c      	movs	r3, #12
 800da12:	6033      	str	r3, [r6, #0]
 800da14:	4630      	mov	r0, r6
 800da16:	f000 f842 	bl	800da9e <__malloc_unlock>
 800da1a:	e7e4      	b.n	800d9e6 <_malloc_r+0x1e>
 800da1c:	680b      	ldr	r3, [r1, #0]
 800da1e:	1b5b      	subs	r3, r3, r5
 800da20:	d418      	bmi.n	800da54 <_malloc_r+0x8c>
 800da22:	2b0b      	cmp	r3, #11
 800da24:	d90f      	bls.n	800da46 <_malloc_r+0x7e>
 800da26:	600b      	str	r3, [r1, #0]
 800da28:	50cd      	str	r5, [r1, r3]
 800da2a:	18cc      	adds	r4, r1, r3
 800da2c:	4630      	mov	r0, r6
 800da2e:	f000 f836 	bl	800da9e <__malloc_unlock>
 800da32:	f104 000b 	add.w	r0, r4, #11
 800da36:	1d23      	adds	r3, r4, #4
 800da38:	f020 0007 	bic.w	r0, r0, #7
 800da3c:	1ac3      	subs	r3, r0, r3
 800da3e:	d0d3      	beq.n	800d9e8 <_malloc_r+0x20>
 800da40:	425a      	negs	r2, r3
 800da42:	50e2      	str	r2, [r4, r3]
 800da44:	e7d0      	b.n	800d9e8 <_malloc_r+0x20>
 800da46:	428c      	cmp	r4, r1
 800da48:	684b      	ldr	r3, [r1, #4]
 800da4a:	bf16      	itet	ne
 800da4c:	6063      	strne	r3, [r4, #4]
 800da4e:	6013      	streq	r3, [r2, #0]
 800da50:	460c      	movne	r4, r1
 800da52:	e7eb      	b.n	800da2c <_malloc_r+0x64>
 800da54:	460c      	mov	r4, r1
 800da56:	6849      	ldr	r1, [r1, #4]
 800da58:	e7cc      	b.n	800d9f4 <_malloc_r+0x2c>
 800da5a:	1cc4      	adds	r4, r0, #3
 800da5c:	f024 0403 	bic.w	r4, r4, #3
 800da60:	42a0      	cmp	r0, r4
 800da62:	d005      	beq.n	800da70 <_malloc_r+0xa8>
 800da64:	1a21      	subs	r1, r4, r0
 800da66:	4630      	mov	r0, r6
 800da68:	f000 f808 	bl	800da7c <_sbrk_r>
 800da6c:	3001      	adds	r0, #1
 800da6e:	d0cf      	beq.n	800da10 <_malloc_r+0x48>
 800da70:	6025      	str	r5, [r4, #0]
 800da72:	e7db      	b.n	800da2c <_malloc_r+0x64>
 800da74:	20009518 	.word	0x20009518
 800da78:	2000951c 	.word	0x2000951c

0800da7c <_sbrk_r>:
 800da7c:	b538      	push	{r3, r4, r5, lr}
 800da7e:	4c06      	ldr	r4, [pc, #24]	; (800da98 <_sbrk_r+0x1c>)
 800da80:	2300      	movs	r3, #0
 800da82:	4605      	mov	r5, r0
 800da84:	4608      	mov	r0, r1
 800da86:	6023      	str	r3, [r4, #0]
 800da88:	f7f3 fdd6 	bl	8001638 <_sbrk>
 800da8c:	1c43      	adds	r3, r0, #1
 800da8e:	d102      	bne.n	800da96 <_sbrk_r+0x1a>
 800da90:	6823      	ldr	r3, [r4, #0]
 800da92:	b103      	cbz	r3, 800da96 <_sbrk_r+0x1a>
 800da94:	602b      	str	r3, [r5, #0]
 800da96:	bd38      	pop	{r3, r4, r5, pc}
 800da98:	2000a124 	.word	0x2000a124

0800da9c <__malloc_lock>:
 800da9c:	4770      	bx	lr

0800da9e <__malloc_unlock>:
 800da9e:	4770      	bx	lr

0800daa0 <_init>:
 800daa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa2:	bf00      	nop
 800daa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daa6:	bc08      	pop	{r3}
 800daa8:	469e      	mov	lr, r3
 800daaa:	4770      	bx	lr

0800daac <_fini>:
 800daac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daae:	bf00      	nop
 800dab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dab2:	bc08      	pop	{r3}
 800dab4:	469e      	mov	lr, r3
 800dab6:	4770      	bx	lr
